
Identification_test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c820  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a18  0800c9f0  0800c9f0  0000d9f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d408  0800d408  0000f388  2**0
                  CONTENTS
  4 .ARM          00000008  0800d408  0800d408  0000e408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d410  0800d410  0000f388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d410  0800d410  0000e410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d414  0800d414  0000e414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000388  20000000  0800d418  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  20000388  0800d7a0  0000f388  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000884  0800d7a0  0000f884  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f388  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f15b  00000000  00000000  0000f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224d  00000000  00000000  0001e513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00020760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b10  00000000  00000000  00021588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f1b  00000000  00000000  00022098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e92  00000000  00000000  00044fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d39f4  00000000  00000000  00055e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129839  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005580  00000000  00000000  0012987c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0012edfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000388 	.word	0x20000388
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c9d8 	.word	0x0800c9d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000038c 	.word	0x2000038c
 800020c:	0800c9d8 	.word	0x0800c9d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	0000      	movs	r0, r0
	...

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fbc:	ed2d 8b02 	vpush	{d8}
 8000fc0:	b094      	sub	sp, #80	@ 0x50
 8000fc2:	af06      	add	r7, sp, #24
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 8000fc4:	f002 f978 	bl	80032b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc8:	f000 fd50 	bl	8001a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fcc:	f000 ffe0 	bl	8001f90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fd0:	f000 ff8a 	bl	8001ee8 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000fd4:	f000 ff64 	bl	8001ea0 <MX_TIM14_Init>
  MX_TIM2_Init();
 8000fd8:	f000 fdb6 	bl	8001b48 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fdc:	f000 fe08 	bl	8001bf0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fe0:	f000 fe88 	bl	8001cf4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000fe4:	f000 feda 	bl	8001d9c <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8000fe8:	f000 ffa8 	bl	8001f3c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim14); // Start the sampling timer
 8000fec:	4817      	ldr	r0, [pc, #92]	@ (800104c <main+0x94>)
 8000fee:	f003 fb5f 	bl	80046b0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL); // Start the encoder timer
 8000ff2:	213c      	movs	r1, #60	@ 0x3c
 8000ff4:	4816      	ldr	r0, [pc, #88]	@ (8001050 <main+0x98>)
 8000ff6:	f003 fd93 	bl	8004b20 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL); // Start the encoder timer
 8000ffa:	213c      	movs	r1, #60	@ 0x3c
 8000ffc:	4815      	ldr	r0, [pc, #84]	@ (8001054 <main+0x9c>)
 8000ffe:	f003 fd8f 	bl	8004b20 <HAL_TIM_Encoder_Start_IT>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,SET);
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001008:	4813      	ldr	r0, [pc, #76]	@ (8001058 <main+0xa0>)
 800100a:	f002 fcff 	bl	8003a0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2102      	movs	r1, #2
 8001012:	4812      	ldr	r0, [pc, #72]	@ (800105c <main+0xa4>)
 8001014:	f002 fcfa 	bl	8003a0c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001018:	2100      	movs	r1, #0
 800101a:	4811      	ldr	r0, [pc, #68]	@ (8001060 <main+0xa8>)
 800101c:	f003 fc12 	bl	8004844 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001020:	2104      	movs	r1, #4
 8001022:	480f      	ldr	r0, [pc, #60]	@ (8001060 <main+0xa8>)
 8001024:	f003 fc0e 	bl	8004844 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001028:	2100      	movs	r1, #0
 800102a:	480e      	ldr	r0, [pc, #56]	@ (8001064 <main+0xac>)
 800102c:	f003 fc0a 	bl	8004844 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001030:	2104      	movs	r1, #4
 8001032:	480c      	ldr	r0, [pc, #48]	@ (8001064 <main+0xac>)
 8001034:	f003 fc06 	bl	8004844 <HAL_TIM_PWM_Start>

	RobotKinematics_Init(&cacarro, 0.05,0.315);
 8001038:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8001068 <main+0xb0>
 800103c:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800106c <main+0xb4>
 8001040:	480b      	ldr	r0, [pc, #44]	@ (8001070 <main+0xb8>)
 8001042:	f001 fa31 	bl	80024a8 <RobotKinematics_Init>
  /* USER CODE BEGIN WHILE */

	while (1)
	{

		while(Sampling)
 8001046:	f000 bcd5 	b.w	80019f4 <main+0xa3c>
 800104a:	bf00      	nop
 800104c:	200004c4 	.word	0x200004c4
 8001050:	200003a4 	.word	0x200003a4
 8001054:	20000434 	.word	0x20000434
 8001058:	40020000 	.word	0x40020000
 800105c:	40020800 	.word	0x40020800
 8001060:	200003ec 	.word	0x200003ec
 8001064:	2000047c 	.word	0x2000047c
 8001068:	3ea147ae 	.word	0x3ea147ae
 800106c:	3d4ccccd 	.word	0x3d4ccccd
 8001070:	200006bc 	.word	0x200006bc
		{
			Sampling = 0;
 8001074:	4bcc      	ldr	r3, [pc, #816]	@ (80013a8 <main+0x3f0>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
			if(t<=3){
 800107a:	4bcc      	ldr	r3, [pc, #816]	@ (80013ac <main+0x3f4>)
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001084:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108c:	f200 810e 	bhi.w	80012ac <main+0x2f4>
			Xd = alphas[coor][0] + alphas[coor][1]*t + alphas[coor][2]*powf(t,2) + alphas[coor][3]*powf(t,3) + alphas[coor][4]*powf(t,4) + alphas[coor][5]*powf(t,5);
 8001090:	4bc7      	ldr	r3, [pc, #796]	@ (80013b0 <main+0x3f8>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	49c7      	ldr	r1, [pc, #796]	@ (80013b4 <main+0x3fc>)
 8001096:	4613      	mov	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	1a9b      	subs	r3, r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	440b      	add	r3, r1
 80010a0:	ed93 7a00 	vldr	s14, [r3]
 80010a4:	4bc2      	ldr	r3, [pc, #776]	@ (80013b0 <main+0x3f8>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	49c2      	ldr	r1, [pc, #776]	@ (80013b4 <main+0x3fc>)
 80010aa:	4613      	mov	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	1a9b      	subs	r3, r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	3304      	adds	r3, #4
 80010b6:	edd3 6a00 	vldr	s13, [r3]
 80010ba:	4bbc      	ldr	r3, [pc, #752]	@ (80013ac <main+0x3f4>)
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c4:	ee37 8a27 	vadd.f32	s16, s14, s15
 80010c8:	4bb9      	ldr	r3, [pc, #740]	@ (80013b0 <main+0x3f8>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	49b9      	ldr	r1, [pc, #740]	@ (80013b4 <main+0x3fc>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	1a9b      	subs	r3, r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	3308      	adds	r3, #8
 80010da:	edd3 8a00 	vldr	s17, [r3]
 80010de:	4bb3      	ldr	r3, [pc, #716]	@ (80013ac <main+0x3f4>)
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80010e8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ec:	f008 fb08 	bl	8009700 <powf>
 80010f0:	eef0 7a40 	vmov.f32	s15, s0
 80010f4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80010f8:	ee38 8a27 	vadd.f32	s16, s16, s15
 80010fc:	4bac      	ldr	r3, [pc, #688]	@ (80013b0 <main+0x3f8>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	49ac      	ldr	r1, [pc, #688]	@ (80013b4 <main+0x3fc>)
 8001102:	4613      	mov	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	1a9b      	subs	r3, r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	330c      	adds	r3, #12
 800110e:	edd3 8a00 	vldr	s17, [r3]
 8001112:	4ba6      	ldr	r3, [pc, #664]	@ (80013ac <main+0x3f4>)
 8001114:	edd3 7a00 	vldr	s15, [r3]
 8001118:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 800111c:	eeb0 0a67 	vmov.f32	s0, s15
 8001120:	f008 faee 	bl	8009700 <powf>
 8001124:	eef0 7a40 	vmov.f32	s15, s0
 8001128:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800112c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001130:	4b9f      	ldr	r3, [pc, #636]	@ (80013b0 <main+0x3f8>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	499f      	ldr	r1, [pc, #636]	@ (80013b4 <main+0x3fc>)
 8001136:	4613      	mov	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	1a9b      	subs	r3, r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	440b      	add	r3, r1
 8001140:	3310      	adds	r3, #16
 8001142:	edd3 8a00 	vldr	s17, [r3]
 8001146:	4b99      	ldr	r3, [pc, #612]	@ (80013ac <main+0x3f4>)
 8001148:	edd3 7a00 	vldr	s15, [r3]
 800114c:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 8001150:	eeb0 0a67 	vmov.f32	s0, s15
 8001154:	f008 fad4 	bl	8009700 <powf>
 8001158:	eef0 7a40 	vmov.f32	s15, s0
 800115c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001160:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001164:	4b92      	ldr	r3, [pc, #584]	@ (80013b0 <main+0x3f8>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4992      	ldr	r1, [pc, #584]	@ (80013b4 <main+0x3fc>)
 800116a:	4613      	mov	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	1a9b      	subs	r3, r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	3314      	adds	r3, #20
 8001176:	edd3 8a00 	vldr	s17, [r3]
 800117a:	4b8c      	ldr	r3, [pc, #560]	@ (80013ac <main+0x3f4>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8001184:	eeb0 0a67 	vmov.f32	s0, s15
 8001188:	f008 faba 	bl	8009700 <powf>
 800118c:	eef0 7a40 	vmov.f32	s15, s0
 8001190:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001194:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001198:	4b87      	ldr	r3, [pc, #540]	@ (80013b8 <main+0x400>)
 800119a:	edc3 7a00 	vstr	s15, [r3]
			Yd = betas[coor][0] + betas[coor][1]*t + betas[coor][2]*powf(t,2) + betas[coor][3]*powf(t,3) + betas[coor][4]*powf(t,4) + betas[coor][5]*powf(t,5);
 800119e:	4b84      	ldr	r3, [pc, #528]	@ (80013b0 <main+0x3f8>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4986      	ldr	r1, [pc, #536]	@ (80013bc <main+0x404>)
 80011a4:	4613      	mov	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	1a9b      	subs	r3, r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	ed93 7a00 	vldr	s14, [r3]
 80011b2:	4b7f      	ldr	r3, [pc, #508]	@ (80013b0 <main+0x3f8>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4981      	ldr	r1, [pc, #516]	@ (80013bc <main+0x404>)
 80011b8:	4613      	mov	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	1a9b      	subs	r3, r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	3304      	adds	r3, #4
 80011c4:	edd3 6a00 	vldr	s13, [r3]
 80011c8:	4b78      	ldr	r3, [pc, #480]	@ (80013ac <main+0x3f4>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d2:	ee37 8a27 	vadd.f32	s16, s14, s15
 80011d6:	4b76      	ldr	r3, [pc, #472]	@ (80013b0 <main+0x3f8>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4978      	ldr	r1, [pc, #480]	@ (80013bc <main+0x404>)
 80011dc:	4613      	mov	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	1a9b      	subs	r3, r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	3308      	adds	r3, #8
 80011e8:	edd3 8a00 	vldr	s17, [r3]
 80011ec:	4b6f      	ldr	r3, [pc, #444]	@ (80013ac <main+0x3f4>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80011f6:	eeb0 0a67 	vmov.f32	s0, s15
 80011fa:	f008 fa81 	bl	8009700 <powf>
 80011fe:	eef0 7a40 	vmov.f32	s15, s0
 8001202:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001206:	ee38 8a27 	vadd.f32	s16, s16, s15
 800120a:	4b69      	ldr	r3, [pc, #420]	@ (80013b0 <main+0x3f8>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	496b      	ldr	r1, [pc, #428]	@ (80013bc <main+0x404>)
 8001210:	4613      	mov	r3, r2
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	1a9b      	subs	r3, r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	330c      	adds	r3, #12
 800121c:	edd3 8a00 	vldr	s17, [r3]
 8001220:	4b62      	ldr	r3, [pc, #392]	@ (80013ac <main+0x3f4>)
 8001222:	edd3 7a00 	vldr	s15, [r3]
 8001226:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 800122a:	eeb0 0a67 	vmov.f32	s0, s15
 800122e:	f008 fa67 	bl	8009700 <powf>
 8001232:	eef0 7a40 	vmov.f32	s15, s0
 8001236:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800123a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800123e:	4b5c      	ldr	r3, [pc, #368]	@ (80013b0 <main+0x3f8>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	495e      	ldr	r1, [pc, #376]	@ (80013bc <main+0x404>)
 8001244:	4613      	mov	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	3310      	adds	r3, #16
 8001250:	edd3 8a00 	vldr	s17, [r3]
 8001254:	4b55      	ldr	r3, [pc, #340]	@ (80013ac <main+0x3f4>)
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 800125e:	eeb0 0a67 	vmov.f32	s0, s15
 8001262:	f008 fa4d 	bl	8009700 <powf>
 8001266:	eef0 7a40 	vmov.f32	s15, s0
 800126a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800126e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001272:	4b4f      	ldr	r3, [pc, #316]	@ (80013b0 <main+0x3f8>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4951      	ldr	r1, [pc, #324]	@ (80013bc <main+0x404>)
 8001278:	4613      	mov	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	3314      	adds	r3, #20
 8001284:	edd3 8a00 	vldr	s17, [r3]
 8001288:	4b48      	ldr	r3, [pc, #288]	@ (80013ac <main+0x3f4>)
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8001292:	eeb0 0a67 	vmov.f32	s0, s15
 8001296:	f008 fa33 	bl	8009700 <powf>
 800129a:	eef0 7a40 	vmov.f32	s15, s0
 800129e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80012a2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012a6:	4b46      	ldr	r3, [pc, #280]	@ (80013c0 <main+0x408>)
 80012a8:	edc3 7a00 	vstr	s15, [r3]
//			}
//
//			}

			//IZQUIERDO
			Aspeed = (Aangle - Apast_angle)/0.001;
 80012ac:	4b45      	ldr	r3, [pc, #276]	@ (80013c4 <main+0x40c>)
 80012ae:	ed93 7a00 	vldr	s14, [r3]
 80012b2:	4b45      	ldr	r3, [pc, #276]	@ (80013c8 <main+0x410>)
 80012b4:	edd3 7a00 	vldr	s15, [r3]
 80012b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012bc:	ee17 0a90 	vmov	r0, s15
 80012c0:	f7ff f962 	bl	8000588 <__aeabi_f2d>
 80012c4:	a336      	add	r3, pc, #216	@ (adr r3, 80013a0 <main+0x3e8>)
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	f7ff fadf 	bl	800088c <__aeabi_ddiv>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fc87 	bl	8000be8 <__aeabi_d2f>
 80012da:	4603      	mov	r3, r0
 80012dc:	4a3b      	ldr	r2, [pc, #236]	@ (80013cc <main+0x414>)
 80012de:	6013      	str	r3, [r2, #0]
			Apast_angle = Aangle;
 80012e0:	4b38      	ldr	r3, [pc, #224]	@ (80013c4 <main+0x40c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a38      	ldr	r2, [pc, #224]	@ (80013c8 <main+0x410>)
 80012e6:	6013      	str	r3, [r2, #0]
			y_k = Aangle;
 80012e8:	4b36      	ldr	r3, [pc, #216]	@ (80013c4 <main+0x40c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a38      	ldr	r2, [pc, #224]	@ (80013d0 <main+0x418>)
 80012ee:	6013      	str	r3, [r2, #0]

			//DERECHO
			Bspeed = (Bangle - Bpast_angle)/0.001;
 80012f0:	4b38      	ldr	r3, [pc, #224]	@ (80013d4 <main+0x41c>)
 80012f2:	ed93 7a00 	vldr	s14, [r3]
 80012f6:	4b38      	ldr	r3, [pc, #224]	@ (80013d8 <main+0x420>)
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001300:	ee17 0a90 	vmov	r0, s15
 8001304:	f7ff f940 	bl	8000588 <__aeabi_f2d>
 8001308:	a325      	add	r3, pc, #148	@ (adr r3, 80013a0 <main+0x3e8>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff fabd 	bl	800088c <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fc65 	bl	8000be8 <__aeabi_d2f>
 800131e:	4603      	mov	r3, r0
 8001320:	4a2e      	ldr	r2, [pc, #184]	@ (80013dc <main+0x424>)
 8001322:	6013      	str	r3, [r2, #0]
			Bpast_angle = Bangle;
 8001324:	4b2b      	ldr	r3, [pc, #172]	@ (80013d4 <main+0x41c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a2b      	ldr	r2, [pc, #172]	@ (80013d8 <main+0x420>)
 800132a:	6013      	str	r3, [r2, #0]
			By_k = Bangle;
 800132c:	4b29      	ldr	r3, [pc, #164]	@ (80013d4 <main+0x41c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a2b      	ldr	r2, [pc, #172]	@ (80013e0 <main+0x428>)
 8001332:	6013      	str	r3, [r2, #0]
//			u_k = 100*r;
//			control(u_k);
			//Sería algo así? Lo que pasa es que está en velocidad angular de cada llanta, no en PWM
			//Se requiere condición de parada? o desde la ley de control la ganacia k será igual a 0?
			RobotKinematics_Update(&cacarro, Aangle, Bangle, 0.001);
 8001334:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <main+0x40c>)
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	4b26      	ldr	r3, [pc, #152]	@ (80013d4 <main+0x41c>)
 800133c:	ed93 7a00 	vldr	s14, [r3]
 8001340:	ed9f 1a28 	vldr	s2, [pc, #160]	@ 80013e4 <main+0x42c>
 8001344:	eef0 0a47 	vmov.f32	s1, s14
 8001348:	eeb0 0a67 	vmov.f32	s0, s15
 800134c:	4826      	ldr	r0, [pc, #152]	@ (80013e8 <main+0x430>)
 800134e:	f001 f923 	bl	8002598 <RobotKinematics_Update>

			phi_d = W_Control_Law(&cacarro, Xd, Yd);
 8001352:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <main+0x400>)
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <main+0x408>)
 800135a:	ed93 7a00 	vldr	s14, [r3]
 800135e:	eef0 0a47 	vmov.f32	s1, s14
 8001362:	eeb0 0a67 	vmov.f32	s0, s15
 8001366:	4820      	ldr	r0, [pc, #128]	@ (80013e8 <main+0x430>)
 8001368:	f001 fa0e 	bl	8002788 <W_Control_Law>
 800136c:	eef0 7a40 	vmov.f32	s15, s0
 8001370:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <main+0x434>)
 8001372:	edc3 7a00 	vstr	s15, [r3]
			VL_Control_Law(&cacarro, Xd, Yd);
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <main+0x400>)
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <main+0x408>)
 800137e:	ed93 7a00 	vldr	s14, [r3]
 8001382:	eef0 0a47 	vmov.f32	s1, s14
 8001386:	eeb0 0a67 	vmov.f32	s0, s15
 800138a:	4817      	ldr	r0, [pc, #92]	@ (80013e8 <main+0x430>)
 800138c:	f001 fafc 	bl	8002988 <VL_Control_Law>
			Angular_Vel(&cacarro);
 8001390:	4815      	ldr	r0, [pc, #84]	@ (80013e8 <main+0x430>)
 8001392:	f001 fbc7 	bl	8002b24 <Angular_Vel>

			r = cacarro.W_L_d;
 8001396:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <main+0x430>)
 8001398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800139a:	4a15      	ldr	r2, [pc, #84]	@ (80013f0 <main+0x438>)
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e029      	b.n	80013f4 <main+0x43c>
 80013a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013a4:	3f50624d 	.word	0x3f50624d
 80013a8:	2000059c 	.word	0x2000059c
 80013ac:	2000062c 	.word	0x2000062c
 80013b0:	20000630 	.word	0x20000630
 80013b4:	20000000 	.word	0x20000000
 80013b8:	200005d0 	.word	0x200005d0
 80013bc:	20000070 	.word	0x20000070
 80013c0:	200005d4 	.word	0x200005d4
 80013c4:	200005a0 	.word	0x200005a0
 80013c8:	200005a8 	.word	0x200005a8
 80013cc:	200005ac 	.word	0x200005ac
 80013d0:	200005b8 	.word	0x200005b8
 80013d4:	200005a4 	.word	0x200005a4
 80013d8:	200005b0 	.word	0x200005b0
 80013dc:	200005b4 	.word	0x200005b4
 80013e0:	200005bc 	.word	0x200005bc
 80013e4:	3a83126f 	.word	0x3a83126f
 80013e8:	200006bc 	.word	0x200006bc
 80013ec:	20000624 	.word	0x20000624
 80013f0:	200005c0 	.word	0x200005c0
			Br = cacarro.W_R_d;
 80013f4:	4bc9      	ldr	r3, [pc, #804]	@ (800171c <main+0x764>)
 80013f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013f8:	4ac9      	ldr	r2, [pc, #804]	@ (8001720 <main+0x768>)
 80013fa:	6013      	str	r3, [r2, #0]

			//Dónde setear la velocidad?

			//MOTOR A : IZQUIERDO
			x1_k_1 = AR[0][0]*x1_k + AR[0][1]*x2_k + AR[0][2]*x3_k + AR[0][3]*x4_k + BR[0][0]*r + BR[0][1]*y_k;
 80013fc:	4bc9      	ldr	r3, [pc, #804]	@ (8001724 <main+0x76c>)
 80013fe:	ed93 7a00 	vldr	s14, [r3]
 8001402:	4bc9      	ldr	r3, [pc, #804]	@ (8001728 <main+0x770>)
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140c:	4bc5      	ldr	r3, [pc, #788]	@ (8001724 <main+0x76c>)
 800140e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001412:	4bc6      	ldr	r3, [pc, #792]	@ (800172c <main+0x774>)
 8001414:	edd3 7a00 	vldr	s15, [r3]
 8001418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800141c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001420:	4bc0      	ldr	r3, [pc, #768]	@ (8001724 <main+0x76c>)
 8001422:	edd3 6a02 	vldr	s13, [r3, #8]
 8001426:	4bc2      	ldr	r3, [pc, #776]	@ (8001730 <main+0x778>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001430:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001434:	4bbb      	ldr	r3, [pc, #748]	@ (8001724 <main+0x76c>)
 8001436:	edd3 6a03 	vldr	s13, [r3, #12]
 800143a:	4bbe      	ldr	r3, [pc, #760]	@ (8001734 <main+0x77c>)
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001448:	4bbb      	ldr	r3, [pc, #748]	@ (8001738 <main+0x780>)
 800144a:	edd3 6a00 	vldr	s13, [r3]
 800144e:	4bbb      	ldr	r3, [pc, #748]	@ (800173c <main+0x784>)
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001458:	ee37 7a27 	vadd.f32	s14, s14, s15
 800145c:	4bb6      	ldr	r3, [pc, #728]	@ (8001738 <main+0x780>)
 800145e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001462:	4bb7      	ldr	r3, [pc, #732]	@ (8001740 <main+0x788>)
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001470:	4bb4      	ldr	r3, [pc, #720]	@ (8001744 <main+0x78c>)
 8001472:	edc3 7a00 	vstr	s15, [r3]
			x2_k_1 = AR[1][0]*x1_k + AR[1][1]*x2_k + AR[1][2]*x3_k + AR[1][3]*x4_k + BR[1][0]*r + BR[1][1]*y_k;
 8001476:	4bab      	ldr	r3, [pc, #684]	@ (8001724 <main+0x76c>)
 8001478:	ed93 7a04 	vldr	s14, [r3, #16]
 800147c:	4baa      	ldr	r3, [pc, #680]	@ (8001728 <main+0x770>)
 800147e:	edd3 7a00 	vldr	s15, [r3]
 8001482:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001486:	4ba7      	ldr	r3, [pc, #668]	@ (8001724 <main+0x76c>)
 8001488:	edd3 6a05 	vldr	s13, [r3, #20]
 800148c:	4ba7      	ldr	r3, [pc, #668]	@ (800172c <main+0x774>)
 800148e:	edd3 7a00 	vldr	s15, [r3]
 8001492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001496:	ee37 7a27 	vadd.f32	s14, s14, s15
 800149a:	4ba2      	ldr	r3, [pc, #648]	@ (8001724 <main+0x76c>)
 800149c:	edd3 6a06 	vldr	s13, [r3, #24]
 80014a0:	4ba3      	ldr	r3, [pc, #652]	@ (8001730 <main+0x778>)
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ae:	4b9d      	ldr	r3, [pc, #628]	@ (8001724 <main+0x76c>)
 80014b0:	edd3 6a07 	vldr	s13, [r3, #28]
 80014b4:	4b9f      	ldr	r3, [pc, #636]	@ (8001734 <main+0x77c>)
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014c2:	4b9d      	ldr	r3, [pc, #628]	@ (8001738 <main+0x780>)
 80014c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80014c8:	4b9c      	ldr	r3, [pc, #624]	@ (800173c <main+0x784>)
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014d6:	4b98      	ldr	r3, [pc, #608]	@ (8001738 <main+0x780>)
 80014d8:	edd3 6a03 	vldr	s13, [r3, #12]
 80014dc:	4b98      	ldr	r3, [pc, #608]	@ (8001740 <main+0x788>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ea:	4b97      	ldr	r3, [pc, #604]	@ (8001748 <main+0x790>)
 80014ec:	edc3 7a00 	vstr	s15, [r3]
			x3_k_1 = AR[2][0]*x1_k + AR[2][1]*x2_k + AR[2][2]*x3_k + AR[2][3]*x4_k + BR[2][0]*r + BR[2][1]*y_k;
 80014f0:	4b8c      	ldr	r3, [pc, #560]	@ (8001724 <main+0x76c>)
 80014f2:	ed93 7a08 	vldr	s14, [r3, #32]
 80014f6:	4b8c      	ldr	r3, [pc, #560]	@ (8001728 <main+0x770>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001500:	4b88      	ldr	r3, [pc, #544]	@ (8001724 <main+0x76c>)
 8001502:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8001506:	4b89      	ldr	r3, [pc, #548]	@ (800172c <main+0x774>)
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001510:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001514:	4b83      	ldr	r3, [pc, #524]	@ (8001724 <main+0x76c>)
 8001516:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800151a:	4b85      	ldr	r3, [pc, #532]	@ (8001730 <main+0x778>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001524:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001528:	4b7e      	ldr	r3, [pc, #504]	@ (8001724 <main+0x76c>)
 800152a:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800152e:	4b81      	ldr	r3, [pc, #516]	@ (8001734 <main+0x77c>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001538:	ee37 7a27 	vadd.f32	s14, s14, s15
 800153c:	4b7e      	ldr	r3, [pc, #504]	@ (8001738 <main+0x780>)
 800153e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001542:	4b7e      	ldr	r3, [pc, #504]	@ (800173c <main+0x784>)
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800154c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001550:	4b79      	ldr	r3, [pc, #484]	@ (8001738 <main+0x780>)
 8001552:	edd3 6a05 	vldr	s13, [r3, #20]
 8001556:	4b7a      	ldr	r3, [pc, #488]	@ (8001740 <main+0x788>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001564:	4b79      	ldr	r3, [pc, #484]	@ (800174c <main+0x794>)
 8001566:	edc3 7a00 	vstr	s15, [r3]
			x4_k_1 = AR[3][0]*x1_k + AR[3][1]*x2_k + AR[3][2]*x3_k + AR[3][3]*x4_k + BR[3][0]*r + BR[3][1]*y_k;
 800156a:	4b6e      	ldr	r3, [pc, #440]	@ (8001724 <main+0x76c>)
 800156c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001570:	4b6d      	ldr	r3, [pc, #436]	@ (8001728 <main+0x770>)
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	ee27 7a27 	vmul.f32	s14, s14, s15
 800157a:	4b6a      	ldr	r3, [pc, #424]	@ (8001724 <main+0x76c>)
 800157c:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001580:	4b6a      	ldr	r3, [pc, #424]	@ (800172c <main+0x774>)
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800158e:	4b65      	ldr	r3, [pc, #404]	@ (8001724 <main+0x76c>)
 8001590:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8001594:	4b66      	ldr	r3, [pc, #408]	@ (8001730 <main+0x778>)
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a2:	4b60      	ldr	r3, [pc, #384]	@ (8001724 <main+0x76c>)
 80015a4:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80015a8:	4b62      	ldr	r3, [pc, #392]	@ (8001734 <main+0x77c>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015b6:	4b60      	ldr	r3, [pc, #384]	@ (8001738 <main+0x780>)
 80015b8:	edd3 6a06 	vldr	s13, [r3, #24]
 80015bc:	4b5f      	ldr	r3, [pc, #380]	@ (800173c <main+0x784>)
 80015be:	edd3 7a00 	vldr	s15, [r3]
 80015c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001738 <main+0x780>)
 80015cc:	edd3 6a07 	vldr	s13, [r3, #28]
 80015d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001740 <main+0x788>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015de:	4b5c      	ldr	r3, [pc, #368]	@ (8001750 <main+0x798>)
 80015e0:	edc3 7a00 	vstr	s15, [r3]

			u_k = c11*x1_k + c12*x2_k +c13*x3_k + c14*x4_k + d11*r;
 80015e4:	4b5b      	ldr	r3, [pc, #364]	@ (8001754 <main+0x79c>)
 80015e6:	ed93 7a00 	vldr	s14, [r3]
 80015ea:	4b4f      	ldr	r3, [pc, #316]	@ (8001728 <main+0x770>)
 80015ec:	edd3 7a00 	vldr	s15, [r3]
 80015f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f4:	4b58      	ldr	r3, [pc, #352]	@ (8001758 <main+0x7a0>)
 80015f6:	edd3 6a00 	vldr	s13, [r3]
 80015fa:	4b4c      	ldr	r3, [pc, #304]	@ (800172c <main+0x774>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001604:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001608:	4b54      	ldr	r3, [pc, #336]	@ (800175c <main+0x7a4>)
 800160a:	edd3 6a00 	vldr	s13, [r3]
 800160e:	4b48      	ldr	r3, [pc, #288]	@ (8001730 <main+0x778>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001618:	ee37 7a27 	vadd.f32	s14, s14, s15
 800161c:	4b50      	ldr	r3, [pc, #320]	@ (8001760 <main+0x7a8>)
 800161e:	edd3 6a00 	vldr	s13, [r3]
 8001622:	4b44      	ldr	r3, [pc, #272]	@ (8001734 <main+0x77c>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800162c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001630:	4b4c      	ldr	r3, [pc, #304]	@ (8001764 <main+0x7ac>)
 8001632:	edd3 6a00 	vldr	s13, [r3]
 8001636:	4b41      	ldr	r3, [pc, #260]	@ (800173c <main+0x784>)
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001644:	4b48      	ldr	r3, [pc, #288]	@ (8001768 <main+0x7b0>)
 8001646:	edc3 7a00 	vstr	s15, [r3]
			control(u_k, &htim3);
 800164a:	4b47      	ldr	r3, [pc, #284]	@ (8001768 <main+0x7b0>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	4846      	ldr	r0, [pc, #280]	@ (800176c <main+0x7b4>)
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	f000 fe07 	bl	8002268 <control>
			x1_k = x1_k_1;
 800165a:	4b3a      	ldr	r3, [pc, #232]	@ (8001744 <main+0x78c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a32      	ldr	r2, [pc, #200]	@ (8001728 <main+0x770>)
 8001660:	6013      	str	r3, [r2, #0]
			x2_k = x2_k_1;
 8001662:	4b39      	ldr	r3, [pc, #228]	@ (8001748 <main+0x790>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a31      	ldr	r2, [pc, #196]	@ (800172c <main+0x774>)
 8001668:	6013      	str	r3, [r2, #0]
			x3_k = x3_k_1;
 800166a:	4b38      	ldr	r3, [pc, #224]	@ (800174c <main+0x794>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a30      	ldr	r2, [pc, #192]	@ (8001730 <main+0x778>)
 8001670:	6013      	str	r3, [r2, #0]
			x4_k = x4_k_1;
 8001672:	4b37      	ldr	r3, [pc, #220]	@ (8001750 <main+0x798>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a2f      	ldr	r2, [pc, #188]	@ (8001734 <main+0x77c>)
 8001678:	6013      	str	r3, [r2, #0]

			//motor B derecho

			Bx1_k_1 = AL[0][0]*Bx1_k + AL[0][1]*Bx2_k + AL[0][2]*Bx3_k + AL[0][3]*Bx4_k + BL[0][0]*Br + BL[0][1]*By_k;
 800167a:	4b3d      	ldr	r3, [pc, #244]	@ (8001770 <main+0x7b8>)
 800167c:	ed93 7a00 	vldr	s14, [r3]
 8001680:	4b3c      	ldr	r3, [pc, #240]	@ (8001774 <main+0x7bc>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ee27 7a27 	vmul.f32	s14, s14, s15
 800168a:	4b39      	ldr	r3, [pc, #228]	@ (8001770 <main+0x7b8>)
 800168c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001690:	4b39      	ldr	r3, [pc, #228]	@ (8001778 <main+0x7c0>)
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800169a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800169e:	4b34      	ldr	r3, [pc, #208]	@ (8001770 <main+0x7b8>)
 80016a0:	edd3 6a02 	vldr	s13, [r3, #8]
 80016a4:	4b35      	ldr	r3, [pc, #212]	@ (800177c <main+0x7c4>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001770 <main+0x7b8>)
 80016b4:	edd3 6a03 	vldr	s13, [r3, #12]
 80016b8:	4b31      	ldr	r3, [pc, #196]	@ (8001780 <main+0x7c8>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001784 <main+0x7cc>)
 80016c8:	edd3 6a00 	vldr	s13, [r3]
 80016cc:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <main+0x768>)
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016da:	4b2a      	ldr	r3, [pc, #168]	@ (8001784 <main+0x7cc>)
 80016dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80016e0:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <main+0x7d0>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ee:	4b27      	ldr	r3, [pc, #156]	@ (800178c <main+0x7d4>)
 80016f0:	edc3 7a00 	vstr	s15, [r3]
			Bx2_k_1 = AL[1][0]*Bx1_k + AL[1][1]*Bx2_k + AL[1][2]*Bx3_k + AL[1][3]*Bx4_k + BL[1][0]*Br + BL[1][1]*By_k;
 80016f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <main+0x7b8>)
 80016f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80016fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <main+0x7bc>)
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001704:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <main+0x7b8>)
 8001706:	edd3 6a05 	vldr	s13, [r3, #20]
 800170a:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <main+0x7c0>)
 800170c:	edd3 7a00 	vldr	s15, [r3]
 8001710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001714:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001718:	e03a      	b.n	8001790 <main+0x7d8>
 800171a:	bf00      	nop
 800171c:	200006bc 	.word	0x200006bc
 8001720:	200005c4 	.word	0x200005c4
 8001724:	200000e0 	.word	0x200000e0
 8001728:	200005ec 	.word	0x200005ec
 800172c:	200005f0 	.word	0x200005f0
 8001730:	200005f4 	.word	0x200005f4
 8001734:	200005f8 	.word	0x200005f8
 8001738:	20000160 	.word	0x20000160
 800173c:	200005c0 	.word	0x200005c0
 8001740:	200005b8 	.word	0x200005b8
 8001744:	200005dc 	.word	0x200005dc
 8001748:	200005e0 	.word	0x200005e0
 800174c:	200005e4 	.word	0x200005e4
 8001750:	200005e8 	.word	0x200005e8
 8001754:	200005d8 	.word	0x200005d8
 8001758:	200001a0 	.word	0x200001a0
 800175c:	200001a4 	.word	0x200001a4
 8001760:	200001a8 	.word	0x200001a8
 8001764:	200001ac 	.word	0x200001ac
 8001768:	200005c8 	.word	0x200005c8
 800176c:	200003ec 	.word	0x200003ec
 8001770:	20000120 	.word	0x20000120
 8001774:	2000060c 	.word	0x2000060c
 8001778:	20000610 	.word	0x20000610
 800177c:	20000614 	.word	0x20000614
 8001780:	20000618 	.word	0x20000618
 8001784:	20000180 	.word	0x20000180
 8001788:	200005bc 	.word	0x200005bc
 800178c:	200005fc 	.word	0x200005fc
 8001790:	4b9b      	ldr	r3, [pc, #620]	@ (8001a00 <main+0xa48>)
 8001792:	edd3 6a06 	vldr	s13, [r3, #24]
 8001796:	4b9b      	ldr	r3, [pc, #620]	@ (8001a04 <main+0xa4c>)
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017a4:	4b96      	ldr	r3, [pc, #600]	@ (8001a00 <main+0xa48>)
 80017a6:	edd3 6a07 	vldr	s13, [r3, #28]
 80017aa:	4b97      	ldr	r3, [pc, #604]	@ (8001a08 <main+0xa50>)
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017b8:	4b94      	ldr	r3, [pc, #592]	@ (8001a0c <main+0xa54>)
 80017ba:	edd3 6a02 	vldr	s13, [r3, #8]
 80017be:	4b94      	ldr	r3, [pc, #592]	@ (8001a10 <main+0xa58>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017cc:	4b8f      	ldr	r3, [pc, #572]	@ (8001a0c <main+0xa54>)
 80017ce:	edd3 6a03 	vldr	s13, [r3, #12]
 80017d2:	4b90      	ldr	r3, [pc, #576]	@ (8001a14 <main+0xa5c>)
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e0:	4b8d      	ldr	r3, [pc, #564]	@ (8001a18 <main+0xa60>)
 80017e2:	edc3 7a00 	vstr	s15, [r3]
			Bx3_k_1 = AL[2][0]*Bx1_k + AL[2][1]*Bx2_k + AL[2][2]*Bx3_k + AL[2][3]*Bx4_k + BL[2][0]*Br + BL[2][1]*By_k;
 80017e6:	4b86      	ldr	r3, [pc, #536]	@ (8001a00 <main+0xa48>)
 80017e8:	ed93 7a08 	vldr	s14, [r3, #32]
 80017ec:	4b8b      	ldr	r3, [pc, #556]	@ (8001a1c <main+0xa64>)
 80017ee:	edd3 7a00 	vldr	s15, [r3]
 80017f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f6:	4b82      	ldr	r3, [pc, #520]	@ (8001a00 <main+0xa48>)
 80017f8:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80017fc:	4b88      	ldr	r3, [pc, #544]	@ (8001a20 <main+0xa68>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001806:	ee37 7a27 	vadd.f32	s14, s14, s15
 800180a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a00 <main+0xa48>)
 800180c:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001810:	4b7c      	ldr	r3, [pc, #496]	@ (8001a04 <main+0xa4c>)
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800181a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800181e:	4b78      	ldr	r3, [pc, #480]	@ (8001a00 <main+0xa48>)
 8001820:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8001824:	4b78      	ldr	r3, [pc, #480]	@ (8001a08 <main+0xa50>)
 8001826:	edd3 7a00 	vldr	s15, [r3]
 800182a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800182e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001832:	4b76      	ldr	r3, [pc, #472]	@ (8001a0c <main+0xa54>)
 8001834:	edd3 6a04 	vldr	s13, [r3, #16]
 8001838:	4b75      	ldr	r3, [pc, #468]	@ (8001a10 <main+0xa58>)
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001842:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001846:	4b71      	ldr	r3, [pc, #452]	@ (8001a0c <main+0xa54>)
 8001848:	edd3 6a05 	vldr	s13, [r3, #20]
 800184c:	4b71      	ldr	r3, [pc, #452]	@ (8001a14 <main+0xa5c>)
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185a:	4b72      	ldr	r3, [pc, #456]	@ (8001a24 <main+0xa6c>)
 800185c:	edc3 7a00 	vstr	s15, [r3]
			Bx4_k_1 = AL[3][0]*Bx1_k + AL[3][1]*Bx2_k + AL[3][2]*Bx3_k + AL[3][3]*Bx4_k + BL[3][0]*Br + BL[3][1]*By_k;
 8001860:	4b67      	ldr	r3, [pc, #412]	@ (8001a00 <main+0xa48>)
 8001862:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001866:	4b6d      	ldr	r3, [pc, #436]	@ (8001a1c <main+0xa64>)
 8001868:	edd3 7a00 	vldr	s15, [r3]
 800186c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001870:	4b63      	ldr	r3, [pc, #396]	@ (8001a00 <main+0xa48>)
 8001872:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001876:	4b6a      	ldr	r3, [pc, #424]	@ (8001a20 <main+0xa68>)
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001880:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001884:	4b5e      	ldr	r3, [pc, #376]	@ (8001a00 <main+0xa48>)
 8001886:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800188a:	4b5e      	ldr	r3, [pc, #376]	@ (8001a04 <main+0xa4c>)
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001898:	4b59      	ldr	r3, [pc, #356]	@ (8001a00 <main+0xa48>)
 800189a:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800189e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a08 <main+0xa50>)
 80018a0:	edd3 7a00 	vldr	s15, [r3]
 80018a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ac:	4b57      	ldr	r3, [pc, #348]	@ (8001a0c <main+0xa54>)
 80018ae:	edd3 6a06 	vldr	s13, [r3, #24]
 80018b2:	4b57      	ldr	r3, [pc, #348]	@ (8001a10 <main+0xa58>)
 80018b4:	edd3 7a00 	vldr	s15, [r3]
 80018b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018c0:	4b52      	ldr	r3, [pc, #328]	@ (8001a0c <main+0xa54>)
 80018c2:	edd3 6a07 	vldr	s13, [r3, #28]
 80018c6:	4b53      	ldr	r3, [pc, #332]	@ (8001a14 <main+0xa5c>)
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d4:	4b54      	ldr	r3, [pc, #336]	@ (8001a28 <main+0xa70>)
 80018d6:	edc3 7a00 	vstr	s15, [r3]

			Bu_k = c11*Bx1_k + c12*Bx2_k +c13*Bx3_k + c14*Bx4_k + d11*Br;
 80018da:	4b54      	ldr	r3, [pc, #336]	@ (8001a2c <main+0xa74>)
 80018dc:	ed93 7a00 	vldr	s14, [r3]
 80018e0:	4b4e      	ldr	r3, [pc, #312]	@ (8001a1c <main+0xa64>)
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ea:	4b51      	ldr	r3, [pc, #324]	@ (8001a30 <main+0xa78>)
 80018ec:	edd3 6a00 	vldr	s13, [r3]
 80018f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001a20 <main+0xa68>)
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001a34 <main+0xa7c>)
 8001900:	edd3 6a00 	vldr	s13, [r3]
 8001904:	4b3f      	ldr	r3, [pc, #252]	@ (8001a04 <main+0xa4c>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001912:	4b49      	ldr	r3, [pc, #292]	@ (8001a38 <main+0xa80>)
 8001914:	edd3 6a00 	vldr	s13, [r3]
 8001918:	4b3b      	ldr	r3, [pc, #236]	@ (8001a08 <main+0xa50>)
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001922:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001926:	4b45      	ldr	r3, [pc, #276]	@ (8001a3c <main+0xa84>)
 8001928:	edd3 6a00 	vldr	s13, [r3]
 800192c:	4b38      	ldr	r3, [pc, #224]	@ (8001a10 <main+0xa58>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193a:	4b41      	ldr	r3, [pc, #260]	@ (8001a40 <main+0xa88>)
 800193c:	edc3 7a00 	vstr	s15, [r3]
			control(Bu_k, &htim5);
 8001940:	4b3f      	ldr	r3, [pc, #252]	@ (8001a40 <main+0xa88>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	483f      	ldr	r0, [pc, #252]	@ (8001a44 <main+0xa8c>)
 8001948:	eeb0 0a67 	vmov.f32	s0, s15
 800194c:	f000 fc8c 	bl	8002268 <control>
			Bx1_k = Bx1_k_1;
 8001950:	4b3d      	ldr	r3, [pc, #244]	@ (8001a48 <main+0xa90>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a31      	ldr	r2, [pc, #196]	@ (8001a1c <main+0xa64>)
 8001956:	6013      	str	r3, [r2, #0]
			Bx2_k = Bx2_k_1;
 8001958:	4b2f      	ldr	r3, [pc, #188]	@ (8001a18 <main+0xa60>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a30      	ldr	r2, [pc, #192]	@ (8001a20 <main+0xa68>)
 800195e:	6013      	str	r3, [r2, #0]
			Bx3_k = Bx3_k_1;
 8001960:	4b30      	ldr	r3, [pc, #192]	@ (8001a24 <main+0xa6c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a27      	ldr	r2, [pc, #156]	@ (8001a04 <main+0xa4c>)
 8001966:	6013      	str	r3, [r2, #0]
			Bx4_k = Bx4_k_1;
 8001968:	4b2f      	ldr	r3, [pc, #188]	@ (8001a28 <main+0xa70>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a26      	ldr	r2, [pc, #152]	@ (8001a08 <main+0xa50>)
 800196e:	6013      	str	r3, [r2, #0]
			e_k_2 = e_k_1;
			e_k_1 = e_k;
			u_k_2 = u_k_1;
			u_k_1 = u_k;
			*/
			 if (++telem_cnt >= telem_div && !uart3_busy) {
 8001970:	4b36      	ldr	r3, [pc, #216]	@ (8001a4c <main+0xa94>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	3301      	adds	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	4b34      	ldr	r3, [pc, #208]	@ (8001a4c <main+0xa94>)
 800197a:	801a      	strh	r2, [r3, #0]
 800197c:	4b33      	ldr	r3, [pc, #204]	@ (8001a4c <main+0xa94>)
 800197e:	881a      	ldrh	r2, [r3, #0]
 8001980:	4b33      	ldr	r3, [pc, #204]	@ (8001a50 <main+0xa98>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d335      	bcc.n	80019f4 <main+0xa3c>
 8001988:	4b32      	ldr	r3, [pc, #200]	@ (8001a54 <main+0xa9c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d130      	bne.n	80019f4 <main+0xa3c>
				  int n = snprintf(telem_buf, sizeof(telem_buf),
								   "%.3f,%.3f,%.3f\r\n",
									cacarro.x, cacarro.y, cacarro.theta);
 8001992:	4b31      	ldr	r3, [pc, #196]	@ (8001a58 <main+0xaa0>)
 8001994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
				  int n = snprintf(telem_buf, sizeof(telem_buf),
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fdf6 	bl	8000588 <__aeabi_f2d>
 800199c:	4604      	mov	r4, r0
 800199e:	460d      	mov	r5, r1
									cacarro.x, cacarro.y, cacarro.theta);
 80019a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a58 <main+0xaa0>)
 80019a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
				  int n = snprintf(telem_buf, sizeof(telem_buf),
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fdef 	bl	8000588 <__aeabi_f2d>
 80019aa:	4680      	mov	r8, r0
 80019ac:	4689      	mov	r9, r1
									cacarro.x, cacarro.y, cacarro.theta);
 80019ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001a58 <main+0xaa0>)
 80019b0:	6a1b      	ldr	r3, [r3, #32]
				  int n = snprintf(telem_buf, sizeof(telem_buf),
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fde8 	bl	8000588 <__aeabi_f2d>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80019c0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80019c4:	e9cd 4500 	strd	r4, r5, [sp]
 80019c8:	4a24      	ldr	r2, [pc, #144]	@ (8001a5c <main+0xaa4>)
 80019ca:	2180      	movs	r1, #128	@ 0x80
 80019cc:	4824      	ldr	r0, [pc, #144]	@ (8001a60 <main+0xaa8>)
 80019ce:	f005 fc09 	bl	80071e4 <sniprintf>
 80019d2:	6378      	str	r0, [r7, #52]	@ 0x34
				  if (n > 0) {
 80019d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	dd09      	ble.n	80019ee <main+0xa36>
					  uart3_busy = 1; // marcar ocupada hasta que termine
 80019da:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <main+0xa9c>)
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
					  HAL_UART_Transmit_IT(&huart3, (uint8_t*)telem_buf, (uint16_t)n);
 80019e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	461a      	mov	r2, r3
 80019e6:	491e      	ldr	r1, [pc, #120]	@ (8001a60 <main+0xaa8>)
 80019e8:	481e      	ldr	r0, [pc, #120]	@ (8001a64 <main+0xaac>)
 80019ea:	f003 ffd5 	bl	8005998 <HAL_UART_Transmit_IT>
				  }
				  telem_cnt = 0;
 80019ee:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <main+0xa94>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	801a      	strh	r2, [r3, #0]
		while(Sampling)
 80019f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <main+0xab0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f47f ab3b 	bne.w	8001074 <main+0xbc>
 80019fe:	e7f9      	b.n	80019f4 <main+0xa3c>
 8001a00:	20000120 	.word	0x20000120
 8001a04:	20000614 	.word	0x20000614
 8001a08:	20000618 	.word	0x20000618
 8001a0c:	20000180 	.word	0x20000180
 8001a10:	200005c4 	.word	0x200005c4
 8001a14:	200005bc 	.word	0x200005bc
 8001a18:	20000600 	.word	0x20000600
 8001a1c:	2000060c 	.word	0x2000060c
 8001a20:	20000610 	.word	0x20000610
 8001a24:	20000604 	.word	0x20000604
 8001a28:	20000608 	.word	0x20000608
 8001a2c:	200005d8 	.word	0x200005d8
 8001a30:	200001a0 	.word	0x200001a0
 8001a34:	200001a4 	.word	0x200001a4
 8001a38:	200001a8 	.word	0x200001a8
 8001a3c:	200001ac 	.word	0x200001ac
 8001a40:	200005cc 	.word	0x200005cc
 8001a44:	2000047c 	.word	0x2000047c
 8001a48:	200005fc 	.word	0x200005fc
 8001a4c:	200006b8 	.word	0x200006b8
 8001a50:	200001b0 	.word	0x200001b0
 8001a54:	20000634 	.word	0x20000634
 8001a58:	200006bc 	.word	0x200006bc
 8001a5c:	0800c9f0 	.word	0x0800c9f0
 8001a60:	20000638 	.word	0x20000638
 8001a64:	20000554 	.word	0x20000554
 8001a68:	2000059c 	.word	0x2000059c

08001a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b094      	sub	sp, #80	@ 0x50
 8001a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	2234      	movs	r2, #52	@ 0x34
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f005 fc2b 	bl	80072d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a80:	f107 0308 	add.w	r3, r7, #8
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	4b2a      	ldr	r3, [pc, #168]	@ (8001b40 <SystemClock_Config+0xd4>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	4a29      	ldr	r2, [pc, #164]	@ (8001b40 <SystemClock_Config+0xd4>)
 8001a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa0:	4b27      	ldr	r3, [pc, #156]	@ (8001b40 <SystemClock_Config+0xd4>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001aac:	2300      	movs	r3, #0
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <SystemClock_Config+0xd8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ab8:	4a22      	ldr	r2, [pc, #136]	@ (8001b44 <SystemClock_Config+0xd8>)
 8001aba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <SystemClock_Config+0xd8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001acc:	2302      	movs	r3, #2
 8001ace:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ad4:	2310      	movs	r3, #16
 8001ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001adc:	2300      	movs	r3, #0
 8001ade:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ae4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ae8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001aea:	2304      	movs	r3, #4
 8001aec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aee:	2302      	movs	r3, #2
 8001af0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001af2:	2302      	movs	r3, #2
 8001af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 faea 	bl	80040d4 <HAL_RCC_OscConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001b06:	f000 fcc9 	bl	800249c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0a:	230f      	movs	r3, #15
 8001b0c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b20:	f107 0308 	add.w	r3, r7, #8
 8001b24:	2102      	movs	r1, #2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f001 ff8a 	bl	8003a40 <HAL_RCC_ClockConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001b32:	f000 fcb3 	bl	800249c <Error_Handler>
  }
}
 8001b36:	bf00      	nop
 8001b38:	3750      	adds	r7, #80	@ 0x50
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40007000 	.word	0x40007000

08001b48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08c      	sub	sp, #48	@ 0x30
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	2224      	movs	r2, #36	@ 0x24
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f005 fbbd 	bl	80072d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b64:	4b21      	ldr	r3, [pc, #132]	@ (8001bec <MX_TIM2_Init+0xa4>)
 8001b66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bec <MX_TIM2_Init+0xa4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b72:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <MX_TIM2_Init+0xa4>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b78:	4b1c      	ldr	r3, [pc, #112]	@ (8001bec <MX_TIM2_Init+0xa4>)
 8001b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b80:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <MX_TIM2_Init+0xa4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b86:	4b19      	ldr	r3, [pc, #100]	@ (8001bec <MX_TIM2_Init+0xa4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b94:	2301      	movs	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480d      	ldr	r0, [pc, #52]	@ (8001bec <MX_TIM2_Init+0xa4>)
 8001bb8:	f002 ff0c 	bl	80049d4 <HAL_TIM_Encoder_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001bc2:	f000 fc6b 	bl	800249c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4806      	ldr	r0, [pc, #24]	@ (8001bec <MX_TIM2_Init+0xa4>)
 8001bd4:	f003 fe00 	bl	80057d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001bde:	f000 fc5d 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	3730      	adds	r7, #48	@ 0x30
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200003a4 	.word	0x200003a4

08001bf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08e      	sub	sp, #56	@ 0x38
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c04:	f107 0320 	add.w	r3, r7, #32
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
 8001c1c:	615a      	str	r2, [r3, #20]
 8001c1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c20:	4b32      	ldr	r3, [pc, #200]	@ (8001cec <MX_TIM3_Init+0xfc>)
 8001c22:	4a33      	ldr	r2, [pc, #204]	@ (8001cf0 <MX_TIM3_Init+0x100>)
 8001c24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8001c26:	4b31      	ldr	r3, [pc, #196]	@ (8001cec <MX_TIM3_Init+0xfc>)
 8001c28:	2203      	movs	r2, #3
 8001c2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cec <MX_TIM3_Init+0xfc>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001c32:	4b2e      	ldr	r3, [pc, #184]	@ (8001cec <MX_TIM3_Init+0xfc>)
 8001c34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cec <MX_TIM3_Init+0xfc>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c40:	4b2a      	ldr	r3, [pc, #168]	@ (8001cec <MX_TIM3_Init+0xfc>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c46:	4829      	ldr	r0, [pc, #164]	@ (8001cec <MX_TIM3_Init+0xfc>)
 8001c48:	f002 fce2 	bl	8004610 <HAL_TIM_Base_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001c52:	f000 fc23 	bl	800249c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c60:	4619      	mov	r1, r3
 8001c62:	4822      	ldr	r0, [pc, #136]	@ (8001cec <MX_TIM3_Init+0xfc>)
 8001c64:	f003 f9bc 	bl	8004fe0 <HAL_TIM_ConfigClockSource>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001c6e:	f000 fc15 	bl	800249c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c72:	481e      	ldr	r0, [pc, #120]	@ (8001cec <MX_TIM3_Init+0xfc>)
 8001c74:	f002 fd8c 	bl	8004790 <HAL_TIM_PWM_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c7e:	f000 fc0d 	bl	800249c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c8a:	f107 0320 	add.w	r3, r7, #32
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4816      	ldr	r0, [pc, #88]	@ (8001cec <MX_TIM3_Init+0xfc>)
 8001c92:	f003 fda1 	bl	80057d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c9c:	f000 fbfe 	bl	800249c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca0:	2360      	movs	r3, #96	@ 0x60
 8001ca2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480d      	ldr	r0, [pc, #52]	@ (8001cec <MX_TIM3_Init+0xfc>)
 8001cb8:	f003 f8d0 	bl	8004e5c <HAL_TIM_PWM_ConfigChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001cc2:	f000 fbeb 	bl	800249c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2204      	movs	r2, #4
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4807      	ldr	r0, [pc, #28]	@ (8001cec <MX_TIM3_Init+0xfc>)
 8001cce:	f003 f8c5 	bl	8004e5c <HAL_TIM_PWM_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001cd8:	f000 fbe0 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cdc:	4803      	ldr	r0, [pc, #12]	@ (8001cec <MX_TIM3_Init+0xfc>)
 8001cde:	f001 f895 	bl	8002e0c <HAL_TIM_MspPostInit>

}
 8001ce2:	bf00      	nop
 8001ce4:	3738      	adds	r7, #56	@ 0x38
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200003ec 	.word	0x200003ec
 8001cf0:	40000400 	.word	0x40000400

08001cf4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	@ 0x30
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	2224      	movs	r2, #36	@ 0x24
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f005 fae7 	bl	80072d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d10:	4b20      	ldr	r3, [pc, #128]	@ (8001d94 <MX_TIM4_Init+0xa0>)
 8001d12:	4a21      	ldr	r2, [pc, #132]	@ (8001d98 <MX_TIM4_Init+0xa4>)
 8001d14:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d16:	4b1f      	ldr	r3, [pc, #124]	@ (8001d94 <MX_TIM4_Init+0xa0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d94 <MX_TIM4_Init+0xa0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d22:	4b1c      	ldr	r3, [pc, #112]	@ (8001d94 <MX_TIM4_Init+0xa0>)
 8001d24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d28:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <MX_TIM4_Init+0xa0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d30:	4b18      	ldr	r3, [pc, #96]	@ (8001d94 <MX_TIM4_Init+0xa0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d36:	2303      	movs	r3, #3
 8001d38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <MX_TIM4_Init+0xa0>)
 8001d62:	f002 fe37 	bl	80049d4 <HAL_TIM_Encoder_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001d6c:	f000 fb96 	bl	800249c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4805      	ldr	r0, [pc, #20]	@ (8001d94 <MX_TIM4_Init+0xa0>)
 8001d7e:	f003 fd2b 	bl	80057d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001d88:	f000 fb88 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	3730      	adds	r7, #48	@ 0x30
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000434 	.word	0x20000434
 8001d98:	40000800 	.word	0x40000800

08001d9c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08e      	sub	sp, #56	@ 0x38
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db0:	f107 0320 	add.w	r3, r7, #32
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
 8001dc8:	615a      	str	r2, [r3, #20]
 8001dca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dcc:	4b32      	ldr	r3, [pc, #200]	@ (8001e98 <MX_TIM5_Init+0xfc>)
 8001dce:	4a33      	ldr	r2, [pc, #204]	@ (8001e9c <MX_TIM5_Init+0x100>)
 8001dd0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4-1;
 8001dd2:	4b31      	ldr	r3, [pc, #196]	@ (8001e98 <MX_TIM5_Init+0xfc>)
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e98 <MX_TIM5_Init+0xfc>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001dde:	4b2e      	ldr	r3, [pc, #184]	@ (8001e98 <MX_TIM5_Init+0xfc>)
 8001de0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001de4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e98 <MX_TIM5_Init+0xfc>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dec:	4b2a      	ldr	r3, [pc, #168]	@ (8001e98 <MX_TIM5_Init+0xfc>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001df2:	4829      	ldr	r0, [pc, #164]	@ (8001e98 <MX_TIM5_Init+0xfc>)
 8001df4:	f002 fc0c 	bl	8004610 <HAL_TIM_Base_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001dfe:	f000 fb4d 	bl	800249c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e06:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4822      	ldr	r0, [pc, #136]	@ (8001e98 <MX_TIM5_Init+0xfc>)
 8001e10:	f003 f8e6 	bl	8004fe0 <HAL_TIM_ConfigClockSource>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001e1a:	f000 fb3f 	bl	800249c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e1e:	481e      	ldr	r0, [pc, #120]	@ (8001e98 <MX_TIM5_Init+0xfc>)
 8001e20:	f002 fcb6 	bl	8004790 <HAL_TIM_PWM_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001e2a:	f000 fb37 	bl	800249c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e36:	f107 0320 	add.w	r3, r7, #32
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4816      	ldr	r0, [pc, #88]	@ (8001e98 <MX_TIM5_Init+0xfc>)
 8001e3e:	f003 fccb 	bl	80057d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001e48:	f000 fb28 	bl	800249c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e4c:	2360      	movs	r3, #96	@ 0x60
 8001e4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2200      	movs	r2, #0
 8001e60:	4619      	mov	r1, r3
 8001e62:	480d      	ldr	r0, [pc, #52]	@ (8001e98 <MX_TIM5_Init+0xfc>)
 8001e64:	f002 fffa 	bl	8004e5c <HAL_TIM_PWM_ConfigChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001e6e:	f000 fb15 	bl	800249c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	2204      	movs	r2, #4
 8001e76:	4619      	mov	r1, r3
 8001e78:	4807      	ldr	r0, [pc, #28]	@ (8001e98 <MX_TIM5_Init+0xfc>)
 8001e7a:	f002 ffef 	bl	8004e5c <HAL_TIM_PWM_ConfigChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8001e84:	f000 fb0a 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e88:	4803      	ldr	r0, [pc, #12]	@ (8001e98 <MX_TIM5_Init+0xfc>)
 8001e8a:	f000 ffbf 	bl	8002e0c <HAL_TIM_MspPostInit>

}
 8001e8e:	bf00      	nop
 8001e90:	3738      	adds	r7, #56	@ 0x38
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000047c 	.word	0x2000047c
 8001e9c:	40000c00 	.word	0x40000c00

08001ea0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <MX_TIM14_Init+0x40>)
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee4 <MX_TIM14_Init+0x44>)
 8001ea8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <MX_TIM14_Init+0x40>)
 8001eac:	f240 3247 	movw	r2, #839	@ 0x347
 8001eb0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <MX_TIM14_Init+0x40>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 8001eb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <MX_TIM14_Init+0x40>)
 8001eba:	2263      	movs	r2, #99	@ 0x63
 8001ebc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <MX_TIM14_Init+0x40>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <MX_TIM14_Init+0x40>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001eca:	4805      	ldr	r0, [pc, #20]	@ (8001ee0 <MX_TIM14_Init+0x40>)
 8001ecc:	f002 fba0 	bl	8004610 <HAL_TIM_Base_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001ed6:	f000 fae1 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200004c4 	.word	0x200004c4
 8001ee4:	40002000 	.word	0x40002000

08001ee8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001eec:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <MX_USART2_UART_Init+0x4c>)
 8001eee:	4a12      	ldr	r2, [pc, #72]	@ (8001f38 <MX_USART2_UART_Init+0x50>)
 8001ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ef2:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <MX_USART2_UART_Init+0x4c>)
 8001ef4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <MX_USART2_UART_Init+0x4c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <MX_USART2_UART_Init+0x4c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f06:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <MX_USART2_UART_Init+0x4c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f0c:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <MX_USART2_UART_Init+0x4c>)
 8001f0e:	220c      	movs	r2, #12
 8001f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f12:	4b08      	ldr	r3, [pc, #32]	@ (8001f34 <MX_USART2_UART_Init+0x4c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f18:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <MX_USART2_UART_Init+0x4c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f1e:	4805      	ldr	r0, [pc, #20]	@ (8001f34 <MX_USART2_UART_Init+0x4c>)
 8001f20:	f003 fcea 	bl	80058f8 <HAL_UART_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f2a:	f000 fab7 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2000050c 	.word	0x2000050c
 8001f38:	40004400 	.word	0x40004400

08001f3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f40:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	@ (8001f8c <MX_USART3_UART_Init+0x50>)
 8001f44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001f46:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f48:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f60:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f62:	220c      	movs	r2, #12
 8001f64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f66:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f72:	4805      	ldr	r0, [pc, #20]	@ (8001f88 <MX_USART3_UART_Init+0x4c>)
 8001f74:	f003 fcc0 	bl	80058f8 <HAL_UART_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f7e:	f000 fa8d 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000554 	.word	0x20000554
 8001f8c:	40004800 	.word	0x40004800

08001f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	@ 0x28
 8001f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
 8001fa4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	4b38      	ldr	r3, [pc, #224]	@ (800208c <MX_GPIO_Init+0xfc>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	4a37      	ldr	r2, [pc, #220]	@ (800208c <MX_GPIO_Init+0xfc>)
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb6:	4b35      	ldr	r3, [pc, #212]	@ (800208c <MX_GPIO_Init+0xfc>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b31      	ldr	r3, [pc, #196]	@ (800208c <MX_GPIO_Init+0xfc>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	4a30      	ldr	r2, [pc, #192]	@ (800208c <MX_GPIO_Init+0xfc>)
 8001fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd2:	4b2e      	ldr	r3, [pc, #184]	@ (800208c <MX_GPIO_Init+0xfc>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800208c <MX_GPIO_Init+0xfc>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	4a29      	ldr	r2, [pc, #164]	@ (800208c <MX_GPIO_Init+0xfc>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fee:	4b27      	ldr	r3, [pc, #156]	@ (800208c <MX_GPIO_Init+0xfc>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	4b23      	ldr	r3, [pc, #140]	@ (800208c <MX_GPIO_Init+0xfc>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	4a22      	ldr	r2, [pc, #136]	@ (800208c <MX_GPIO_Init+0xfc>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	6313      	str	r3, [r2, #48]	@ 0x30
 800200a:	4b20      	ldr	r3, [pc, #128]	@ (800208c <MX_GPIO_Init+0xfc>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	2102      	movs	r1, #2
 800201a:	481d      	ldr	r0, [pc, #116]	@ (8002090 <MX_GPIO_Init+0x100>)
 800201c:	f001 fcf6 	bl	8003a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8002020:	2200      	movs	r2, #0
 8002022:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002026:	481b      	ldr	r0, [pc, #108]	@ (8002094 <MX_GPIO_Init+0x104>)
 8002028:	f001 fcf0 	bl	8003a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800202c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002032:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	4619      	mov	r1, r3
 8002042:	4813      	ldr	r0, [pc, #76]	@ (8002090 <MX_GPIO_Init+0x100>)
 8002044:	f001 fb4e 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002048:	2302      	movs	r3, #2
 800204a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800204c:	2301      	movs	r3, #1
 800204e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4619      	mov	r1, r3
 800205e:	480c      	ldr	r0, [pc, #48]	@ (8002090 <MX_GPIO_Init+0x100>)
 8002060:	f001 fb40 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8002064:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8002068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206a:	2301      	movs	r3, #1
 800206c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	4619      	mov	r1, r3
 800207c:	4805      	ldr	r0, [pc, #20]	@ (8002094 <MX_GPIO_Init+0x104>)
 800207e:	f001 fb31 	bl	80036e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002082:	bf00      	nop
 8002084:	3728      	adds	r7, #40	@ 0x28
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	40020800 	.word	0x40020800
 8002094:	40020000 	.word	0x40020000

08002098 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a27      	ldr	r2, [pc, #156]	@ (8002140 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d141      	bne.n	800212c <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		Sampling = 1;
 80020a8:	4b26      	ldr	r3, [pc, #152]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
		if(T_esp <= ESPERA)
 80020ae:	4b26      	ldr	r3, [pc, #152]	@ (8002148 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80020b0:	edd3 7a00 	vldr	s15, [r3]
 80020b4:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800214c <HAL_TIM_PeriodElapsedCallback+0xb4>
 80020b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c0:	d809      	bhi.n	80020d6 <HAL_TIM_PeriodElapsedCallback+0x3e>
		{
			T_esp += 1;
 80020c2:	4b21      	ldr	r3, [pc, #132]	@ (8002148 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80020c4:	edd3 7a00 	vldr	s15, [r3]
 80020c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002148 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80020d2:	edc3 7a00 	vstr	s15, [r3]
		}
		if(t <= 8){
 80020d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80020e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e8:	d813      	bhi.n	8002112 <HAL_TIM_PeriodElapsedCallback+0x7a>
			t += 0.001;
 80020ea:	4b19      	ldr	r3, [pc, #100]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fa4a 	bl	8000588 <__aeabi_f2d>
 80020f4:	a310      	add	r3, pc, #64	@ (adr r3, 8002138 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80020f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fa:	f7fe f8e7 	bl	80002cc <__adddf3>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f7fe fd6f 	bl	8000be8 <__aeabi_d2f>
 800210a:	4603      	mov	r3, r0
 800210c:	4a10      	ldr	r2, [pc, #64]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800210e:	6013      	str	r3, [r2, #0]
				t = 0;
				coor += 1;
			}
		}
	}
}
 8002110:	e00c      	b.n	800212c <HAL_TIM_PeriodElapsedCallback+0x94>
			if(coor<3){
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b02      	cmp	r3, #2
 8002118:	dc08      	bgt.n	800212c <HAL_TIM_PeriodElapsedCallback+0x94>
				t = 0;
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
				coor += 1;
 8002122:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800212a:	6013      	str	r3, [r2, #0]
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	f3af 8000 	nop.w
 8002138:	d2f1a9fc 	.word	0xd2f1a9fc
 800213c:	3f50624d 	.word	0x3f50624d
 8002140:	200004c4 	.word	0x200004c4
 8002144:	2000059c 	.word	0x2000059c
 8002148:	20000628 	.word	0x20000628
 800214c:	466a6000 	.word	0x466a6000
 8002150:	2000062c 	.word	0x2000062c
 8002154:	20000630 	.word	0x20000630

08002158 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a05      	ldr	r2, [pc, #20]	@ (800217c <HAL_UART_TxCpltCallback+0x24>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d102      	bne.n	8002170 <HAL_UART_TxCpltCallback+0x18>
        uart3_busy = 0; // liberar para el siguiente envío
 800216a:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <HAL_UART_TxCpltCallback+0x28>)
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
    }
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	40004800 	.word	0x40004800
 8002180:	20000634 	.word	0x20000634

08002184 <HAL_TIM_IC_CaptureCallback>:
//}



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
   if(htim == &htim2) // Encoder B
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a2b      	ldr	r2, [pc, #172]	@ (800223c <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d124      	bne.n	80021de <HAL_TIM_IC_CaptureCallback+0x5a>
    {
        static uint16_t lastB = 0;
        uint16_t nowB = __HAL_TIM_GET_COUNTER(htim);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219a:	81fb      	strh	r3, [r7, #14]
        int16_t deltaB = (int16_t)(nowB - lastB);
 800219c:	4b28      	ldr	r3, [pc, #160]	@ (8002240 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	89fa      	ldrh	r2, [r7, #14]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	81bb      	strh	r3, [r7, #12]
        Bcount_total += deltaB;
 80021a8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80021ac:	4b25      	ldr	r3, [pc, #148]	@ (8002244 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a24      	ldr	r2, [pc, #144]	@ (8002244 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80021b4:	6013      	str	r3, [r2, #0]
        lastB = nowB;
 80021b6:	4a22      	ldr	r2, [pc, #136]	@ (8002240 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80021b8:	89fb      	ldrh	r3, [r7, #14]
 80021ba:	8013      	strh	r3, [r2, #0]

        Bangle = 2.0f * 3.1416f * Bcount_total / 383.6f;
 80021bc:	4b21      	ldr	r3, [pc, #132]	@ (8002244 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	ee07 3a90 	vmov	s15, r3
 80021c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002248 <HAL_TIM_IC_CaptureCallback+0xc4>
 80021cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021d0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800224c <HAL_TIM_IC_CaptureCallback+0xc8>
 80021d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002250 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80021da:	edc3 7a00 	vstr	s15, [r3]
    }

    if(htim == &htim4) // Encoder A
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002254 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d124      	bne.n	8002230 <HAL_TIM_IC_CaptureCallback+0xac>
    {
        static uint16_t lastA = 0;
        uint16_t nowA = __HAL_TIM_GET_COUNTER(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	817b      	strh	r3, [r7, #10]
        int16_t deltaA = (int16_t)(nowA - lastA);
 80021ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	897a      	ldrh	r2, [r7, #10]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	813b      	strh	r3, [r7, #8]
        Acount_total += deltaA;
 80021fa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80021fe:	4b17      	ldr	r3, [pc, #92]	@ (800225c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a15      	ldr	r2, [pc, #84]	@ (800225c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002206:	6013      	str	r3, [r2, #0]
        lastA = nowA;
 8002208:	4a13      	ldr	r2, [pc, #76]	@ (8002258 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800220a:	897b      	ldrh	r3, [r7, #10]
 800220c:	8013      	strh	r3, [r2, #0]

        Aangle = (-2.0f * 3.1416f * Acount_total) / 383.6f;
 800220e:	4b13      	ldr	r3, [pc, #76]	@ (800225c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002260 <HAL_TIM_IC_CaptureCallback+0xdc>
 800221e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002222:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800224c <HAL_TIM_IC_CaptureCallback+0xc8>
 8002226:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800222a:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800222c:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	200003a4 	.word	0x200003a4
 8002240:	2000072c 	.word	0x2000072c
 8002244:	20000620 	.word	0x20000620
 8002248:	40c90ff9 	.word	0x40c90ff9
 800224c:	43bfcccd 	.word	0x43bfcccd
 8002250:	200005a4 	.word	0x200005a4
 8002254:	20000434 	.word	0x20000434
 8002258:	2000072e 	.word	0x2000072e
 800225c:	2000061c 	.word	0x2000061c
 8002260:	c0c90ff9 	.word	0xc0c90ff9
 8002264:	200005a0 	.word	0x200005a0

08002268 <control>:

static void control(float u, TIM_HandleTypeDef *htim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002272:	6038      	str	r0, [r7, #0]
	if(htim == &htim3)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4a53      	ldr	r2, [pc, #332]	@ (80023c4 <control+0x15c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d14c      	bne.n	8002316 <control+0xae>
	{
		if(u >= 999){
 800227c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002280:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80023c8 <control+0x160>
 8002284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228c:	db05      	blt.n	800229a <control+0x32>
			Forward(999, &htim3);
 800228e:	484d      	ldr	r0, [pc, #308]	@ (80023c4 <control+0x15c>)
 8002290:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 80023c8 <control+0x160>
 8002294:	f000 f89e 	bl	80023d4 <Forward>
 8002298:	e03d      	b.n	8002316 <control+0xae>
		}else if(u <= -999){
 800229a:	edd7 7a01 	vldr	s15, [r7, #4]
 800229e:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80023cc <control+0x164>
 80022a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022aa:	d805      	bhi.n	80022b8 <control+0x50>
			Backward(999, &htim3);
 80022ac:	4845      	ldr	r0, [pc, #276]	@ (80023c4 <control+0x15c>)
 80022ae:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 80023c8 <control+0x160>
 80022b2:	f000 f8c1 	bl	8002438 <Backward>
 80022b6:	e02e      	b.n	8002316 <control+0xae>
		}else if(u>=0 && u<999){
 80022b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80022bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c4:	db0e      	blt.n	80022e4 <control+0x7c>
 80022c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80022ca:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80023c8 <control+0x160>
 80022ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d6:	d505      	bpl.n	80022e4 <control+0x7c>
			Forward(u, &htim3);
 80022d8:	483a      	ldr	r0, [pc, #232]	@ (80023c4 <control+0x15c>)
 80022da:	ed97 0a01 	vldr	s0, [r7, #4]
 80022de:	f000 f879 	bl	80023d4 <Forward>
 80022e2:	e018      	b.n	8002316 <control+0xae>
		}else if(u>-999 && u<0){
 80022e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80022e8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80023cc <control+0x164>
 80022ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f4:	dd0f      	ble.n	8002316 <control+0xae>
 80022f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80022fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002302:	d508      	bpl.n	8002316 <control+0xae>
			Backward(-u, &htim3);
 8002304:	edd7 7a01 	vldr	s15, [r7, #4]
 8002308:	eef1 7a67 	vneg.f32	s15, s15
 800230c:	482d      	ldr	r0, [pc, #180]	@ (80023c4 <control+0x15c>)
 800230e:	eeb0 0a67 	vmov.f32	s0, s15
 8002312:	f000 f891 	bl	8002438 <Backward>
		}
	}
	if(htim == &htim5)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	4a2d      	ldr	r2, [pc, #180]	@ (80023d0 <control+0x168>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d14e      	bne.n	80023bc <control+0x154>
	{
		if(u >= 999){
 800231e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002322:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80023c8 <control+0x160>
 8002326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800232a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232e:	db05      	blt.n	800233c <control+0xd4>
			Forward(999, &htim5);
 8002330:	4827      	ldr	r0, [pc, #156]	@ (80023d0 <control+0x168>)
 8002332:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80023c8 <control+0x160>
 8002336:	f000 f84d 	bl	80023d4 <Forward>
			Forward(u, &htim5);
		}else if(u>-999 && u<0){
			Backward(-u, &htim5);
		}
	}
}
 800233a:	e03f      	b.n	80023bc <control+0x154>
		}else if(u <= -999){
 800233c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002340:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80023cc <control+0x164>
 8002344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234c:	d805      	bhi.n	800235a <control+0xf2>
			Backward(999, &htim5);
 800234e:	4820      	ldr	r0, [pc, #128]	@ (80023d0 <control+0x168>)
 8002350:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 80023c8 <control+0x160>
 8002354:	f000 f870 	bl	8002438 <Backward>
}
 8002358:	e030      	b.n	80023bc <control+0x154>
		}else if(u>=0 && u<999){
 800235a:	edd7 7a01 	vldr	s15, [r7, #4]
 800235e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002366:	db0e      	blt.n	8002386 <control+0x11e>
 8002368:	edd7 7a01 	vldr	s15, [r7, #4]
 800236c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80023c8 <control+0x160>
 8002370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002378:	d505      	bpl.n	8002386 <control+0x11e>
			Forward(u, &htim5);
 800237a:	4815      	ldr	r0, [pc, #84]	@ (80023d0 <control+0x168>)
 800237c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002380:	f000 f828 	bl	80023d4 <Forward>
}
 8002384:	e01a      	b.n	80023bc <control+0x154>
		}else if(u>-999 && u<0){
 8002386:	edd7 7a01 	vldr	s15, [r7, #4]
 800238a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80023cc <control+0x164>
 800238e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002396:	dc00      	bgt.n	800239a <control+0x132>
}
 8002398:	e010      	b.n	80023bc <control+0x154>
		}else if(u>-999 && u<0){
 800239a:	edd7 7a01 	vldr	s15, [r7, #4]
 800239e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a6:	d400      	bmi.n	80023aa <control+0x142>
}
 80023a8:	e008      	b.n	80023bc <control+0x154>
			Backward(-u, &htim5);
 80023aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80023ae:	eef1 7a67 	vneg.f32	s15, s15
 80023b2:	4807      	ldr	r0, [pc, #28]	@ (80023d0 <control+0x168>)
 80023b4:	eeb0 0a67 	vmov.f32	s0, s15
 80023b8:	f000 f83e 	bl	8002438 <Backward>
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200003ec 	.word	0x200003ec
 80023c8:	4479c000 	.word	0x4479c000
 80023cc:	c479c000 	.word	0xc479c000
 80023d0:	2000047c 	.word	0x2000047c

080023d4 <Forward>:

static void Forward(float Duty, TIM_HandleTypeDef *htim)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	ed87 0a01 	vstr	s0, [r7, #4]
 80023de:	6038      	str	r0, [r7, #0]
	if(htim == &htim3)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4a13      	ldr	r2, [pc, #76]	@ (8002430 <Forward+0x5c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d10c      	bne.n	8002402 <Forward+0x2e>
	{
		htim3.Instance->CCR2 = 0;
 80023e8:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <Forward+0x5c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2200      	movs	r2, #0
 80023ee:	639a      	str	r2, [r3, #56]	@ 0x38
		htim3.Instance->CCR1 = Duty;		//Motor A
 80023f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002430 <Forward+0x5c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023fc:	ee17 2a90 	vmov	r2, s15
 8002400:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	if(htim == &htim5)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	4a0b      	ldr	r2, [pc, #44]	@ (8002434 <Forward+0x60>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d10c      	bne.n	8002424 <Forward+0x50>
	{
		htim5.Instance->CCR1 = 0;
 800240a:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <Forward+0x60>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2200      	movs	r2, #0
 8002410:	635a      	str	r2, [r3, #52]	@ 0x34
		htim5.Instance->CCR2 = Duty;		//Motor B
 8002412:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <Forward+0x60>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	edd7 7a01 	vldr	s15, [r7, #4]
 800241a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800241e:	ee17 2a90 	vmov	r2, s15
 8002422:	639a      	str	r2, [r3, #56]	@ 0x38
	}
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	200003ec 	.word	0x200003ec
 8002434:	2000047c 	.word	0x2000047c

08002438 <Backward>:

static void Backward(float Duty, TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002442:	6038      	str	r0, [r7, #0]
	if(htim == &htim3)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4a13      	ldr	r2, [pc, #76]	@ (8002494 <Backward+0x5c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d10c      	bne.n	8002466 <Backward+0x2e>
	{
		htim3.Instance->CCR1 = 0;
 800244c:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <Backward+0x5c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2200      	movs	r2, #0
 8002452:	635a      	str	r2, [r3, #52]	@ 0x34
		htim3.Instance->CCR2 = Duty;
 8002454:	4b0f      	ldr	r3, [pc, #60]	@ (8002494 <Backward+0x5c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	edd7 7a01 	vldr	s15, [r7, #4]
 800245c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002460:	ee17 2a90 	vmov	r2, s15
 8002464:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	if(htim == &htim5)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	4a0b      	ldr	r2, [pc, #44]	@ (8002498 <Backward+0x60>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d10c      	bne.n	8002488 <Backward+0x50>
	{
		htim5.Instance->CCR2 = 0;
 800246e:	4b0a      	ldr	r3, [pc, #40]	@ (8002498 <Backward+0x60>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2200      	movs	r2, #0
 8002474:	639a      	str	r2, [r3, #56]	@ 0x38
		htim5.Instance->CCR1 = Duty;
 8002476:	4b08      	ldr	r3, [pc, #32]	@ (8002498 <Backward+0x60>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	edd7 7a01 	vldr	s15, [r7, #4]
 800247e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002482:	ee17 2a90 	vmov	r2, s15
 8002486:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	200003ec 	.word	0x200003ec
 8002498:	2000047c 	.word	0x2000047c

0800249c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a0:	b672      	cpsid	i
}
 80024a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <Error_Handler+0x8>

080024a8 <RobotKinematics_Init>:
#include "robot_kinematics.h"

void RobotKinematics_Init(RobotKinematics *robot, float wheel_radius, float wheel_base)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80024b4:	edc7 0a01 	vstr	s1, [r7, #4]
    // Inicializa todos los campos a 0
    robot->left.angle = 0.0f;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
    robot->left.distance = 0.0f;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	605a      	str	r2, [r3, #4]
    robot->left.velocity = 0.0f;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]

    robot->right.angle = 0.0f;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	60da      	str	r2, [r3, #12]
    robot->right.distance = 0.0f;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
    robot->right.velocity = 0.0f;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	615a      	str	r2, [r3, #20]

    robot->center_distance = 0.0f;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
    robot->center_velocity = 0.0f;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	61da      	str	r2, [r3, #28]

    robot->theta = 0.0f;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	621a      	str	r2, [r3, #32]
    robot->theta_prev = 0.0f;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	625a      	str	r2, [r3, #36]	@ 0x24

    robot->x = 0.0f;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	629a      	str	r2, [r3, #40]	@ 0x28
    robot->y = 0.0f;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	62da      	str	r2, [r3, #44]	@ 0x2c
    robot->x_prev = 0.0f;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30
    robot->y_prev = 0.0f;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	635a      	str	r2, [r3, #52]	@ 0x34

    robot->theta_L = 0.0f;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	639a      	str	r2, [r3, #56]	@ 0x38
    robot->theta_R = 0.0f;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Inicializa parámetros físicos
    robot->wheel_radius = wheel_radius;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	641a      	str	r2, [r3, #64]	@ 0x40
    robot->wheel_base = wheel_base;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	645a      	str	r2, [r3, #68]	@ 0x44


    //Velocidades
    robot->Wc = 0.0f;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	649a      	str	r2, [r3, #72]	@ 0x48
    robot->Wc_e = 0.0f;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	669a      	str	r2, [r3, #104]	@ 0x68
    robot->Wc_ek_1 = 0.0f;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	66da      	str	r2, [r3, #108]	@ 0x6c
	robot->Wc_k_1 = 0.0f;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	665a      	str	r2, [r3, #100]	@ 0x64

    robot-> Vc = 0.0f;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	64da      	str	r2, [r3, #76]	@ 0x4c
    robot-> W_L_d = 0.0f;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	651a      	str	r2, [r3, #80]	@ 0x50
    robot-> W_R_d = 0.0f;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	655a      	str	r2, [r3, #84]	@ 0x54

    robot->Vc_ek_1 = 0.0f;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	661a      	str	r2, [r3, #96]	@ 0x60
    robot->Vc_k_1 = 0.0f;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <RobotKinematics_Update>:

void RobotKinematics_Update(RobotKinematics *robot, float LAngle, float RAngle, float dt)
{
 8002598:	b5b0      	push	{r4, r5, r7, lr}
 800259a:	ed2d 8b02 	vpush	{d8}
 800259e:	b08a      	sub	sp, #40	@ 0x28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80025a8:	edc7 0a01 	vstr	s1, [r7, #4]
 80025ac:	ed87 1a00 	vstr	s2, [r7]
    // Guardar estados anteriores
    robot->x_prev = robot->x;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	631a      	str	r2, [r3, #48]	@ 0x30
    robot->y_prev = robot->y;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	635a      	str	r2, [r3, #52]	@ 0x34
    robot->theta_prev = robot->theta;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a1a      	ldr	r2, [r3, #32]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	625a      	str	r2, [r3, #36]	@ 0x24

    // Δθ de ruedas
    float dThetaL = LAngle - robot->theta_L;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80025ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80025d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float dThetaR = RAngle - robot->theta_R;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80025e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80025e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e8:	edc7 7a08 	vstr	s15, [r7, #32]

    // Actualizar ángulos
    robot->theta_L = LAngle;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	639a      	str	r2, [r3, #56]	@ 0x38
    robot->theta_R = RAngle;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Distancias por rueda
    float dSL = dThetaL * robot->wheel_radius;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80025fe:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002606:	edc7 7a07 	vstr	s15, [r7, #28]
    float dSR = dThetaR * robot->wheel_radius;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002610:	ed97 7a08 	vldr	s14, [r7, #32]
 8002614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002618:	edc7 7a06 	vstr	s15, [r7, #24]

    float dCenter = 0.5f * (dSL + dSR);
 800261c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002620:	edd7 7a06 	vldr	s15, [r7, #24]
 8002624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002628:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800262c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002630:	edc7 7a05 	vstr	s15, [r7, #20]
    float dTheta = (dSR - dSL) / robot->wheel_base;
 8002634:	ed97 7a06 	vldr	s14, [r7, #24]
 8002638:	edd7 7a07 	vldr	s15, [r7, #28]
 800263c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8002646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800264a:	edc7 7a04 	vstr	s15, [r7, #16]

    // Actualización de orientación
//    robot->theta = robot->theta_prev + dTheta;
    robot->theta = atan2(sinf(robot->theta_prev + dTheta),cosf(robot->theta_prev + dTheta));
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002654:	edd7 7a04 	vldr	s15, [r7, #16]
 8002658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265c:	eeb0 0a67 	vmov.f32	s0, s15
 8002660:	f007 f8ea 	bl	8009838 <sinf>
 8002664:	ee10 3a10 	vmov	r3, s0
 8002668:	4618      	mov	r0, r3
 800266a:	f7fd ff8d 	bl	8000588 <__aeabi_f2d>
 800266e:	4604      	mov	r4, r0
 8002670:	460d      	mov	r5, r1
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002678:	edd7 7a04 	vldr	s15, [r7, #16]
 800267c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002680:	eeb0 0a67 	vmov.f32	s0, s15
 8002684:	f007 f894 	bl	80097b0 <cosf>
 8002688:	ee10 3a10 	vmov	r3, s0
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd ff7b 	bl	8000588 <__aeabi_f2d>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	ec43 2b11 	vmov	d1, r2, r3
 800269a:	ec45 4b10 	vmov	d0, r4, r5
 800269e:	f006 fee7 	bl	8009470 <atan2>
 80026a2:	ec53 2b10 	vmov	r2, r3, d0
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f7fe fa9d 	bl	8000be8 <__aeabi_d2f>
 80026ae:	4602      	mov	r2, r0
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	621a      	str	r2, [r3, #32]

    // Usar theta previa para calcular nueva posición
    robot->x = robot->x_prev + dCenter * cosf(robot->theta_prev);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80026c0:	eeb0 0a67 	vmov.f32	s0, s15
 80026c4:	f007 f874 	bl	80097b0 <cosf>
 80026c8:	eeb0 7a40 	vmov.f32	s14, s0
 80026cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80026d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    robot->y = robot->y_prev + dCenter * sinf(robot->theta_prev);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	ed93 8a0d 	vldr	s16, [r3, #52]	@ 0x34
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80026ea:	eeb0 0a67 	vmov.f32	s0, s15
 80026ee:	f007 f8a3 	bl	8009838 <sinf>
 80026f2:	eeb0 7a40 	vmov.f32	s14, s0
 80026f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80026fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fe:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Velocidades
    robot->left.velocity = dSL / dt;
 8002708:	edd7 6a07 	vldr	s13, [r7, #28]
 800270c:	ed97 7a00 	vldr	s14, [r7]
 8002710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	edc3 7a02 	vstr	s15, [r3, #8]
    robot->right.velocity = dSR / dt;
 800271a:	edd7 6a06 	vldr	s13, [r7, #24]
 800271e:	ed97 7a00 	vldr	s14, [r7]
 8002722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	edc3 7a05 	vstr	s15, [r3, #20]
    robot->center_velocity = dCenter / dt;
 800272c:	edd7 6a05 	vldr	s13, [r7, #20]
 8002730:	ed97 7a00 	vldr	s14, [r7]
 8002734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	edc3 7a07 	vstr	s15, [r3, #28]

    // Acumulados
    robot->left.distance += dSL;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	ed93 7a01 	vldr	s14, [r3, #4]
 8002744:	edd7 7a07 	vldr	s15, [r7, #28]
 8002748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	edc3 7a01 	vstr	s15, [r3, #4]
    robot->right.distance += dSR;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	ed93 7a04 	vldr	s14, [r3, #16]
 8002758:	edd7 7a06 	vldr	s15, [r7, #24]
 800275c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	edc3 7a04 	vstr	s15, [r3, #16]
    robot->center_distance += dCenter;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	ed93 7a06 	vldr	s14, [r3, #24]
 800276c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800277a:	bf00      	nop
 800277c:	3728      	adds	r7, #40	@ 0x28
 800277e:	46bd      	mov	sp, r7
 8002780:	ecbd 8b02 	vpop	{d8}
 8002784:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002788 <W_Control_Law>:


float W_Control_Law(RobotKinematics *robot, float Xd, float Yd){
 8002788:	b5b0      	push	{r4, r5, r7, lr}
 800278a:	ed2d 8b02 	vpush	{d8}
 800278e:	b08c      	sub	sp, #48	@ 0x30
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	ed87 0a02 	vstr	s0, [r7, #8]
 8002798:	edc7 0a01 	vstr	s1, [r7, #4]

	float phi_d = atan2((Yd-robot->y),(Xd-robot->x));
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80027a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80027a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027aa:	ee17 0a90 	vmov	r0, s15
 80027ae:	f7fd feeb 	bl	8000588 <__aeabi_f2d>
 80027b2:	4604      	mov	r4, r0
 80027b4:	460d      	mov	r5, r1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80027bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80027c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c4:	ee17 0a90 	vmov	r0, s15
 80027c8:	f7fd fede 	bl	8000588 <__aeabi_f2d>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	ec43 2b11 	vmov	d1, r2, r3
 80027d4:	ec45 4b10 	vmov	d0, r4, r5
 80027d8:	f006 fe4a 	bl	8009470 <atan2>
 80027dc:	ec53 2b10 	vmov	r2, r3, d0
 80027e0:	4610      	mov	r0, r2
 80027e2:	4619      	mov	r1, r3
 80027e4:	f7fe fa00 	bl	8000be8 <__aeabi_d2f>
 80027e8:	4603      	mov	r3, r0
 80027ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	float e_aux = phi_d - robot->theta;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	edd3 7a08 	vldr	s15, [r3, #32]
 80027f2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80027f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float e_k = atan2(sin(e_aux), cos(e_aux));
 80027fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002800:	f7fd fec2 	bl	8000588 <__aeabi_f2d>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	ec43 2b10 	vmov	d0, r2, r3
 800280c:	f006 ff24 	bl	8009658 <sin>
 8002810:	eeb0 8a40 	vmov.f32	s16, s0
 8002814:	eef0 8a60 	vmov.f32	s17, s1
 8002818:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800281a:	f7fd feb5 	bl	8000588 <__aeabi_f2d>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	ec43 2b10 	vmov	d0, r2, r3
 8002826:	f006 fec3 	bl	80095b0 <cos>
 800282a:	eeb0 7a40 	vmov.f32	s14, s0
 800282e:	eef0 7a60 	vmov.f32	s15, s1
 8002832:	eeb0 1a47 	vmov.f32	s2, s14
 8002836:	eef0 1a67 	vmov.f32	s3, s15
 800283a:	eeb0 0a48 	vmov.f32	s0, s16
 800283e:	eef0 0a68 	vmov.f32	s1, s17
 8002842:	f006 fe15 	bl	8009470 <atan2>
 8002846:	ec53 2b10 	vmov	r2, r3, d0
 800284a:	4610      	mov	r0, r2
 800284c:	4619      	mov	r1, r3
 800284e:	f7fe f9cb 	bl	8000be8 <__aeabi_d2f>
 8002852:	4603      	mov	r3, r0
 8002854:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float min_e = 0.15;
 8002856:	4b48      	ldr	r3, [pc, #288]	@ (8002978 <W_Control_Law+0x1f0>)
 8002858:	623b      	str	r3, [r7, #32]
	//float Kp = 0.499, Ki = 0.001, T = 0.001;
	float Kp = 0.3, Ki = 0.001, T = 0.001;
 800285a:	4b48      	ldr	r3, [pc, #288]	@ (800297c <W_Control_Law+0x1f4>)
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	4b48      	ldr	r3, [pc, #288]	@ (8002980 <W_Control_Law+0x1f8>)
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	4b47      	ldr	r3, [pc, #284]	@ (8002980 <W_Control_Law+0x1f8>)
 8002864:	617b      	str	r3, [r7, #20]

	if(sqrt(pow(e_k,2)) <= min_e || robot->Vc == 0 ){
 8002866:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002868:	f7fd fe8e 	bl	8000588 <__aeabi_f2d>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	ed9f 1b3f 	vldr	d1, [pc, #252]	@ 8002970 <W_Control_Law+0x1e8>
 8002874:	ec43 2b10 	vmov	d0, r2, r3
 8002878:	f006 fdfc 	bl	8009474 <pow>
 800287c:	eeb0 7a40 	vmov.f32	s14, s0
 8002880:	eef0 7a60 	vmov.f32	s15, s1
 8002884:	eeb0 0a47 	vmov.f32	s0, s14
 8002888:	eef0 0a67 	vmov.f32	s1, s15
 800288c:	f006 fe62 	bl	8009554 <sqrt>
 8002890:	ec55 4b10 	vmov	r4, r5, d0
 8002894:	6a38      	ldr	r0, [r7, #32]
 8002896:	f7fd fe77 	bl	8000588 <__aeabi_f2d>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4620      	mov	r0, r4
 80028a0:	4629      	mov	r1, r5
 80028a2:	f7fe f945 	bl	8000b30 <__aeabi_dcmple>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d107      	bne.n	80028bc <W_Control_Law+0x134>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80028b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ba:	d107      	bne.n	80028cc <W_Control_Law+0x144>
		robot->Wc = 0;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	649a      	str	r2, [r3, #72]	@ 0x48
//		robot->Wc_e = 0;
//		robot->Wc_ek_1 = 0;
//		robot->Wc_k_1 = 0;
		e_k = 0;
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028ca:	e046      	b.n	800295a <W_Control_Law+0x1d2>
	}else{

//	robot->Wc = Kp*e_k;
	robot->Wc_e = e_k;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028d0:	669a      	str	r2, [r3, #104]	@ 0x68
	robot->Wc = (2*robot->Wc_k_1 + 2*Kp*robot->Wc_e - 2*Kp*robot->Wc_ek_1 + T*Ki*robot->Wc_e + T*Ki*robot->Wc_ek_1)/2;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80028d8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80028dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80028e0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 80028ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80028f6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8002900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002904:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002908:	edd7 6a05 	vldr	s13, [r7, #20]
 800290c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002910:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800291a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800291e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002922:	edd7 6a05 	vldr	s13, [r7, #20]
 8002926:	edd7 7a06 	vldr	s15, [r7, #24]
 800292a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8002934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800293c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002940:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

	robot->Wc_ek_1 = robot->Wc_e;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	66da      	str	r2, [r3, #108]	@ 0x6c
	robot->Wc_k_1 = robot->Wc;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	665a      	str	r2, [r3, #100]	@ 0x64
	}

	return e_k;
 800295a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800295c:	ee07 3a90 	vmov	s15, r3
}
 8002960:	eeb0 0a67 	vmov.f32	s0, s15
 8002964:	3730      	adds	r7, #48	@ 0x30
 8002966:	46bd      	mov	sp, r7
 8002968:	ecbd 8b02 	vpop	{d8}
 800296c:	bdb0      	pop	{r4, r5, r7, pc}
 800296e:	bf00      	nop
 8002970:	00000000 	.word	0x00000000
 8002974:	40000000 	.word	0x40000000
 8002978:	3e19999a 	.word	0x3e19999a
 800297c:	3e99999a 	.word	0x3e99999a
 8002980:	3a83126f 	.word	0x3a83126f
 8002984:	00000000 	.word	0x00000000

08002988 <VL_Control_Law>:

void VL_Control_Law(RobotKinematics *robot, float Xd, float Yd){
 8002988:	b5b0      	push	{r4, r5, r7, lr}
 800298a:	b08c      	sub	sp, #48	@ 0x30
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	ed87 0a02 	vstr	s0, [r7, #8]
 8002994:	edc7 0a01 	vstr	s1, [r7, #4]

	double d = sqrt(pow((Yd-robot->y), 2) + pow((Xd-robot->x),2));
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800299e:	ed97 7a01 	vldr	s14, [r7, #4]
 80029a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a6:	ee17 0a90 	vmov	r0, s15
 80029aa:	f7fd fded 	bl	8000588 <__aeabi_f2d>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	ed9f 1b55 	vldr	d1, [pc, #340]	@ 8002b08 <VL_Control_Law+0x180>
 80029b6:	ec43 2b10 	vmov	d0, r2, r3
 80029ba:	f006 fd5b 	bl	8009474 <pow>
 80029be:	ec55 4b10 	vmov	r4, r5, d0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80029c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80029cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d0:	ee17 0a90 	vmov	r0, s15
 80029d4:	f7fd fdd8 	bl	8000588 <__aeabi_f2d>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	ed9f 1b4a 	vldr	d1, [pc, #296]	@ 8002b08 <VL_Control_Law+0x180>
 80029e0:	ec43 2b10 	vmov	d0, r2, r3
 80029e4:	f006 fd46 	bl	8009474 <pow>
 80029e8:	ec53 2b10 	vmov	r2, r3, d0
 80029ec:	4620      	mov	r0, r4
 80029ee:	4629      	mov	r1, r5
 80029f0:	f7fd fc6c 	bl	80002cc <__adddf3>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	ec43 2b17 	vmov	d7, r2, r3
 80029fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002a00:	eef0 0a67 	vmov.f32	s1, s15
 8002a04:	f006 fda6 	bl	8009554 <sqrt>
 8002a08:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	float min_e = 0.01;
 8002a0c:	4b40      	ldr	r3, [pc, #256]	@ (8002b10 <VL_Control_Law+0x188>)
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
	float alpha_p = 0.1;
 8002a10:	4b40      	ldr	r3, [pc, #256]	@ (8002b14 <VL_Control_Law+0x18c>)
 8002a12:	623b      	str	r3, [r7, #32]
	//float Kp = 0.065, Ki = 0.0028, T = 0.001;
	float Kp = 0.065, Ki = 0.0028, T = 0.001;
 8002a14:	4b40      	ldr	r3, [pc, #256]	@ (8002b18 <VL_Control_Law+0x190>)
 8002a16:	61fb      	str	r3, [r7, #28]
 8002a18:	4b40      	ldr	r3, [pc, #256]	@ (8002b1c <VL_Control_Law+0x194>)
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	4b40      	ldr	r3, [pc, #256]	@ (8002b20 <VL_Control_Law+0x198>)
 8002a1e:	617b      	str	r3, [r7, #20]
	//robot->Vc = alpha_p*d;

	if(d <= min_e ){
 8002a20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a22:	f7fd fdb1 	bl	8000588 <__aeabi_f2d>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a2e:	f7fe f87f 	bl	8000b30 <__aeabi_dcmple>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d015      	beq.n	8002a64 <VL_Control_Law+0xdc>
		robot->Vc = 0;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	64da      	str	r2, [r3, #76]	@ 0x4c
		robot->Vc_e = 0;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	65da      	str	r2, [r3, #92]	@ 0x5c
		robot->Vc_ek_1 = 0;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	661a      	str	r2, [r3, #96]	@ 0x60
		robot->Vc_k_1 = 0;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	659a      	str	r2, [r3, #88]	@ 0x58
		d=0;
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	}

	robot->Vc_e = d;
 8002a64:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a68:	f7fe f8be 	bl	8000be8 <__aeabi_d2f>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	65da      	str	r2, [r3, #92]	@ 0x5c
	robot->Vc = (2*robot->Vc_k_1 + 2*Kp*robot->Vc_e - 2*Kp*robot->Vc_ek_1 + T*Ki*robot->Vc_e + T*Ki*robot->Vc_ek_1)/2;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002a78:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a80:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8002a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a92:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a96:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8002aa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002aa8:	edd7 6a05 	vldr	s13, [r7, #20]
 8002aac:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ab0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8002aba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002abe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac2:	edd7 6a05 	vldr	s13, [r7, #20]
 8002ac6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002aca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8002ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002adc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002ae0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	//robot->Vc = robot->Vc_k_1 + 0.001*robot->Vc_e - 0.00099*robot->Vc_ek_1;

	robot->Vc_ek_1 = robot->Vc_e;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	661a      	str	r2, [r3, #96]	@ 0x60
	robot->Vc_k_1 = robot->Vc;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	659a      	str	r2, [r3, #88]	@ 0x58


}
 8002afa:	bf00      	nop
 8002afc:	3730      	adds	r7, #48	@ 0x30
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bdb0      	pop	{r4, r5, r7, pc}
 8002b02:	bf00      	nop
 8002b04:	f3af 8000 	nop.w
 8002b08:	00000000 	.word	0x00000000
 8002b0c:	40000000 	.word	0x40000000
 8002b10:	3c23d70a 	.word	0x3c23d70a
 8002b14:	3dcccccd 	.word	0x3dcccccd
 8002b18:	3d851eb8 	.word	0x3d851eb8
 8002b1c:	3b378034 	.word	0x3b378034
 8002b20:	3a83126f 	.word	0x3a83126f

08002b24 <Angular_Vel>:

void Angular_Vel(RobotKinematics *robot){ // Reconsiderar el hecho de pasarlas como argumento o que sea parámetros de la instancia
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

	//Considerar lo de retornar o atributo
	robot-> W_L_d = ( 2*robot->Vc - robot->wheel_base*robot->Wc)/(2*robot->wheel_radius);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002b32:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b46:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002b50:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	robot-> W_R_d = ( 2*robot->Vc + robot->wheel_base*robot->Wc)/(2*robot->wheel_radius);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002b64:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b78:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002b82:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002baa:	4a0f      	ldr	r2, [pc, #60]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	603b      	str	r3, [r7, #0]
 8002bc2:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	4a08      	ldr	r2, [pc, #32]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bce:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002bda:	2007      	movs	r0, #7
 8002bdc:	f000 fcae 	bl	800353c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40023800 	.word	0x40023800

08002bec <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08c      	sub	sp, #48	@ 0x30
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 031c 	add.w	r3, r7, #28
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c0c:	d154      	bne.n	8002cb8 <HAL_TIM_Encoder_MspInit+0xcc>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	4b48      	ldr	r3, [pc, #288]	@ (8002d34 <HAL_TIM_Encoder_MspInit+0x148>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	4a47      	ldr	r2, [pc, #284]	@ (8002d34 <HAL_TIM_Encoder_MspInit+0x148>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c1e:	4b45      	ldr	r3, [pc, #276]	@ (8002d34 <HAL_TIM_Encoder_MspInit+0x148>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	61bb      	str	r3, [r7, #24]
 8002c28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	4b41      	ldr	r3, [pc, #260]	@ (8002d34 <HAL_TIM_Encoder_MspInit+0x148>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	4a40      	ldr	r2, [pc, #256]	@ (8002d34 <HAL_TIM_Encoder_MspInit+0x148>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d34 <HAL_TIM_Encoder_MspInit+0x148>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d34 <HAL_TIM_Encoder_MspInit+0x148>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	4a39      	ldr	r2, [pc, #228]	@ (8002d34 <HAL_TIM_Encoder_MspInit+0x148>)
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c56:	4b37      	ldr	r3, [pc, #220]	@ (8002d34 <HAL_TIM_Encoder_MspInit+0x148>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	2300      	movs	r3, #0
 8002c72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c74:	2301      	movs	r3, #1
 8002c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c78:	f107 031c 	add.w	r3, r7, #28
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	482e      	ldr	r0, [pc, #184]	@ (8002d38 <HAL_TIM_Encoder_MspInit+0x14c>)
 8002c80:	f000 fd30 	bl	80036e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c92:	2300      	movs	r3, #0
 8002c94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c96:	2301      	movs	r3, #1
 8002c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c9a:	f107 031c 	add.w	r3, r7, #28
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4826      	ldr	r0, [pc, #152]	@ (8002d3c <HAL_TIM_Encoder_MspInit+0x150>)
 8002ca2:	f000 fd1f 	bl	80036e4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2100      	movs	r1, #0
 8002caa:	201c      	movs	r0, #28
 8002cac:	f000 fc51 	bl	8003552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002cb0:	201c      	movs	r0, #28
 8002cb2:	f000 fc6a 	bl	800358a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002cb6:	e038      	b.n	8002d2a <HAL_TIM_Encoder_MspInit+0x13e>
  else if(htim_encoder->Instance==TIM4)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a20      	ldr	r2, [pc, #128]	@ (8002d40 <HAL_TIM_Encoder_MspInit+0x154>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d133      	bne.n	8002d2a <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d34 <HAL_TIM_Encoder_MspInit+0x148>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	4a1a      	ldr	r2, [pc, #104]	@ (8002d34 <HAL_TIM_Encoder_MspInit+0x148>)
 8002ccc:	f043 0304 	orr.w	r3, r3, #4
 8002cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd2:	4b18      	ldr	r3, [pc, #96]	@ (8002d34 <HAL_TIM_Encoder_MspInit+0x148>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	4b14      	ldr	r3, [pc, #80]	@ (8002d34 <HAL_TIM_Encoder_MspInit+0x148>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	4a13      	ldr	r2, [pc, #76]	@ (8002d34 <HAL_TIM_Encoder_MspInit+0x148>)
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cee:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <HAL_TIM_Encoder_MspInit+0x148>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cfa:	23c0      	movs	r3, #192	@ 0xc0
 8002cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d06:	2300      	movs	r3, #0
 8002d08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0e:	f107 031c 	add.w	r3, r7, #28
 8002d12:	4619      	mov	r1, r3
 8002d14:	4809      	ldr	r0, [pc, #36]	@ (8002d3c <HAL_TIM_Encoder_MspInit+0x150>)
 8002d16:	f000 fce5 	bl	80036e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	201e      	movs	r0, #30
 8002d20:	f000 fc17 	bl	8003552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d24:	201e      	movs	r0, #30
 8002d26:	f000 fc30 	bl	800358a <HAL_NVIC_EnableIRQ>
}
 8002d2a:	bf00      	nop
 8002d2c:	3730      	adds	r7, #48	@ 0x30
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40020000 	.word	0x40020000
 8002d3c:	40020400 	.word	0x40020400
 8002d40:	40000800 	.word	0x40000800

08002d44 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a2a      	ldr	r2, [pc, #168]	@ (8002dfc <HAL_TIM_Base_MspInit+0xb8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d116      	bne.n	8002d84 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	4b29      	ldr	r3, [pc, #164]	@ (8002e00 <HAL_TIM_Base_MspInit+0xbc>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	4a28      	ldr	r2, [pc, #160]	@ (8002e00 <HAL_TIM_Base_MspInit+0xbc>)
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d66:	4b26      	ldr	r3, [pc, #152]	@ (8002e00 <HAL_TIM_Base_MspInit+0xbc>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2100      	movs	r1, #0
 8002d76:	201d      	movs	r0, #29
 8002d78:	f000 fbeb 	bl	8003552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d7c:	201d      	movs	r0, #29
 8002d7e:	f000 fc04 	bl	800358a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002d82:	e036      	b.n	8002df2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1e      	ldr	r2, [pc, #120]	@ (8002e04 <HAL_TIM_Base_MspInit+0xc0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d116      	bne.n	8002dbc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	4b1b      	ldr	r3, [pc, #108]	@ (8002e00 <HAL_TIM_Base_MspInit+0xbc>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	4a1a      	ldr	r2, [pc, #104]	@ (8002e00 <HAL_TIM_Base_MspInit+0xbc>)
 8002d98:	f043 0308 	orr.w	r3, r3, #8
 8002d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d9e:	4b18      	ldr	r3, [pc, #96]	@ (8002e00 <HAL_TIM_Base_MspInit+0xbc>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	2032      	movs	r0, #50	@ 0x32
 8002db0:	f000 fbcf 	bl	8003552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002db4:	2032      	movs	r0, #50	@ 0x32
 8002db6:	f000 fbe8 	bl	800358a <HAL_NVIC_EnableIRQ>
}
 8002dba:	e01a      	b.n	8002df2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM14)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a11      	ldr	r2, [pc, #68]	@ (8002e08 <HAL_TIM_Base_MspInit+0xc4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d115      	bne.n	8002df2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4b0d      	ldr	r3, [pc, #52]	@ (8002e00 <HAL_TIM_Base_MspInit+0xbc>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	4a0c      	ldr	r2, [pc, #48]	@ (8002e00 <HAL_TIM_Base_MspInit+0xbc>)
 8002dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e00 <HAL_TIM_Base_MspInit+0xbc>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2100      	movs	r1, #0
 8002de6:	202d      	movs	r0, #45	@ 0x2d
 8002de8:	f000 fbb3 	bl	8003552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002dec:	202d      	movs	r0, #45	@ 0x2d
 8002dee:	f000 fbcc 	bl	800358a <HAL_NVIC_EnableIRQ>
}
 8002df2:	bf00      	nop
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40000c00 	.word	0x40000c00
 8002e08:	40002000 	.word	0x40002000

08002e0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	@ 0x28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	f107 0314 	add.w	r3, r7, #20
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a24      	ldr	r2, [pc, #144]	@ (8002ebc <HAL_TIM_MspPostInit+0xb0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d11e      	bne.n	8002e6c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	4b23      	ldr	r3, [pc, #140]	@ (8002ec0 <HAL_TIM_MspPostInit+0xb4>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	4a22      	ldr	r2, [pc, #136]	@ (8002ec0 <HAL_TIM_MspPostInit+0xb4>)
 8002e38:	f043 0302 	orr.w	r3, r3, #2
 8002e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e3e:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <HAL_TIM_MspPostInit+0xb4>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002e4a:	2330      	movs	r3, #48	@ 0x30
 8002e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	2300      	movs	r3, #0
 8002e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e5e:	f107 0314 	add.w	r3, r7, #20
 8002e62:	4619      	mov	r1, r3
 8002e64:	4817      	ldr	r0, [pc, #92]	@ (8002ec4 <HAL_TIM_MspPostInit+0xb8>)
 8002e66:	f000 fc3d 	bl	80036e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002e6a:	e022      	b.n	8002eb2 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a15      	ldr	r2, [pc, #84]	@ (8002ec8 <HAL_TIM_MspPostInit+0xbc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d11d      	bne.n	8002eb2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <HAL_TIM_MspPostInit+0xb4>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7e:	4a10      	ldr	r2, [pc, #64]	@ (8002ec0 <HAL_TIM_MspPostInit+0xb4>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <HAL_TIM_MspPostInit+0xb4>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e92:	2303      	movs	r3, #3
 8002e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea6:	f107 0314 	add.w	r3, r7, #20
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4807      	ldr	r0, [pc, #28]	@ (8002ecc <HAL_TIM_MspPostInit+0xc0>)
 8002eae:	f000 fc19 	bl	80036e4 <HAL_GPIO_Init>
}
 8002eb2:	bf00      	nop
 8002eb4:	3728      	adds	r7, #40	@ 0x28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40000400 	.word	0x40000400
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40020400 	.word	0x40020400
 8002ec8:	40000c00 	.word	0x40000c00
 8002ecc:	40020000 	.word	0x40020000

08002ed0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08c      	sub	sp, #48	@ 0x30
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	f107 031c 	add.w	r3, r7, #28
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a36      	ldr	r2, [pc, #216]	@ (8002fc8 <HAL_UART_MspInit+0xf8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d12c      	bne.n	8002f4c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	4b35      	ldr	r3, [pc, #212]	@ (8002fcc <HAL_UART_MspInit+0xfc>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	4a34      	ldr	r2, [pc, #208]	@ (8002fcc <HAL_UART_MspInit+0xfc>)
 8002efc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f02:	4b32      	ldr	r3, [pc, #200]	@ (8002fcc <HAL_UART_MspInit+0xfc>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0a:	61bb      	str	r3, [r7, #24]
 8002f0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	4b2e      	ldr	r3, [pc, #184]	@ (8002fcc <HAL_UART_MspInit+0xfc>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	4a2d      	ldr	r2, [pc, #180]	@ (8002fcc <HAL_UART_MspInit+0xfc>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002fcc <HAL_UART_MspInit+0xfc>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f2a:	230c      	movs	r3, #12
 8002f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f36:	2303      	movs	r3, #3
 8002f38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f3a:	2307      	movs	r3, #7
 8002f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3e:	f107 031c 	add.w	r3, r7, #28
 8002f42:	4619      	mov	r1, r3
 8002f44:	4822      	ldr	r0, [pc, #136]	@ (8002fd0 <HAL_UART_MspInit+0x100>)
 8002f46:	f000 fbcd 	bl	80036e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f4a:	e039      	b.n	8002fc0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a20      	ldr	r2, [pc, #128]	@ (8002fd4 <HAL_UART_MspInit+0x104>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d134      	bne.n	8002fc0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fcc <HAL_UART_MspInit+0xfc>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8002fcc <HAL_UART_MspInit+0xfc>)
 8002f60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f66:	4b19      	ldr	r3, [pc, #100]	@ (8002fcc <HAL_UART_MspInit+0xfc>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	4b15      	ldr	r3, [pc, #84]	@ (8002fcc <HAL_UART_MspInit+0xfc>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	4a14      	ldr	r2, [pc, #80]	@ (8002fcc <HAL_UART_MspInit+0xfc>)
 8002f7c:	f043 0304 	orr.w	r3, r3, #4
 8002f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f82:	4b12      	ldr	r3, [pc, #72]	@ (8002fcc <HAL_UART_MspInit+0xfc>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f8e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f94:	2302      	movs	r3, #2
 8002f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fa0:	2307      	movs	r3, #7
 8002fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fa4:	f107 031c 	add.w	r3, r7, #28
 8002fa8:	4619      	mov	r1, r3
 8002faa:	480b      	ldr	r0, [pc, #44]	@ (8002fd8 <HAL_UART_MspInit+0x108>)
 8002fac:	f000 fb9a 	bl	80036e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	2027      	movs	r0, #39	@ 0x27
 8002fb6:	f000 facc 	bl	8003552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002fba:	2027      	movs	r0, #39	@ 0x27
 8002fbc:	f000 fae5 	bl	800358a <HAL_NVIC_EnableIRQ>
}
 8002fc0:	bf00      	nop
 8002fc2:	3730      	adds	r7, #48	@ 0x30
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40004400 	.word	0x40004400
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40020000 	.word	0x40020000
 8002fd4:	40004800 	.word	0x40004800
 8002fd8:	40020800 	.word	0x40020800

08002fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fe0:	bf00      	nop
 8002fe2:	e7fd      	b.n	8002fe0 <NMI_Handler+0x4>

08002fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fe8:	bf00      	nop
 8002fea:	e7fd      	b.n	8002fe8 <HardFault_Handler+0x4>

08002fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <MemManage_Handler+0x4>

08002ff4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ff8:	bf00      	nop
 8002ffa:	e7fd      	b.n	8002ff8 <BusFault_Handler+0x4>

08002ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003000:	bf00      	nop
 8003002:	e7fd      	b.n	8003000 <UsageFault_Handler+0x4>

08003004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003012:	b480      	push	{r7}
 8003014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003016:	bf00      	nop
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003032:	f000 f993 	bl	800335c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003040:	4802      	ldr	r0, [pc, #8]	@ (800304c <TIM2_IRQHandler+0x10>)
 8003042:	f001 fe1b 	bl	8004c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	200003a4 	.word	0x200003a4

08003050 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003054:	4802      	ldr	r0, [pc, #8]	@ (8003060 <TIM3_IRQHandler+0x10>)
 8003056:	f001 fe11 	bl	8004c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	200003ec 	.word	0x200003ec

08003064 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003068:	4802      	ldr	r0, [pc, #8]	@ (8003074 <TIM4_IRQHandler+0x10>)
 800306a:	f001 fe07 	bl	8004c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000434 	.word	0x20000434

08003078 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800307c:	4802      	ldr	r0, [pc, #8]	@ (8003088 <USART3_IRQHandler+0x10>)
 800307e:	f002 fcc1 	bl	8005a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000554 	.word	0x20000554

0800308c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003090:	4802      	ldr	r0, [pc, #8]	@ (800309c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003092:	f001 fdf3 	bl	8004c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	200004c4 	.word	0x200004c4

080030a0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80030a4:	4802      	ldr	r0, [pc, #8]	@ (80030b0 <TIM5_IRQHandler+0x10>)
 80030a6:	f001 fde9 	bl	8004c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	2000047c 	.word	0x2000047c

080030b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
	return 1;
 80030b8:	2301      	movs	r3, #1
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <_kill>:

int _kill(int pid, int sig)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030ce:	f004 f955 	bl	800737c <__errno>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2216      	movs	r2, #22
 80030d6:	601a      	str	r2, [r3, #0]
	return -1;
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <_exit>:

void _exit (int status)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030ec:	f04f 31ff 	mov.w	r1, #4294967295
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff ffe7 	bl	80030c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80030f6:	bf00      	nop
 80030f8:	e7fd      	b.n	80030f6 <_exit+0x12>

080030fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b086      	sub	sp, #24
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e00a      	b.n	8003122 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800310c:	f3af 8000 	nop.w
 8003110:	4601      	mov	r1, r0
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	60ba      	str	r2, [r7, #8]
 8003118:	b2ca      	uxtb	r2, r1
 800311a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	3301      	adds	r3, #1
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	dbf0      	blt.n	800310c <_read+0x12>
	}

return len;
 800312a:	687b      	ldr	r3, [r7, #4]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	e009      	b.n	800315a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	60ba      	str	r2, [r7, #8]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	3301      	adds	r3, #1
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	429a      	cmp	r2, r3
 8003160:	dbf1      	blt.n	8003146 <_write+0x12>
	}
	return len;
 8003162:	687b      	ldr	r3, [r7, #4]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <_close>:

int _close(int file)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	return -1;
 8003174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003194:	605a      	str	r2, [r3, #4]
	return 0;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <_isatty>:

int _isatty(int file)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
	return 1;
 80031ac:	2301      	movs	r3, #1
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b085      	sub	sp, #20
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
	return 0;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031dc:	4a14      	ldr	r2, [pc, #80]	@ (8003230 <_sbrk+0x5c>)
 80031de:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <_sbrk+0x60>)
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031e8:	4b13      	ldr	r3, [pc, #76]	@ (8003238 <_sbrk+0x64>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d102      	bne.n	80031f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031f0:	4b11      	ldr	r3, [pc, #68]	@ (8003238 <_sbrk+0x64>)
 80031f2:	4a12      	ldr	r2, [pc, #72]	@ (800323c <_sbrk+0x68>)
 80031f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031f6:	4b10      	ldr	r3, [pc, #64]	@ (8003238 <_sbrk+0x64>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	429a      	cmp	r2, r3
 8003202:	d207      	bcs.n	8003214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003204:	f004 f8ba 	bl	800737c <__errno>
 8003208:	4603      	mov	r3, r0
 800320a:	220c      	movs	r2, #12
 800320c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800320e:	f04f 33ff 	mov.w	r3, #4294967295
 8003212:	e009      	b.n	8003228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003214:	4b08      	ldr	r3, [pc, #32]	@ (8003238 <_sbrk+0x64>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800321a:	4b07      	ldr	r3, [pc, #28]	@ (8003238 <_sbrk+0x64>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	4a05      	ldr	r2, [pc, #20]	@ (8003238 <_sbrk+0x64>)
 8003224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003226:	68fb      	ldr	r3, [r7, #12]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20020000 	.word	0x20020000
 8003234:	00000400 	.word	0x00000400
 8003238:	20000730 	.word	0x20000730
 800323c:	20000888 	.word	0x20000888

08003240 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003244:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <SystemInit+0x20>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324a:	4a05      	ldr	r2, [pc, #20]	@ (8003260 <SystemInit+0x20>)
 800324c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003250:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <Reset_Handler>:
 8003264:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800329c <LoopFillZerobss+0x12>
 8003268:	480d      	ldr	r0, [pc, #52]	@ (80032a0 <LoopFillZerobss+0x16>)
 800326a:	490e      	ldr	r1, [pc, #56]	@ (80032a4 <LoopFillZerobss+0x1a>)
 800326c:	4a0e      	ldr	r2, [pc, #56]	@ (80032a8 <LoopFillZerobss+0x1e>)
 800326e:	2300      	movs	r3, #0
 8003270:	e002      	b.n	8003278 <LoopCopyDataInit>

08003272 <CopyDataInit>:
 8003272:	58d4      	ldr	r4, [r2, r3]
 8003274:	50c4      	str	r4, [r0, r3]
 8003276:	3304      	adds	r3, #4

08003278 <LoopCopyDataInit>:
 8003278:	18c4      	adds	r4, r0, r3
 800327a:	428c      	cmp	r4, r1
 800327c:	d3f9      	bcc.n	8003272 <CopyDataInit>
 800327e:	4a0b      	ldr	r2, [pc, #44]	@ (80032ac <LoopFillZerobss+0x22>)
 8003280:	4c0b      	ldr	r4, [pc, #44]	@ (80032b0 <LoopFillZerobss+0x26>)
 8003282:	2300      	movs	r3, #0
 8003284:	e001      	b.n	800328a <LoopFillZerobss>

08003286 <FillZerobss>:
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	3204      	adds	r2, #4

0800328a <LoopFillZerobss>:
 800328a:	42a2      	cmp	r2, r4
 800328c:	d3fb      	bcc.n	8003286 <FillZerobss>
 800328e:	f7ff ffd7 	bl	8003240 <SystemInit>
 8003292:	f004 f879 	bl	8007388 <__libc_init_array>
 8003296:	f7fd fe8f 	bl	8000fb8 <main>
 800329a:	4770      	bx	lr
 800329c:	20020000 	.word	0x20020000
 80032a0:	20000000 	.word	0x20000000
 80032a4:	20000388 	.word	0x20000388
 80032a8:	0800d418 	.word	0x0800d418
 80032ac:	20000388 	.word	0x20000388
 80032b0:	20000884 	.word	0x20000884

080032b4 <ADC_IRQHandler>:
 80032b4:	e7fe      	b.n	80032b4 <ADC_IRQHandler>
	...

080032b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032bc:	4b0e      	ldr	r3, [pc, #56]	@ (80032f8 <HAL_Init+0x40>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0d      	ldr	r2, [pc, #52]	@ (80032f8 <HAL_Init+0x40>)
 80032c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032c8:	4b0b      	ldr	r3, [pc, #44]	@ (80032f8 <HAL_Init+0x40>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0a      	ldr	r2, [pc, #40]	@ (80032f8 <HAL_Init+0x40>)
 80032ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032d4:	4b08      	ldr	r3, [pc, #32]	@ (80032f8 <HAL_Init+0x40>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a07      	ldr	r2, [pc, #28]	@ (80032f8 <HAL_Init+0x40>)
 80032da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032e0:	2003      	movs	r0, #3
 80032e2:	f000 f92b 	bl	800353c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032e6:	2000      	movs	r0, #0
 80032e8:	f000 f808 	bl	80032fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032ec:	f7ff fc56 	bl	8002b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023c00 	.word	0x40023c00

080032fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003304:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <HAL_InitTick+0x54>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4b12      	ldr	r3, [pc, #72]	@ (8003354 <HAL_InitTick+0x58>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	4619      	mov	r1, r3
 800330e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003312:	fbb3 f3f1 	udiv	r3, r3, r1
 8003316:	fbb2 f3f3 	udiv	r3, r2, r3
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f943 	bl	80035a6 <HAL_SYSTICK_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e00e      	b.n	8003348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b0f      	cmp	r3, #15
 800332e:	d80a      	bhi.n	8003346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003330:	2200      	movs	r2, #0
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	f04f 30ff 	mov.w	r0, #4294967295
 8003338:	f000 f90b 	bl	8003552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800333c:	4a06      	ldr	r2, [pc, #24]	@ (8003358 <HAL_InitTick+0x5c>)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e000      	b.n	8003348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	200001b4 	.word	0x200001b4
 8003354:	200001bc 	.word	0x200001bc
 8003358:	200001b8 	.word	0x200001b8

0800335c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003360:	4b06      	ldr	r3, [pc, #24]	@ (800337c <HAL_IncTick+0x20>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	4b06      	ldr	r3, [pc, #24]	@ (8003380 <HAL_IncTick+0x24>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4413      	add	r3, r2
 800336c:	4a04      	ldr	r2, [pc, #16]	@ (8003380 <HAL_IncTick+0x24>)
 800336e:	6013      	str	r3, [r2, #0]
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	200001bc 	.word	0x200001bc
 8003380:	20000734 	.word	0x20000734

08003384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return uwTick;
 8003388:	4b03      	ldr	r3, [pc, #12]	@ (8003398 <HAL_GetTick+0x14>)
 800338a:	681b      	ldr	r3, [r3, #0]
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000734 	.word	0x20000734

0800339c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033ac:	4b0c      	ldr	r3, [pc, #48]	@ (80033e0 <__NVIC_SetPriorityGrouping+0x44>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033b8:	4013      	ands	r3, r2
 80033ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ce:	4a04      	ldr	r2, [pc, #16]	@ (80033e0 <__NVIC_SetPriorityGrouping+0x44>)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	60d3      	str	r3, [r2, #12]
}
 80033d4:	bf00      	nop
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e8:	4b04      	ldr	r3, [pc, #16]	@ (80033fc <__NVIC_GetPriorityGrouping+0x18>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	0a1b      	lsrs	r3, r3, #8
 80033ee:	f003 0307 	and.w	r3, r3, #7
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340e:	2b00      	cmp	r3, #0
 8003410:	db0b      	blt.n	800342a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	f003 021f 	and.w	r2, r3, #31
 8003418:	4907      	ldr	r1, [pc, #28]	@ (8003438 <__NVIC_EnableIRQ+0x38>)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	2001      	movs	r0, #1
 8003422:	fa00 f202 	lsl.w	r2, r0, r2
 8003426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	e000e100 	.word	0xe000e100

0800343c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	6039      	str	r1, [r7, #0]
 8003446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344c:	2b00      	cmp	r3, #0
 800344e:	db0a      	blt.n	8003466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	b2da      	uxtb	r2, r3
 8003454:	490c      	ldr	r1, [pc, #48]	@ (8003488 <__NVIC_SetPriority+0x4c>)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	0112      	lsls	r2, r2, #4
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	440b      	add	r3, r1
 8003460:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003464:	e00a      	b.n	800347c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	4908      	ldr	r1, [pc, #32]	@ (800348c <__NVIC_SetPriority+0x50>)
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	3b04      	subs	r3, #4
 8003474:	0112      	lsls	r2, r2, #4
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	440b      	add	r3, r1
 800347a:	761a      	strb	r2, [r3, #24]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	e000e100 	.word	0xe000e100
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003490:	b480      	push	{r7}
 8003492:	b089      	sub	sp, #36	@ 0x24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f1c3 0307 	rsb	r3, r3, #7
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	bf28      	it	cs
 80034ae:	2304      	movcs	r3, #4
 80034b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3304      	adds	r3, #4
 80034b6:	2b06      	cmp	r3, #6
 80034b8:	d902      	bls.n	80034c0 <NVIC_EncodePriority+0x30>
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	3b03      	subs	r3, #3
 80034be:	e000      	b.n	80034c2 <NVIC_EncodePriority+0x32>
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c4:	f04f 32ff 	mov.w	r2, #4294967295
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43da      	mvns	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	401a      	ands	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d8:	f04f 31ff 	mov.w	r1, #4294967295
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	43d9      	mvns	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e8:	4313      	orrs	r3, r2
         );
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3724      	adds	r7, #36	@ 0x24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3b01      	subs	r3, #1
 8003504:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003508:	d301      	bcc.n	800350e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800350a:	2301      	movs	r3, #1
 800350c:	e00f      	b.n	800352e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800350e:	4a0a      	ldr	r2, [pc, #40]	@ (8003538 <SysTick_Config+0x40>)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3b01      	subs	r3, #1
 8003514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003516:	210f      	movs	r1, #15
 8003518:	f04f 30ff 	mov.w	r0, #4294967295
 800351c:	f7ff ff8e 	bl	800343c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003520:	4b05      	ldr	r3, [pc, #20]	@ (8003538 <SysTick_Config+0x40>)
 8003522:	2200      	movs	r2, #0
 8003524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003526:	4b04      	ldr	r3, [pc, #16]	@ (8003538 <SysTick_Config+0x40>)
 8003528:	2207      	movs	r2, #7
 800352a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	e000e010 	.word	0xe000e010

0800353c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff ff29 	bl	800339c <__NVIC_SetPriorityGrouping>
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003552:	b580      	push	{r7, lr}
 8003554:	b086      	sub	sp, #24
 8003556:	af00      	add	r7, sp, #0
 8003558:	4603      	mov	r3, r0
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003564:	f7ff ff3e 	bl	80033e4 <__NVIC_GetPriorityGrouping>
 8003568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	6978      	ldr	r0, [r7, #20]
 8003570:	f7ff ff8e 	bl	8003490 <NVIC_EncodePriority>
 8003574:	4602      	mov	r2, r0
 8003576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff5d 	bl	800343c <__NVIC_SetPriority>
}
 8003582:	bf00      	nop
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	4603      	mov	r3, r0
 8003592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff ff31 	bl	8003400 <__NVIC_EnableIRQ>
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff ffa2 	bl	80034f8 <SysTick_Config>
 80035b4:	4603      	mov	r3, r0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035cc:	f7ff feda 	bl	8003384 <HAL_GetTick>
 80035d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d008      	beq.n	80035f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2280      	movs	r2, #128	@ 0x80
 80035e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e052      	b.n	8003696 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0216 	bic.w	r2, r2, #22
 80035fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800360e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003614:	2b00      	cmp	r3, #0
 8003616:	d103      	bne.n	8003620 <HAL_DMA_Abort+0x62>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0208 	bic.w	r2, r2, #8
 800362e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003640:	e013      	b.n	800366a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003642:	f7ff fe9f 	bl	8003384 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b05      	cmp	r3, #5
 800364e:	d90c      	bls.n	800366a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2203      	movs	r2, #3
 800365a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e015      	b.n	8003696 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e4      	bne.n	8003642 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367c:	223f      	movs	r2, #63	@ 0x3f
 800367e:	409a      	lsls	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d004      	beq.n	80036bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2280      	movs	r2, #128	@ 0x80
 80036b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e00c      	b.n	80036d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2205      	movs	r2, #5
 80036c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	@ 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	e165      	b.n	80039cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003700:	2201      	movs	r2, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	429a      	cmp	r2, r3
 800371a:	f040 8154 	bne.w	80039c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d005      	beq.n	8003736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003732:	2b02      	cmp	r3, #2
 8003734:	d130      	bne.n	8003798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	2203      	movs	r2, #3
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800376c:	2201      	movs	r2, #1
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 0201 	and.w	r2, r3, #1
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d017      	beq.n	80037d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d123      	bne.n	8003828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	08da      	lsrs	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3208      	adds	r2, #8
 80037e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	220f      	movs	r2, #15
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	08da      	lsrs	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3208      	adds	r2, #8
 8003822:	69b9      	ldr	r1, [r7, #24]
 8003824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2203      	movs	r2, #3
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0203 	and.w	r2, r3, #3
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80ae 	beq.w	80039c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	4b5d      	ldr	r3, [pc, #372]	@ (80039e4 <HAL_GPIO_Init+0x300>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003872:	4a5c      	ldr	r2, [pc, #368]	@ (80039e4 <HAL_GPIO_Init+0x300>)
 8003874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003878:	6453      	str	r3, [r2, #68]	@ 0x44
 800387a:	4b5a      	ldr	r3, [pc, #360]	@ (80039e4 <HAL_GPIO_Init+0x300>)
 800387c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003886:	4a58      	ldr	r2, [pc, #352]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	089b      	lsrs	r3, r3, #2
 800388c:	3302      	adds	r3, #2
 800388e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	220f      	movs	r2, #15
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a4f      	ldr	r2, [pc, #316]	@ (80039ec <HAL_GPIO_Init+0x308>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d025      	beq.n	80038fe <HAL_GPIO_Init+0x21a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a4e      	ldr	r2, [pc, #312]	@ (80039f0 <HAL_GPIO_Init+0x30c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01f      	beq.n	80038fa <HAL_GPIO_Init+0x216>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a4d      	ldr	r2, [pc, #308]	@ (80039f4 <HAL_GPIO_Init+0x310>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d019      	beq.n	80038f6 <HAL_GPIO_Init+0x212>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a4c      	ldr	r2, [pc, #304]	@ (80039f8 <HAL_GPIO_Init+0x314>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <HAL_GPIO_Init+0x20e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a4b      	ldr	r2, [pc, #300]	@ (80039fc <HAL_GPIO_Init+0x318>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00d      	beq.n	80038ee <HAL_GPIO_Init+0x20a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003a00 <HAL_GPIO_Init+0x31c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d007      	beq.n	80038ea <HAL_GPIO_Init+0x206>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a49      	ldr	r2, [pc, #292]	@ (8003a04 <HAL_GPIO_Init+0x320>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d101      	bne.n	80038e6 <HAL_GPIO_Init+0x202>
 80038e2:	2306      	movs	r3, #6
 80038e4:	e00c      	b.n	8003900 <HAL_GPIO_Init+0x21c>
 80038e6:	2307      	movs	r3, #7
 80038e8:	e00a      	b.n	8003900 <HAL_GPIO_Init+0x21c>
 80038ea:	2305      	movs	r3, #5
 80038ec:	e008      	b.n	8003900 <HAL_GPIO_Init+0x21c>
 80038ee:	2304      	movs	r3, #4
 80038f0:	e006      	b.n	8003900 <HAL_GPIO_Init+0x21c>
 80038f2:	2303      	movs	r3, #3
 80038f4:	e004      	b.n	8003900 <HAL_GPIO_Init+0x21c>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e002      	b.n	8003900 <HAL_GPIO_Init+0x21c>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_GPIO_Init+0x21c>
 80038fe:	2300      	movs	r3, #0
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	f002 0203 	and.w	r2, r2, #3
 8003906:	0092      	lsls	r2, r2, #2
 8003908:	4093      	lsls	r3, r2
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4313      	orrs	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003910:	4935      	ldr	r1, [pc, #212]	@ (80039e8 <HAL_GPIO_Init+0x304>)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	3302      	adds	r3, #2
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800391e:	4b3a      	ldr	r3, [pc, #232]	@ (8003a08 <HAL_GPIO_Init+0x324>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	43db      	mvns	r3, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4013      	ands	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003942:	4a31      	ldr	r2, [pc, #196]	@ (8003a08 <HAL_GPIO_Init+0x324>)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003948:	4b2f      	ldr	r3, [pc, #188]	@ (8003a08 <HAL_GPIO_Init+0x324>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800396c:	4a26      	ldr	r2, [pc, #152]	@ (8003a08 <HAL_GPIO_Init+0x324>)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003972:	4b25      	ldr	r3, [pc, #148]	@ (8003a08 <HAL_GPIO_Init+0x324>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	43db      	mvns	r3, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4013      	ands	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003996:	4a1c      	ldr	r2, [pc, #112]	@ (8003a08 <HAL_GPIO_Init+0x324>)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800399c:	4b1a      	ldr	r3, [pc, #104]	@ (8003a08 <HAL_GPIO_Init+0x324>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039c0:	4a11      	ldr	r2, [pc, #68]	@ (8003a08 <HAL_GPIO_Init+0x324>)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	3301      	adds	r3, #1
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	2b0f      	cmp	r3, #15
 80039d0:	f67f ae96 	bls.w	8003700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039d4:	bf00      	nop
 80039d6:	bf00      	nop
 80039d8:	3724      	adds	r7, #36	@ 0x24
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800
 80039e8:	40013800 	.word	0x40013800
 80039ec:	40020000 	.word	0x40020000
 80039f0:	40020400 	.word	0x40020400
 80039f4:	40020800 	.word	0x40020800
 80039f8:	40020c00 	.word	0x40020c00
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40021400 	.word	0x40021400
 8003a04:	40021800 	.word	0x40021800
 8003a08:	40013c00 	.word	0x40013c00

08003a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a1c:	787b      	ldrb	r3, [r7, #1]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a22:	887a      	ldrh	r2, [r7, #2]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a28:	e003      	b.n	8003a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	041a      	lsls	r2, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	619a      	str	r2, [r3, #24]
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0cc      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a54:	4b68      	ldr	r3, [pc, #416]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d90c      	bls.n	8003a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a62:	4b65      	ldr	r3, [pc, #404]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6a:	4b63      	ldr	r3, [pc, #396]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0b8      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a94:	4b59      	ldr	r3, [pc, #356]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	4a58      	ldr	r2, [pc, #352]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aac:	4b53      	ldr	r3, [pc, #332]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4a52      	ldr	r2, [pc, #328]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab8:	4b50      	ldr	r3, [pc, #320]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	494d      	ldr	r1, [pc, #308]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d044      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ade:	4b47      	ldr	r3, [pc, #284]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d119      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e07f      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d003      	beq.n	8003afe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d107      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afe:	4b3f      	ldr	r3, [pc, #252]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e06f      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e067      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b1e:	4b37      	ldr	r3, [pc, #220]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f023 0203 	bic.w	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	4934      	ldr	r1, [pc, #208]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b30:	f7ff fc28 	bl	8003384 <HAL_GetTick>
 8003b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b38:	f7ff fc24 	bl	8003384 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e04f      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 020c 	and.w	r2, r3, #12
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d1eb      	bne.n	8003b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b60:	4b25      	ldr	r3, [pc, #148]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d20c      	bcs.n	8003b88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	4b22      	ldr	r3, [pc, #136]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	4b20      	ldr	r3, [pc, #128]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e032      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b94:	4b19      	ldr	r3, [pc, #100]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4916      	ldr	r1, [pc, #88]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bb2:	4b12      	ldr	r3, [pc, #72]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	490e      	ldr	r1, [pc, #56]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bc6:	f000 f855 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	490a      	ldr	r1, [pc, #40]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd8:	5ccb      	ldrb	r3, [r1, r3]
 8003bda:	fa22 f303 	lsr.w	r3, r2, r3
 8003bde:	4a09      	ldr	r2, [pc, #36]	@ (8003c04 <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003be2:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff fb88 	bl	80032fc <HAL_InitTick>

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023c00 	.word	0x40023c00
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	0800ca04 	.word	0x0800ca04
 8003c04:	200001b4 	.word	0x200001b4
 8003c08:	200001b8 	.word	0x200001b8

08003c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c10:	4b03      	ldr	r3, [pc, #12]	@ (8003c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c12:	681b      	ldr	r3, [r3, #0]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	200001b4 	.word	0x200001b4

08003c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c28:	f7ff fff0 	bl	8003c0c <HAL_RCC_GetHCLKFreq>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	4b05      	ldr	r3, [pc, #20]	@ (8003c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	0a9b      	lsrs	r3, r3, #10
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	4903      	ldr	r1, [pc, #12]	@ (8003c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c3a:	5ccb      	ldrb	r3, [r1, r3]
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40023800 	.word	0x40023800
 8003c48:	0800ca14 	.word	0x0800ca14

08003c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c50:	f7ff ffdc 	bl	8003c0c <HAL_RCC_GetHCLKFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b05      	ldr	r3, [pc, #20]	@ (8003c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	0b5b      	lsrs	r3, r3, #13
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	4903      	ldr	r1, [pc, #12]	@ (8003c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	0800ca14 	.word	0x0800ca14

08003c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c78:	b0ae      	sub	sp, #184	@ 0xb8
 8003c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c9a:	4bcb      	ldr	r3, [pc, #812]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b0c      	cmp	r3, #12
 8003ca4:	f200 8206 	bhi.w	80040b4 <HAL_RCC_GetSysClockFreq+0x440>
 8003ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003ce5 	.word	0x08003ce5
 8003cb4:	080040b5 	.word	0x080040b5
 8003cb8:	080040b5 	.word	0x080040b5
 8003cbc:	080040b5 	.word	0x080040b5
 8003cc0:	08003ced 	.word	0x08003ced
 8003cc4:	080040b5 	.word	0x080040b5
 8003cc8:	080040b5 	.word	0x080040b5
 8003ccc:	080040b5 	.word	0x080040b5
 8003cd0:	08003cf5 	.word	0x08003cf5
 8003cd4:	080040b5 	.word	0x080040b5
 8003cd8:	080040b5 	.word	0x080040b5
 8003cdc:	080040b5 	.word	0x080040b5
 8003ce0:	08003ee5 	.word	0x08003ee5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ce4:	4bb9      	ldr	r3, [pc, #740]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x358>)
 8003ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cea:	e1e7      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cec:	4bb8      	ldr	r3, [pc, #736]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003cee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cf2:	e1e3      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cf4:	4bb4      	ldr	r3, [pc, #720]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d00:	4bb1      	ldr	r3, [pc, #708]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d071      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0c:	4bae      	ldr	r3, [pc, #696]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	099b      	lsrs	r3, r3, #6
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d18:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003d1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d32:	4622      	mov	r2, r4
 8003d34:	462b      	mov	r3, r5
 8003d36:	f04f 0000 	mov.w	r0, #0
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	0159      	lsls	r1, r3, #5
 8003d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d44:	0150      	lsls	r0, r2, #5
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	1a51      	subs	r1, r2, r1
 8003d4e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003d50:	4629      	mov	r1, r5
 8003d52:	eb63 0301 	sbc.w	r3, r3, r1
 8003d56:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003d64:	4649      	mov	r1, r9
 8003d66:	018b      	lsls	r3, r1, #6
 8003d68:	4641      	mov	r1, r8
 8003d6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d6e:	4641      	mov	r1, r8
 8003d70:	018a      	lsls	r2, r1, #6
 8003d72:	4641      	mov	r1, r8
 8003d74:	1a51      	subs	r1, r2, r1
 8003d76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d78:	4649      	mov	r1, r9
 8003d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	00cb      	lsls	r3, r1, #3
 8003d90:	4641      	mov	r1, r8
 8003d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d96:	4641      	mov	r1, r8
 8003d98:	00ca      	lsls	r2, r1, #3
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4622      	mov	r2, r4
 8003da2:	189b      	adds	r3, r3, r2
 8003da4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003da6:	462b      	mov	r3, r5
 8003da8:	460a      	mov	r2, r1
 8003daa:	eb42 0303 	adc.w	r3, r2, r3
 8003dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	024b      	lsls	r3, r1, #9
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	024a      	lsls	r2, r1, #9
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003dd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ddc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003de0:	f7fc ff52 	bl	8000c88 <__aeabi_uldivmod>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4613      	mov	r3, r2
 8003dea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dee:	e067      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df0:	4b75      	ldr	r3, [pc, #468]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	099b      	lsrs	r3, r3, #6
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003dfc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e0e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003e12:	4622      	mov	r2, r4
 8003e14:	462b      	mov	r3, r5
 8003e16:	f04f 0000 	mov.w	r0, #0
 8003e1a:	f04f 0100 	mov.w	r1, #0
 8003e1e:	0159      	lsls	r1, r3, #5
 8003e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e24:	0150      	lsls	r0, r2, #5
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	1a51      	subs	r1, r2, r1
 8003e2e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e30:	4629      	mov	r1, r5
 8003e32:	eb63 0301 	sbc.w	r3, r3, r1
 8003e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003e44:	4649      	mov	r1, r9
 8003e46:	018b      	lsls	r3, r1, #6
 8003e48:	4641      	mov	r1, r8
 8003e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e4e:	4641      	mov	r1, r8
 8003e50:	018a      	lsls	r2, r1, #6
 8003e52:	4641      	mov	r1, r8
 8003e54:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e58:	4649      	mov	r1, r9
 8003e5a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e6a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e72:	4692      	mov	sl, r2
 8003e74:	469b      	mov	fp, r3
 8003e76:	4623      	mov	r3, r4
 8003e78:	eb1a 0303 	adds.w	r3, sl, r3
 8003e7c:	623b      	str	r3, [r7, #32]
 8003e7e:	462b      	mov	r3, r5
 8003e80:	eb4b 0303 	adc.w	r3, fp, r3
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e92:	4629      	mov	r1, r5
 8003e94:	028b      	lsls	r3, r1, #10
 8003e96:	4621      	mov	r1, r4
 8003e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	028a      	lsls	r2, r1, #10
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	673b      	str	r3, [r7, #112]	@ 0x70
 8003eac:	677a      	str	r2, [r7, #116]	@ 0x74
 8003eae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003eb2:	f7fc fee9 	bl	8000c88 <__aeabi_uldivmod>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4613      	mov	r3, r2
 8003ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ec0:	4b41      	ldr	r3, [pc, #260]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	0c1b      	lsrs	r3, r3, #16
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	3301      	adds	r3, #1
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003ed2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ed6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ede:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ee2:	e0eb      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ee4:	4b38      	ldr	r3, [pc, #224]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003eec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ef0:	4b35      	ldr	r3, [pc, #212]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d06b      	beq.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003efc:	4b32      	ldr	r3, [pc, #200]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	099b      	lsrs	r3, r3, #6
 8003f02:	2200      	movs	r2, #0
 8003f04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f10:	2300      	movs	r3, #0
 8003f12:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f14:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003f18:	4622      	mov	r2, r4
 8003f1a:	462b      	mov	r3, r5
 8003f1c:	f04f 0000 	mov.w	r0, #0
 8003f20:	f04f 0100 	mov.w	r1, #0
 8003f24:	0159      	lsls	r1, r3, #5
 8003f26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f2a:	0150      	lsls	r0, r2, #5
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4621      	mov	r1, r4
 8003f32:	1a51      	subs	r1, r2, r1
 8003f34:	61b9      	str	r1, [r7, #24]
 8003f36:	4629      	mov	r1, r5
 8003f38:	eb63 0301 	sbc.w	r3, r3, r1
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f4a:	4659      	mov	r1, fp
 8003f4c:	018b      	lsls	r3, r1, #6
 8003f4e:	4651      	mov	r1, sl
 8003f50:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f54:	4651      	mov	r1, sl
 8003f56:	018a      	lsls	r2, r1, #6
 8003f58:	4651      	mov	r1, sl
 8003f5a:	ebb2 0801 	subs.w	r8, r2, r1
 8003f5e:	4659      	mov	r1, fp
 8003f60:	eb63 0901 	sbc.w	r9, r3, r1
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f78:	4690      	mov	r8, r2
 8003f7a:	4699      	mov	r9, r3
 8003f7c:	4623      	mov	r3, r4
 8003f7e:	eb18 0303 	adds.w	r3, r8, r3
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	462b      	mov	r3, r5
 8003f86:	eb49 0303 	adc.w	r3, r9, r3
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f98:	4629      	mov	r1, r5
 8003f9a:	024b      	lsls	r3, r1, #9
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	024a      	lsls	r2, r1, #9
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	4619      	mov	r1, r3
 8003faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fae:	2200      	movs	r2, #0
 8003fb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fb2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003fb4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003fb8:	f7fc fe66 	bl	8000c88 <__aeabi_uldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fc6:	e065      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x420>
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	00f42400 	.word	0x00f42400
 8003fd0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd4:	4b3d      	ldr	r3, [pc, #244]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x458>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	099b      	lsrs	r3, r3, #6
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	4611      	mov	r1, r2
 8003fe0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fe4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003fee:	4642      	mov	r2, r8
 8003ff0:	464b      	mov	r3, r9
 8003ff2:	f04f 0000 	mov.w	r0, #0
 8003ff6:	f04f 0100 	mov.w	r1, #0
 8003ffa:	0159      	lsls	r1, r3, #5
 8003ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004000:	0150      	lsls	r0, r2, #5
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4641      	mov	r1, r8
 8004008:	1a51      	subs	r1, r2, r1
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	4649      	mov	r1, r9
 800400e:	eb63 0301 	sbc.w	r3, r3, r1
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004020:	4659      	mov	r1, fp
 8004022:	018b      	lsls	r3, r1, #6
 8004024:	4651      	mov	r1, sl
 8004026:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800402a:	4651      	mov	r1, sl
 800402c:	018a      	lsls	r2, r1, #6
 800402e:	4651      	mov	r1, sl
 8004030:	1a54      	subs	r4, r2, r1
 8004032:	4659      	mov	r1, fp
 8004034:	eb63 0501 	sbc.w	r5, r3, r1
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	00eb      	lsls	r3, r5, #3
 8004042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004046:	00e2      	lsls	r2, r4, #3
 8004048:	4614      	mov	r4, r2
 800404a:	461d      	mov	r5, r3
 800404c:	4643      	mov	r3, r8
 800404e:	18e3      	adds	r3, r4, r3
 8004050:	603b      	str	r3, [r7, #0]
 8004052:	464b      	mov	r3, r9
 8004054:	eb45 0303 	adc.w	r3, r5, r3
 8004058:	607b      	str	r3, [r7, #4]
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004066:	4629      	mov	r1, r5
 8004068:	028b      	lsls	r3, r1, #10
 800406a:	4621      	mov	r1, r4
 800406c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004070:	4621      	mov	r1, r4
 8004072:	028a      	lsls	r2, r1, #10
 8004074:	4610      	mov	r0, r2
 8004076:	4619      	mov	r1, r3
 8004078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800407c:	2200      	movs	r2, #0
 800407e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004080:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004082:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004086:	f7fc fdff 	bl	8000c88 <__aeabi_uldivmod>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4613      	mov	r3, r2
 8004090:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004094:	4b0d      	ldr	r3, [pc, #52]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x458>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	0f1b      	lsrs	r3, r3, #28
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80040a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80040aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040b2:	e003      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040b4:	4b06      	ldr	r3, [pc, #24]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80040b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	37b8      	adds	r7, #184	@ 0xb8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800
 80040d0:	00f42400 	.word	0x00f42400

080040d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e28d      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 8083 	beq.w	80041fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80040f4:	4b94      	ldr	r3, [pc, #592]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 030c 	and.w	r3, r3, #12
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d019      	beq.n	8004134 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004100:	4b91      	ldr	r3, [pc, #580]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 030c 	and.w	r3, r3, #12
        || \
 8004108:	2b08      	cmp	r3, #8
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800410c:	4b8e      	ldr	r3, [pc, #568]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004114:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004118:	d00c      	beq.n	8004134 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800411a:	4b8b      	ldr	r3, [pc, #556]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d112      	bne.n	800414c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004126:	4b88      	ldr	r3, [pc, #544]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800412e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004132:	d10b      	bne.n	800414c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004134:	4b84      	ldr	r3, [pc, #528]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d05b      	beq.n	80041f8 <HAL_RCC_OscConfig+0x124>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d157      	bne.n	80041f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e25a      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004154:	d106      	bne.n	8004164 <HAL_RCC_OscConfig+0x90>
 8004156:	4b7c      	ldr	r3, [pc, #496]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a7b      	ldr	r2, [pc, #492]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e01d      	b.n	80041a0 <HAL_RCC_OscConfig+0xcc>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800416c:	d10c      	bne.n	8004188 <HAL_RCC_OscConfig+0xb4>
 800416e:	4b76      	ldr	r3, [pc, #472]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a75      	ldr	r2, [pc, #468]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004174:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	4b73      	ldr	r3, [pc, #460]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a72      	ldr	r2, [pc, #456]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	e00b      	b.n	80041a0 <HAL_RCC_OscConfig+0xcc>
 8004188:	4b6f      	ldr	r3, [pc, #444]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a6e      	ldr	r2, [pc, #440]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800418e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	4b6c      	ldr	r3, [pc, #432]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a6b      	ldr	r2, [pc, #428]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800419a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800419e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d013      	beq.n	80041d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7ff f8ec 	bl	8003384 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b0:	f7ff f8e8 	bl	8003384 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	@ 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e21f      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c2:	4b61      	ldr	r3, [pc, #388]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCC_OscConfig+0xdc>
 80041ce:	e014      	b.n	80041fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7ff f8d8 	bl	8003384 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d8:	f7ff f8d4 	bl	8003384 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	@ 0x64
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e20b      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ea:	4b57      	ldr	r3, [pc, #348]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x104>
 80041f6:	e000      	b.n	80041fa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d06f      	beq.n	80042e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004206:	4b50      	ldr	r3, [pc, #320]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 030c 	and.w	r3, r3, #12
 800420e:	2b00      	cmp	r3, #0
 8004210:	d017      	beq.n	8004242 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004212:	4b4d      	ldr	r3, [pc, #308]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
        || \
 800421a:	2b08      	cmp	r3, #8
 800421c:	d105      	bne.n	800422a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800421e:	4b4a      	ldr	r3, [pc, #296]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00b      	beq.n	8004242 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800422a:	4b47      	ldr	r3, [pc, #284]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004232:	2b0c      	cmp	r3, #12
 8004234:	d11c      	bne.n	8004270 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004236:	4b44      	ldr	r3, [pc, #272]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d116      	bne.n	8004270 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004242:	4b41      	ldr	r3, [pc, #260]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <HAL_RCC_OscConfig+0x186>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d001      	beq.n	800425a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e1d3      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425a:	4b3b      	ldr	r3, [pc, #236]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4937      	ldr	r1, [pc, #220]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800426e:	e03a      	b.n	80042e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d020      	beq.n	80042ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004278:	4b34      	ldr	r3, [pc, #208]	@ (800434c <HAL_RCC_OscConfig+0x278>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427e:	f7ff f881 	bl	8003384 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004286:	f7ff f87d 	bl	8003384 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e1b4      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004298:	4b2b      	ldr	r3, [pc, #172]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a4:	4b28      	ldr	r3, [pc, #160]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4925      	ldr	r1, [pc, #148]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	600b      	str	r3, [r1, #0]
 80042b8:	e015      	b.n	80042e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ba:	4b24      	ldr	r3, [pc, #144]	@ (800434c <HAL_RCC_OscConfig+0x278>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7ff f860 	bl	8003384 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c8:	f7ff f85c 	bl	8003384 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e193      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042da:	4b1b      	ldr	r3, [pc, #108]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d036      	beq.n	8004360 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042fa:	4b15      	ldr	r3, [pc, #84]	@ (8004350 <HAL_RCC_OscConfig+0x27c>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004300:	f7ff f840 	bl	8003384 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004308:	f7ff f83c 	bl	8003384 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e173      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431a:	4b0b      	ldr	r3, [pc, #44]	@ (8004348 <HAL_RCC_OscConfig+0x274>)
 800431c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0x234>
 8004326:	e01b      	b.n	8004360 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004328:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <HAL_RCC_OscConfig+0x27c>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432e:	f7ff f829 	bl	8003384 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004334:	e00e      	b.n	8004354 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004336:	f7ff f825 	bl	8003384 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d907      	bls.n	8004354 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e15c      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
 8004348:	40023800 	.word	0x40023800
 800434c:	42470000 	.word	0x42470000
 8004350:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004354:	4b8a      	ldr	r3, [pc, #552]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ea      	bne.n	8004336 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8097 	beq.w	800449c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800436e:	2300      	movs	r3, #0
 8004370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004372:	4b83      	ldr	r3, [pc, #524]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10f      	bne.n	800439e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	4b7f      	ldr	r3, [pc, #508]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	4a7e      	ldr	r2, [pc, #504]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800438c:	6413      	str	r3, [r2, #64]	@ 0x40
 800438e:	4b7c      	ldr	r3, [pc, #496]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439a:	2301      	movs	r3, #1
 800439c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439e:	4b79      	ldr	r3, [pc, #484]	@ (8004584 <HAL_RCC_OscConfig+0x4b0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d118      	bne.n	80043dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043aa:	4b76      	ldr	r3, [pc, #472]	@ (8004584 <HAL_RCC_OscConfig+0x4b0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a75      	ldr	r2, [pc, #468]	@ (8004584 <HAL_RCC_OscConfig+0x4b0>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043b6:	f7fe ffe5 	bl	8003384 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043be:	f7fe ffe1 	bl	8003384 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e118      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d0:	4b6c      	ldr	r3, [pc, #432]	@ (8004584 <HAL_RCC_OscConfig+0x4b0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d106      	bne.n	80043f2 <HAL_RCC_OscConfig+0x31e>
 80043e4:	4b66      	ldr	r3, [pc, #408]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e8:	4a65      	ldr	r2, [pc, #404]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80043f0:	e01c      	b.n	800442c <HAL_RCC_OscConfig+0x358>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b05      	cmp	r3, #5
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0x340>
 80043fa:	4b61      	ldr	r3, [pc, #388]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fe:	4a60      	ldr	r2, [pc, #384]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004400:	f043 0304 	orr.w	r3, r3, #4
 8004404:	6713      	str	r3, [r2, #112]	@ 0x70
 8004406:	4b5e      	ldr	r3, [pc, #376]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440a:	4a5d      	ldr	r2, [pc, #372]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6713      	str	r3, [r2, #112]	@ 0x70
 8004412:	e00b      	b.n	800442c <HAL_RCC_OscConfig+0x358>
 8004414:	4b5a      	ldr	r3, [pc, #360]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004418:	4a59      	ldr	r2, [pc, #356]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004420:	4b57      	ldr	r3, [pc, #348]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004424:	4a56      	ldr	r2, [pc, #344]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004426:	f023 0304 	bic.w	r3, r3, #4
 800442a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d015      	beq.n	8004460 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004434:	f7fe ffa6 	bl	8003384 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443a:	e00a      	b.n	8004452 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443c:	f7fe ffa2 	bl	8003384 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e0d7      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004452:	4b4b      	ldr	r3, [pc, #300]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0ee      	beq.n	800443c <HAL_RCC_OscConfig+0x368>
 800445e:	e014      	b.n	800448a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004460:	f7fe ff90 	bl	8003384 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004466:	e00a      	b.n	800447e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004468:	f7fe ff8c 	bl	8003384 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e0c1      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447e:	4b40      	ldr	r3, [pc, #256]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1ee      	bne.n	8004468 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800448a:	7dfb      	ldrb	r3, [r7, #23]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d105      	bne.n	800449c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004490:	4b3b      	ldr	r3, [pc, #236]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	4a3a      	ldr	r2, [pc, #232]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800449a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80ad 	beq.w	8004600 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044a6:	4b36      	ldr	r3, [pc, #216]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d060      	beq.n	8004574 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d145      	bne.n	8004546 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ba:	4b33      	ldr	r3, [pc, #204]	@ (8004588 <HAL_RCC_OscConfig+0x4b4>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7fe ff60 	bl	8003384 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c8:	f7fe ff5c 	bl	8003384 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e093      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044da:	4b29      	ldr	r3, [pc, #164]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69da      	ldr	r2, [r3, #28]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	019b      	lsls	r3, r3, #6
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fc:	085b      	lsrs	r3, r3, #1
 80044fe:	3b01      	subs	r3, #1
 8004500:	041b      	lsls	r3, r3, #16
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004508:	061b      	lsls	r3, r3, #24
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004510:	071b      	lsls	r3, r3, #28
 8004512:	491b      	ldr	r1, [pc, #108]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004514:	4313      	orrs	r3, r2
 8004516:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004518:	4b1b      	ldr	r3, [pc, #108]	@ (8004588 <HAL_RCC_OscConfig+0x4b4>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fe ff31 	bl	8003384 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004526:	f7fe ff2d 	bl	8003384 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e064      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004538:	4b11      	ldr	r3, [pc, #68]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x452>
 8004544:	e05c      	b.n	8004600 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004546:	4b10      	ldr	r3, [pc, #64]	@ (8004588 <HAL_RCC_OscConfig+0x4b4>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fe ff1a 	bl	8003384 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004554:	f7fe ff16 	bl	8003384 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e04d      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004566:	4b06      	ldr	r3, [pc, #24]	@ (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x480>
 8004572:	e045      	b.n	8004600 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d107      	bne.n	800458c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e040      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
 8004580:	40023800 	.word	0x40023800
 8004584:	40007000 	.word	0x40007000
 8004588:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800458c:	4b1f      	ldr	r3, [pc, #124]	@ (800460c <HAL_RCC_OscConfig+0x538>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d030      	beq.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d129      	bne.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d122      	bne.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045bc:	4013      	ands	r3, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d119      	bne.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	3b01      	subs	r3, #1
 80045d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045d8:	429a      	cmp	r2, r3
 80045da:	d10f      	bne.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d107      	bne.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023800 	.word	0x40023800

08004610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e041      	b.n	80046a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fe fb84 	bl	8002d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3304      	adds	r3, #4
 800464c:	4619      	mov	r1, r3
 800464e:	4610      	mov	r0, r2
 8004650:	f000 fdac 	bl	80051ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d001      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e04e      	b.n	8004766 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a23      	ldr	r2, [pc, #140]	@ (8004774 <HAL_TIM_Base_Start_IT+0xc4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d022      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f2:	d01d      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004778 <HAL_TIM_Base_Start_IT+0xc8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d018      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1e      	ldr	r2, [pc, #120]	@ (800477c <HAL_TIM_Base_Start_IT+0xcc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d013      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1c      	ldr	r2, [pc, #112]	@ (8004780 <HAL_TIM_Base_Start_IT+0xd0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00e      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1b      	ldr	r2, [pc, #108]	@ (8004784 <HAL_TIM_Base_Start_IT+0xd4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d009      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a19      	ldr	r2, [pc, #100]	@ (8004788 <HAL_TIM_Base_Start_IT+0xd8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x80>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a18      	ldr	r2, [pc, #96]	@ (800478c <HAL_TIM_Base_Start_IT+0xdc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d111      	bne.n	8004754 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b06      	cmp	r3, #6
 8004740:	d010      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0201 	orr.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004752:	e007      	b.n	8004764 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40010000 	.word	0x40010000
 8004778:	40000400 	.word	0x40000400
 800477c:	40000800 	.word	0x40000800
 8004780:	40000c00 	.word	0x40000c00
 8004784:	40010400 	.word	0x40010400
 8004788:	40014000 	.word	0x40014000
 800478c:	40001800 	.word	0x40001800

08004790 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e041      	b.n	8004826 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f839 	bl	800482e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4619      	mov	r1, r3
 80047ce:	4610      	mov	r0, r2
 80047d0:	f000 fcec 	bl	80051ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
	...

08004844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d109      	bne.n	8004868 <HAL_TIM_PWM_Start+0x24>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	e022      	b.n	80048ae <HAL_TIM_PWM_Start+0x6a>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b04      	cmp	r3, #4
 800486c:	d109      	bne.n	8004882 <HAL_TIM_PWM_Start+0x3e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	bf14      	ite	ne
 800487a:	2301      	movne	r3, #1
 800487c:	2300      	moveq	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	e015      	b.n	80048ae <HAL_TIM_PWM_Start+0x6a>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d109      	bne.n	800489c <HAL_TIM_PWM_Start+0x58>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	bf14      	ite	ne
 8004894:	2301      	movne	r3, #1
 8004896:	2300      	moveq	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e008      	b.n	80048ae <HAL_TIM_PWM_Start+0x6a>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	bf14      	ite	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	2300      	moveq	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e07c      	b.n	80049b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d104      	bne.n	80048c6 <HAL_TIM_PWM_Start+0x82>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048c4:	e013      	b.n	80048ee <HAL_TIM_PWM_Start+0xaa>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d104      	bne.n	80048d6 <HAL_TIM_PWM_Start+0x92>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048d4:	e00b      	b.n	80048ee <HAL_TIM_PWM_Start+0xaa>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d104      	bne.n	80048e6 <HAL_TIM_PWM_Start+0xa2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048e4:	e003      	b.n	80048ee <HAL_TIM_PWM_Start+0xaa>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2201      	movs	r2, #1
 80048f4:	6839      	ldr	r1, [r7, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 ff48 	bl	800578c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a2d      	ldr	r2, [pc, #180]	@ (80049b8 <HAL_TIM_PWM_Start+0x174>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_TIM_PWM_Start+0xcc>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a2c      	ldr	r2, [pc, #176]	@ (80049bc <HAL_TIM_PWM_Start+0x178>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d101      	bne.n	8004914 <HAL_TIM_PWM_Start+0xd0>
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <HAL_TIM_PWM_Start+0xd2>
 8004914:	2300      	movs	r3, #0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004928:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a22      	ldr	r2, [pc, #136]	@ (80049b8 <HAL_TIM_PWM_Start+0x174>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d022      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800493c:	d01d      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1f      	ldr	r2, [pc, #124]	@ (80049c0 <HAL_TIM_PWM_Start+0x17c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d018      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1d      	ldr	r2, [pc, #116]	@ (80049c4 <HAL_TIM_PWM_Start+0x180>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1c      	ldr	r2, [pc, #112]	@ (80049c8 <HAL_TIM_PWM_Start+0x184>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00e      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a16      	ldr	r2, [pc, #88]	@ (80049bc <HAL_TIM_PWM_Start+0x178>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d009      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a18      	ldr	r2, [pc, #96]	@ (80049cc <HAL_TIM_PWM_Start+0x188>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d004      	beq.n	800497a <HAL_TIM_PWM_Start+0x136>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a16      	ldr	r2, [pc, #88]	@ (80049d0 <HAL_TIM_PWM_Start+0x18c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d111      	bne.n	800499e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b06      	cmp	r3, #6
 800498a:	d010      	beq.n	80049ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499c:	e007      	b.n	80049ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f042 0201 	orr.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40010400 	.word	0x40010400
 80049c0:	40000400 	.word	0x40000400
 80049c4:	40000800 	.word	0x40000800
 80049c8:	40000c00 	.word	0x40000c00
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40001800 	.word	0x40001800

080049d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e097      	b.n	8004b18 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d106      	bne.n	8004a02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7fe f8f5 	bl	8002bec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a18:	f023 0307 	bic.w	r3, r3, #7
 8004a1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3304      	adds	r3, #4
 8004a26:	4619      	mov	r1, r3
 8004a28:	4610      	mov	r0, r2
 8004a2a:	f000 fbbf 	bl	80051ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a56:	f023 0303 	bic.w	r3, r3, #3
 8004a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	021b      	lsls	r3, r3, #8
 8004a66:	4313      	orrs	r3, r2
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004a74:	f023 030c 	bic.w	r3, r3, #12
 8004a78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	4313      	orrs	r3, r2
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	011a      	lsls	r2, r3, #4
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	031b      	lsls	r3, r3, #12
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004ab2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004aba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004b48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d110      	bne.n	8004b72 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d102      	bne.n	8004b5c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b56:	7b7b      	ldrb	r3, [r7, #13]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d001      	beq.n	8004b60 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e089      	b.n	8004c74 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b70:	e031      	b.n	8004bd6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d110      	bne.n	8004b9a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b78:	7bbb      	ldrb	r3, [r7, #14]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d102      	bne.n	8004b84 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b7e:	7b3b      	ldrb	r3, [r7, #12]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d001      	beq.n	8004b88 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e075      	b.n	8004c74 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b98:	e01d      	b.n	8004bd6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d108      	bne.n	8004bb2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ba0:	7bbb      	ldrb	r3, [r7, #14]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d105      	bne.n	8004bb2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ba6:	7b7b      	ldrb	r3, [r7, #13]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d102      	bne.n	8004bb2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bac:	7b3b      	ldrb	r3, [r7, #12]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d001      	beq.n	8004bb6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e05e      	b.n	8004c74 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d010      	beq.n	8004c04 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004be2:	e01f      	b.n	8004c24 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2201      	movs	r2, #1
 8004bea:	2100      	movs	r1, #0
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fdcd 	bl	800578c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f042 0202 	orr.w	r2, r2, #2
 8004c00:	60da      	str	r2, [r3, #12]
      break;
 8004c02:	e02e      	b.n	8004c62 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	2104      	movs	r1, #4
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fdbd 	bl	800578c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0204 	orr.w	r2, r2, #4
 8004c20:	60da      	str	r2, [r3, #12]
      break;
 8004c22:	e01e      	b.n	8004c62 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fdad 	bl	800578c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2201      	movs	r2, #1
 8004c38:	2104      	movs	r1, #4
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fda6 	bl	800578c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0202 	orr.w	r2, r2, #2
 8004c4e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0204 	orr.w	r2, r2, #4
 8004c5e:	60da      	str	r2, [r3, #12]
      break;
 8004c60:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0201 	orr.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d020      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01b      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0202 	mvn.w	r2, #2
 8004cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fd fa5c 	bl	8002184 <HAL_TIM_IC_CaptureCallback>
 8004ccc:	e005      	b.n	8004cda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fa4d 	bl	800516e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fa54 	bl	8005182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f003 0304 	and.w	r3, r3, #4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d020      	beq.n	8004d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01b      	beq.n	8004d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0204 	mvn.w	r2, #4
 8004cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fd fa36 	bl	8002184 <HAL_TIM_IC_CaptureCallback>
 8004d18:	e005      	b.n	8004d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fa27 	bl	800516e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fa2e 	bl	8005182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d020      	beq.n	8004d78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01b      	beq.n	8004d78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0208 	mvn.w	r2, #8
 8004d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2204      	movs	r2, #4
 8004d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fd fa10 	bl	8002184 <HAL_TIM_IC_CaptureCallback>
 8004d64:	e005      	b.n	8004d72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fa01 	bl	800516e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fa08 	bl	8005182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f003 0310 	and.w	r3, r3, #16
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d020      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01b      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 0210 	mvn.w	r2, #16
 8004d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2208      	movs	r2, #8
 8004d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fd f9ea 	bl	8002184 <HAL_TIM_IC_CaptureCallback>
 8004db0:	e005      	b.n	8004dbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f9db 	bl	800516e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f9e2 	bl	8005182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00c      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d007      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0201 	mvn.w	r2, #1
 8004de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7fd f958 	bl	8002098 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00c      	beq.n	8004e0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fd6c 	bl	80058e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00c      	beq.n	8004e30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d007      	beq.n	8004e30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f9b3 	bl	8005196 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00c      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f003 0320 	and.w	r3, r3, #32
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d007      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0220 	mvn.w	r2, #32
 8004e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fd3e 	bl	80058d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d101      	bne.n	8004e7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e76:	2302      	movs	r3, #2
 8004e78:	e0ae      	b.n	8004fd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b0c      	cmp	r3, #12
 8004e86:	f200 809f 	bhi.w	8004fc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e90:	08004ec5 	.word	0x08004ec5
 8004e94:	08004fc9 	.word	0x08004fc9
 8004e98:	08004fc9 	.word	0x08004fc9
 8004e9c:	08004fc9 	.word	0x08004fc9
 8004ea0:	08004f05 	.word	0x08004f05
 8004ea4:	08004fc9 	.word	0x08004fc9
 8004ea8:	08004fc9 	.word	0x08004fc9
 8004eac:	08004fc9 	.word	0x08004fc9
 8004eb0:	08004f47 	.word	0x08004f47
 8004eb4:	08004fc9 	.word	0x08004fc9
 8004eb8:	08004fc9 	.word	0x08004fc9
 8004ebc:	08004fc9 	.word	0x08004fc9
 8004ec0:	08004f87 	.word	0x08004f87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fa14 	bl	80052f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0208 	orr.w	r2, r2, #8
 8004ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0204 	bic.w	r2, r2, #4
 8004eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6999      	ldr	r1, [r3, #24]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	619a      	str	r2, [r3, #24]
      break;
 8004f02:	e064      	b.n	8004fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fa64 	bl	80053d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6999      	ldr	r1, [r3, #24]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	021a      	lsls	r2, r3, #8
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	619a      	str	r2, [r3, #24]
      break;
 8004f44:	e043      	b.n	8004fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fab9 	bl	80054c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69da      	ldr	r2, [r3, #28]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0208 	orr.w	r2, r2, #8
 8004f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0204 	bic.w	r2, r2, #4
 8004f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69d9      	ldr	r1, [r3, #28]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	61da      	str	r2, [r3, #28]
      break;
 8004f84:	e023      	b.n	8004fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fb0d 	bl	80055ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69d9      	ldr	r1, [r3, #28]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	021a      	lsls	r2, r3, #8
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	61da      	str	r2, [r3, #28]
      break;
 8004fc6:	e002      	b.n	8004fce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	75fb      	strb	r3, [r7, #23]
      break;
 8004fcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_TIM_ConfigClockSource+0x1c>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e0b4      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x186>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800501a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005022:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005034:	d03e      	beq.n	80050b4 <HAL_TIM_ConfigClockSource+0xd4>
 8005036:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800503a:	f200 8087 	bhi.w	800514c <HAL_TIM_ConfigClockSource+0x16c>
 800503e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005042:	f000 8086 	beq.w	8005152 <HAL_TIM_ConfigClockSource+0x172>
 8005046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800504a:	d87f      	bhi.n	800514c <HAL_TIM_ConfigClockSource+0x16c>
 800504c:	2b70      	cmp	r3, #112	@ 0x70
 800504e:	d01a      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0xa6>
 8005050:	2b70      	cmp	r3, #112	@ 0x70
 8005052:	d87b      	bhi.n	800514c <HAL_TIM_ConfigClockSource+0x16c>
 8005054:	2b60      	cmp	r3, #96	@ 0x60
 8005056:	d050      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0x11a>
 8005058:	2b60      	cmp	r3, #96	@ 0x60
 800505a:	d877      	bhi.n	800514c <HAL_TIM_ConfigClockSource+0x16c>
 800505c:	2b50      	cmp	r3, #80	@ 0x50
 800505e:	d03c      	beq.n	80050da <HAL_TIM_ConfigClockSource+0xfa>
 8005060:	2b50      	cmp	r3, #80	@ 0x50
 8005062:	d873      	bhi.n	800514c <HAL_TIM_ConfigClockSource+0x16c>
 8005064:	2b40      	cmp	r3, #64	@ 0x40
 8005066:	d058      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x13a>
 8005068:	2b40      	cmp	r3, #64	@ 0x40
 800506a:	d86f      	bhi.n	800514c <HAL_TIM_ConfigClockSource+0x16c>
 800506c:	2b30      	cmp	r3, #48	@ 0x30
 800506e:	d064      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x15a>
 8005070:	2b30      	cmp	r3, #48	@ 0x30
 8005072:	d86b      	bhi.n	800514c <HAL_TIM_ConfigClockSource+0x16c>
 8005074:	2b20      	cmp	r3, #32
 8005076:	d060      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x15a>
 8005078:	2b20      	cmp	r3, #32
 800507a:	d867      	bhi.n	800514c <HAL_TIM_ConfigClockSource+0x16c>
 800507c:	2b00      	cmp	r3, #0
 800507e:	d05c      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x15a>
 8005080:	2b10      	cmp	r3, #16
 8005082:	d05a      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x15a>
 8005084:	e062      	b.n	800514c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005096:	f000 fb59 	bl	800574c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	609a      	str	r2, [r3, #8]
      break;
 80050b2:	e04f      	b.n	8005154 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050c4:	f000 fb42 	bl	800574c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050d6:	609a      	str	r2, [r3, #8]
      break;
 80050d8:	e03c      	b.n	8005154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050e6:	461a      	mov	r2, r3
 80050e8:	f000 fab6 	bl	8005658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2150      	movs	r1, #80	@ 0x50
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fb0f 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 80050f8:	e02c      	b.n	8005154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005106:	461a      	mov	r2, r3
 8005108:	f000 fad5 	bl	80056b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2160      	movs	r1, #96	@ 0x60
 8005112:	4618      	mov	r0, r3
 8005114:	f000 faff 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 8005118:	e01c      	b.n	8005154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005126:	461a      	mov	r2, r3
 8005128:	f000 fa96 	bl	8005658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2140      	movs	r1, #64	@ 0x40
 8005132:	4618      	mov	r0, r3
 8005134:	f000 faef 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 8005138:	e00c      	b.n	8005154 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4619      	mov	r1, r3
 8005144:	4610      	mov	r0, r2
 8005146:	f000 fae6 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 800514a:	e003      	b.n	8005154 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	73fb      	strb	r3, [r7, #15]
      break;
 8005150:	e000      	b.n	8005154 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005152:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005164:	7bfb      	ldrb	r3, [r7, #15]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a43      	ldr	r2, [pc, #268]	@ (80052cc <TIM_Base_SetConfig+0x120>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d013      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ca:	d00f      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a40      	ldr	r2, [pc, #256]	@ (80052d0 <TIM_Base_SetConfig+0x124>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00b      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a3f      	ldr	r2, [pc, #252]	@ (80052d4 <TIM_Base_SetConfig+0x128>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d007      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3e      	ldr	r2, [pc, #248]	@ (80052d8 <TIM_Base_SetConfig+0x12c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a3d      	ldr	r2, [pc, #244]	@ (80052dc <TIM_Base_SetConfig+0x130>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d108      	bne.n	80051fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a32      	ldr	r2, [pc, #200]	@ (80052cc <TIM_Base_SetConfig+0x120>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d02b      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800520c:	d027      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a2f      	ldr	r2, [pc, #188]	@ (80052d0 <TIM_Base_SetConfig+0x124>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d023      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a2e      	ldr	r2, [pc, #184]	@ (80052d4 <TIM_Base_SetConfig+0x128>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d01f      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2d      	ldr	r2, [pc, #180]	@ (80052d8 <TIM_Base_SetConfig+0x12c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01b      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2c      	ldr	r2, [pc, #176]	@ (80052dc <TIM_Base_SetConfig+0x130>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d017      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a2b      	ldr	r2, [pc, #172]	@ (80052e0 <TIM_Base_SetConfig+0x134>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a2a      	ldr	r2, [pc, #168]	@ (80052e4 <TIM_Base_SetConfig+0x138>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00f      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a29      	ldr	r2, [pc, #164]	@ (80052e8 <TIM_Base_SetConfig+0x13c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00b      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a28      	ldr	r2, [pc, #160]	@ (80052ec <TIM_Base_SetConfig+0x140>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d007      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a27      	ldr	r2, [pc, #156]	@ (80052f0 <TIM_Base_SetConfig+0x144>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d003      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a26      	ldr	r2, [pc, #152]	@ (80052f4 <TIM_Base_SetConfig+0x148>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d108      	bne.n	8005270 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a0e      	ldr	r2, [pc, #56]	@ (80052cc <TIM_Base_SetConfig+0x120>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d003      	beq.n	800529e <TIM_Base_SetConfig+0xf2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a10      	ldr	r2, [pc, #64]	@ (80052dc <TIM_Base_SetConfig+0x130>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d103      	bne.n	80052a6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f043 0204 	orr.w	r2, r3, #4
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	601a      	str	r2, [r3, #0]
}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40000800 	.word	0x40000800
 80052d8:	40000c00 	.word	0x40000c00
 80052dc:	40010400 	.word	0x40010400
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40014400 	.word	0x40014400
 80052e8:	40014800 	.word	0x40014800
 80052ec:	40001800 	.word	0x40001800
 80052f0:	40001c00 	.word	0x40001c00
 80052f4:	40002000 	.word	0x40002000

080052f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	f023 0201 	bic.w	r2, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f023 0302 	bic.w	r3, r3, #2
 8005340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a20      	ldr	r2, [pc, #128]	@ (80053d0 <TIM_OC1_SetConfig+0xd8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d003      	beq.n	800535c <TIM_OC1_SetConfig+0x64>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a1f      	ldr	r2, [pc, #124]	@ (80053d4 <TIM_OC1_SetConfig+0xdc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d10c      	bne.n	8005376 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f023 0308 	bic.w	r3, r3, #8
 8005362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f023 0304 	bic.w	r3, r3, #4
 8005374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a15      	ldr	r2, [pc, #84]	@ (80053d0 <TIM_OC1_SetConfig+0xd8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_OC1_SetConfig+0x8e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a14      	ldr	r2, [pc, #80]	@ (80053d4 <TIM_OC1_SetConfig+0xdc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d111      	bne.n	80053aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800538c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	621a      	str	r2, [r3, #32]
}
 80053c4:	bf00      	nop
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	40010000 	.word	0x40010000
 80053d4:	40010400 	.word	0x40010400

080053d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	f023 0210 	bic.w	r2, r3, #16
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800540e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f023 0320 	bic.w	r3, r3, #32
 8005422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a22      	ldr	r2, [pc, #136]	@ (80054bc <TIM_OC2_SetConfig+0xe4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d003      	beq.n	8005440 <TIM_OC2_SetConfig+0x68>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a21      	ldr	r2, [pc, #132]	@ (80054c0 <TIM_OC2_SetConfig+0xe8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d10d      	bne.n	800545c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800545a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a17      	ldr	r2, [pc, #92]	@ (80054bc <TIM_OC2_SetConfig+0xe4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_OC2_SetConfig+0x94>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a16      	ldr	r2, [pc, #88]	@ (80054c0 <TIM_OC2_SetConfig+0xe8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d113      	bne.n	8005494 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005472:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800547a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	621a      	str	r2, [r3, #32]
}
 80054ae:	bf00      	nop
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40010000 	.word	0x40010000
 80054c0:	40010400 	.word	0x40010400

080054c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0303 	bic.w	r3, r3, #3
 80054fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800550c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a21      	ldr	r2, [pc, #132]	@ (80055a4 <TIM_OC3_SetConfig+0xe0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d003      	beq.n	800552a <TIM_OC3_SetConfig+0x66>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a20      	ldr	r2, [pc, #128]	@ (80055a8 <TIM_OC3_SetConfig+0xe4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d10d      	bne.n	8005546 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	021b      	lsls	r3, r3, #8
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a16      	ldr	r2, [pc, #88]	@ (80055a4 <TIM_OC3_SetConfig+0xe0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d003      	beq.n	8005556 <TIM_OC3_SetConfig+0x92>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a15      	ldr	r2, [pc, #84]	@ (80055a8 <TIM_OC3_SetConfig+0xe4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d113      	bne.n	800557e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800555c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	621a      	str	r2, [r3, #32]
}
 8005598:	bf00      	nop
 800559a:	371c      	adds	r7, #28
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	40010000 	.word	0x40010000
 80055a8:	40010400 	.word	0x40010400

080055ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	031b      	lsls	r3, r3, #12
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a12      	ldr	r2, [pc, #72]	@ (8005650 <TIM_OC4_SetConfig+0xa4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d003      	beq.n	8005614 <TIM_OC4_SetConfig+0x68>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a11      	ldr	r2, [pc, #68]	@ (8005654 <TIM_OC4_SetConfig+0xa8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d109      	bne.n	8005628 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800561a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	019b      	lsls	r3, r3, #6
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	621a      	str	r2, [r3, #32]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40010000 	.word	0x40010000
 8005654:	40010400 	.word	0x40010400

08005658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f023 0201 	bic.w	r2, r3, #1
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f023 030a 	bic.w	r3, r3, #10
 8005694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4313      	orrs	r3, r2
 800569c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	621a      	str	r2, [r3, #32]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b087      	sub	sp, #28
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f023 0210 	bic.w	r2, r3, #16
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	031b      	lsls	r3, r3, #12
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800572c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	f043 0307 	orr.w	r3, r3, #7
 8005738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	609a      	str	r2, [r3, #8]
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005766:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	021a      	lsls	r2, r3, #8
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	431a      	orrs	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4313      	orrs	r3, r2
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	609a      	str	r2, [r3, #8]
}
 8005780:	bf00      	nop
 8005782:	371c      	adds	r7, #28
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f003 031f 	and.w	r3, r3, #31
 800579e:	2201      	movs	r2, #1
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a1a      	ldr	r2, [r3, #32]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	43db      	mvns	r3, r3
 80057ae:	401a      	ands	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a1a      	ldr	r2, [r3, #32]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	fa01 f303 	lsl.w	r3, r1, r3
 80057c4:	431a      	orrs	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e05a      	b.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a21      	ldr	r2, [pc, #132]	@ (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d022      	beq.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800583c:	d01d      	beq.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a1d      	ldr	r2, [pc, #116]	@ (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d018      	beq.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a1b      	ldr	r2, [pc, #108]	@ (80058bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d013      	beq.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a1a      	ldr	r2, [pc, #104]	@ (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00e      	beq.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a18      	ldr	r2, [pc, #96]	@ (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d009      	beq.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a17      	ldr	r2, [pc, #92]	@ (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d004      	beq.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a15      	ldr	r2, [pc, #84]	@ (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d10c      	bne.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	4313      	orrs	r3, r2
 800588a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40010000 	.word	0x40010000
 80058b8:	40000400 	.word	0x40000400
 80058bc:	40000800 	.word	0x40000800
 80058c0:	40000c00 	.word	0x40000c00
 80058c4:	40010400 	.word	0x40010400
 80058c8:	40014000 	.word	0x40014000
 80058cc:	40001800 	.word	0x40001800

080058d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e042      	b.n	8005990 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d106      	bne.n	8005924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7fd fad6 	bl	8002ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2224      	movs	r2, #36	@ 0x24
 8005928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800593a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fcc5 	bl	80062cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695a      	ldr	r2, [r3, #20]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	4613      	mov	r3, r2
 80059a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	d121      	bne.n	80059f6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_UART_Transmit_IT+0x26>
 80059b8:	88fb      	ldrh	r3, [r7, #6]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e01a      	b.n	80059f8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	88fa      	ldrh	r2, [r7, #6]
 80059cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	88fa      	ldrh	r2, [r7, #6]
 80059d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2221      	movs	r2, #33	@ 0x21
 80059de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80059f0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	e000      	b.n	80059f8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80059f6:	2302      	movs	r3, #2
  }
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b0ba      	sub	sp, #232	@ 0xe8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10f      	bne.n	8005a6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d009      	beq.n	8005a6a <HAL_UART_IRQHandler+0x66>
 8005a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fb74 	bl	8006150 <UART_Receive_IT>
      return;
 8005a68:	e273      	b.n	8005f52 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 80de 	beq.w	8005c30 <HAL_UART_IRQHandler+0x22c>
 8005a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d106      	bne.n	8005a8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a84:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 80d1 	beq.w	8005c30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00b      	beq.n	8005ab2 <HAL_UART_IRQHandler+0xae>
 8005a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d005      	beq.n	8005ab2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aaa:	f043 0201 	orr.w	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00b      	beq.n	8005ad6 <HAL_UART_IRQHandler+0xd2>
 8005abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ace:	f043 0202 	orr.w	r2, r3, #2
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00b      	beq.n	8005afa <HAL_UART_IRQHandler+0xf6>
 8005ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d005      	beq.n	8005afa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af2:	f043 0204 	orr.w	r2, r3, #4
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005afe:	f003 0308 	and.w	r3, r3, #8
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d011      	beq.n	8005b2a <HAL_UART_IRQHandler+0x126>
 8005b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b0a:	f003 0320 	and.w	r3, r3, #32
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d105      	bne.n	8005b1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b22:	f043 0208 	orr.w	r2, r3, #8
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 820a 	beq.w	8005f48 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d008      	beq.n	8005b52 <HAL_UART_IRQHandler+0x14e>
 8005b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b44:	f003 0320 	and.w	r3, r3, #32
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 faff 	bl	8006150 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5c:	2b40      	cmp	r3, #64	@ 0x40
 8005b5e:	bf0c      	ite	eq
 8005b60:	2301      	moveq	r3, #1
 8005b62:	2300      	movne	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d103      	bne.n	8005b7e <HAL_UART_IRQHandler+0x17a>
 8005b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d04f      	beq.n	8005c1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fa0a 	bl	8005f98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8e:	2b40      	cmp	r3, #64	@ 0x40
 8005b90:	d141      	bne.n	8005c16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3314      	adds	r3, #20
 8005b98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3314      	adds	r3, #20
 8005bba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005bbe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1d9      	bne.n	8005b92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d013      	beq.n	8005c0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bea:	4a8a      	ldr	r2, [pc, #552]	@ (8005e14 <HAL_UART_IRQHandler+0x410>)
 8005bec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fd fd53 	bl	800369e <HAL_DMA_Abort_IT>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d016      	beq.n	8005c2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0c:	e00e      	b.n	8005c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f9ac 	bl	8005f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c14:	e00a      	b.n	8005c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f9a8 	bl	8005f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c1c:	e006      	b.n	8005c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f9a4 	bl	8005f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005c2a:	e18d      	b.n	8005f48 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c2c:	bf00      	nop
    return;
 8005c2e:	e18b      	b.n	8005f48 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	f040 8167 	bne.w	8005f08 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c3e:	f003 0310 	and.w	r3, r3, #16
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 8160 	beq.w	8005f08 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 8159 	beq.w	8005f08 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c56:	2300      	movs	r3, #0
 8005c58:	60bb      	str	r3, [r7, #8]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	60bb      	str	r3, [r7, #8]
 8005c6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c76:	2b40      	cmp	r3, #64	@ 0x40
 8005c78:	f040 80ce 	bne.w	8005e18 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 80a9 	beq.w	8005de4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	f080 80a2 	bcs.w	8005de4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ca6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cb2:	f000 8088 	beq.w	8005dc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	330c      	adds	r3, #12
 8005cbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	330c      	adds	r3, #12
 8005cde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005ce2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ce6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005cee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1d9      	bne.n	8005cb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3314      	adds	r3, #20
 8005d08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3314      	adds	r3, #20
 8005d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e1      	bne.n	8005d02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3314      	adds	r3, #20
 8005d44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3314      	adds	r3, #20
 8005d5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e3      	bne.n	8005d3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	330c      	adds	r3, #12
 8005d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d96:	f023 0310 	bic.w	r3, r3, #16
 8005d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	330c      	adds	r3, #12
 8005da4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005da8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005daa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e3      	bne.n	8005d84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fd fbfc 	bl	80035be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	4619      	mov	r1, r3
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 f8cf 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005de2:	e0b3      	b.n	8005f4c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005de8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005dec:	429a      	cmp	r2, r3
 8005dee:	f040 80ad 	bne.w	8005f4c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dfc:	f040 80a6 	bne.w	8005f4c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f8b7 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
      return;
 8005e12:	e09b      	b.n	8005f4c <HAL_UART_IRQHandler+0x548>
 8005e14:	0800605f 	.word	0x0800605f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 808e 	beq.w	8005f50 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 8089 	beq.w	8005f50 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	330c      	adds	r3, #12
 8005e44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e48:	e853 3f00 	ldrex	r3, [r3]
 8005e4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	330c      	adds	r3, #12
 8005e5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005e62:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e6a:	e841 2300 	strex	r3, r2, [r1]
 8005e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1e3      	bne.n	8005e3e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3314      	adds	r3, #20
 8005e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	623b      	str	r3, [r7, #32]
   return(result);
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	f023 0301 	bic.w	r3, r3, #1
 8005e8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3314      	adds	r3, #20
 8005e96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e3      	bne.n	8005e76 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	330c      	adds	r3, #12
 8005ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	e853 3f00 	ldrex	r3, [r3]
 8005eca:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0310 	bic.w	r3, r3, #16
 8005ed2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	330c      	adds	r3, #12
 8005edc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005ee0:	61fa      	str	r2, [r7, #28]
 8005ee2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	69b9      	ldr	r1, [r7, #24]
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	e841 2300 	strex	r3, r2, [r1]
 8005eec:	617b      	str	r3, [r7, #20]
   return(result);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e3      	bne.n	8005ebc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005efa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005efe:	4619      	mov	r1, r3
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f83d 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f06:	e023      	b.n	8005f50 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d009      	beq.n	8005f28 <HAL_UART_IRQHandler+0x524>
 8005f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f8ad 	bl	8006080 <UART_Transmit_IT>
    return;
 8005f26:	e014      	b.n	8005f52 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00e      	beq.n	8005f52 <HAL_UART_IRQHandler+0x54e>
 8005f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f8ed 	bl	8006120 <UART_EndTransmit_IT>
    return;
 8005f46:	e004      	b.n	8005f52 <HAL_UART_IRQHandler+0x54e>
    return;
 8005f48:	bf00      	nop
 8005f4a:	e002      	b.n	8005f52 <HAL_UART_IRQHandler+0x54e>
      return;
 8005f4c:	bf00      	nop
 8005f4e:	e000      	b.n	8005f52 <HAL_UART_IRQHandler+0x54e>
      return;
 8005f50:	bf00      	nop
  }
}
 8005f52:	37e8      	adds	r7, #232	@ 0xe8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b095      	sub	sp, #84	@ 0x54
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	330c      	adds	r3, #12
 8005fa6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fc0:	643a      	str	r2, [r7, #64]	@ 0x40
 8005fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e5      	bne.n	8005fa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3314      	adds	r3, #20
 8005fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	e853 3f00 	ldrex	r3, [r3]
 8005fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	f023 0301 	bic.w	r3, r3, #1
 8005fea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3314      	adds	r3, #20
 8005ff2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ff4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ffc:	e841 2300 	strex	r3, r2, [r1]
 8006000:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e5      	bne.n	8005fd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800600c:	2b01      	cmp	r3, #1
 800600e:	d119      	bne.n	8006044 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	330c      	adds	r3, #12
 8006016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	e853 3f00 	ldrex	r3, [r3]
 800601e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f023 0310 	bic.w	r3, r3, #16
 8006026:	647b      	str	r3, [r7, #68]	@ 0x44
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	330c      	adds	r3, #12
 800602e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006030:	61ba      	str	r2, [r7, #24]
 8006032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006034:	6979      	ldr	r1, [r7, #20]
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	e841 2300 	strex	r3, r2, [r1]
 800603c:	613b      	str	r3, [r7, #16]
   return(result);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1e5      	bne.n	8006010 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006052:	bf00      	nop
 8006054:	3754      	adds	r7, #84	@ 0x54
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7ff ff7a 	bl	8005f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006078:	bf00      	nop
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b21      	cmp	r3, #33	@ 0x21
 8006092:	d13e      	bne.n	8006112 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800609c:	d114      	bne.n	80060c8 <UART_Transmit_IT+0x48>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d110      	bne.n	80060c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	1c9a      	adds	r2, r3, #2
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	621a      	str	r2, [r3, #32]
 80060c6:	e008      	b.n	80060da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	1c59      	adds	r1, r3, #1
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6211      	str	r1, [r2, #32]
 80060d2:	781a      	ldrb	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	4619      	mov	r1, r3
 80060e8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10f      	bne.n	800610e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800610c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	e000      	b.n	8006114 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006112:	2302      	movs	r3, #2
  }
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006136:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7fc f809 	bl	8002158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08c      	sub	sp, #48	@ 0x30
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006158:	2300      	movs	r3, #0
 800615a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800615c:	2300      	movs	r3, #0
 800615e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b22      	cmp	r3, #34	@ 0x22
 800616a:	f040 80aa 	bne.w	80062c2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006176:	d115      	bne.n	80061a4 <UART_Receive_IT+0x54>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d111      	bne.n	80061a4 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006184:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	b29b      	uxth	r3, r3
 800618e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006192:	b29a      	uxth	r2, r3
 8006194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006196:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619c:	1c9a      	adds	r2, r3, #2
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80061a2:	e024      	b.n	80061ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061b2:	d007      	beq.n	80061c4 <UART_Receive_IT+0x74>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <UART_Receive_IT+0x82>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d106      	bne.n	80061d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	e008      	b.n	80061e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	4619      	mov	r1, r3
 80061fc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d15d      	bne.n	80062be <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0220 	bic.w	r2, r2, #32
 8006210:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006220:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	695a      	ldr	r2, [r3, #20]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0201 	bic.w	r2, r2, #1
 8006230:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006244:	2b01      	cmp	r3, #1
 8006246:	d135      	bne.n	80062b4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	330c      	adds	r3, #12
 8006254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	613b      	str	r3, [r7, #16]
   return(result);
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f023 0310 	bic.w	r3, r3, #16
 8006264:	627b      	str	r3, [r7, #36]	@ 0x24
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	330c      	adds	r3, #12
 800626c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800626e:	623a      	str	r2, [r7, #32]
 8006270:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	69f9      	ldr	r1, [r7, #28]
 8006274:	6a3a      	ldr	r2, [r7, #32]
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	61bb      	str	r3, [r7, #24]
   return(result);
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e5      	bne.n	800624e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	2b10      	cmp	r3, #16
 800628e:	d10a      	bne.n	80062a6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff fe67 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
 80062b2:	e002      	b.n	80062ba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff fe4f 	bl	8005f58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	e002      	b.n	80062c4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	e000      	b.n	80062c4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80062c2:	2302      	movs	r3, #2
  }
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3730      	adds	r7, #48	@ 0x30
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062d0:	b0c0      	sub	sp, #256	@ 0x100
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80062e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e8:	68d9      	ldr	r1, [r3, #12]
 80062ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	ea40 0301 	orr.w	r3, r0, r1
 80062f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	431a      	orrs	r2, r3
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	431a      	orrs	r2, r3
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	4313      	orrs	r3, r2
 8006314:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006324:	f021 010c 	bic.w	r1, r1, #12
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006332:	430b      	orrs	r3, r1
 8006334:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006346:	6999      	ldr	r1, [r3, #24]
 8006348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	ea40 0301 	orr.w	r3, r0, r1
 8006352:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	4b8f      	ldr	r3, [pc, #572]	@ (8006598 <UART_SetConfig+0x2cc>)
 800635c:	429a      	cmp	r2, r3
 800635e:	d005      	beq.n	800636c <UART_SetConfig+0xa0>
 8006360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	4b8d      	ldr	r3, [pc, #564]	@ (800659c <UART_SetConfig+0x2d0>)
 8006368:	429a      	cmp	r2, r3
 800636a:	d104      	bne.n	8006376 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800636c:	f7fd fc6e 	bl	8003c4c <HAL_RCC_GetPCLK2Freq>
 8006370:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006374:	e003      	b.n	800637e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006376:	f7fd fc55 	bl	8003c24 <HAL_RCC_GetPCLK1Freq>
 800637a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800637e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006388:	f040 810c 	bne.w	80065a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800638c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006390:	2200      	movs	r2, #0
 8006392:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006396:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800639a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800639e:	4622      	mov	r2, r4
 80063a0:	462b      	mov	r3, r5
 80063a2:	1891      	adds	r1, r2, r2
 80063a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80063a6:	415b      	adcs	r3, r3
 80063a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80063ae:	4621      	mov	r1, r4
 80063b0:	eb12 0801 	adds.w	r8, r2, r1
 80063b4:	4629      	mov	r1, r5
 80063b6:	eb43 0901 	adc.w	r9, r3, r1
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ce:	4690      	mov	r8, r2
 80063d0:	4699      	mov	r9, r3
 80063d2:	4623      	mov	r3, r4
 80063d4:	eb18 0303 	adds.w	r3, r8, r3
 80063d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063dc:	462b      	mov	r3, r5
 80063de:	eb49 0303 	adc.w	r3, r9, r3
 80063e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80063f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80063fa:	460b      	mov	r3, r1
 80063fc:	18db      	adds	r3, r3, r3
 80063fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006400:	4613      	mov	r3, r2
 8006402:	eb42 0303 	adc.w	r3, r2, r3
 8006406:	657b      	str	r3, [r7, #84]	@ 0x54
 8006408:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800640c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006410:	f7fa fc3a 	bl	8000c88 <__aeabi_uldivmod>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	4b61      	ldr	r3, [pc, #388]	@ (80065a0 <UART_SetConfig+0x2d4>)
 800641a:	fba3 2302 	umull	r2, r3, r3, r2
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	011c      	lsls	r4, r3, #4
 8006422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006426:	2200      	movs	r2, #0
 8006428:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800642c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006430:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006434:	4642      	mov	r2, r8
 8006436:	464b      	mov	r3, r9
 8006438:	1891      	adds	r1, r2, r2
 800643a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800643c:	415b      	adcs	r3, r3
 800643e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006440:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006444:	4641      	mov	r1, r8
 8006446:	eb12 0a01 	adds.w	sl, r2, r1
 800644a:	4649      	mov	r1, r9
 800644c:	eb43 0b01 	adc.w	fp, r3, r1
 8006450:	f04f 0200 	mov.w	r2, #0
 8006454:	f04f 0300 	mov.w	r3, #0
 8006458:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800645c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006460:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006464:	4692      	mov	sl, r2
 8006466:	469b      	mov	fp, r3
 8006468:	4643      	mov	r3, r8
 800646a:	eb1a 0303 	adds.w	r3, sl, r3
 800646e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006472:	464b      	mov	r3, r9
 8006474:	eb4b 0303 	adc.w	r3, fp, r3
 8006478:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800647c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006488:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800648c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006490:	460b      	mov	r3, r1
 8006492:	18db      	adds	r3, r3, r3
 8006494:	643b      	str	r3, [r7, #64]	@ 0x40
 8006496:	4613      	mov	r3, r2
 8006498:	eb42 0303 	adc.w	r3, r2, r3
 800649c:	647b      	str	r3, [r7, #68]	@ 0x44
 800649e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80064a6:	f7fa fbef 	bl	8000c88 <__aeabi_uldivmod>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4611      	mov	r1, r2
 80064b0:	4b3b      	ldr	r3, [pc, #236]	@ (80065a0 <UART_SetConfig+0x2d4>)
 80064b2:	fba3 2301 	umull	r2, r3, r3, r1
 80064b6:	095b      	lsrs	r3, r3, #5
 80064b8:	2264      	movs	r2, #100	@ 0x64
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
 80064be:	1acb      	subs	r3, r1, r3
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80064c6:	4b36      	ldr	r3, [pc, #216]	@ (80065a0 <UART_SetConfig+0x2d4>)
 80064c8:	fba3 2302 	umull	r2, r3, r3, r2
 80064cc:	095b      	lsrs	r3, r3, #5
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80064d4:	441c      	add	r4, r3
 80064d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064da:	2200      	movs	r2, #0
 80064dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80064e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80064e8:	4642      	mov	r2, r8
 80064ea:	464b      	mov	r3, r9
 80064ec:	1891      	adds	r1, r2, r2
 80064ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80064f0:	415b      	adcs	r3, r3
 80064f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80064f8:	4641      	mov	r1, r8
 80064fa:	1851      	adds	r1, r2, r1
 80064fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80064fe:	4649      	mov	r1, r9
 8006500:	414b      	adcs	r3, r1
 8006502:	637b      	str	r3, [r7, #52]	@ 0x34
 8006504:	f04f 0200 	mov.w	r2, #0
 8006508:	f04f 0300 	mov.w	r3, #0
 800650c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006510:	4659      	mov	r1, fp
 8006512:	00cb      	lsls	r3, r1, #3
 8006514:	4651      	mov	r1, sl
 8006516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800651a:	4651      	mov	r1, sl
 800651c:	00ca      	lsls	r2, r1, #3
 800651e:	4610      	mov	r0, r2
 8006520:	4619      	mov	r1, r3
 8006522:	4603      	mov	r3, r0
 8006524:	4642      	mov	r2, r8
 8006526:	189b      	adds	r3, r3, r2
 8006528:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800652c:	464b      	mov	r3, r9
 800652e:	460a      	mov	r2, r1
 8006530:	eb42 0303 	adc.w	r3, r2, r3
 8006534:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006544:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006548:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800654c:	460b      	mov	r3, r1
 800654e:	18db      	adds	r3, r3, r3
 8006550:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006552:	4613      	mov	r3, r2
 8006554:	eb42 0303 	adc.w	r3, r2, r3
 8006558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800655a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800655e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006562:	f7fa fb91 	bl	8000c88 <__aeabi_uldivmod>
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	4b0d      	ldr	r3, [pc, #52]	@ (80065a0 <UART_SetConfig+0x2d4>)
 800656c:	fba3 1302 	umull	r1, r3, r3, r2
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	2164      	movs	r1, #100	@ 0x64
 8006574:	fb01 f303 	mul.w	r3, r1, r3
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	3332      	adds	r3, #50	@ 0x32
 800657e:	4a08      	ldr	r2, [pc, #32]	@ (80065a0 <UART_SetConfig+0x2d4>)
 8006580:	fba2 2303 	umull	r2, r3, r2, r3
 8006584:	095b      	lsrs	r3, r3, #5
 8006586:	f003 0207 	and.w	r2, r3, #7
 800658a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4422      	add	r2, r4
 8006592:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006594:	e106      	b.n	80067a4 <UART_SetConfig+0x4d8>
 8006596:	bf00      	nop
 8006598:	40011000 	.word	0x40011000
 800659c:	40011400 	.word	0x40011400
 80065a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065a8:	2200      	movs	r2, #0
 80065aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80065b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80065b6:	4642      	mov	r2, r8
 80065b8:	464b      	mov	r3, r9
 80065ba:	1891      	adds	r1, r2, r2
 80065bc:	6239      	str	r1, [r7, #32]
 80065be:	415b      	adcs	r3, r3
 80065c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065c6:	4641      	mov	r1, r8
 80065c8:	1854      	adds	r4, r2, r1
 80065ca:	4649      	mov	r1, r9
 80065cc:	eb43 0501 	adc.w	r5, r3, r1
 80065d0:	f04f 0200 	mov.w	r2, #0
 80065d4:	f04f 0300 	mov.w	r3, #0
 80065d8:	00eb      	lsls	r3, r5, #3
 80065da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065de:	00e2      	lsls	r2, r4, #3
 80065e0:	4614      	mov	r4, r2
 80065e2:	461d      	mov	r5, r3
 80065e4:	4643      	mov	r3, r8
 80065e6:	18e3      	adds	r3, r4, r3
 80065e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065ec:	464b      	mov	r3, r9
 80065ee:	eb45 0303 	adc.w	r3, r5, r3
 80065f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80065f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006602:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006606:	f04f 0200 	mov.w	r2, #0
 800660a:	f04f 0300 	mov.w	r3, #0
 800660e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006612:	4629      	mov	r1, r5
 8006614:	008b      	lsls	r3, r1, #2
 8006616:	4621      	mov	r1, r4
 8006618:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800661c:	4621      	mov	r1, r4
 800661e:	008a      	lsls	r2, r1, #2
 8006620:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006624:	f7fa fb30 	bl	8000c88 <__aeabi_uldivmod>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4b60      	ldr	r3, [pc, #384]	@ (80067b0 <UART_SetConfig+0x4e4>)
 800662e:	fba3 2302 	umull	r2, r3, r3, r2
 8006632:	095b      	lsrs	r3, r3, #5
 8006634:	011c      	lsls	r4, r3, #4
 8006636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800663a:	2200      	movs	r2, #0
 800663c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006640:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006644:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006648:	4642      	mov	r2, r8
 800664a:	464b      	mov	r3, r9
 800664c:	1891      	adds	r1, r2, r2
 800664e:	61b9      	str	r1, [r7, #24]
 8006650:	415b      	adcs	r3, r3
 8006652:	61fb      	str	r3, [r7, #28]
 8006654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006658:	4641      	mov	r1, r8
 800665a:	1851      	adds	r1, r2, r1
 800665c:	6139      	str	r1, [r7, #16]
 800665e:	4649      	mov	r1, r9
 8006660:	414b      	adcs	r3, r1
 8006662:	617b      	str	r3, [r7, #20]
 8006664:	f04f 0200 	mov.w	r2, #0
 8006668:	f04f 0300 	mov.w	r3, #0
 800666c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006670:	4659      	mov	r1, fp
 8006672:	00cb      	lsls	r3, r1, #3
 8006674:	4651      	mov	r1, sl
 8006676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800667a:	4651      	mov	r1, sl
 800667c:	00ca      	lsls	r2, r1, #3
 800667e:	4610      	mov	r0, r2
 8006680:	4619      	mov	r1, r3
 8006682:	4603      	mov	r3, r0
 8006684:	4642      	mov	r2, r8
 8006686:	189b      	adds	r3, r3, r2
 8006688:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800668c:	464b      	mov	r3, r9
 800668e:	460a      	mov	r2, r1
 8006690:	eb42 0303 	adc.w	r3, r2, r3
 8006694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80066b0:	4649      	mov	r1, r9
 80066b2:	008b      	lsls	r3, r1, #2
 80066b4:	4641      	mov	r1, r8
 80066b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ba:	4641      	mov	r1, r8
 80066bc:	008a      	lsls	r2, r1, #2
 80066be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80066c2:	f7fa fae1 	bl	8000c88 <__aeabi_uldivmod>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4611      	mov	r1, r2
 80066cc:	4b38      	ldr	r3, [pc, #224]	@ (80067b0 <UART_SetConfig+0x4e4>)
 80066ce:	fba3 2301 	umull	r2, r3, r3, r1
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	2264      	movs	r2, #100	@ 0x64
 80066d6:	fb02 f303 	mul.w	r3, r2, r3
 80066da:	1acb      	subs	r3, r1, r3
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	3332      	adds	r3, #50	@ 0x32
 80066e0:	4a33      	ldr	r2, [pc, #204]	@ (80067b0 <UART_SetConfig+0x4e4>)
 80066e2:	fba2 2303 	umull	r2, r3, r2, r3
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066ec:	441c      	add	r4, r3
 80066ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066f2:	2200      	movs	r2, #0
 80066f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80066f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80066f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80066fc:	4642      	mov	r2, r8
 80066fe:	464b      	mov	r3, r9
 8006700:	1891      	adds	r1, r2, r2
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	415b      	adcs	r3, r3
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800670c:	4641      	mov	r1, r8
 800670e:	1851      	adds	r1, r2, r1
 8006710:	6039      	str	r1, [r7, #0]
 8006712:	4649      	mov	r1, r9
 8006714:	414b      	adcs	r3, r1
 8006716:	607b      	str	r3, [r7, #4]
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006724:	4659      	mov	r1, fp
 8006726:	00cb      	lsls	r3, r1, #3
 8006728:	4651      	mov	r1, sl
 800672a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800672e:	4651      	mov	r1, sl
 8006730:	00ca      	lsls	r2, r1, #3
 8006732:	4610      	mov	r0, r2
 8006734:	4619      	mov	r1, r3
 8006736:	4603      	mov	r3, r0
 8006738:	4642      	mov	r2, r8
 800673a:	189b      	adds	r3, r3, r2
 800673c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800673e:	464b      	mov	r3, r9
 8006740:	460a      	mov	r2, r1
 8006742:	eb42 0303 	adc.w	r3, r2, r3
 8006746:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	663b      	str	r3, [r7, #96]	@ 0x60
 8006752:	667a      	str	r2, [r7, #100]	@ 0x64
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	f04f 0300 	mov.w	r3, #0
 800675c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006760:	4649      	mov	r1, r9
 8006762:	008b      	lsls	r3, r1, #2
 8006764:	4641      	mov	r1, r8
 8006766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800676a:	4641      	mov	r1, r8
 800676c:	008a      	lsls	r2, r1, #2
 800676e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006772:	f7fa fa89 	bl	8000c88 <__aeabi_uldivmod>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4b0d      	ldr	r3, [pc, #52]	@ (80067b0 <UART_SetConfig+0x4e4>)
 800677c:	fba3 1302 	umull	r1, r3, r3, r2
 8006780:	095b      	lsrs	r3, r3, #5
 8006782:	2164      	movs	r1, #100	@ 0x64
 8006784:	fb01 f303 	mul.w	r3, r1, r3
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	3332      	adds	r3, #50	@ 0x32
 800678e:	4a08      	ldr	r2, [pc, #32]	@ (80067b0 <UART_SetConfig+0x4e4>)
 8006790:	fba2 2303 	umull	r2, r3, r2, r3
 8006794:	095b      	lsrs	r3, r3, #5
 8006796:	f003 020f 	and.w	r2, r3, #15
 800679a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4422      	add	r2, r4
 80067a2:	609a      	str	r2, [r3, #8]
}
 80067a4:	bf00      	nop
 80067a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80067aa:	46bd      	mov	sp, r7
 80067ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067b0:	51eb851f 	.word	0x51eb851f

080067b4 <__cvt>:
 80067b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067b8:	ec57 6b10 	vmov	r6, r7, d0
 80067bc:	2f00      	cmp	r7, #0
 80067be:	460c      	mov	r4, r1
 80067c0:	4619      	mov	r1, r3
 80067c2:	463b      	mov	r3, r7
 80067c4:	bfbb      	ittet	lt
 80067c6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80067ca:	461f      	movlt	r7, r3
 80067cc:	2300      	movge	r3, #0
 80067ce:	232d      	movlt	r3, #45	@ 0x2d
 80067d0:	700b      	strb	r3, [r1, #0]
 80067d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80067d8:	4691      	mov	r9, r2
 80067da:	f023 0820 	bic.w	r8, r3, #32
 80067de:	bfbc      	itt	lt
 80067e0:	4632      	movlt	r2, r6
 80067e2:	4616      	movlt	r6, r2
 80067e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067e8:	d005      	beq.n	80067f6 <__cvt+0x42>
 80067ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80067ee:	d100      	bne.n	80067f2 <__cvt+0x3e>
 80067f0:	3401      	adds	r4, #1
 80067f2:	2102      	movs	r1, #2
 80067f4:	e000      	b.n	80067f8 <__cvt+0x44>
 80067f6:	2103      	movs	r1, #3
 80067f8:	ab03      	add	r3, sp, #12
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	ab02      	add	r3, sp, #8
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	ec47 6b10 	vmov	d0, r6, r7
 8006804:	4653      	mov	r3, sl
 8006806:	4622      	mov	r2, r4
 8006808:	f000 fe6e 	bl	80074e8 <_dtoa_r>
 800680c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006810:	4605      	mov	r5, r0
 8006812:	d119      	bne.n	8006848 <__cvt+0x94>
 8006814:	f019 0f01 	tst.w	r9, #1
 8006818:	d00e      	beq.n	8006838 <__cvt+0x84>
 800681a:	eb00 0904 	add.w	r9, r0, r4
 800681e:	2200      	movs	r2, #0
 8006820:	2300      	movs	r3, #0
 8006822:	4630      	mov	r0, r6
 8006824:	4639      	mov	r1, r7
 8006826:	f7fa f96f 	bl	8000b08 <__aeabi_dcmpeq>
 800682a:	b108      	cbz	r0, 8006830 <__cvt+0x7c>
 800682c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006830:	2230      	movs	r2, #48	@ 0x30
 8006832:	9b03      	ldr	r3, [sp, #12]
 8006834:	454b      	cmp	r3, r9
 8006836:	d31e      	bcc.n	8006876 <__cvt+0xc2>
 8006838:	9b03      	ldr	r3, [sp, #12]
 800683a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800683c:	1b5b      	subs	r3, r3, r5
 800683e:	4628      	mov	r0, r5
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	b004      	add	sp, #16
 8006844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006848:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800684c:	eb00 0904 	add.w	r9, r0, r4
 8006850:	d1e5      	bne.n	800681e <__cvt+0x6a>
 8006852:	7803      	ldrb	r3, [r0, #0]
 8006854:	2b30      	cmp	r3, #48	@ 0x30
 8006856:	d10a      	bne.n	800686e <__cvt+0xba>
 8006858:	2200      	movs	r2, #0
 800685a:	2300      	movs	r3, #0
 800685c:	4630      	mov	r0, r6
 800685e:	4639      	mov	r1, r7
 8006860:	f7fa f952 	bl	8000b08 <__aeabi_dcmpeq>
 8006864:	b918      	cbnz	r0, 800686e <__cvt+0xba>
 8006866:	f1c4 0401 	rsb	r4, r4, #1
 800686a:	f8ca 4000 	str.w	r4, [sl]
 800686e:	f8da 3000 	ldr.w	r3, [sl]
 8006872:	4499      	add	r9, r3
 8006874:	e7d3      	b.n	800681e <__cvt+0x6a>
 8006876:	1c59      	adds	r1, r3, #1
 8006878:	9103      	str	r1, [sp, #12]
 800687a:	701a      	strb	r2, [r3, #0]
 800687c:	e7d9      	b.n	8006832 <__cvt+0x7e>

0800687e <__exponent>:
 800687e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006880:	2900      	cmp	r1, #0
 8006882:	bfba      	itte	lt
 8006884:	4249      	neglt	r1, r1
 8006886:	232d      	movlt	r3, #45	@ 0x2d
 8006888:	232b      	movge	r3, #43	@ 0x2b
 800688a:	2909      	cmp	r1, #9
 800688c:	7002      	strb	r2, [r0, #0]
 800688e:	7043      	strb	r3, [r0, #1]
 8006890:	dd29      	ble.n	80068e6 <__exponent+0x68>
 8006892:	f10d 0307 	add.w	r3, sp, #7
 8006896:	461d      	mov	r5, r3
 8006898:	270a      	movs	r7, #10
 800689a:	461a      	mov	r2, r3
 800689c:	fbb1 f6f7 	udiv	r6, r1, r7
 80068a0:	fb07 1416 	mls	r4, r7, r6, r1
 80068a4:	3430      	adds	r4, #48	@ 0x30
 80068a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80068aa:	460c      	mov	r4, r1
 80068ac:	2c63      	cmp	r4, #99	@ 0x63
 80068ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80068b2:	4631      	mov	r1, r6
 80068b4:	dcf1      	bgt.n	800689a <__exponent+0x1c>
 80068b6:	3130      	adds	r1, #48	@ 0x30
 80068b8:	1e94      	subs	r4, r2, #2
 80068ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80068be:	1c41      	adds	r1, r0, #1
 80068c0:	4623      	mov	r3, r4
 80068c2:	42ab      	cmp	r3, r5
 80068c4:	d30a      	bcc.n	80068dc <__exponent+0x5e>
 80068c6:	f10d 0309 	add.w	r3, sp, #9
 80068ca:	1a9b      	subs	r3, r3, r2
 80068cc:	42ac      	cmp	r4, r5
 80068ce:	bf88      	it	hi
 80068d0:	2300      	movhi	r3, #0
 80068d2:	3302      	adds	r3, #2
 80068d4:	4403      	add	r3, r0
 80068d6:	1a18      	subs	r0, r3, r0
 80068d8:	b003      	add	sp, #12
 80068da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80068e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80068e4:	e7ed      	b.n	80068c2 <__exponent+0x44>
 80068e6:	2330      	movs	r3, #48	@ 0x30
 80068e8:	3130      	adds	r1, #48	@ 0x30
 80068ea:	7083      	strb	r3, [r0, #2]
 80068ec:	70c1      	strb	r1, [r0, #3]
 80068ee:	1d03      	adds	r3, r0, #4
 80068f0:	e7f1      	b.n	80068d6 <__exponent+0x58>
	...

080068f4 <_printf_float>:
 80068f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f8:	b08d      	sub	sp, #52	@ 0x34
 80068fa:	460c      	mov	r4, r1
 80068fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006900:	4616      	mov	r6, r2
 8006902:	461f      	mov	r7, r3
 8006904:	4605      	mov	r5, r0
 8006906:	f000 fcef 	bl	80072e8 <_localeconv_r>
 800690a:	6803      	ldr	r3, [r0, #0]
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	4618      	mov	r0, r3
 8006910:	f7f9 fcce 	bl	80002b0 <strlen>
 8006914:	2300      	movs	r3, #0
 8006916:	930a      	str	r3, [sp, #40]	@ 0x28
 8006918:	f8d8 3000 	ldr.w	r3, [r8]
 800691c:	9005      	str	r0, [sp, #20]
 800691e:	3307      	adds	r3, #7
 8006920:	f023 0307 	bic.w	r3, r3, #7
 8006924:	f103 0208 	add.w	r2, r3, #8
 8006928:	f894 a018 	ldrb.w	sl, [r4, #24]
 800692c:	f8d4 b000 	ldr.w	fp, [r4]
 8006930:	f8c8 2000 	str.w	r2, [r8]
 8006934:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006938:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800693c:	9307      	str	r3, [sp, #28]
 800693e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006942:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800694a:	4b9c      	ldr	r3, [pc, #624]	@ (8006bbc <_printf_float+0x2c8>)
 800694c:	f04f 32ff 	mov.w	r2, #4294967295
 8006950:	f7fa f90c 	bl	8000b6c <__aeabi_dcmpun>
 8006954:	bb70      	cbnz	r0, 80069b4 <_printf_float+0xc0>
 8006956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800695a:	4b98      	ldr	r3, [pc, #608]	@ (8006bbc <_printf_float+0x2c8>)
 800695c:	f04f 32ff 	mov.w	r2, #4294967295
 8006960:	f7fa f8e6 	bl	8000b30 <__aeabi_dcmple>
 8006964:	bb30      	cbnz	r0, 80069b4 <_printf_float+0xc0>
 8006966:	2200      	movs	r2, #0
 8006968:	2300      	movs	r3, #0
 800696a:	4640      	mov	r0, r8
 800696c:	4649      	mov	r1, r9
 800696e:	f7fa f8d5 	bl	8000b1c <__aeabi_dcmplt>
 8006972:	b110      	cbz	r0, 800697a <_printf_float+0x86>
 8006974:	232d      	movs	r3, #45	@ 0x2d
 8006976:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800697a:	4a91      	ldr	r2, [pc, #580]	@ (8006bc0 <_printf_float+0x2cc>)
 800697c:	4b91      	ldr	r3, [pc, #580]	@ (8006bc4 <_printf_float+0x2d0>)
 800697e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006982:	bf8c      	ite	hi
 8006984:	4690      	movhi	r8, r2
 8006986:	4698      	movls	r8, r3
 8006988:	2303      	movs	r3, #3
 800698a:	6123      	str	r3, [r4, #16]
 800698c:	f02b 0304 	bic.w	r3, fp, #4
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	f04f 0900 	mov.w	r9, #0
 8006996:	9700      	str	r7, [sp, #0]
 8006998:	4633      	mov	r3, r6
 800699a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800699c:	4621      	mov	r1, r4
 800699e:	4628      	mov	r0, r5
 80069a0:	f000 f9d2 	bl	8006d48 <_printf_common>
 80069a4:	3001      	adds	r0, #1
 80069a6:	f040 808d 	bne.w	8006ac4 <_printf_float+0x1d0>
 80069aa:	f04f 30ff 	mov.w	r0, #4294967295
 80069ae:	b00d      	add	sp, #52	@ 0x34
 80069b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b4:	4642      	mov	r2, r8
 80069b6:	464b      	mov	r3, r9
 80069b8:	4640      	mov	r0, r8
 80069ba:	4649      	mov	r1, r9
 80069bc:	f7fa f8d6 	bl	8000b6c <__aeabi_dcmpun>
 80069c0:	b140      	cbz	r0, 80069d4 <_printf_float+0xe0>
 80069c2:	464b      	mov	r3, r9
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	bfbc      	itt	lt
 80069c8:	232d      	movlt	r3, #45	@ 0x2d
 80069ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80069ce:	4a7e      	ldr	r2, [pc, #504]	@ (8006bc8 <_printf_float+0x2d4>)
 80069d0:	4b7e      	ldr	r3, [pc, #504]	@ (8006bcc <_printf_float+0x2d8>)
 80069d2:	e7d4      	b.n	800697e <_printf_float+0x8a>
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80069da:	9206      	str	r2, [sp, #24]
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	d13b      	bne.n	8006a58 <_printf_float+0x164>
 80069e0:	2306      	movs	r3, #6
 80069e2:	6063      	str	r3, [r4, #4]
 80069e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80069e8:	2300      	movs	r3, #0
 80069ea:	6022      	str	r2, [r4, #0]
 80069ec:	9303      	str	r3, [sp, #12]
 80069ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80069f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80069f4:	ab09      	add	r3, sp, #36	@ 0x24
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	6861      	ldr	r1, [r4, #4]
 80069fa:	ec49 8b10 	vmov	d0, r8, r9
 80069fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006a02:	4628      	mov	r0, r5
 8006a04:	f7ff fed6 	bl	80067b4 <__cvt>
 8006a08:	9b06      	ldr	r3, [sp, #24]
 8006a0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a0c:	2b47      	cmp	r3, #71	@ 0x47
 8006a0e:	4680      	mov	r8, r0
 8006a10:	d129      	bne.n	8006a66 <_printf_float+0x172>
 8006a12:	1cc8      	adds	r0, r1, #3
 8006a14:	db02      	blt.n	8006a1c <_printf_float+0x128>
 8006a16:	6863      	ldr	r3, [r4, #4]
 8006a18:	4299      	cmp	r1, r3
 8006a1a:	dd41      	ble.n	8006aa0 <_printf_float+0x1ac>
 8006a1c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a20:	fa5f fa8a 	uxtb.w	sl, sl
 8006a24:	3901      	subs	r1, #1
 8006a26:	4652      	mov	r2, sl
 8006a28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a2c:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a2e:	f7ff ff26 	bl	800687e <__exponent>
 8006a32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a34:	1813      	adds	r3, r2, r0
 8006a36:	2a01      	cmp	r2, #1
 8006a38:	4681      	mov	r9, r0
 8006a3a:	6123      	str	r3, [r4, #16]
 8006a3c:	dc02      	bgt.n	8006a44 <_printf_float+0x150>
 8006a3e:	6822      	ldr	r2, [r4, #0]
 8006a40:	07d2      	lsls	r2, r2, #31
 8006a42:	d501      	bpl.n	8006a48 <_printf_float+0x154>
 8006a44:	3301      	adds	r3, #1
 8006a46:	6123      	str	r3, [r4, #16]
 8006a48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0a2      	beq.n	8006996 <_printf_float+0xa2>
 8006a50:	232d      	movs	r3, #45	@ 0x2d
 8006a52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a56:	e79e      	b.n	8006996 <_printf_float+0xa2>
 8006a58:	9a06      	ldr	r2, [sp, #24]
 8006a5a:	2a47      	cmp	r2, #71	@ 0x47
 8006a5c:	d1c2      	bne.n	80069e4 <_printf_float+0xf0>
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1c0      	bne.n	80069e4 <_printf_float+0xf0>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e7bd      	b.n	80069e2 <_printf_float+0xee>
 8006a66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a6a:	d9db      	bls.n	8006a24 <_printf_float+0x130>
 8006a6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a70:	d118      	bne.n	8006aa4 <_printf_float+0x1b0>
 8006a72:	2900      	cmp	r1, #0
 8006a74:	6863      	ldr	r3, [r4, #4]
 8006a76:	dd0b      	ble.n	8006a90 <_printf_float+0x19c>
 8006a78:	6121      	str	r1, [r4, #16]
 8006a7a:	b913      	cbnz	r3, 8006a82 <_printf_float+0x18e>
 8006a7c:	6822      	ldr	r2, [r4, #0]
 8006a7e:	07d0      	lsls	r0, r2, #31
 8006a80:	d502      	bpl.n	8006a88 <_printf_float+0x194>
 8006a82:	3301      	adds	r3, #1
 8006a84:	440b      	add	r3, r1
 8006a86:	6123      	str	r3, [r4, #16]
 8006a88:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a8a:	f04f 0900 	mov.w	r9, #0
 8006a8e:	e7db      	b.n	8006a48 <_printf_float+0x154>
 8006a90:	b913      	cbnz	r3, 8006a98 <_printf_float+0x1a4>
 8006a92:	6822      	ldr	r2, [r4, #0]
 8006a94:	07d2      	lsls	r2, r2, #31
 8006a96:	d501      	bpl.n	8006a9c <_printf_float+0x1a8>
 8006a98:	3302      	adds	r3, #2
 8006a9a:	e7f4      	b.n	8006a86 <_printf_float+0x192>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e7f2      	b.n	8006a86 <_printf_float+0x192>
 8006aa0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006aa6:	4299      	cmp	r1, r3
 8006aa8:	db05      	blt.n	8006ab6 <_printf_float+0x1c2>
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	6121      	str	r1, [r4, #16]
 8006aae:	07d8      	lsls	r0, r3, #31
 8006ab0:	d5ea      	bpl.n	8006a88 <_printf_float+0x194>
 8006ab2:	1c4b      	adds	r3, r1, #1
 8006ab4:	e7e7      	b.n	8006a86 <_printf_float+0x192>
 8006ab6:	2900      	cmp	r1, #0
 8006ab8:	bfd4      	ite	le
 8006aba:	f1c1 0202 	rsble	r2, r1, #2
 8006abe:	2201      	movgt	r2, #1
 8006ac0:	4413      	add	r3, r2
 8006ac2:	e7e0      	b.n	8006a86 <_printf_float+0x192>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	055a      	lsls	r2, r3, #21
 8006ac8:	d407      	bmi.n	8006ada <_printf_float+0x1e6>
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	4642      	mov	r2, r8
 8006ace:	4631      	mov	r1, r6
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	47b8      	blx	r7
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d12b      	bne.n	8006b30 <_printf_float+0x23c>
 8006ad8:	e767      	b.n	80069aa <_printf_float+0xb6>
 8006ada:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ade:	f240 80dd 	bls.w	8006c9c <_printf_float+0x3a8>
 8006ae2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f7fa f80d 	bl	8000b08 <__aeabi_dcmpeq>
 8006aee:	2800      	cmp	r0, #0
 8006af0:	d033      	beq.n	8006b5a <_printf_float+0x266>
 8006af2:	4a37      	ldr	r2, [pc, #220]	@ (8006bd0 <_printf_float+0x2dc>)
 8006af4:	2301      	movs	r3, #1
 8006af6:	4631      	mov	r1, r6
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	f43f af54 	beq.w	80069aa <_printf_float+0xb6>
 8006b02:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006b06:	4543      	cmp	r3, r8
 8006b08:	db02      	blt.n	8006b10 <_printf_float+0x21c>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	07d8      	lsls	r0, r3, #31
 8006b0e:	d50f      	bpl.n	8006b30 <_printf_float+0x23c>
 8006b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b14:	4631      	mov	r1, r6
 8006b16:	4628      	mov	r0, r5
 8006b18:	47b8      	blx	r7
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	f43f af45 	beq.w	80069aa <_printf_float+0xb6>
 8006b20:	f04f 0900 	mov.w	r9, #0
 8006b24:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b28:	f104 0a1a 	add.w	sl, r4, #26
 8006b2c:	45c8      	cmp	r8, r9
 8006b2e:	dc09      	bgt.n	8006b44 <_printf_float+0x250>
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	079b      	lsls	r3, r3, #30
 8006b34:	f100 8103 	bmi.w	8006d3e <_printf_float+0x44a>
 8006b38:	68e0      	ldr	r0, [r4, #12]
 8006b3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b3c:	4298      	cmp	r0, r3
 8006b3e:	bfb8      	it	lt
 8006b40:	4618      	movlt	r0, r3
 8006b42:	e734      	b.n	80069ae <_printf_float+0xba>
 8006b44:	2301      	movs	r3, #1
 8006b46:	4652      	mov	r2, sl
 8006b48:	4631      	mov	r1, r6
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	47b8      	blx	r7
 8006b4e:	3001      	adds	r0, #1
 8006b50:	f43f af2b 	beq.w	80069aa <_printf_float+0xb6>
 8006b54:	f109 0901 	add.w	r9, r9, #1
 8006b58:	e7e8      	b.n	8006b2c <_printf_float+0x238>
 8006b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	dc39      	bgt.n	8006bd4 <_printf_float+0x2e0>
 8006b60:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd0 <_printf_float+0x2dc>)
 8006b62:	2301      	movs	r3, #1
 8006b64:	4631      	mov	r1, r6
 8006b66:	4628      	mov	r0, r5
 8006b68:	47b8      	blx	r7
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	f43f af1d 	beq.w	80069aa <_printf_float+0xb6>
 8006b70:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b74:	ea59 0303 	orrs.w	r3, r9, r3
 8006b78:	d102      	bne.n	8006b80 <_printf_float+0x28c>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	07d9      	lsls	r1, r3, #31
 8006b7e:	d5d7      	bpl.n	8006b30 <_printf_float+0x23c>
 8006b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b84:	4631      	mov	r1, r6
 8006b86:	4628      	mov	r0, r5
 8006b88:	47b8      	blx	r7
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	f43f af0d 	beq.w	80069aa <_printf_float+0xb6>
 8006b90:	f04f 0a00 	mov.w	sl, #0
 8006b94:	f104 0b1a 	add.w	fp, r4, #26
 8006b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b9a:	425b      	negs	r3, r3
 8006b9c:	4553      	cmp	r3, sl
 8006b9e:	dc01      	bgt.n	8006ba4 <_printf_float+0x2b0>
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	e793      	b.n	8006acc <_printf_float+0x1d8>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	465a      	mov	r2, fp
 8006ba8:	4631      	mov	r1, r6
 8006baa:	4628      	mov	r0, r5
 8006bac:	47b8      	blx	r7
 8006bae:	3001      	adds	r0, #1
 8006bb0:	f43f aefb 	beq.w	80069aa <_printf_float+0xb6>
 8006bb4:	f10a 0a01 	add.w	sl, sl, #1
 8006bb8:	e7ee      	b.n	8006b98 <_printf_float+0x2a4>
 8006bba:	bf00      	nop
 8006bbc:	7fefffff 	.word	0x7fefffff
 8006bc0:	0800ca20 	.word	0x0800ca20
 8006bc4:	0800ca1c 	.word	0x0800ca1c
 8006bc8:	0800ca28 	.word	0x0800ca28
 8006bcc:	0800ca24 	.word	0x0800ca24
 8006bd0:	0800ca2c 	.word	0x0800ca2c
 8006bd4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bd6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006bda:	4553      	cmp	r3, sl
 8006bdc:	bfa8      	it	ge
 8006bde:	4653      	movge	r3, sl
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	4699      	mov	r9, r3
 8006be4:	dc36      	bgt.n	8006c54 <_printf_float+0x360>
 8006be6:	f04f 0b00 	mov.w	fp, #0
 8006bea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bee:	f104 021a 	add.w	r2, r4, #26
 8006bf2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bf4:	9306      	str	r3, [sp, #24]
 8006bf6:	eba3 0309 	sub.w	r3, r3, r9
 8006bfa:	455b      	cmp	r3, fp
 8006bfc:	dc31      	bgt.n	8006c62 <_printf_float+0x36e>
 8006bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c00:	459a      	cmp	sl, r3
 8006c02:	dc3a      	bgt.n	8006c7a <_printf_float+0x386>
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	07da      	lsls	r2, r3, #31
 8006c08:	d437      	bmi.n	8006c7a <_printf_float+0x386>
 8006c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c0c:	ebaa 0903 	sub.w	r9, sl, r3
 8006c10:	9b06      	ldr	r3, [sp, #24]
 8006c12:	ebaa 0303 	sub.w	r3, sl, r3
 8006c16:	4599      	cmp	r9, r3
 8006c18:	bfa8      	it	ge
 8006c1a:	4699      	movge	r9, r3
 8006c1c:	f1b9 0f00 	cmp.w	r9, #0
 8006c20:	dc33      	bgt.n	8006c8a <_printf_float+0x396>
 8006c22:	f04f 0800 	mov.w	r8, #0
 8006c26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c2a:	f104 0b1a 	add.w	fp, r4, #26
 8006c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c30:	ebaa 0303 	sub.w	r3, sl, r3
 8006c34:	eba3 0309 	sub.w	r3, r3, r9
 8006c38:	4543      	cmp	r3, r8
 8006c3a:	f77f af79 	ble.w	8006b30 <_printf_float+0x23c>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	465a      	mov	r2, fp
 8006c42:	4631      	mov	r1, r6
 8006c44:	4628      	mov	r0, r5
 8006c46:	47b8      	blx	r7
 8006c48:	3001      	adds	r0, #1
 8006c4a:	f43f aeae 	beq.w	80069aa <_printf_float+0xb6>
 8006c4e:	f108 0801 	add.w	r8, r8, #1
 8006c52:	e7ec      	b.n	8006c2e <_printf_float+0x33a>
 8006c54:	4642      	mov	r2, r8
 8006c56:	4631      	mov	r1, r6
 8006c58:	4628      	mov	r0, r5
 8006c5a:	47b8      	blx	r7
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	d1c2      	bne.n	8006be6 <_printf_float+0x2f2>
 8006c60:	e6a3      	b.n	80069aa <_printf_float+0xb6>
 8006c62:	2301      	movs	r3, #1
 8006c64:	4631      	mov	r1, r6
 8006c66:	4628      	mov	r0, r5
 8006c68:	9206      	str	r2, [sp, #24]
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	f43f ae9c 	beq.w	80069aa <_printf_float+0xb6>
 8006c72:	9a06      	ldr	r2, [sp, #24]
 8006c74:	f10b 0b01 	add.w	fp, fp, #1
 8006c78:	e7bb      	b.n	8006bf2 <_printf_float+0x2fe>
 8006c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4628      	mov	r0, r5
 8006c82:	47b8      	blx	r7
 8006c84:	3001      	adds	r0, #1
 8006c86:	d1c0      	bne.n	8006c0a <_printf_float+0x316>
 8006c88:	e68f      	b.n	80069aa <_printf_float+0xb6>
 8006c8a:	9a06      	ldr	r2, [sp, #24]
 8006c8c:	464b      	mov	r3, r9
 8006c8e:	4442      	add	r2, r8
 8006c90:	4631      	mov	r1, r6
 8006c92:	4628      	mov	r0, r5
 8006c94:	47b8      	blx	r7
 8006c96:	3001      	adds	r0, #1
 8006c98:	d1c3      	bne.n	8006c22 <_printf_float+0x32e>
 8006c9a:	e686      	b.n	80069aa <_printf_float+0xb6>
 8006c9c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ca0:	f1ba 0f01 	cmp.w	sl, #1
 8006ca4:	dc01      	bgt.n	8006caa <_printf_float+0x3b6>
 8006ca6:	07db      	lsls	r3, r3, #31
 8006ca8:	d536      	bpl.n	8006d18 <_printf_float+0x424>
 8006caa:	2301      	movs	r3, #1
 8006cac:	4642      	mov	r2, r8
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	47b8      	blx	r7
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	f43f ae78 	beq.w	80069aa <_printf_float+0xb6>
 8006cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	47b8      	blx	r7
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	f43f ae70 	beq.w	80069aa <_printf_float+0xb6>
 8006cca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cd6:	f7f9 ff17 	bl	8000b08 <__aeabi_dcmpeq>
 8006cda:	b9c0      	cbnz	r0, 8006d0e <_printf_float+0x41a>
 8006cdc:	4653      	mov	r3, sl
 8006cde:	f108 0201 	add.w	r2, r8, #1
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	47b8      	blx	r7
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d10c      	bne.n	8006d06 <_printf_float+0x412>
 8006cec:	e65d      	b.n	80069aa <_printf_float+0xb6>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	465a      	mov	r2, fp
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	47b8      	blx	r7
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	f43f ae56 	beq.w	80069aa <_printf_float+0xb6>
 8006cfe:	f108 0801 	add.w	r8, r8, #1
 8006d02:	45d0      	cmp	r8, sl
 8006d04:	dbf3      	blt.n	8006cee <_printf_float+0x3fa>
 8006d06:	464b      	mov	r3, r9
 8006d08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d0c:	e6df      	b.n	8006ace <_printf_float+0x1da>
 8006d0e:	f04f 0800 	mov.w	r8, #0
 8006d12:	f104 0b1a 	add.w	fp, r4, #26
 8006d16:	e7f4      	b.n	8006d02 <_printf_float+0x40e>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	4642      	mov	r2, r8
 8006d1c:	e7e1      	b.n	8006ce2 <_printf_float+0x3ee>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	464a      	mov	r2, r9
 8006d22:	4631      	mov	r1, r6
 8006d24:	4628      	mov	r0, r5
 8006d26:	47b8      	blx	r7
 8006d28:	3001      	adds	r0, #1
 8006d2a:	f43f ae3e 	beq.w	80069aa <_printf_float+0xb6>
 8006d2e:	f108 0801 	add.w	r8, r8, #1
 8006d32:	68e3      	ldr	r3, [r4, #12]
 8006d34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d36:	1a5b      	subs	r3, r3, r1
 8006d38:	4543      	cmp	r3, r8
 8006d3a:	dcf0      	bgt.n	8006d1e <_printf_float+0x42a>
 8006d3c:	e6fc      	b.n	8006b38 <_printf_float+0x244>
 8006d3e:	f04f 0800 	mov.w	r8, #0
 8006d42:	f104 0919 	add.w	r9, r4, #25
 8006d46:	e7f4      	b.n	8006d32 <_printf_float+0x43e>

08006d48 <_printf_common>:
 8006d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d4c:	4616      	mov	r6, r2
 8006d4e:	4698      	mov	r8, r3
 8006d50:	688a      	ldr	r2, [r1, #8]
 8006d52:	690b      	ldr	r3, [r1, #16]
 8006d54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	bfb8      	it	lt
 8006d5c:	4613      	movlt	r3, r2
 8006d5e:	6033      	str	r3, [r6, #0]
 8006d60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d64:	4607      	mov	r7, r0
 8006d66:	460c      	mov	r4, r1
 8006d68:	b10a      	cbz	r2, 8006d6e <_printf_common+0x26>
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	6033      	str	r3, [r6, #0]
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	0699      	lsls	r1, r3, #26
 8006d72:	bf42      	ittt	mi
 8006d74:	6833      	ldrmi	r3, [r6, #0]
 8006d76:	3302      	addmi	r3, #2
 8006d78:	6033      	strmi	r3, [r6, #0]
 8006d7a:	6825      	ldr	r5, [r4, #0]
 8006d7c:	f015 0506 	ands.w	r5, r5, #6
 8006d80:	d106      	bne.n	8006d90 <_printf_common+0x48>
 8006d82:	f104 0a19 	add.w	sl, r4, #25
 8006d86:	68e3      	ldr	r3, [r4, #12]
 8006d88:	6832      	ldr	r2, [r6, #0]
 8006d8a:	1a9b      	subs	r3, r3, r2
 8006d8c:	42ab      	cmp	r3, r5
 8006d8e:	dc26      	bgt.n	8006dde <_printf_common+0x96>
 8006d90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d94:	6822      	ldr	r2, [r4, #0]
 8006d96:	3b00      	subs	r3, #0
 8006d98:	bf18      	it	ne
 8006d9a:	2301      	movne	r3, #1
 8006d9c:	0692      	lsls	r2, r2, #26
 8006d9e:	d42b      	bmi.n	8006df8 <_printf_common+0xb0>
 8006da0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006da4:	4641      	mov	r1, r8
 8006da6:	4638      	mov	r0, r7
 8006da8:	47c8      	blx	r9
 8006daa:	3001      	adds	r0, #1
 8006dac:	d01e      	beq.n	8006dec <_printf_common+0xa4>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	6922      	ldr	r2, [r4, #16]
 8006db2:	f003 0306 	and.w	r3, r3, #6
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	bf02      	ittt	eq
 8006dba:	68e5      	ldreq	r5, [r4, #12]
 8006dbc:	6833      	ldreq	r3, [r6, #0]
 8006dbe:	1aed      	subeq	r5, r5, r3
 8006dc0:	68a3      	ldr	r3, [r4, #8]
 8006dc2:	bf0c      	ite	eq
 8006dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dc8:	2500      	movne	r5, #0
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	bfc4      	itt	gt
 8006dce:	1a9b      	subgt	r3, r3, r2
 8006dd0:	18ed      	addgt	r5, r5, r3
 8006dd2:	2600      	movs	r6, #0
 8006dd4:	341a      	adds	r4, #26
 8006dd6:	42b5      	cmp	r5, r6
 8006dd8:	d11a      	bne.n	8006e10 <_printf_common+0xc8>
 8006dda:	2000      	movs	r0, #0
 8006ddc:	e008      	b.n	8006df0 <_printf_common+0xa8>
 8006dde:	2301      	movs	r3, #1
 8006de0:	4652      	mov	r2, sl
 8006de2:	4641      	mov	r1, r8
 8006de4:	4638      	mov	r0, r7
 8006de6:	47c8      	blx	r9
 8006de8:	3001      	adds	r0, #1
 8006dea:	d103      	bne.n	8006df4 <_printf_common+0xac>
 8006dec:	f04f 30ff 	mov.w	r0, #4294967295
 8006df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df4:	3501      	adds	r5, #1
 8006df6:	e7c6      	b.n	8006d86 <_printf_common+0x3e>
 8006df8:	18e1      	adds	r1, r4, r3
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	2030      	movs	r0, #48	@ 0x30
 8006dfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e02:	4422      	add	r2, r4
 8006e04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e0c:	3302      	adds	r3, #2
 8006e0e:	e7c7      	b.n	8006da0 <_printf_common+0x58>
 8006e10:	2301      	movs	r3, #1
 8006e12:	4622      	mov	r2, r4
 8006e14:	4641      	mov	r1, r8
 8006e16:	4638      	mov	r0, r7
 8006e18:	47c8      	blx	r9
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	d0e6      	beq.n	8006dec <_printf_common+0xa4>
 8006e1e:	3601      	adds	r6, #1
 8006e20:	e7d9      	b.n	8006dd6 <_printf_common+0x8e>
	...

08006e24 <_printf_i>:
 8006e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e28:	7e0f      	ldrb	r7, [r1, #24]
 8006e2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e2c:	2f78      	cmp	r7, #120	@ 0x78
 8006e2e:	4691      	mov	r9, r2
 8006e30:	4680      	mov	r8, r0
 8006e32:	460c      	mov	r4, r1
 8006e34:	469a      	mov	sl, r3
 8006e36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e3a:	d807      	bhi.n	8006e4c <_printf_i+0x28>
 8006e3c:	2f62      	cmp	r7, #98	@ 0x62
 8006e3e:	d80a      	bhi.n	8006e56 <_printf_i+0x32>
 8006e40:	2f00      	cmp	r7, #0
 8006e42:	f000 80d1 	beq.w	8006fe8 <_printf_i+0x1c4>
 8006e46:	2f58      	cmp	r7, #88	@ 0x58
 8006e48:	f000 80b8 	beq.w	8006fbc <_printf_i+0x198>
 8006e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e54:	e03a      	b.n	8006ecc <_printf_i+0xa8>
 8006e56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e5a:	2b15      	cmp	r3, #21
 8006e5c:	d8f6      	bhi.n	8006e4c <_printf_i+0x28>
 8006e5e:	a101      	add	r1, pc, #4	@ (adr r1, 8006e64 <_printf_i+0x40>)
 8006e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e64:	08006ebd 	.word	0x08006ebd
 8006e68:	08006ed1 	.word	0x08006ed1
 8006e6c:	08006e4d 	.word	0x08006e4d
 8006e70:	08006e4d 	.word	0x08006e4d
 8006e74:	08006e4d 	.word	0x08006e4d
 8006e78:	08006e4d 	.word	0x08006e4d
 8006e7c:	08006ed1 	.word	0x08006ed1
 8006e80:	08006e4d 	.word	0x08006e4d
 8006e84:	08006e4d 	.word	0x08006e4d
 8006e88:	08006e4d 	.word	0x08006e4d
 8006e8c:	08006e4d 	.word	0x08006e4d
 8006e90:	08006fcf 	.word	0x08006fcf
 8006e94:	08006efb 	.word	0x08006efb
 8006e98:	08006f89 	.word	0x08006f89
 8006e9c:	08006e4d 	.word	0x08006e4d
 8006ea0:	08006e4d 	.word	0x08006e4d
 8006ea4:	08006ff1 	.word	0x08006ff1
 8006ea8:	08006e4d 	.word	0x08006e4d
 8006eac:	08006efb 	.word	0x08006efb
 8006eb0:	08006e4d 	.word	0x08006e4d
 8006eb4:	08006e4d 	.word	0x08006e4d
 8006eb8:	08006f91 	.word	0x08006f91
 8006ebc:	6833      	ldr	r3, [r6, #0]
 8006ebe:	1d1a      	adds	r2, r3, #4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6032      	str	r2, [r6, #0]
 8006ec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ec8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e09c      	b.n	800700a <_printf_i+0x1e6>
 8006ed0:	6833      	ldr	r3, [r6, #0]
 8006ed2:	6820      	ldr	r0, [r4, #0]
 8006ed4:	1d19      	adds	r1, r3, #4
 8006ed6:	6031      	str	r1, [r6, #0]
 8006ed8:	0606      	lsls	r6, r0, #24
 8006eda:	d501      	bpl.n	8006ee0 <_printf_i+0xbc>
 8006edc:	681d      	ldr	r5, [r3, #0]
 8006ede:	e003      	b.n	8006ee8 <_printf_i+0xc4>
 8006ee0:	0645      	lsls	r5, r0, #25
 8006ee2:	d5fb      	bpl.n	8006edc <_printf_i+0xb8>
 8006ee4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ee8:	2d00      	cmp	r5, #0
 8006eea:	da03      	bge.n	8006ef4 <_printf_i+0xd0>
 8006eec:	232d      	movs	r3, #45	@ 0x2d
 8006eee:	426d      	negs	r5, r5
 8006ef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ef4:	4858      	ldr	r0, [pc, #352]	@ (8007058 <_printf_i+0x234>)
 8006ef6:	230a      	movs	r3, #10
 8006ef8:	e011      	b.n	8006f1e <_printf_i+0xfa>
 8006efa:	6821      	ldr	r1, [r4, #0]
 8006efc:	6833      	ldr	r3, [r6, #0]
 8006efe:	0608      	lsls	r0, r1, #24
 8006f00:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f04:	d402      	bmi.n	8006f0c <_printf_i+0xe8>
 8006f06:	0649      	lsls	r1, r1, #25
 8006f08:	bf48      	it	mi
 8006f0a:	b2ad      	uxthmi	r5, r5
 8006f0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f0e:	4852      	ldr	r0, [pc, #328]	@ (8007058 <_printf_i+0x234>)
 8006f10:	6033      	str	r3, [r6, #0]
 8006f12:	bf14      	ite	ne
 8006f14:	230a      	movne	r3, #10
 8006f16:	2308      	moveq	r3, #8
 8006f18:	2100      	movs	r1, #0
 8006f1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f1e:	6866      	ldr	r6, [r4, #4]
 8006f20:	60a6      	str	r6, [r4, #8]
 8006f22:	2e00      	cmp	r6, #0
 8006f24:	db05      	blt.n	8006f32 <_printf_i+0x10e>
 8006f26:	6821      	ldr	r1, [r4, #0]
 8006f28:	432e      	orrs	r6, r5
 8006f2a:	f021 0104 	bic.w	r1, r1, #4
 8006f2e:	6021      	str	r1, [r4, #0]
 8006f30:	d04b      	beq.n	8006fca <_printf_i+0x1a6>
 8006f32:	4616      	mov	r6, r2
 8006f34:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f38:	fb03 5711 	mls	r7, r3, r1, r5
 8006f3c:	5dc7      	ldrb	r7, [r0, r7]
 8006f3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f42:	462f      	mov	r7, r5
 8006f44:	42bb      	cmp	r3, r7
 8006f46:	460d      	mov	r5, r1
 8006f48:	d9f4      	bls.n	8006f34 <_printf_i+0x110>
 8006f4a:	2b08      	cmp	r3, #8
 8006f4c:	d10b      	bne.n	8006f66 <_printf_i+0x142>
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	07df      	lsls	r7, r3, #31
 8006f52:	d508      	bpl.n	8006f66 <_printf_i+0x142>
 8006f54:	6923      	ldr	r3, [r4, #16]
 8006f56:	6861      	ldr	r1, [r4, #4]
 8006f58:	4299      	cmp	r1, r3
 8006f5a:	bfde      	ittt	le
 8006f5c:	2330      	movle	r3, #48	@ 0x30
 8006f5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f66:	1b92      	subs	r2, r2, r6
 8006f68:	6122      	str	r2, [r4, #16]
 8006f6a:	f8cd a000 	str.w	sl, [sp]
 8006f6e:	464b      	mov	r3, r9
 8006f70:	aa03      	add	r2, sp, #12
 8006f72:	4621      	mov	r1, r4
 8006f74:	4640      	mov	r0, r8
 8006f76:	f7ff fee7 	bl	8006d48 <_printf_common>
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	d14a      	bne.n	8007014 <_printf_i+0x1f0>
 8006f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f82:	b004      	add	sp, #16
 8006f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	f043 0320 	orr.w	r3, r3, #32
 8006f8e:	6023      	str	r3, [r4, #0]
 8006f90:	4832      	ldr	r0, [pc, #200]	@ (800705c <_printf_i+0x238>)
 8006f92:	2778      	movs	r7, #120	@ 0x78
 8006f94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	6831      	ldr	r1, [r6, #0]
 8006f9c:	061f      	lsls	r7, r3, #24
 8006f9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006fa2:	d402      	bmi.n	8006faa <_printf_i+0x186>
 8006fa4:	065f      	lsls	r7, r3, #25
 8006fa6:	bf48      	it	mi
 8006fa8:	b2ad      	uxthmi	r5, r5
 8006faa:	6031      	str	r1, [r6, #0]
 8006fac:	07d9      	lsls	r1, r3, #31
 8006fae:	bf44      	itt	mi
 8006fb0:	f043 0320 	orrmi.w	r3, r3, #32
 8006fb4:	6023      	strmi	r3, [r4, #0]
 8006fb6:	b11d      	cbz	r5, 8006fc0 <_printf_i+0x19c>
 8006fb8:	2310      	movs	r3, #16
 8006fba:	e7ad      	b.n	8006f18 <_printf_i+0xf4>
 8006fbc:	4826      	ldr	r0, [pc, #152]	@ (8007058 <_printf_i+0x234>)
 8006fbe:	e7e9      	b.n	8006f94 <_printf_i+0x170>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	f023 0320 	bic.w	r3, r3, #32
 8006fc6:	6023      	str	r3, [r4, #0]
 8006fc8:	e7f6      	b.n	8006fb8 <_printf_i+0x194>
 8006fca:	4616      	mov	r6, r2
 8006fcc:	e7bd      	b.n	8006f4a <_printf_i+0x126>
 8006fce:	6833      	ldr	r3, [r6, #0]
 8006fd0:	6825      	ldr	r5, [r4, #0]
 8006fd2:	6961      	ldr	r1, [r4, #20]
 8006fd4:	1d18      	adds	r0, r3, #4
 8006fd6:	6030      	str	r0, [r6, #0]
 8006fd8:	062e      	lsls	r6, r5, #24
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	d501      	bpl.n	8006fe2 <_printf_i+0x1be>
 8006fde:	6019      	str	r1, [r3, #0]
 8006fe0:	e002      	b.n	8006fe8 <_printf_i+0x1c4>
 8006fe2:	0668      	lsls	r0, r5, #25
 8006fe4:	d5fb      	bpl.n	8006fde <_printf_i+0x1ba>
 8006fe6:	8019      	strh	r1, [r3, #0]
 8006fe8:	2300      	movs	r3, #0
 8006fea:	6123      	str	r3, [r4, #16]
 8006fec:	4616      	mov	r6, r2
 8006fee:	e7bc      	b.n	8006f6a <_printf_i+0x146>
 8006ff0:	6833      	ldr	r3, [r6, #0]
 8006ff2:	1d1a      	adds	r2, r3, #4
 8006ff4:	6032      	str	r2, [r6, #0]
 8006ff6:	681e      	ldr	r6, [r3, #0]
 8006ff8:	6862      	ldr	r2, [r4, #4]
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f7f9 f907 	bl	8000210 <memchr>
 8007002:	b108      	cbz	r0, 8007008 <_printf_i+0x1e4>
 8007004:	1b80      	subs	r0, r0, r6
 8007006:	6060      	str	r0, [r4, #4]
 8007008:	6863      	ldr	r3, [r4, #4]
 800700a:	6123      	str	r3, [r4, #16]
 800700c:	2300      	movs	r3, #0
 800700e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007012:	e7aa      	b.n	8006f6a <_printf_i+0x146>
 8007014:	6923      	ldr	r3, [r4, #16]
 8007016:	4632      	mov	r2, r6
 8007018:	4649      	mov	r1, r9
 800701a:	4640      	mov	r0, r8
 800701c:	47d0      	blx	sl
 800701e:	3001      	adds	r0, #1
 8007020:	d0ad      	beq.n	8006f7e <_printf_i+0x15a>
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	079b      	lsls	r3, r3, #30
 8007026:	d413      	bmi.n	8007050 <_printf_i+0x22c>
 8007028:	68e0      	ldr	r0, [r4, #12]
 800702a:	9b03      	ldr	r3, [sp, #12]
 800702c:	4298      	cmp	r0, r3
 800702e:	bfb8      	it	lt
 8007030:	4618      	movlt	r0, r3
 8007032:	e7a6      	b.n	8006f82 <_printf_i+0x15e>
 8007034:	2301      	movs	r3, #1
 8007036:	4632      	mov	r2, r6
 8007038:	4649      	mov	r1, r9
 800703a:	4640      	mov	r0, r8
 800703c:	47d0      	blx	sl
 800703e:	3001      	adds	r0, #1
 8007040:	d09d      	beq.n	8006f7e <_printf_i+0x15a>
 8007042:	3501      	adds	r5, #1
 8007044:	68e3      	ldr	r3, [r4, #12]
 8007046:	9903      	ldr	r1, [sp, #12]
 8007048:	1a5b      	subs	r3, r3, r1
 800704a:	42ab      	cmp	r3, r5
 800704c:	dcf2      	bgt.n	8007034 <_printf_i+0x210>
 800704e:	e7eb      	b.n	8007028 <_printf_i+0x204>
 8007050:	2500      	movs	r5, #0
 8007052:	f104 0619 	add.w	r6, r4, #25
 8007056:	e7f5      	b.n	8007044 <_printf_i+0x220>
 8007058:	0800ca2e 	.word	0x0800ca2e
 800705c:	0800ca3f 	.word	0x0800ca3f

08007060 <std>:
 8007060:	2300      	movs	r3, #0
 8007062:	b510      	push	{r4, lr}
 8007064:	4604      	mov	r4, r0
 8007066:	e9c0 3300 	strd	r3, r3, [r0]
 800706a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800706e:	6083      	str	r3, [r0, #8]
 8007070:	8181      	strh	r1, [r0, #12]
 8007072:	6643      	str	r3, [r0, #100]	@ 0x64
 8007074:	81c2      	strh	r2, [r0, #14]
 8007076:	6183      	str	r3, [r0, #24]
 8007078:	4619      	mov	r1, r3
 800707a:	2208      	movs	r2, #8
 800707c:	305c      	adds	r0, #92	@ 0x5c
 800707e:	f000 f92a 	bl	80072d6 <memset>
 8007082:	4b0d      	ldr	r3, [pc, #52]	@ (80070b8 <std+0x58>)
 8007084:	6263      	str	r3, [r4, #36]	@ 0x24
 8007086:	4b0d      	ldr	r3, [pc, #52]	@ (80070bc <std+0x5c>)
 8007088:	62a3      	str	r3, [r4, #40]	@ 0x28
 800708a:	4b0d      	ldr	r3, [pc, #52]	@ (80070c0 <std+0x60>)
 800708c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800708e:	4b0d      	ldr	r3, [pc, #52]	@ (80070c4 <std+0x64>)
 8007090:	6323      	str	r3, [r4, #48]	@ 0x30
 8007092:	4b0d      	ldr	r3, [pc, #52]	@ (80070c8 <std+0x68>)
 8007094:	6224      	str	r4, [r4, #32]
 8007096:	429c      	cmp	r4, r3
 8007098:	d006      	beq.n	80070a8 <std+0x48>
 800709a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800709e:	4294      	cmp	r4, r2
 80070a0:	d002      	beq.n	80070a8 <std+0x48>
 80070a2:	33d0      	adds	r3, #208	@ 0xd0
 80070a4:	429c      	cmp	r4, r3
 80070a6:	d105      	bne.n	80070b4 <std+0x54>
 80070a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b0:	f000 b98e 	b.w	80073d0 <__retarget_lock_init_recursive>
 80070b4:	bd10      	pop	{r4, pc}
 80070b6:	bf00      	nop
 80070b8:	08007251 	.word	0x08007251
 80070bc:	08007273 	.word	0x08007273
 80070c0:	080072ab 	.word	0x080072ab
 80070c4:	080072cf 	.word	0x080072cf
 80070c8:	20000738 	.word	0x20000738

080070cc <stdio_exit_handler>:
 80070cc:	4a02      	ldr	r2, [pc, #8]	@ (80070d8 <stdio_exit_handler+0xc>)
 80070ce:	4903      	ldr	r1, [pc, #12]	@ (80070dc <stdio_exit_handler+0x10>)
 80070d0:	4803      	ldr	r0, [pc, #12]	@ (80070e0 <stdio_exit_handler+0x14>)
 80070d2:	f000 b869 	b.w	80071a8 <_fwalk_sglue>
 80070d6:	bf00      	nop
 80070d8:	200001c0 	.word	0x200001c0
 80070dc:	08008d35 	.word	0x08008d35
 80070e0:	200001d0 	.word	0x200001d0

080070e4 <cleanup_stdio>:
 80070e4:	6841      	ldr	r1, [r0, #4]
 80070e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007118 <cleanup_stdio+0x34>)
 80070e8:	4299      	cmp	r1, r3
 80070ea:	b510      	push	{r4, lr}
 80070ec:	4604      	mov	r4, r0
 80070ee:	d001      	beq.n	80070f4 <cleanup_stdio+0x10>
 80070f0:	f001 fe20 	bl	8008d34 <_fflush_r>
 80070f4:	68a1      	ldr	r1, [r4, #8]
 80070f6:	4b09      	ldr	r3, [pc, #36]	@ (800711c <cleanup_stdio+0x38>)
 80070f8:	4299      	cmp	r1, r3
 80070fa:	d002      	beq.n	8007102 <cleanup_stdio+0x1e>
 80070fc:	4620      	mov	r0, r4
 80070fe:	f001 fe19 	bl	8008d34 <_fflush_r>
 8007102:	68e1      	ldr	r1, [r4, #12]
 8007104:	4b06      	ldr	r3, [pc, #24]	@ (8007120 <cleanup_stdio+0x3c>)
 8007106:	4299      	cmp	r1, r3
 8007108:	d004      	beq.n	8007114 <cleanup_stdio+0x30>
 800710a:	4620      	mov	r0, r4
 800710c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007110:	f001 be10 	b.w	8008d34 <_fflush_r>
 8007114:	bd10      	pop	{r4, pc}
 8007116:	bf00      	nop
 8007118:	20000738 	.word	0x20000738
 800711c:	200007a0 	.word	0x200007a0
 8007120:	20000808 	.word	0x20000808

08007124 <global_stdio_init.part.0>:
 8007124:	b510      	push	{r4, lr}
 8007126:	4b0b      	ldr	r3, [pc, #44]	@ (8007154 <global_stdio_init.part.0+0x30>)
 8007128:	4c0b      	ldr	r4, [pc, #44]	@ (8007158 <global_stdio_init.part.0+0x34>)
 800712a:	4a0c      	ldr	r2, [pc, #48]	@ (800715c <global_stdio_init.part.0+0x38>)
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	4620      	mov	r0, r4
 8007130:	2200      	movs	r2, #0
 8007132:	2104      	movs	r1, #4
 8007134:	f7ff ff94 	bl	8007060 <std>
 8007138:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800713c:	2201      	movs	r2, #1
 800713e:	2109      	movs	r1, #9
 8007140:	f7ff ff8e 	bl	8007060 <std>
 8007144:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007148:	2202      	movs	r2, #2
 800714a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800714e:	2112      	movs	r1, #18
 8007150:	f7ff bf86 	b.w	8007060 <std>
 8007154:	20000870 	.word	0x20000870
 8007158:	20000738 	.word	0x20000738
 800715c:	080070cd 	.word	0x080070cd

08007160 <__sfp_lock_acquire>:
 8007160:	4801      	ldr	r0, [pc, #4]	@ (8007168 <__sfp_lock_acquire+0x8>)
 8007162:	f000 b936 	b.w	80073d2 <__retarget_lock_acquire_recursive>
 8007166:	bf00      	nop
 8007168:	20000879 	.word	0x20000879

0800716c <__sfp_lock_release>:
 800716c:	4801      	ldr	r0, [pc, #4]	@ (8007174 <__sfp_lock_release+0x8>)
 800716e:	f000 b931 	b.w	80073d4 <__retarget_lock_release_recursive>
 8007172:	bf00      	nop
 8007174:	20000879 	.word	0x20000879

08007178 <__sinit>:
 8007178:	b510      	push	{r4, lr}
 800717a:	4604      	mov	r4, r0
 800717c:	f7ff fff0 	bl	8007160 <__sfp_lock_acquire>
 8007180:	6a23      	ldr	r3, [r4, #32]
 8007182:	b11b      	cbz	r3, 800718c <__sinit+0x14>
 8007184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007188:	f7ff bff0 	b.w	800716c <__sfp_lock_release>
 800718c:	4b04      	ldr	r3, [pc, #16]	@ (80071a0 <__sinit+0x28>)
 800718e:	6223      	str	r3, [r4, #32]
 8007190:	4b04      	ldr	r3, [pc, #16]	@ (80071a4 <__sinit+0x2c>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1f5      	bne.n	8007184 <__sinit+0xc>
 8007198:	f7ff ffc4 	bl	8007124 <global_stdio_init.part.0>
 800719c:	e7f2      	b.n	8007184 <__sinit+0xc>
 800719e:	bf00      	nop
 80071a0:	080070e5 	.word	0x080070e5
 80071a4:	20000870 	.word	0x20000870

080071a8 <_fwalk_sglue>:
 80071a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071ac:	4607      	mov	r7, r0
 80071ae:	4688      	mov	r8, r1
 80071b0:	4614      	mov	r4, r2
 80071b2:	2600      	movs	r6, #0
 80071b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071b8:	f1b9 0901 	subs.w	r9, r9, #1
 80071bc:	d505      	bpl.n	80071ca <_fwalk_sglue+0x22>
 80071be:	6824      	ldr	r4, [r4, #0]
 80071c0:	2c00      	cmp	r4, #0
 80071c2:	d1f7      	bne.n	80071b4 <_fwalk_sglue+0xc>
 80071c4:	4630      	mov	r0, r6
 80071c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ca:	89ab      	ldrh	r3, [r5, #12]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d907      	bls.n	80071e0 <_fwalk_sglue+0x38>
 80071d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071d4:	3301      	adds	r3, #1
 80071d6:	d003      	beq.n	80071e0 <_fwalk_sglue+0x38>
 80071d8:	4629      	mov	r1, r5
 80071da:	4638      	mov	r0, r7
 80071dc:	47c0      	blx	r8
 80071de:	4306      	orrs	r6, r0
 80071e0:	3568      	adds	r5, #104	@ 0x68
 80071e2:	e7e9      	b.n	80071b8 <_fwalk_sglue+0x10>

080071e4 <sniprintf>:
 80071e4:	b40c      	push	{r2, r3}
 80071e6:	b530      	push	{r4, r5, lr}
 80071e8:	4b18      	ldr	r3, [pc, #96]	@ (800724c <sniprintf+0x68>)
 80071ea:	1e0c      	subs	r4, r1, #0
 80071ec:	681d      	ldr	r5, [r3, #0]
 80071ee:	b09d      	sub	sp, #116	@ 0x74
 80071f0:	da08      	bge.n	8007204 <sniprintf+0x20>
 80071f2:	238b      	movs	r3, #139	@ 0x8b
 80071f4:	602b      	str	r3, [r5, #0]
 80071f6:	f04f 30ff 	mov.w	r0, #4294967295
 80071fa:	b01d      	add	sp, #116	@ 0x74
 80071fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007200:	b002      	add	sp, #8
 8007202:	4770      	bx	lr
 8007204:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007208:	f8ad 3014 	strh.w	r3, [sp, #20]
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007212:	bf14      	ite	ne
 8007214:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007218:	4623      	moveq	r3, r4
 800721a:	9304      	str	r3, [sp, #16]
 800721c:	9307      	str	r3, [sp, #28]
 800721e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007222:	9002      	str	r0, [sp, #8]
 8007224:	9006      	str	r0, [sp, #24]
 8007226:	f8ad 3016 	strh.w	r3, [sp, #22]
 800722a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800722c:	ab21      	add	r3, sp, #132	@ 0x84
 800722e:	a902      	add	r1, sp, #8
 8007230:	4628      	mov	r0, r5
 8007232:	9301      	str	r3, [sp, #4]
 8007234:	f001 fbfe 	bl	8008a34 <_svfiprintf_r>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	bfbc      	itt	lt
 800723c:	238b      	movlt	r3, #139	@ 0x8b
 800723e:	602b      	strlt	r3, [r5, #0]
 8007240:	2c00      	cmp	r4, #0
 8007242:	d0da      	beq.n	80071fa <sniprintf+0x16>
 8007244:	9b02      	ldr	r3, [sp, #8]
 8007246:	2200      	movs	r2, #0
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	e7d6      	b.n	80071fa <sniprintf+0x16>
 800724c:	200001cc 	.word	0x200001cc

08007250 <__sread>:
 8007250:	b510      	push	{r4, lr}
 8007252:	460c      	mov	r4, r1
 8007254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007258:	f000 f86c 	bl	8007334 <_read_r>
 800725c:	2800      	cmp	r0, #0
 800725e:	bfab      	itete	ge
 8007260:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007262:	89a3      	ldrhlt	r3, [r4, #12]
 8007264:	181b      	addge	r3, r3, r0
 8007266:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800726a:	bfac      	ite	ge
 800726c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800726e:	81a3      	strhlt	r3, [r4, #12]
 8007270:	bd10      	pop	{r4, pc}

08007272 <__swrite>:
 8007272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007276:	461f      	mov	r7, r3
 8007278:	898b      	ldrh	r3, [r1, #12]
 800727a:	05db      	lsls	r3, r3, #23
 800727c:	4605      	mov	r5, r0
 800727e:	460c      	mov	r4, r1
 8007280:	4616      	mov	r6, r2
 8007282:	d505      	bpl.n	8007290 <__swrite+0x1e>
 8007284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007288:	2302      	movs	r3, #2
 800728a:	2200      	movs	r2, #0
 800728c:	f000 f840 	bl	8007310 <_lseek_r>
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007296:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800729a:	81a3      	strh	r3, [r4, #12]
 800729c:	4632      	mov	r2, r6
 800729e:	463b      	mov	r3, r7
 80072a0:	4628      	mov	r0, r5
 80072a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072a6:	f000 b857 	b.w	8007358 <_write_r>

080072aa <__sseek>:
 80072aa:	b510      	push	{r4, lr}
 80072ac:	460c      	mov	r4, r1
 80072ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b2:	f000 f82d 	bl	8007310 <_lseek_r>
 80072b6:	1c43      	adds	r3, r0, #1
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	bf15      	itete	ne
 80072bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80072be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80072c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80072c6:	81a3      	strheq	r3, [r4, #12]
 80072c8:	bf18      	it	ne
 80072ca:	81a3      	strhne	r3, [r4, #12]
 80072cc:	bd10      	pop	{r4, pc}

080072ce <__sclose>:
 80072ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d2:	f000 b80d 	b.w	80072f0 <_close_r>

080072d6 <memset>:
 80072d6:	4402      	add	r2, r0
 80072d8:	4603      	mov	r3, r0
 80072da:	4293      	cmp	r3, r2
 80072dc:	d100      	bne.n	80072e0 <memset+0xa>
 80072de:	4770      	bx	lr
 80072e0:	f803 1b01 	strb.w	r1, [r3], #1
 80072e4:	e7f9      	b.n	80072da <memset+0x4>
	...

080072e8 <_localeconv_r>:
 80072e8:	4800      	ldr	r0, [pc, #0]	@ (80072ec <_localeconv_r+0x4>)
 80072ea:	4770      	bx	lr
 80072ec:	2000030c 	.word	0x2000030c

080072f0 <_close_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	4d06      	ldr	r5, [pc, #24]	@ (800730c <_close_r+0x1c>)
 80072f4:	2300      	movs	r3, #0
 80072f6:	4604      	mov	r4, r0
 80072f8:	4608      	mov	r0, r1
 80072fa:	602b      	str	r3, [r5, #0]
 80072fc:	f7fb ff36 	bl	800316c <_close>
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	d102      	bne.n	800730a <_close_r+0x1a>
 8007304:	682b      	ldr	r3, [r5, #0]
 8007306:	b103      	cbz	r3, 800730a <_close_r+0x1a>
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	20000874 	.word	0x20000874

08007310 <_lseek_r>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	4d07      	ldr	r5, [pc, #28]	@ (8007330 <_lseek_r+0x20>)
 8007314:	4604      	mov	r4, r0
 8007316:	4608      	mov	r0, r1
 8007318:	4611      	mov	r1, r2
 800731a:	2200      	movs	r2, #0
 800731c:	602a      	str	r2, [r5, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	f7fb ff4b 	bl	80031ba <_lseek>
 8007324:	1c43      	adds	r3, r0, #1
 8007326:	d102      	bne.n	800732e <_lseek_r+0x1e>
 8007328:	682b      	ldr	r3, [r5, #0]
 800732a:	b103      	cbz	r3, 800732e <_lseek_r+0x1e>
 800732c:	6023      	str	r3, [r4, #0]
 800732e:	bd38      	pop	{r3, r4, r5, pc}
 8007330:	20000874 	.word	0x20000874

08007334 <_read_r>:
 8007334:	b538      	push	{r3, r4, r5, lr}
 8007336:	4d07      	ldr	r5, [pc, #28]	@ (8007354 <_read_r+0x20>)
 8007338:	4604      	mov	r4, r0
 800733a:	4608      	mov	r0, r1
 800733c:	4611      	mov	r1, r2
 800733e:	2200      	movs	r2, #0
 8007340:	602a      	str	r2, [r5, #0]
 8007342:	461a      	mov	r2, r3
 8007344:	f7fb fed9 	bl	80030fa <_read>
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	d102      	bne.n	8007352 <_read_r+0x1e>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	b103      	cbz	r3, 8007352 <_read_r+0x1e>
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	bd38      	pop	{r3, r4, r5, pc}
 8007354:	20000874 	.word	0x20000874

08007358 <_write_r>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	4d07      	ldr	r5, [pc, #28]	@ (8007378 <_write_r+0x20>)
 800735c:	4604      	mov	r4, r0
 800735e:	4608      	mov	r0, r1
 8007360:	4611      	mov	r1, r2
 8007362:	2200      	movs	r2, #0
 8007364:	602a      	str	r2, [r5, #0]
 8007366:	461a      	mov	r2, r3
 8007368:	f7fb fee4 	bl	8003134 <_write>
 800736c:	1c43      	adds	r3, r0, #1
 800736e:	d102      	bne.n	8007376 <_write_r+0x1e>
 8007370:	682b      	ldr	r3, [r5, #0]
 8007372:	b103      	cbz	r3, 8007376 <_write_r+0x1e>
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	bd38      	pop	{r3, r4, r5, pc}
 8007378:	20000874 	.word	0x20000874

0800737c <__errno>:
 800737c:	4b01      	ldr	r3, [pc, #4]	@ (8007384 <__errno+0x8>)
 800737e:	6818      	ldr	r0, [r3, #0]
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	200001cc 	.word	0x200001cc

08007388 <__libc_init_array>:
 8007388:	b570      	push	{r4, r5, r6, lr}
 800738a:	4d0d      	ldr	r5, [pc, #52]	@ (80073c0 <__libc_init_array+0x38>)
 800738c:	4c0d      	ldr	r4, [pc, #52]	@ (80073c4 <__libc_init_array+0x3c>)
 800738e:	1b64      	subs	r4, r4, r5
 8007390:	10a4      	asrs	r4, r4, #2
 8007392:	2600      	movs	r6, #0
 8007394:	42a6      	cmp	r6, r4
 8007396:	d109      	bne.n	80073ac <__libc_init_array+0x24>
 8007398:	4d0b      	ldr	r5, [pc, #44]	@ (80073c8 <__libc_init_array+0x40>)
 800739a:	4c0c      	ldr	r4, [pc, #48]	@ (80073cc <__libc_init_array+0x44>)
 800739c:	f005 fb1c 	bl	800c9d8 <_init>
 80073a0:	1b64      	subs	r4, r4, r5
 80073a2:	10a4      	asrs	r4, r4, #2
 80073a4:	2600      	movs	r6, #0
 80073a6:	42a6      	cmp	r6, r4
 80073a8:	d105      	bne.n	80073b6 <__libc_init_array+0x2e>
 80073aa:	bd70      	pop	{r4, r5, r6, pc}
 80073ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b0:	4798      	blx	r3
 80073b2:	3601      	adds	r6, #1
 80073b4:	e7ee      	b.n	8007394 <__libc_init_array+0xc>
 80073b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ba:	4798      	blx	r3
 80073bc:	3601      	adds	r6, #1
 80073be:	e7f2      	b.n	80073a6 <__libc_init_array+0x1e>
 80073c0:	0800d410 	.word	0x0800d410
 80073c4:	0800d410 	.word	0x0800d410
 80073c8:	0800d410 	.word	0x0800d410
 80073cc:	0800d414 	.word	0x0800d414

080073d0 <__retarget_lock_init_recursive>:
 80073d0:	4770      	bx	lr

080073d2 <__retarget_lock_acquire_recursive>:
 80073d2:	4770      	bx	lr

080073d4 <__retarget_lock_release_recursive>:
 80073d4:	4770      	bx	lr

080073d6 <quorem>:
 80073d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073da:	6903      	ldr	r3, [r0, #16]
 80073dc:	690c      	ldr	r4, [r1, #16]
 80073de:	42a3      	cmp	r3, r4
 80073e0:	4607      	mov	r7, r0
 80073e2:	db7e      	blt.n	80074e2 <quorem+0x10c>
 80073e4:	3c01      	subs	r4, #1
 80073e6:	f101 0814 	add.w	r8, r1, #20
 80073ea:	00a3      	lsls	r3, r4, #2
 80073ec:	f100 0514 	add.w	r5, r0, #20
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073f6:	9301      	str	r3, [sp, #4]
 80073f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007400:	3301      	adds	r3, #1
 8007402:	429a      	cmp	r2, r3
 8007404:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007408:	fbb2 f6f3 	udiv	r6, r2, r3
 800740c:	d32e      	bcc.n	800746c <quorem+0x96>
 800740e:	f04f 0a00 	mov.w	sl, #0
 8007412:	46c4      	mov	ip, r8
 8007414:	46ae      	mov	lr, r5
 8007416:	46d3      	mov	fp, sl
 8007418:	f85c 3b04 	ldr.w	r3, [ip], #4
 800741c:	b298      	uxth	r0, r3
 800741e:	fb06 a000 	mla	r0, r6, r0, sl
 8007422:	0c02      	lsrs	r2, r0, #16
 8007424:	0c1b      	lsrs	r3, r3, #16
 8007426:	fb06 2303 	mla	r3, r6, r3, r2
 800742a:	f8de 2000 	ldr.w	r2, [lr]
 800742e:	b280      	uxth	r0, r0
 8007430:	b292      	uxth	r2, r2
 8007432:	1a12      	subs	r2, r2, r0
 8007434:	445a      	add	r2, fp
 8007436:	f8de 0000 	ldr.w	r0, [lr]
 800743a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800743e:	b29b      	uxth	r3, r3
 8007440:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007444:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007448:	b292      	uxth	r2, r2
 800744a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800744e:	45e1      	cmp	r9, ip
 8007450:	f84e 2b04 	str.w	r2, [lr], #4
 8007454:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007458:	d2de      	bcs.n	8007418 <quorem+0x42>
 800745a:	9b00      	ldr	r3, [sp, #0]
 800745c:	58eb      	ldr	r3, [r5, r3]
 800745e:	b92b      	cbnz	r3, 800746c <quorem+0x96>
 8007460:	9b01      	ldr	r3, [sp, #4]
 8007462:	3b04      	subs	r3, #4
 8007464:	429d      	cmp	r5, r3
 8007466:	461a      	mov	r2, r3
 8007468:	d32f      	bcc.n	80074ca <quorem+0xf4>
 800746a:	613c      	str	r4, [r7, #16]
 800746c:	4638      	mov	r0, r7
 800746e:	f001 f97d 	bl	800876c <__mcmp>
 8007472:	2800      	cmp	r0, #0
 8007474:	db25      	blt.n	80074c2 <quorem+0xec>
 8007476:	4629      	mov	r1, r5
 8007478:	2000      	movs	r0, #0
 800747a:	f858 2b04 	ldr.w	r2, [r8], #4
 800747e:	f8d1 c000 	ldr.w	ip, [r1]
 8007482:	fa1f fe82 	uxth.w	lr, r2
 8007486:	fa1f f38c 	uxth.w	r3, ip
 800748a:	eba3 030e 	sub.w	r3, r3, lr
 800748e:	4403      	add	r3, r0
 8007490:	0c12      	lsrs	r2, r2, #16
 8007492:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007496:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800749a:	b29b      	uxth	r3, r3
 800749c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074a0:	45c1      	cmp	r9, r8
 80074a2:	f841 3b04 	str.w	r3, [r1], #4
 80074a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80074aa:	d2e6      	bcs.n	800747a <quorem+0xa4>
 80074ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074b4:	b922      	cbnz	r2, 80074c0 <quorem+0xea>
 80074b6:	3b04      	subs	r3, #4
 80074b8:	429d      	cmp	r5, r3
 80074ba:	461a      	mov	r2, r3
 80074bc:	d30b      	bcc.n	80074d6 <quorem+0x100>
 80074be:	613c      	str	r4, [r7, #16]
 80074c0:	3601      	adds	r6, #1
 80074c2:	4630      	mov	r0, r6
 80074c4:	b003      	add	sp, #12
 80074c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ca:	6812      	ldr	r2, [r2, #0]
 80074cc:	3b04      	subs	r3, #4
 80074ce:	2a00      	cmp	r2, #0
 80074d0:	d1cb      	bne.n	800746a <quorem+0x94>
 80074d2:	3c01      	subs	r4, #1
 80074d4:	e7c6      	b.n	8007464 <quorem+0x8e>
 80074d6:	6812      	ldr	r2, [r2, #0]
 80074d8:	3b04      	subs	r3, #4
 80074da:	2a00      	cmp	r2, #0
 80074dc:	d1ef      	bne.n	80074be <quorem+0xe8>
 80074de:	3c01      	subs	r4, #1
 80074e0:	e7ea      	b.n	80074b8 <quorem+0xe2>
 80074e2:	2000      	movs	r0, #0
 80074e4:	e7ee      	b.n	80074c4 <quorem+0xee>
	...

080074e8 <_dtoa_r>:
 80074e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ec:	69c7      	ldr	r7, [r0, #28]
 80074ee:	b097      	sub	sp, #92	@ 0x5c
 80074f0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80074f4:	ec55 4b10 	vmov	r4, r5, d0
 80074f8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80074fa:	9107      	str	r1, [sp, #28]
 80074fc:	4681      	mov	r9, r0
 80074fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8007500:	9311      	str	r3, [sp, #68]	@ 0x44
 8007502:	b97f      	cbnz	r7, 8007524 <_dtoa_r+0x3c>
 8007504:	2010      	movs	r0, #16
 8007506:	f000 fe09 	bl	800811c <malloc>
 800750a:	4602      	mov	r2, r0
 800750c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007510:	b920      	cbnz	r0, 800751c <_dtoa_r+0x34>
 8007512:	4ba9      	ldr	r3, [pc, #676]	@ (80077b8 <_dtoa_r+0x2d0>)
 8007514:	21ef      	movs	r1, #239	@ 0xef
 8007516:	48a9      	ldr	r0, [pc, #676]	@ (80077bc <_dtoa_r+0x2d4>)
 8007518:	f001 fc6c 	bl	8008df4 <__assert_func>
 800751c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007520:	6007      	str	r7, [r0, #0]
 8007522:	60c7      	str	r7, [r0, #12]
 8007524:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007528:	6819      	ldr	r1, [r3, #0]
 800752a:	b159      	cbz	r1, 8007544 <_dtoa_r+0x5c>
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	604a      	str	r2, [r1, #4]
 8007530:	2301      	movs	r3, #1
 8007532:	4093      	lsls	r3, r2
 8007534:	608b      	str	r3, [r1, #8]
 8007536:	4648      	mov	r0, r9
 8007538:	f000 fee6 	bl	8008308 <_Bfree>
 800753c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007540:	2200      	movs	r2, #0
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	1e2b      	subs	r3, r5, #0
 8007546:	bfb9      	ittee	lt
 8007548:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800754c:	9305      	strlt	r3, [sp, #20]
 800754e:	2300      	movge	r3, #0
 8007550:	6033      	strge	r3, [r6, #0]
 8007552:	9f05      	ldr	r7, [sp, #20]
 8007554:	4b9a      	ldr	r3, [pc, #616]	@ (80077c0 <_dtoa_r+0x2d8>)
 8007556:	bfbc      	itt	lt
 8007558:	2201      	movlt	r2, #1
 800755a:	6032      	strlt	r2, [r6, #0]
 800755c:	43bb      	bics	r3, r7
 800755e:	d112      	bne.n	8007586 <_dtoa_r+0x9e>
 8007560:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007562:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800756c:	4323      	orrs	r3, r4
 800756e:	f000 855a 	beq.w	8008026 <_dtoa_r+0xb3e>
 8007572:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007574:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80077d4 <_dtoa_r+0x2ec>
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 855c 	beq.w	8008036 <_dtoa_r+0xb4e>
 800757e:	f10a 0303 	add.w	r3, sl, #3
 8007582:	f000 bd56 	b.w	8008032 <_dtoa_r+0xb4a>
 8007586:	ed9d 7b04 	vldr	d7, [sp, #16]
 800758a:	2200      	movs	r2, #0
 800758c:	ec51 0b17 	vmov	r0, r1, d7
 8007590:	2300      	movs	r3, #0
 8007592:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007596:	f7f9 fab7 	bl	8000b08 <__aeabi_dcmpeq>
 800759a:	4680      	mov	r8, r0
 800759c:	b158      	cbz	r0, 80075b6 <_dtoa_r+0xce>
 800759e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80075a0:	2301      	movs	r3, #1
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80075a6:	b113      	cbz	r3, 80075ae <_dtoa_r+0xc6>
 80075a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80075aa:	4b86      	ldr	r3, [pc, #536]	@ (80077c4 <_dtoa_r+0x2dc>)
 80075ac:	6013      	str	r3, [r2, #0]
 80075ae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80077d8 <_dtoa_r+0x2f0>
 80075b2:	f000 bd40 	b.w	8008036 <_dtoa_r+0xb4e>
 80075b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80075ba:	aa14      	add	r2, sp, #80	@ 0x50
 80075bc:	a915      	add	r1, sp, #84	@ 0x54
 80075be:	4648      	mov	r0, r9
 80075c0:	f001 f984 	bl	80088cc <__d2b>
 80075c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80075c8:	9002      	str	r0, [sp, #8]
 80075ca:	2e00      	cmp	r6, #0
 80075cc:	d078      	beq.n	80076c0 <_dtoa_r+0x1d8>
 80075ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075d0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80075d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80075dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80075e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80075e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80075e8:	4619      	mov	r1, r3
 80075ea:	2200      	movs	r2, #0
 80075ec:	4b76      	ldr	r3, [pc, #472]	@ (80077c8 <_dtoa_r+0x2e0>)
 80075ee:	f7f8 fe6b 	bl	80002c8 <__aeabi_dsub>
 80075f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80077a0 <_dtoa_r+0x2b8>)
 80075f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f8:	f7f9 f81e 	bl	8000638 <__aeabi_dmul>
 80075fc:	a36a      	add	r3, pc, #424	@ (adr r3, 80077a8 <_dtoa_r+0x2c0>)
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	f7f8 fe63 	bl	80002cc <__adddf3>
 8007606:	4604      	mov	r4, r0
 8007608:	4630      	mov	r0, r6
 800760a:	460d      	mov	r5, r1
 800760c:	f7f8 ffaa 	bl	8000564 <__aeabi_i2d>
 8007610:	a367      	add	r3, pc, #412	@ (adr r3, 80077b0 <_dtoa_r+0x2c8>)
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	f7f9 f80f 	bl	8000638 <__aeabi_dmul>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	4620      	mov	r0, r4
 8007620:	4629      	mov	r1, r5
 8007622:	f7f8 fe53 	bl	80002cc <__adddf3>
 8007626:	4604      	mov	r4, r0
 8007628:	460d      	mov	r5, r1
 800762a:	f7f9 fab5 	bl	8000b98 <__aeabi_d2iz>
 800762e:	2200      	movs	r2, #0
 8007630:	4607      	mov	r7, r0
 8007632:	2300      	movs	r3, #0
 8007634:	4620      	mov	r0, r4
 8007636:	4629      	mov	r1, r5
 8007638:	f7f9 fa70 	bl	8000b1c <__aeabi_dcmplt>
 800763c:	b140      	cbz	r0, 8007650 <_dtoa_r+0x168>
 800763e:	4638      	mov	r0, r7
 8007640:	f7f8 ff90 	bl	8000564 <__aeabi_i2d>
 8007644:	4622      	mov	r2, r4
 8007646:	462b      	mov	r3, r5
 8007648:	f7f9 fa5e 	bl	8000b08 <__aeabi_dcmpeq>
 800764c:	b900      	cbnz	r0, 8007650 <_dtoa_r+0x168>
 800764e:	3f01      	subs	r7, #1
 8007650:	2f16      	cmp	r7, #22
 8007652:	d852      	bhi.n	80076fa <_dtoa_r+0x212>
 8007654:	4b5d      	ldr	r3, [pc, #372]	@ (80077cc <_dtoa_r+0x2e4>)
 8007656:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007662:	f7f9 fa5b 	bl	8000b1c <__aeabi_dcmplt>
 8007666:	2800      	cmp	r0, #0
 8007668:	d049      	beq.n	80076fe <_dtoa_r+0x216>
 800766a:	3f01      	subs	r7, #1
 800766c:	2300      	movs	r3, #0
 800766e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007670:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007672:	1b9b      	subs	r3, r3, r6
 8007674:	1e5a      	subs	r2, r3, #1
 8007676:	bf45      	ittet	mi
 8007678:	f1c3 0301 	rsbmi	r3, r3, #1
 800767c:	9300      	strmi	r3, [sp, #0]
 800767e:	2300      	movpl	r3, #0
 8007680:	2300      	movmi	r3, #0
 8007682:	9206      	str	r2, [sp, #24]
 8007684:	bf54      	ite	pl
 8007686:	9300      	strpl	r3, [sp, #0]
 8007688:	9306      	strmi	r3, [sp, #24]
 800768a:	2f00      	cmp	r7, #0
 800768c:	db39      	blt.n	8007702 <_dtoa_r+0x21a>
 800768e:	9b06      	ldr	r3, [sp, #24]
 8007690:	970d      	str	r7, [sp, #52]	@ 0x34
 8007692:	443b      	add	r3, r7
 8007694:	9306      	str	r3, [sp, #24]
 8007696:	2300      	movs	r3, #0
 8007698:	9308      	str	r3, [sp, #32]
 800769a:	9b07      	ldr	r3, [sp, #28]
 800769c:	2b09      	cmp	r3, #9
 800769e:	d863      	bhi.n	8007768 <_dtoa_r+0x280>
 80076a0:	2b05      	cmp	r3, #5
 80076a2:	bfc4      	itt	gt
 80076a4:	3b04      	subgt	r3, #4
 80076a6:	9307      	strgt	r3, [sp, #28]
 80076a8:	9b07      	ldr	r3, [sp, #28]
 80076aa:	f1a3 0302 	sub.w	r3, r3, #2
 80076ae:	bfcc      	ite	gt
 80076b0:	2400      	movgt	r4, #0
 80076b2:	2401      	movle	r4, #1
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d863      	bhi.n	8007780 <_dtoa_r+0x298>
 80076b8:	e8df f003 	tbb	[pc, r3]
 80076bc:	2b375452 	.word	0x2b375452
 80076c0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80076c4:	441e      	add	r6, r3
 80076c6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	bfc1      	itttt	gt
 80076ce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80076d2:	409f      	lslgt	r7, r3
 80076d4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80076d8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80076dc:	bfd6      	itet	le
 80076de:	f1c3 0320 	rsble	r3, r3, #32
 80076e2:	ea47 0003 	orrgt.w	r0, r7, r3
 80076e6:	fa04 f003 	lslle.w	r0, r4, r3
 80076ea:	f7f8 ff2b 	bl	8000544 <__aeabi_ui2d>
 80076ee:	2201      	movs	r2, #1
 80076f0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80076f4:	3e01      	subs	r6, #1
 80076f6:	9212      	str	r2, [sp, #72]	@ 0x48
 80076f8:	e776      	b.n	80075e8 <_dtoa_r+0x100>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e7b7      	b.n	800766e <_dtoa_r+0x186>
 80076fe:	9010      	str	r0, [sp, #64]	@ 0x40
 8007700:	e7b6      	b.n	8007670 <_dtoa_r+0x188>
 8007702:	9b00      	ldr	r3, [sp, #0]
 8007704:	1bdb      	subs	r3, r3, r7
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	427b      	negs	r3, r7
 800770a:	9308      	str	r3, [sp, #32]
 800770c:	2300      	movs	r3, #0
 800770e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007710:	e7c3      	b.n	800769a <_dtoa_r+0x1b2>
 8007712:	2301      	movs	r3, #1
 8007714:	9309      	str	r3, [sp, #36]	@ 0x24
 8007716:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007718:	eb07 0b03 	add.w	fp, r7, r3
 800771c:	f10b 0301 	add.w	r3, fp, #1
 8007720:	2b01      	cmp	r3, #1
 8007722:	9303      	str	r3, [sp, #12]
 8007724:	bfb8      	it	lt
 8007726:	2301      	movlt	r3, #1
 8007728:	e006      	b.n	8007738 <_dtoa_r+0x250>
 800772a:	2301      	movs	r3, #1
 800772c:	9309      	str	r3, [sp, #36]	@ 0x24
 800772e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007730:	2b00      	cmp	r3, #0
 8007732:	dd28      	ble.n	8007786 <_dtoa_r+0x29e>
 8007734:	469b      	mov	fp, r3
 8007736:	9303      	str	r3, [sp, #12]
 8007738:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800773c:	2100      	movs	r1, #0
 800773e:	2204      	movs	r2, #4
 8007740:	f102 0514 	add.w	r5, r2, #20
 8007744:	429d      	cmp	r5, r3
 8007746:	d926      	bls.n	8007796 <_dtoa_r+0x2ae>
 8007748:	6041      	str	r1, [r0, #4]
 800774a:	4648      	mov	r0, r9
 800774c:	f000 fd9c 	bl	8008288 <_Balloc>
 8007750:	4682      	mov	sl, r0
 8007752:	2800      	cmp	r0, #0
 8007754:	d142      	bne.n	80077dc <_dtoa_r+0x2f4>
 8007756:	4b1e      	ldr	r3, [pc, #120]	@ (80077d0 <_dtoa_r+0x2e8>)
 8007758:	4602      	mov	r2, r0
 800775a:	f240 11af 	movw	r1, #431	@ 0x1af
 800775e:	e6da      	b.n	8007516 <_dtoa_r+0x2e>
 8007760:	2300      	movs	r3, #0
 8007762:	e7e3      	b.n	800772c <_dtoa_r+0x244>
 8007764:	2300      	movs	r3, #0
 8007766:	e7d5      	b.n	8007714 <_dtoa_r+0x22c>
 8007768:	2401      	movs	r4, #1
 800776a:	2300      	movs	r3, #0
 800776c:	9307      	str	r3, [sp, #28]
 800776e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007770:	f04f 3bff 	mov.w	fp, #4294967295
 8007774:	2200      	movs	r2, #0
 8007776:	f8cd b00c 	str.w	fp, [sp, #12]
 800777a:	2312      	movs	r3, #18
 800777c:	920c      	str	r2, [sp, #48]	@ 0x30
 800777e:	e7db      	b.n	8007738 <_dtoa_r+0x250>
 8007780:	2301      	movs	r3, #1
 8007782:	9309      	str	r3, [sp, #36]	@ 0x24
 8007784:	e7f4      	b.n	8007770 <_dtoa_r+0x288>
 8007786:	f04f 0b01 	mov.w	fp, #1
 800778a:	f8cd b00c 	str.w	fp, [sp, #12]
 800778e:	465b      	mov	r3, fp
 8007790:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007794:	e7d0      	b.n	8007738 <_dtoa_r+0x250>
 8007796:	3101      	adds	r1, #1
 8007798:	0052      	lsls	r2, r2, #1
 800779a:	e7d1      	b.n	8007740 <_dtoa_r+0x258>
 800779c:	f3af 8000 	nop.w
 80077a0:	636f4361 	.word	0x636f4361
 80077a4:	3fd287a7 	.word	0x3fd287a7
 80077a8:	8b60c8b3 	.word	0x8b60c8b3
 80077ac:	3fc68a28 	.word	0x3fc68a28
 80077b0:	509f79fb 	.word	0x509f79fb
 80077b4:	3fd34413 	.word	0x3fd34413
 80077b8:	0800ca5d 	.word	0x0800ca5d
 80077bc:	0800ca74 	.word	0x0800ca74
 80077c0:	7ff00000 	.word	0x7ff00000
 80077c4:	0800ca2d 	.word	0x0800ca2d
 80077c8:	3ff80000 	.word	0x3ff80000
 80077cc:	0800cbc8 	.word	0x0800cbc8
 80077d0:	0800cacc 	.word	0x0800cacc
 80077d4:	0800ca59 	.word	0x0800ca59
 80077d8:	0800ca2c 	.word	0x0800ca2c
 80077dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80077e0:	6018      	str	r0, [r3, #0]
 80077e2:	9b03      	ldr	r3, [sp, #12]
 80077e4:	2b0e      	cmp	r3, #14
 80077e6:	f200 80a1 	bhi.w	800792c <_dtoa_r+0x444>
 80077ea:	2c00      	cmp	r4, #0
 80077ec:	f000 809e 	beq.w	800792c <_dtoa_r+0x444>
 80077f0:	2f00      	cmp	r7, #0
 80077f2:	dd33      	ble.n	800785c <_dtoa_r+0x374>
 80077f4:	4b9c      	ldr	r3, [pc, #624]	@ (8007a68 <_dtoa_r+0x580>)
 80077f6:	f007 020f 	and.w	r2, r7, #15
 80077fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077fe:	ed93 7b00 	vldr	d7, [r3]
 8007802:	05f8      	lsls	r0, r7, #23
 8007804:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007808:	ea4f 1427 	mov.w	r4, r7, asr #4
 800780c:	d516      	bpl.n	800783c <_dtoa_r+0x354>
 800780e:	4b97      	ldr	r3, [pc, #604]	@ (8007a6c <_dtoa_r+0x584>)
 8007810:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007814:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007818:	f7f9 f838 	bl	800088c <__aeabi_ddiv>
 800781c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007820:	f004 040f 	and.w	r4, r4, #15
 8007824:	2603      	movs	r6, #3
 8007826:	4d91      	ldr	r5, [pc, #580]	@ (8007a6c <_dtoa_r+0x584>)
 8007828:	b954      	cbnz	r4, 8007840 <_dtoa_r+0x358>
 800782a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800782e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007832:	f7f9 f82b 	bl	800088c <__aeabi_ddiv>
 8007836:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800783a:	e028      	b.n	800788e <_dtoa_r+0x3a6>
 800783c:	2602      	movs	r6, #2
 800783e:	e7f2      	b.n	8007826 <_dtoa_r+0x33e>
 8007840:	07e1      	lsls	r1, r4, #31
 8007842:	d508      	bpl.n	8007856 <_dtoa_r+0x36e>
 8007844:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007848:	e9d5 2300 	ldrd	r2, r3, [r5]
 800784c:	f7f8 fef4 	bl	8000638 <__aeabi_dmul>
 8007850:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007854:	3601      	adds	r6, #1
 8007856:	1064      	asrs	r4, r4, #1
 8007858:	3508      	adds	r5, #8
 800785a:	e7e5      	b.n	8007828 <_dtoa_r+0x340>
 800785c:	f000 80af 	beq.w	80079be <_dtoa_r+0x4d6>
 8007860:	427c      	negs	r4, r7
 8007862:	4b81      	ldr	r3, [pc, #516]	@ (8007a68 <_dtoa_r+0x580>)
 8007864:	4d81      	ldr	r5, [pc, #516]	@ (8007a6c <_dtoa_r+0x584>)
 8007866:	f004 020f 	and.w	r2, r4, #15
 800786a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800786e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007872:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007876:	f7f8 fedf 	bl	8000638 <__aeabi_dmul>
 800787a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800787e:	1124      	asrs	r4, r4, #4
 8007880:	2300      	movs	r3, #0
 8007882:	2602      	movs	r6, #2
 8007884:	2c00      	cmp	r4, #0
 8007886:	f040 808f 	bne.w	80079a8 <_dtoa_r+0x4c0>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1d3      	bne.n	8007836 <_dtoa_r+0x34e>
 800788e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007890:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 8094 	beq.w	80079c2 <_dtoa_r+0x4da>
 800789a:	4b75      	ldr	r3, [pc, #468]	@ (8007a70 <_dtoa_r+0x588>)
 800789c:	2200      	movs	r2, #0
 800789e:	4620      	mov	r0, r4
 80078a0:	4629      	mov	r1, r5
 80078a2:	f7f9 f93b 	bl	8000b1c <__aeabi_dcmplt>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	f000 808b 	beq.w	80079c2 <_dtoa_r+0x4da>
 80078ac:	9b03      	ldr	r3, [sp, #12]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f000 8087 	beq.w	80079c2 <_dtoa_r+0x4da>
 80078b4:	f1bb 0f00 	cmp.w	fp, #0
 80078b8:	dd34      	ble.n	8007924 <_dtoa_r+0x43c>
 80078ba:	4620      	mov	r0, r4
 80078bc:	4b6d      	ldr	r3, [pc, #436]	@ (8007a74 <_dtoa_r+0x58c>)
 80078be:	2200      	movs	r2, #0
 80078c0:	4629      	mov	r1, r5
 80078c2:	f7f8 feb9 	bl	8000638 <__aeabi_dmul>
 80078c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078ca:	f107 38ff 	add.w	r8, r7, #4294967295
 80078ce:	3601      	adds	r6, #1
 80078d0:	465c      	mov	r4, fp
 80078d2:	4630      	mov	r0, r6
 80078d4:	f7f8 fe46 	bl	8000564 <__aeabi_i2d>
 80078d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078dc:	f7f8 feac 	bl	8000638 <__aeabi_dmul>
 80078e0:	4b65      	ldr	r3, [pc, #404]	@ (8007a78 <_dtoa_r+0x590>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	f7f8 fcf2 	bl	80002cc <__adddf3>
 80078e8:	4605      	mov	r5, r0
 80078ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80078ee:	2c00      	cmp	r4, #0
 80078f0:	d16a      	bne.n	80079c8 <_dtoa_r+0x4e0>
 80078f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078f6:	4b61      	ldr	r3, [pc, #388]	@ (8007a7c <_dtoa_r+0x594>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	f7f8 fce5 	bl	80002c8 <__aeabi_dsub>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007906:	462a      	mov	r2, r5
 8007908:	4633      	mov	r3, r6
 800790a:	f7f9 f925 	bl	8000b58 <__aeabi_dcmpgt>
 800790e:	2800      	cmp	r0, #0
 8007910:	f040 8298 	bne.w	8007e44 <_dtoa_r+0x95c>
 8007914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007918:	462a      	mov	r2, r5
 800791a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800791e:	f7f9 f8fd 	bl	8000b1c <__aeabi_dcmplt>
 8007922:	bb38      	cbnz	r0, 8007974 <_dtoa_r+0x48c>
 8007924:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007928:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800792c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800792e:	2b00      	cmp	r3, #0
 8007930:	f2c0 8157 	blt.w	8007be2 <_dtoa_r+0x6fa>
 8007934:	2f0e      	cmp	r7, #14
 8007936:	f300 8154 	bgt.w	8007be2 <_dtoa_r+0x6fa>
 800793a:	4b4b      	ldr	r3, [pc, #300]	@ (8007a68 <_dtoa_r+0x580>)
 800793c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007940:	ed93 7b00 	vldr	d7, [r3]
 8007944:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007946:	2b00      	cmp	r3, #0
 8007948:	ed8d 7b00 	vstr	d7, [sp]
 800794c:	f280 80e5 	bge.w	8007b1a <_dtoa_r+0x632>
 8007950:	9b03      	ldr	r3, [sp, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	f300 80e1 	bgt.w	8007b1a <_dtoa_r+0x632>
 8007958:	d10c      	bne.n	8007974 <_dtoa_r+0x48c>
 800795a:	4b48      	ldr	r3, [pc, #288]	@ (8007a7c <_dtoa_r+0x594>)
 800795c:	2200      	movs	r2, #0
 800795e:	ec51 0b17 	vmov	r0, r1, d7
 8007962:	f7f8 fe69 	bl	8000638 <__aeabi_dmul>
 8007966:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800796a:	f7f9 f8eb 	bl	8000b44 <__aeabi_dcmpge>
 800796e:	2800      	cmp	r0, #0
 8007970:	f000 8266 	beq.w	8007e40 <_dtoa_r+0x958>
 8007974:	2400      	movs	r4, #0
 8007976:	4625      	mov	r5, r4
 8007978:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800797a:	4656      	mov	r6, sl
 800797c:	ea6f 0803 	mvn.w	r8, r3
 8007980:	2700      	movs	r7, #0
 8007982:	4621      	mov	r1, r4
 8007984:	4648      	mov	r0, r9
 8007986:	f000 fcbf 	bl	8008308 <_Bfree>
 800798a:	2d00      	cmp	r5, #0
 800798c:	f000 80bd 	beq.w	8007b0a <_dtoa_r+0x622>
 8007990:	b12f      	cbz	r7, 800799e <_dtoa_r+0x4b6>
 8007992:	42af      	cmp	r7, r5
 8007994:	d003      	beq.n	800799e <_dtoa_r+0x4b6>
 8007996:	4639      	mov	r1, r7
 8007998:	4648      	mov	r0, r9
 800799a:	f000 fcb5 	bl	8008308 <_Bfree>
 800799e:	4629      	mov	r1, r5
 80079a0:	4648      	mov	r0, r9
 80079a2:	f000 fcb1 	bl	8008308 <_Bfree>
 80079a6:	e0b0      	b.n	8007b0a <_dtoa_r+0x622>
 80079a8:	07e2      	lsls	r2, r4, #31
 80079aa:	d505      	bpl.n	80079b8 <_dtoa_r+0x4d0>
 80079ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80079b0:	f7f8 fe42 	bl	8000638 <__aeabi_dmul>
 80079b4:	3601      	adds	r6, #1
 80079b6:	2301      	movs	r3, #1
 80079b8:	1064      	asrs	r4, r4, #1
 80079ba:	3508      	adds	r5, #8
 80079bc:	e762      	b.n	8007884 <_dtoa_r+0x39c>
 80079be:	2602      	movs	r6, #2
 80079c0:	e765      	b.n	800788e <_dtoa_r+0x3a6>
 80079c2:	9c03      	ldr	r4, [sp, #12]
 80079c4:	46b8      	mov	r8, r7
 80079c6:	e784      	b.n	80078d2 <_dtoa_r+0x3ea>
 80079c8:	4b27      	ldr	r3, [pc, #156]	@ (8007a68 <_dtoa_r+0x580>)
 80079ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80079cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80079d4:	4454      	add	r4, sl
 80079d6:	2900      	cmp	r1, #0
 80079d8:	d054      	beq.n	8007a84 <_dtoa_r+0x59c>
 80079da:	4929      	ldr	r1, [pc, #164]	@ (8007a80 <_dtoa_r+0x598>)
 80079dc:	2000      	movs	r0, #0
 80079de:	f7f8 ff55 	bl	800088c <__aeabi_ddiv>
 80079e2:	4633      	mov	r3, r6
 80079e4:	462a      	mov	r2, r5
 80079e6:	f7f8 fc6f 	bl	80002c8 <__aeabi_dsub>
 80079ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80079ee:	4656      	mov	r6, sl
 80079f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079f4:	f7f9 f8d0 	bl	8000b98 <__aeabi_d2iz>
 80079f8:	4605      	mov	r5, r0
 80079fa:	f7f8 fdb3 	bl	8000564 <__aeabi_i2d>
 80079fe:	4602      	mov	r2, r0
 8007a00:	460b      	mov	r3, r1
 8007a02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a06:	f7f8 fc5f 	bl	80002c8 <__aeabi_dsub>
 8007a0a:	3530      	adds	r5, #48	@ 0x30
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a14:	f806 5b01 	strb.w	r5, [r6], #1
 8007a18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007a1c:	f7f9 f87e 	bl	8000b1c <__aeabi_dcmplt>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	d172      	bne.n	8007b0a <_dtoa_r+0x622>
 8007a24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a28:	4911      	ldr	r1, [pc, #68]	@ (8007a70 <_dtoa_r+0x588>)
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	f7f8 fc4c 	bl	80002c8 <__aeabi_dsub>
 8007a30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007a34:	f7f9 f872 	bl	8000b1c <__aeabi_dcmplt>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	f040 80b4 	bne.w	8007ba6 <_dtoa_r+0x6be>
 8007a3e:	42a6      	cmp	r6, r4
 8007a40:	f43f af70 	beq.w	8007924 <_dtoa_r+0x43c>
 8007a44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007a48:	4b0a      	ldr	r3, [pc, #40]	@ (8007a74 <_dtoa_r+0x58c>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f7f8 fdf4 	bl	8000638 <__aeabi_dmul>
 8007a50:	4b08      	ldr	r3, [pc, #32]	@ (8007a74 <_dtoa_r+0x58c>)
 8007a52:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007a56:	2200      	movs	r2, #0
 8007a58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a5c:	f7f8 fdec 	bl	8000638 <__aeabi_dmul>
 8007a60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a64:	e7c4      	b.n	80079f0 <_dtoa_r+0x508>
 8007a66:	bf00      	nop
 8007a68:	0800cbc8 	.word	0x0800cbc8
 8007a6c:	0800cba0 	.word	0x0800cba0
 8007a70:	3ff00000 	.word	0x3ff00000
 8007a74:	40240000 	.word	0x40240000
 8007a78:	401c0000 	.word	0x401c0000
 8007a7c:	40140000 	.word	0x40140000
 8007a80:	3fe00000 	.word	0x3fe00000
 8007a84:	4631      	mov	r1, r6
 8007a86:	4628      	mov	r0, r5
 8007a88:	f7f8 fdd6 	bl	8000638 <__aeabi_dmul>
 8007a8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007a90:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007a92:	4656      	mov	r6, sl
 8007a94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a98:	f7f9 f87e 	bl	8000b98 <__aeabi_d2iz>
 8007a9c:	4605      	mov	r5, r0
 8007a9e:	f7f8 fd61 	bl	8000564 <__aeabi_i2d>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007aaa:	f7f8 fc0d 	bl	80002c8 <__aeabi_dsub>
 8007aae:	3530      	adds	r5, #48	@ 0x30
 8007ab0:	f806 5b01 	strb.w	r5, [r6], #1
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	42a6      	cmp	r6, r4
 8007aba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007abe:	f04f 0200 	mov.w	r2, #0
 8007ac2:	d124      	bne.n	8007b0e <_dtoa_r+0x626>
 8007ac4:	4baf      	ldr	r3, [pc, #700]	@ (8007d84 <_dtoa_r+0x89c>)
 8007ac6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007aca:	f7f8 fbff 	bl	80002cc <__adddf3>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ad6:	f7f9 f83f 	bl	8000b58 <__aeabi_dcmpgt>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d163      	bne.n	8007ba6 <_dtoa_r+0x6be>
 8007ade:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007ae2:	49a8      	ldr	r1, [pc, #672]	@ (8007d84 <_dtoa_r+0x89c>)
 8007ae4:	2000      	movs	r0, #0
 8007ae6:	f7f8 fbef 	bl	80002c8 <__aeabi_dsub>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007af2:	f7f9 f813 	bl	8000b1c <__aeabi_dcmplt>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f43f af14 	beq.w	8007924 <_dtoa_r+0x43c>
 8007afc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007afe:	1e73      	subs	r3, r6, #1
 8007b00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007b06:	2b30      	cmp	r3, #48	@ 0x30
 8007b08:	d0f8      	beq.n	8007afc <_dtoa_r+0x614>
 8007b0a:	4647      	mov	r7, r8
 8007b0c:	e03b      	b.n	8007b86 <_dtoa_r+0x69e>
 8007b0e:	4b9e      	ldr	r3, [pc, #632]	@ (8007d88 <_dtoa_r+0x8a0>)
 8007b10:	f7f8 fd92 	bl	8000638 <__aeabi_dmul>
 8007b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b18:	e7bc      	b.n	8007a94 <_dtoa_r+0x5ac>
 8007b1a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007b1e:	4656      	mov	r6, sl
 8007b20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b24:	4620      	mov	r0, r4
 8007b26:	4629      	mov	r1, r5
 8007b28:	f7f8 feb0 	bl	800088c <__aeabi_ddiv>
 8007b2c:	f7f9 f834 	bl	8000b98 <__aeabi_d2iz>
 8007b30:	4680      	mov	r8, r0
 8007b32:	f7f8 fd17 	bl	8000564 <__aeabi_i2d>
 8007b36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b3a:	f7f8 fd7d 	bl	8000638 <__aeabi_dmul>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4620      	mov	r0, r4
 8007b44:	4629      	mov	r1, r5
 8007b46:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007b4a:	f7f8 fbbd 	bl	80002c8 <__aeabi_dsub>
 8007b4e:	f806 4b01 	strb.w	r4, [r6], #1
 8007b52:	9d03      	ldr	r5, [sp, #12]
 8007b54:	eba6 040a 	sub.w	r4, r6, sl
 8007b58:	42a5      	cmp	r5, r4
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	d133      	bne.n	8007bc8 <_dtoa_r+0x6e0>
 8007b60:	f7f8 fbb4 	bl	80002cc <__adddf3>
 8007b64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b68:	4604      	mov	r4, r0
 8007b6a:	460d      	mov	r5, r1
 8007b6c:	f7f8 fff4 	bl	8000b58 <__aeabi_dcmpgt>
 8007b70:	b9c0      	cbnz	r0, 8007ba4 <_dtoa_r+0x6bc>
 8007b72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b76:	4620      	mov	r0, r4
 8007b78:	4629      	mov	r1, r5
 8007b7a:	f7f8 ffc5 	bl	8000b08 <__aeabi_dcmpeq>
 8007b7e:	b110      	cbz	r0, 8007b86 <_dtoa_r+0x69e>
 8007b80:	f018 0f01 	tst.w	r8, #1
 8007b84:	d10e      	bne.n	8007ba4 <_dtoa_r+0x6bc>
 8007b86:	9902      	ldr	r1, [sp, #8]
 8007b88:	4648      	mov	r0, r9
 8007b8a:	f000 fbbd 	bl	8008308 <_Bfree>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	7033      	strb	r3, [r6, #0]
 8007b92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b94:	3701      	adds	r7, #1
 8007b96:	601f      	str	r7, [r3, #0]
 8007b98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 824b 	beq.w	8008036 <_dtoa_r+0xb4e>
 8007ba0:	601e      	str	r6, [r3, #0]
 8007ba2:	e248      	b.n	8008036 <_dtoa_r+0xb4e>
 8007ba4:	46b8      	mov	r8, r7
 8007ba6:	4633      	mov	r3, r6
 8007ba8:	461e      	mov	r6, r3
 8007baa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bae:	2a39      	cmp	r2, #57	@ 0x39
 8007bb0:	d106      	bne.n	8007bc0 <_dtoa_r+0x6d8>
 8007bb2:	459a      	cmp	sl, r3
 8007bb4:	d1f8      	bne.n	8007ba8 <_dtoa_r+0x6c0>
 8007bb6:	2230      	movs	r2, #48	@ 0x30
 8007bb8:	f108 0801 	add.w	r8, r8, #1
 8007bbc:	f88a 2000 	strb.w	r2, [sl]
 8007bc0:	781a      	ldrb	r2, [r3, #0]
 8007bc2:	3201      	adds	r2, #1
 8007bc4:	701a      	strb	r2, [r3, #0]
 8007bc6:	e7a0      	b.n	8007b0a <_dtoa_r+0x622>
 8007bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8007d88 <_dtoa_r+0x8a0>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f7f8 fd34 	bl	8000638 <__aeabi_dmul>
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	460d      	mov	r5, r1
 8007bd8:	f7f8 ff96 	bl	8000b08 <__aeabi_dcmpeq>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d09f      	beq.n	8007b20 <_dtoa_r+0x638>
 8007be0:	e7d1      	b.n	8007b86 <_dtoa_r+0x69e>
 8007be2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007be4:	2a00      	cmp	r2, #0
 8007be6:	f000 80ea 	beq.w	8007dbe <_dtoa_r+0x8d6>
 8007bea:	9a07      	ldr	r2, [sp, #28]
 8007bec:	2a01      	cmp	r2, #1
 8007bee:	f300 80cd 	bgt.w	8007d8c <_dtoa_r+0x8a4>
 8007bf2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007bf4:	2a00      	cmp	r2, #0
 8007bf6:	f000 80c1 	beq.w	8007d7c <_dtoa_r+0x894>
 8007bfa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007bfe:	9c08      	ldr	r4, [sp, #32]
 8007c00:	9e00      	ldr	r6, [sp, #0]
 8007c02:	9a00      	ldr	r2, [sp, #0]
 8007c04:	441a      	add	r2, r3
 8007c06:	9200      	str	r2, [sp, #0]
 8007c08:	9a06      	ldr	r2, [sp, #24]
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	441a      	add	r2, r3
 8007c0e:	4648      	mov	r0, r9
 8007c10:	9206      	str	r2, [sp, #24]
 8007c12:	f000 fc2d 	bl	8008470 <__i2b>
 8007c16:	4605      	mov	r5, r0
 8007c18:	b166      	cbz	r6, 8007c34 <_dtoa_r+0x74c>
 8007c1a:	9b06      	ldr	r3, [sp, #24]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	dd09      	ble.n	8007c34 <_dtoa_r+0x74c>
 8007c20:	42b3      	cmp	r3, r6
 8007c22:	9a00      	ldr	r2, [sp, #0]
 8007c24:	bfa8      	it	ge
 8007c26:	4633      	movge	r3, r6
 8007c28:	1ad2      	subs	r2, r2, r3
 8007c2a:	9200      	str	r2, [sp, #0]
 8007c2c:	9a06      	ldr	r2, [sp, #24]
 8007c2e:	1af6      	subs	r6, r6, r3
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	9306      	str	r3, [sp, #24]
 8007c34:	9b08      	ldr	r3, [sp, #32]
 8007c36:	b30b      	cbz	r3, 8007c7c <_dtoa_r+0x794>
 8007c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 80c6 	beq.w	8007dcc <_dtoa_r+0x8e4>
 8007c40:	2c00      	cmp	r4, #0
 8007c42:	f000 80c0 	beq.w	8007dc6 <_dtoa_r+0x8de>
 8007c46:	4629      	mov	r1, r5
 8007c48:	4622      	mov	r2, r4
 8007c4a:	4648      	mov	r0, r9
 8007c4c:	f000 fcc8 	bl	80085e0 <__pow5mult>
 8007c50:	9a02      	ldr	r2, [sp, #8]
 8007c52:	4601      	mov	r1, r0
 8007c54:	4605      	mov	r5, r0
 8007c56:	4648      	mov	r0, r9
 8007c58:	f000 fc20 	bl	800849c <__multiply>
 8007c5c:	9902      	ldr	r1, [sp, #8]
 8007c5e:	4680      	mov	r8, r0
 8007c60:	4648      	mov	r0, r9
 8007c62:	f000 fb51 	bl	8008308 <_Bfree>
 8007c66:	9b08      	ldr	r3, [sp, #32]
 8007c68:	1b1b      	subs	r3, r3, r4
 8007c6a:	9308      	str	r3, [sp, #32]
 8007c6c:	f000 80b1 	beq.w	8007dd2 <_dtoa_r+0x8ea>
 8007c70:	9a08      	ldr	r2, [sp, #32]
 8007c72:	4641      	mov	r1, r8
 8007c74:	4648      	mov	r0, r9
 8007c76:	f000 fcb3 	bl	80085e0 <__pow5mult>
 8007c7a:	9002      	str	r0, [sp, #8]
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	4648      	mov	r0, r9
 8007c80:	f000 fbf6 	bl	8008470 <__i2b>
 8007c84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c86:	4604      	mov	r4, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 81d8 	beq.w	800803e <_dtoa_r+0xb56>
 8007c8e:	461a      	mov	r2, r3
 8007c90:	4601      	mov	r1, r0
 8007c92:	4648      	mov	r0, r9
 8007c94:	f000 fca4 	bl	80085e0 <__pow5mult>
 8007c98:	9b07      	ldr	r3, [sp, #28]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	f300 809f 	bgt.w	8007de0 <_dtoa_r+0x8f8>
 8007ca2:	9b04      	ldr	r3, [sp, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f040 8097 	bne.w	8007dd8 <_dtoa_r+0x8f0>
 8007caa:	9b05      	ldr	r3, [sp, #20]
 8007cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f040 8093 	bne.w	8007ddc <_dtoa_r+0x8f4>
 8007cb6:	9b05      	ldr	r3, [sp, #20]
 8007cb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007cbc:	0d1b      	lsrs	r3, r3, #20
 8007cbe:	051b      	lsls	r3, r3, #20
 8007cc0:	b133      	cbz	r3, 8007cd0 <_dtoa_r+0x7e8>
 8007cc2:	9b00      	ldr	r3, [sp, #0]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	9b06      	ldr	r3, [sp, #24]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	9306      	str	r3, [sp, #24]
 8007cce:	2301      	movs	r3, #1
 8007cd0:	9308      	str	r3, [sp, #32]
 8007cd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 81b8 	beq.w	800804a <_dtoa_r+0xb62>
 8007cda:	6923      	ldr	r3, [r4, #16]
 8007cdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ce0:	6918      	ldr	r0, [r3, #16]
 8007ce2:	f000 fb79 	bl	80083d8 <__hi0bits>
 8007ce6:	f1c0 0020 	rsb	r0, r0, #32
 8007cea:	9b06      	ldr	r3, [sp, #24]
 8007cec:	4418      	add	r0, r3
 8007cee:	f010 001f 	ands.w	r0, r0, #31
 8007cf2:	f000 8082 	beq.w	8007dfa <_dtoa_r+0x912>
 8007cf6:	f1c0 0320 	rsb	r3, r0, #32
 8007cfa:	2b04      	cmp	r3, #4
 8007cfc:	dd73      	ble.n	8007de6 <_dtoa_r+0x8fe>
 8007cfe:	9b00      	ldr	r3, [sp, #0]
 8007d00:	f1c0 001c 	rsb	r0, r0, #28
 8007d04:	4403      	add	r3, r0
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	9b06      	ldr	r3, [sp, #24]
 8007d0a:	4403      	add	r3, r0
 8007d0c:	4406      	add	r6, r0
 8007d0e:	9306      	str	r3, [sp, #24]
 8007d10:	9b00      	ldr	r3, [sp, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	dd05      	ble.n	8007d22 <_dtoa_r+0x83a>
 8007d16:	9902      	ldr	r1, [sp, #8]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	4648      	mov	r0, r9
 8007d1c:	f000 fcba 	bl	8008694 <__lshift>
 8007d20:	9002      	str	r0, [sp, #8]
 8007d22:	9b06      	ldr	r3, [sp, #24]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	dd05      	ble.n	8007d34 <_dtoa_r+0x84c>
 8007d28:	4621      	mov	r1, r4
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	4648      	mov	r0, r9
 8007d2e:	f000 fcb1 	bl	8008694 <__lshift>
 8007d32:	4604      	mov	r4, r0
 8007d34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d061      	beq.n	8007dfe <_dtoa_r+0x916>
 8007d3a:	9802      	ldr	r0, [sp, #8]
 8007d3c:	4621      	mov	r1, r4
 8007d3e:	f000 fd15 	bl	800876c <__mcmp>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	da5b      	bge.n	8007dfe <_dtoa_r+0x916>
 8007d46:	2300      	movs	r3, #0
 8007d48:	9902      	ldr	r1, [sp, #8]
 8007d4a:	220a      	movs	r2, #10
 8007d4c:	4648      	mov	r0, r9
 8007d4e:	f000 fafd 	bl	800834c <__multadd>
 8007d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d54:	9002      	str	r0, [sp, #8]
 8007d56:	f107 38ff 	add.w	r8, r7, #4294967295
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 8177 	beq.w	800804e <_dtoa_r+0xb66>
 8007d60:	4629      	mov	r1, r5
 8007d62:	2300      	movs	r3, #0
 8007d64:	220a      	movs	r2, #10
 8007d66:	4648      	mov	r0, r9
 8007d68:	f000 faf0 	bl	800834c <__multadd>
 8007d6c:	f1bb 0f00 	cmp.w	fp, #0
 8007d70:	4605      	mov	r5, r0
 8007d72:	dc6f      	bgt.n	8007e54 <_dtoa_r+0x96c>
 8007d74:	9b07      	ldr	r3, [sp, #28]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	dc49      	bgt.n	8007e0e <_dtoa_r+0x926>
 8007d7a:	e06b      	b.n	8007e54 <_dtoa_r+0x96c>
 8007d7c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007d7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007d82:	e73c      	b.n	8007bfe <_dtoa_r+0x716>
 8007d84:	3fe00000 	.word	0x3fe00000
 8007d88:	40240000 	.word	0x40240000
 8007d8c:	9b03      	ldr	r3, [sp, #12]
 8007d8e:	1e5c      	subs	r4, r3, #1
 8007d90:	9b08      	ldr	r3, [sp, #32]
 8007d92:	42a3      	cmp	r3, r4
 8007d94:	db09      	blt.n	8007daa <_dtoa_r+0x8c2>
 8007d96:	1b1c      	subs	r4, r3, r4
 8007d98:	9b03      	ldr	r3, [sp, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f6bf af30 	bge.w	8007c00 <_dtoa_r+0x718>
 8007da0:	9b00      	ldr	r3, [sp, #0]
 8007da2:	9a03      	ldr	r2, [sp, #12]
 8007da4:	1a9e      	subs	r6, r3, r2
 8007da6:	2300      	movs	r3, #0
 8007da8:	e72b      	b.n	8007c02 <_dtoa_r+0x71a>
 8007daa:	9b08      	ldr	r3, [sp, #32]
 8007dac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007dae:	9408      	str	r4, [sp, #32]
 8007db0:	1ae3      	subs	r3, r4, r3
 8007db2:	441a      	add	r2, r3
 8007db4:	9e00      	ldr	r6, [sp, #0]
 8007db6:	9b03      	ldr	r3, [sp, #12]
 8007db8:	920d      	str	r2, [sp, #52]	@ 0x34
 8007dba:	2400      	movs	r4, #0
 8007dbc:	e721      	b.n	8007c02 <_dtoa_r+0x71a>
 8007dbe:	9c08      	ldr	r4, [sp, #32]
 8007dc0:	9e00      	ldr	r6, [sp, #0]
 8007dc2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007dc4:	e728      	b.n	8007c18 <_dtoa_r+0x730>
 8007dc6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007dca:	e751      	b.n	8007c70 <_dtoa_r+0x788>
 8007dcc:	9a08      	ldr	r2, [sp, #32]
 8007dce:	9902      	ldr	r1, [sp, #8]
 8007dd0:	e750      	b.n	8007c74 <_dtoa_r+0x78c>
 8007dd2:	f8cd 8008 	str.w	r8, [sp, #8]
 8007dd6:	e751      	b.n	8007c7c <_dtoa_r+0x794>
 8007dd8:	2300      	movs	r3, #0
 8007dda:	e779      	b.n	8007cd0 <_dtoa_r+0x7e8>
 8007ddc:	9b04      	ldr	r3, [sp, #16]
 8007dde:	e777      	b.n	8007cd0 <_dtoa_r+0x7e8>
 8007de0:	2300      	movs	r3, #0
 8007de2:	9308      	str	r3, [sp, #32]
 8007de4:	e779      	b.n	8007cda <_dtoa_r+0x7f2>
 8007de6:	d093      	beq.n	8007d10 <_dtoa_r+0x828>
 8007de8:	9a00      	ldr	r2, [sp, #0]
 8007dea:	331c      	adds	r3, #28
 8007dec:	441a      	add	r2, r3
 8007dee:	9200      	str	r2, [sp, #0]
 8007df0:	9a06      	ldr	r2, [sp, #24]
 8007df2:	441a      	add	r2, r3
 8007df4:	441e      	add	r6, r3
 8007df6:	9206      	str	r2, [sp, #24]
 8007df8:	e78a      	b.n	8007d10 <_dtoa_r+0x828>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	e7f4      	b.n	8007de8 <_dtoa_r+0x900>
 8007dfe:	9b03      	ldr	r3, [sp, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	46b8      	mov	r8, r7
 8007e04:	dc20      	bgt.n	8007e48 <_dtoa_r+0x960>
 8007e06:	469b      	mov	fp, r3
 8007e08:	9b07      	ldr	r3, [sp, #28]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	dd1e      	ble.n	8007e4c <_dtoa_r+0x964>
 8007e0e:	f1bb 0f00 	cmp.w	fp, #0
 8007e12:	f47f adb1 	bne.w	8007978 <_dtoa_r+0x490>
 8007e16:	4621      	mov	r1, r4
 8007e18:	465b      	mov	r3, fp
 8007e1a:	2205      	movs	r2, #5
 8007e1c:	4648      	mov	r0, r9
 8007e1e:	f000 fa95 	bl	800834c <__multadd>
 8007e22:	4601      	mov	r1, r0
 8007e24:	4604      	mov	r4, r0
 8007e26:	9802      	ldr	r0, [sp, #8]
 8007e28:	f000 fca0 	bl	800876c <__mcmp>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f77f ada3 	ble.w	8007978 <_dtoa_r+0x490>
 8007e32:	4656      	mov	r6, sl
 8007e34:	2331      	movs	r3, #49	@ 0x31
 8007e36:	f806 3b01 	strb.w	r3, [r6], #1
 8007e3a:	f108 0801 	add.w	r8, r8, #1
 8007e3e:	e59f      	b.n	8007980 <_dtoa_r+0x498>
 8007e40:	9c03      	ldr	r4, [sp, #12]
 8007e42:	46b8      	mov	r8, r7
 8007e44:	4625      	mov	r5, r4
 8007e46:	e7f4      	b.n	8007e32 <_dtoa_r+0x94a>
 8007e48:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 8101 	beq.w	8008056 <_dtoa_r+0xb6e>
 8007e54:	2e00      	cmp	r6, #0
 8007e56:	dd05      	ble.n	8007e64 <_dtoa_r+0x97c>
 8007e58:	4629      	mov	r1, r5
 8007e5a:	4632      	mov	r2, r6
 8007e5c:	4648      	mov	r0, r9
 8007e5e:	f000 fc19 	bl	8008694 <__lshift>
 8007e62:	4605      	mov	r5, r0
 8007e64:	9b08      	ldr	r3, [sp, #32]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d05c      	beq.n	8007f24 <_dtoa_r+0xa3c>
 8007e6a:	6869      	ldr	r1, [r5, #4]
 8007e6c:	4648      	mov	r0, r9
 8007e6e:	f000 fa0b 	bl	8008288 <_Balloc>
 8007e72:	4606      	mov	r6, r0
 8007e74:	b928      	cbnz	r0, 8007e82 <_dtoa_r+0x99a>
 8007e76:	4b82      	ldr	r3, [pc, #520]	@ (8008080 <_dtoa_r+0xb98>)
 8007e78:	4602      	mov	r2, r0
 8007e7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007e7e:	f7ff bb4a 	b.w	8007516 <_dtoa_r+0x2e>
 8007e82:	692a      	ldr	r2, [r5, #16]
 8007e84:	3202      	adds	r2, #2
 8007e86:	0092      	lsls	r2, r2, #2
 8007e88:	f105 010c 	add.w	r1, r5, #12
 8007e8c:	300c      	adds	r0, #12
 8007e8e:	f000 ffa3 	bl	8008dd8 <memcpy>
 8007e92:	2201      	movs	r2, #1
 8007e94:	4631      	mov	r1, r6
 8007e96:	4648      	mov	r0, r9
 8007e98:	f000 fbfc 	bl	8008694 <__lshift>
 8007e9c:	f10a 0301 	add.w	r3, sl, #1
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	eb0a 030b 	add.w	r3, sl, fp
 8007ea6:	9308      	str	r3, [sp, #32]
 8007ea8:	9b04      	ldr	r3, [sp, #16]
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	462f      	mov	r7, r5
 8007eb0:	9306      	str	r3, [sp, #24]
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	9b00      	ldr	r3, [sp, #0]
 8007eb6:	9802      	ldr	r0, [sp, #8]
 8007eb8:	4621      	mov	r1, r4
 8007eba:	f103 3bff 	add.w	fp, r3, #4294967295
 8007ebe:	f7ff fa8a 	bl	80073d6 <quorem>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	3330      	adds	r3, #48	@ 0x30
 8007ec6:	9003      	str	r0, [sp, #12]
 8007ec8:	4639      	mov	r1, r7
 8007eca:	9802      	ldr	r0, [sp, #8]
 8007ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ece:	f000 fc4d 	bl	800876c <__mcmp>
 8007ed2:	462a      	mov	r2, r5
 8007ed4:	9004      	str	r0, [sp, #16]
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	4648      	mov	r0, r9
 8007eda:	f000 fc63 	bl	80087a4 <__mdiff>
 8007ede:	68c2      	ldr	r2, [r0, #12]
 8007ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	bb02      	cbnz	r2, 8007f28 <_dtoa_r+0xa40>
 8007ee6:	4601      	mov	r1, r0
 8007ee8:	9802      	ldr	r0, [sp, #8]
 8007eea:	f000 fc3f 	bl	800876c <__mcmp>
 8007eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	4648      	mov	r0, r9
 8007ef6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007efa:	f000 fa05 	bl	8008308 <_Bfree>
 8007efe:	9b07      	ldr	r3, [sp, #28]
 8007f00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007f02:	9e00      	ldr	r6, [sp, #0]
 8007f04:	ea42 0103 	orr.w	r1, r2, r3
 8007f08:	9b06      	ldr	r3, [sp, #24]
 8007f0a:	4319      	orrs	r1, r3
 8007f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f0e:	d10d      	bne.n	8007f2c <_dtoa_r+0xa44>
 8007f10:	2b39      	cmp	r3, #57	@ 0x39
 8007f12:	d027      	beq.n	8007f64 <_dtoa_r+0xa7c>
 8007f14:	9a04      	ldr	r2, [sp, #16]
 8007f16:	2a00      	cmp	r2, #0
 8007f18:	dd01      	ble.n	8007f1e <_dtoa_r+0xa36>
 8007f1a:	9b03      	ldr	r3, [sp, #12]
 8007f1c:	3331      	adds	r3, #49	@ 0x31
 8007f1e:	f88b 3000 	strb.w	r3, [fp]
 8007f22:	e52e      	b.n	8007982 <_dtoa_r+0x49a>
 8007f24:	4628      	mov	r0, r5
 8007f26:	e7b9      	b.n	8007e9c <_dtoa_r+0x9b4>
 8007f28:	2201      	movs	r2, #1
 8007f2a:	e7e2      	b.n	8007ef2 <_dtoa_r+0xa0a>
 8007f2c:	9904      	ldr	r1, [sp, #16]
 8007f2e:	2900      	cmp	r1, #0
 8007f30:	db04      	blt.n	8007f3c <_dtoa_r+0xa54>
 8007f32:	9807      	ldr	r0, [sp, #28]
 8007f34:	4301      	orrs	r1, r0
 8007f36:	9806      	ldr	r0, [sp, #24]
 8007f38:	4301      	orrs	r1, r0
 8007f3a:	d120      	bne.n	8007f7e <_dtoa_r+0xa96>
 8007f3c:	2a00      	cmp	r2, #0
 8007f3e:	ddee      	ble.n	8007f1e <_dtoa_r+0xa36>
 8007f40:	9902      	ldr	r1, [sp, #8]
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	2201      	movs	r2, #1
 8007f46:	4648      	mov	r0, r9
 8007f48:	f000 fba4 	bl	8008694 <__lshift>
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	9002      	str	r0, [sp, #8]
 8007f50:	f000 fc0c 	bl	800876c <__mcmp>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	9b00      	ldr	r3, [sp, #0]
 8007f58:	dc02      	bgt.n	8007f60 <_dtoa_r+0xa78>
 8007f5a:	d1e0      	bne.n	8007f1e <_dtoa_r+0xa36>
 8007f5c:	07da      	lsls	r2, r3, #31
 8007f5e:	d5de      	bpl.n	8007f1e <_dtoa_r+0xa36>
 8007f60:	2b39      	cmp	r3, #57	@ 0x39
 8007f62:	d1da      	bne.n	8007f1a <_dtoa_r+0xa32>
 8007f64:	2339      	movs	r3, #57	@ 0x39
 8007f66:	f88b 3000 	strb.w	r3, [fp]
 8007f6a:	4633      	mov	r3, r6
 8007f6c:	461e      	mov	r6, r3
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007f74:	2a39      	cmp	r2, #57	@ 0x39
 8007f76:	d04e      	beq.n	8008016 <_dtoa_r+0xb2e>
 8007f78:	3201      	adds	r2, #1
 8007f7a:	701a      	strb	r2, [r3, #0]
 8007f7c:	e501      	b.n	8007982 <_dtoa_r+0x49a>
 8007f7e:	2a00      	cmp	r2, #0
 8007f80:	dd03      	ble.n	8007f8a <_dtoa_r+0xaa2>
 8007f82:	2b39      	cmp	r3, #57	@ 0x39
 8007f84:	d0ee      	beq.n	8007f64 <_dtoa_r+0xa7c>
 8007f86:	3301      	adds	r3, #1
 8007f88:	e7c9      	b.n	8007f1e <_dtoa_r+0xa36>
 8007f8a:	9a00      	ldr	r2, [sp, #0]
 8007f8c:	9908      	ldr	r1, [sp, #32]
 8007f8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007f92:	428a      	cmp	r2, r1
 8007f94:	d028      	beq.n	8007fe8 <_dtoa_r+0xb00>
 8007f96:	9902      	ldr	r1, [sp, #8]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	220a      	movs	r2, #10
 8007f9c:	4648      	mov	r0, r9
 8007f9e:	f000 f9d5 	bl	800834c <__multadd>
 8007fa2:	42af      	cmp	r7, r5
 8007fa4:	9002      	str	r0, [sp, #8]
 8007fa6:	f04f 0300 	mov.w	r3, #0
 8007faa:	f04f 020a 	mov.w	r2, #10
 8007fae:	4639      	mov	r1, r7
 8007fb0:	4648      	mov	r0, r9
 8007fb2:	d107      	bne.n	8007fc4 <_dtoa_r+0xadc>
 8007fb4:	f000 f9ca 	bl	800834c <__multadd>
 8007fb8:	4607      	mov	r7, r0
 8007fba:	4605      	mov	r5, r0
 8007fbc:	9b00      	ldr	r3, [sp, #0]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	e777      	b.n	8007eb4 <_dtoa_r+0x9cc>
 8007fc4:	f000 f9c2 	bl	800834c <__multadd>
 8007fc8:	4629      	mov	r1, r5
 8007fca:	4607      	mov	r7, r0
 8007fcc:	2300      	movs	r3, #0
 8007fce:	220a      	movs	r2, #10
 8007fd0:	4648      	mov	r0, r9
 8007fd2:	f000 f9bb 	bl	800834c <__multadd>
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	e7f0      	b.n	8007fbc <_dtoa_r+0xad4>
 8007fda:	f1bb 0f00 	cmp.w	fp, #0
 8007fde:	bfcc      	ite	gt
 8007fe0:	465e      	movgt	r6, fp
 8007fe2:	2601      	movle	r6, #1
 8007fe4:	4456      	add	r6, sl
 8007fe6:	2700      	movs	r7, #0
 8007fe8:	9902      	ldr	r1, [sp, #8]
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	2201      	movs	r2, #1
 8007fee:	4648      	mov	r0, r9
 8007ff0:	f000 fb50 	bl	8008694 <__lshift>
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	9002      	str	r0, [sp, #8]
 8007ff8:	f000 fbb8 	bl	800876c <__mcmp>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	dcb4      	bgt.n	8007f6a <_dtoa_r+0xa82>
 8008000:	d102      	bne.n	8008008 <_dtoa_r+0xb20>
 8008002:	9b00      	ldr	r3, [sp, #0]
 8008004:	07db      	lsls	r3, r3, #31
 8008006:	d4b0      	bmi.n	8007f6a <_dtoa_r+0xa82>
 8008008:	4633      	mov	r3, r6
 800800a:	461e      	mov	r6, r3
 800800c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008010:	2a30      	cmp	r2, #48	@ 0x30
 8008012:	d0fa      	beq.n	800800a <_dtoa_r+0xb22>
 8008014:	e4b5      	b.n	8007982 <_dtoa_r+0x49a>
 8008016:	459a      	cmp	sl, r3
 8008018:	d1a8      	bne.n	8007f6c <_dtoa_r+0xa84>
 800801a:	2331      	movs	r3, #49	@ 0x31
 800801c:	f108 0801 	add.w	r8, r8, #1
 8008020:	f88a 3000 	strb.w	r3, [sl]
 8008024:	e4ad      	b.n	8007982 <_dtoa_r+0x49a>
 8008026:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008028:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008084 <_dtoa_r+0xb9c>
 800802c:	b11b      	cbz	r3, 8008036 <_dtoa_r+0xb4e>
 800802e:	f10a 0308 	add.w	r3, sl, #8
 8008032:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008034:	6013      	str	r3, [r2, #0]
 8008036:	4650      	mov	r0, sl
 8008038:	b017      	add	sp, #92	@ 0x5c
 800803a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803e:	9b07      	ldr	r3, [sp, #28]
 8008040:	2b01      	cmp	r3, #1
 8008042:	f77f ae2e 	ble.w	8007ca2 <_dtoa_r+0x7ba>
 8008046:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008048:	9308      	str	r3, [sp, #32]
 800804a:	2001      	movs	r0, #1
 800804c:	e64d      	b.n	8007cea <_dtoa_r+0x802>
 800804e:	f1bb 0f00 	cmp.w	fp, #0
 8008052:	f77f aed9 	ble.w	8007e08 <_dtoa_r+0x920>
 8008056:	4656      	mov	r6, sl
 8008058:	9802      	ldr	r0, [sp, #8]
 800805a:	4621      	mov	r1, r4
 800805c:	f7ff f9bb 	bl	80073d6 <quorem>
 8008060:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008064:	f806 3b01 	strb.w	r3, [r6], #1
 8008068:	eba6 020a 	sub.w	r2, r6, sl
 800806c:	4593      	cmp	fp, r2
 800806e:	ddb4      	ble.n	8007fda <_dtoa_r+0xaf2>
 8008070:	9902      	ldr	r1, [sp, #8]
 8008072:	2300      	movs	r3, #0
 8008074:	220a      	movs	r2, #10
 8008076:	4648      	mov	r0, r9
 8008078:	f000 f968 	bl	800834c <__multadd>
 800807c:	9002      	str	r0, [sp, #8]
 800807e:	e7eb      	b.n	8008058 <_dtoa_r+0xb70>
 8008080:	0800cacc 	.word	0x0800cacc
 8008084:	0800ca50 	.word	0x0800ca50

08008088 <_free_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4605      	mov	r5, r0
 800808c:	2900      	cmp	r1, #0
 800808e:	d041      	beq.n	8008114 <_free_r+0x8c>
 8008090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008094:	1f0c      	subs	r4, r1, #4
 8008096:	2b00      	cmp	r3, #0
 8008098:	bfb8      	it	lt
 800809a:	18e4      	addlt	r4, r4, r3
 800809c:	f000 f8e8 	bl	8008270 <__malloc_lock>
 80080a0:	4a1d      	ldr	r2, [pc, #116]	@ (8008118 <_free_r+0x90>)
 80080a2:	6813      	ldr	r3, [r2, #0]
 80080a4:	b933      	cbnz	r3, 80080b4 <_free_r+0x2c>
 80080a6:	6063      	str	r3, [r4, #4]
 80080a8:	6014      	str	r4, [r2, #0]
 80080aa:	4628      	mov	r0, r5
 80080ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080b0:	f000 b8e4 	b.w	800827c <__malloc_unlock>
 80080b4:	42a3      	cmp	r3, r4
 80080b6:	d908      	bls.n	80080ca <_free_r+0x42>
 80080b8:	6820      	ldr	r0, [r4, #0]
 80080ba:	1821      	adds	r1, r4, r0
 80080bc:	428b      	cmp	r3, r1
 80080be:	bf01      	itttt	eq
 80080c0:	6819      	ldreq	r1, [r3, #0]
 80080c2:	685b      	ldreq	r3, [r3, #4]
 80080c4:	1809      	addeq	r1, r1, r0
 80080c6:	6021      	streq	r1, [r4, #0]
 80080c8:	e7ed      	b.n	80080a6 <_free_r+0x1e>
 80080ca:	461a      	mov	r2, r3
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	b10b      	cbz	r3, 80080d4 <_free_r+0x4c>
 80080d0:	42a3      	cmp	r3, r4
 80080d2:	d9fa      	bls.n	80080ca <_free_r+0x42>
 80080d4:	6811      	ldr	r1, [r2, #0]
 80080d6:	1850      	adds	r0, r2, r1
 80080d8:	42a0      	cmp	r0, r4
 80080da:	d10b      	bne.n	80080f4 <_free_r+0x6c>
 80080dc:	6820      	ldr	r0, [r4, #0]
 80080de:	4401      	add	r1, r0
 80080e0:	1850      	adds	r0, r2, r1
 80080e2:	4283      	cmp	r3, r0
 80080e4:	6011      	str	r1, [r2, #0]
 80080e6:	d1e0      	bne.n	80080aa <_free_r+0x22>
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	6053      	str	r3, [r2, #4]
 80080ee:	4408      	add	r0, r1
 80080f0:	6010      	str	r0, [r2, #0]
 80080f2:	e7da      	b.n	80080aa <_free_r+0x22>
 80080f4:	d902      	bls.n	80080fc <_free_r+0x74>
 80080f6:	230c      	movs	r3, #12
 80080f8:	602b      	str	r3, [r5, #0]
 80080fa:	e7d6      	b.n	80080aa <_free_r+0x22>
 80080fc:	6820      	ldr	r0, [r4, #0]
 80080fe:	1821      	adds	r1, r4, r0
 8008100:	428b      	cmp	r3, r1
 8008102:	bf04      	itt	eq
 8008104:	6819      	ldreq	r1, [r3, #0]
 8008106:	685b      	ldreq	r3, [r3, #4]
 8008108:	6063      	str	r3, [r4, #4]
 800810a:	bf04      	itt	eq
 800810c:	1809      	addeq	r1, r1, r0
 800810e:	6021      	streq	r1, [r4, #0]
 8008110:	6054      	str	r4, [r2, #4]
 8008112:	e7ca      	b.n	80080aa <_free_r+0x22>
 8008114:	bd38      	pop	{r3, r4, r5, pc}
 8008116:	bf00      	nop
 8008118:	20000880 	.word	0x20000880

0800811c <malloc>:
 800811c:	4b02      	ldr	r3, [pc, #8]	@ (8008128 <malloc+0xc>)
 800811e:	4601      	mov	r1, r0
 8008120:	6818      	ldr	r0, [r3, #0]
 8008122:	f000 b825 	b.w	8008170 <_malloc_r>
 8008126:	bf00      	nop
 8008128:	200001cc 	.word	0x200001cc

0800812c <sbrk_aligned>:
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	4e0f      	ldr	r6, [pc, #60]	@ (800816c <sbrk_aligned+0x40>)
 8008130:	460c      	mov	r4, r1
 8008132:	6831      	ldr	r1, [r6, #0]
 8008134:	4605      	mov	r5, r0
 8008136:	b911      	cbnz	r1, 800813e <sbrk_aligned+0x12>
 8008138:	f000 fe3e 	bl	8008db8 <_sbrk_r>
 800813c:	6030      	str	r0, [r6, #0]
 800813e:	4621      	mov	r1, r4
 8008140:	4628      	mov	r0, r5
 8008142:	f000 fe39 	bl	8008db8 <_sbrk_r>
 8008146:	1c43      	adds	r3, r0, #1
 8008148:	d103      	bne.n	8008152 <sbrk_aligned+0x26>
 800814a:	f04f 34ff 	mov.w	r4, #4294967295
 800814e:	4620      	mov	r0, r4
 8008150:	bd70      	pop	{r4, r5, r6, pc}
 8008152:	1cc4      	adds	r4, r0, #3
 8008154:	f024 0403 	bic.w	r4, r4, #3
 8008158:	42a0      	cmp	r0, r4
 800815a:	d0f8      	beq.n	800814e <sbrk_aligned+0x22>
 800815c:	1a21      	subs	r1, r4, r0
 800815e:	4628      	mov	r0, r5
 8008160:	f000 fe2a 	bl	8008db8 <_sbrk_r>
 8008164:	3001      	adds	r0, #1
 8008166:	d1f2      	bne.n	800814e <sbrk_aligned+0x22>
 8008168:	e7ef      	b.n	800814a <sbrk_aligned+0x1e>
 800816a:	bf00      	nop
 800816c:	2000087c 	.word	0x2000087c

08008170 <_malloc_r>:
 8008170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008174:	1ccd      	adds	r5, r1, #3
 8008176:	f025 0503 	bic.w	r5, r5, #3
 800817a:	3508      	adds	r5, #8
 800817c:	2d0c      	cmp	r5, #12
 800817e:	bf38      	it	cc
 8008180:	250c      	movcc	r5, #12
 8008182:	2d00      	cmp	r5, #0
 8008184:	4606      	mov	r6, r0
 8008186:	db01      	blt.n	800818c <_malloc_r+0x1c>
 8008188:	42a9      	cmp	r1, r5
 800818a:	d904      	bls.n	8008196 <_malloc_r+0x26>
 800818c:	230c      	movs	r3, #12
 800818e:	6033      	str	r3, [r6, #0]
 8008190:	2000      	movs	r0, #0
 8008192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008196:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800826c <_malloc_r+0xfc>
 800819a:	f000 f869 	bl	8008270 <__malloc_lock>
 800819e:	f8d8 3000 	ldr.w	r3, [r8]
 80081a2:	461c      	mov	r4, r3
 80081a4:	bb44      	cbnz	r4, 80081f8 <_malloc_r+0x88>
 80081a6:	4629      	mov	r1, r5
 80081a8:	4630      	mov	r0, r6
 80081aa:	f7ff ffbf 	bl	800812c <sbrk_aligned>
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	4604      	mov	r4, r0
 80081b2:	d158      	bne.n	8008266 <_malloc_r+0xf6>
 80081b4:	f8d8 4000 	ldr.w	r4, [r8]
 80081b8:	4627      	mov	r7, r4
 80081ba:	2f00      	cmp	r7, #0
 80081bc:	d143      	bne.n	8008246 <_malloc_r+0xd6>
 80081be:	2c00      	cmp	r4, #0
 80081c0:	d04b      	beq.n	800825a <_malloc_r+0xea>
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	4639      	mov	r1, r7
 80081c6:	4630      	mov	r0, r6
 80081c8:	eb04 0903 	add.w	r9, r4, r3
 80081cc:	f000 fdf4 	bl	8008db8 <_sbrk_r>
 80081d0:	4581      	cmp	r9, r0
 80081d2:	d142      	bne.n	800825a <_malloc_r+0xea>
 80081d4:	6821      	ldr	r1, [r4, #0]
 80081d6:	1a6d      	subs	r5, r5, r1
 80081d8:	4629      	mov	r1, r5
 80081da:	4630      	mov	r0, r6
 80081dc:	f7ff ffa6 	bl	800812c <sbrk_aligned>
 80081e0:	3001      	adds	r0, #1
 80081e2:	d03a      	beq.n	800825a <_malloc_r+0xea>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	442b      	add	r3, r5
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	f8d8 3000 	ldr.w	r3, [r8]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	bb62      	cbnz	r2, 800824c <_malloc_r+0xdc>
 80081f2:	f8c8 7000 	str.w	r7, [r8]
 80081f6:	e00f      	b.n	8008218 <_malloc_r+0xa8>
 80081f8:	6822      	ldr	r2, [r4, #0]
 80081fa:	1b52      	subs	r2, r2, r5
 80081fc:	d420      	bmi.n	8008240 <_malloc_r+0xd0>
 80081fe:	2a0b      	cmp	r2, #11
 8008200:	d917      	bls.n	8008232 <_malloc_r+0xc2>
 8008202:	1961      	adds	r1, r4, r5
 8008204:	42a3      	cmp	r3, r4
 8008206:	6025      	str	r5, [r4, #0]
 8008208:	bf18      	it	ne
 800820a:	6059      	strne	r1, [r3, #4]
 800820c:	6863      	ldr	r3, [r4, #4]
 800820e:	bf08      	it	eq
 8008210:	f8c8 1000 	streq.w	r1, [r8]
 8008214:	5162      	str	r2, [r4, r5]
 8008216:	604b      	str	r3, [r1, #4]
 8008218:	4630      	mov	r0, r6
 800821a:	f000 f82f 	bl	800827c <__malloc_unlock>
 800821e:	f104 000b 	add.w	r0, r4, #11
 8008222:	1d23      	adds	r3, r4, #4
 8008224:	f020 0007 	bic.w	r0, r0, #7
 8008228:	1ac2      	subs	r2, r0, r3
 800822a:	bf1c      	itt	ne
 800822c:	1a1b      	subne	r3, r3, r0
 800822e:	50a3      	strne	r3, [r4, r2]
 8008230:	e7af      	b.n	8008192 <_malloc_r+0x22>
 8008232:	6862      	ldr	r2, [r4, #4]
 8008234:	42a3      	cmp	r3, r4
 8008236:	bf0c      	ite	eq
 8008238:	f8c8 2000 	streq.w	r2, [r8]
 800823c:	605a      	strne	r2, [r3, #4]
 800823e:	e7eb      	b.n	8008218 <_malloc_r+0xa8>
 8008240:	4623      	mov	r3, r4
 8008242:	6864      	ldr	r4, [r4, #4]
 8008244:	e7ae      	b.n	80081a4 <_malloc_r+0x34>
 8008246:	463c      	mov	r4, r7
 8008248:	687f      	ldr	r7, [r7, #4]
 800824a:	e7b6      	b.n	80081ba <_malloc_r+0x4a>
 800824c:	461a      	mov	r2, r3
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	42a3      	cmp	r3, r4
 8008252:	d1fb      	bne.n	800824c <_malloc_r+0xdc>
 8008254:	2300      	movs	r3, #0
 8008256:	6053      	str	r3, [r2, #4]
 8008258:	e7de      	b.n	8008218 <_malloc_r+0xa8>
 800825a:	230c      	movs	r3, #12
 800825c:	6033      	str	r3, [r6, #0]
 800825e:	4630      	mov	r0, r6
 8008260:	f000 f80c 	bl	800827c <__malloc_unlock>
 8008264:	e794      	b.n	8008190 <_malloc_r+0x20>
 8008266:	6005      	str	r5, [r0, #0]
 8008268:	e7d6      	b.n	8008218 <_malloc_r+0xa8>
 800826a:	bf00      	nop
 800826c:	20000880 	.word	0x20000880

08008270 <__malloc_lock>:
 8008270:	4801      	ldr	r0, [pc, #4]	@ (8008278 <__malloc_lock+0x8>)
 8008272:	f7ff b8ae 	b.w	80073d2 <__retarget_lock_acquire_recursive>
 8008276:	bf00      	nop
 8008278:	20000878 	.word	0x20000878

0800827c <__malloc_unlock>:
 800827c:	4801      	ldr	r0, [pc, #4]	@ (8008284 <__malloc_unlock+0x8>)
 800827e:	f7ff b8a9 	b.w	80073d4 <__retarget_lock_release_recursive>
 8008282:	bf00      	nop
 8008284:	20000878 	.word	0x20000878

08008288 <_Balloc>:
 8008288:	b570      	push	{r4, r5, r6, lr}
 800828a:	69c6      	ldr	r6, [r0, #28]
 800828c:	4604      	mov	r4, r0
 800828e:	460d      	mov	r5, r1
 8008290:	b976      	cbnz	r6, 80082b0 <_Balloc+0x28>
 8008292:	2010      	movs	r0, #16
 8008294:	f7ff ff42 	bl	800811c <malloc>
 8008298:	4602      	mov	r2, r0
 800829a:	61e0      	str	r0, [r4, #28]
 800829c:	b920      	cbnz	r0, 80082a8 <_Balloc+0x20>
 800829e:	4b18      	ldr	r3, [pc, #96]	@ (8008300 <_Balloc+0x78>)
 80082a0:	4818      	ldr	r0, [pc, #96]	@ (8008304 <_Balloc+0x7c>)
 80082a2:	216b      	movs	r1, #107	@ 0x6b
 80082a4:	f000 fda6 	bl	8008df4 <__assert_func>
 80082a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082ac:	6006      	str	r6, [r0, #0]
 80082ae:	60c6      	str	r6, [r0, #12]
 80082b0:	69e6      	ldr	r6, [r4, #28]
 80082b2:	68f3      	ldr	r3, [r6, #12]
 80082b4:	b183      	cbz	r3, 80082d8 <_Balloc+0x50>
 80082b6:	69e3      	ldr	r3, [r4, #28]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082be:	b9b8      	cbnz	r0, 80082f0 <_Balloc+0x68>
 80082c0:	2101      	movs	r1, #1
 80082c2:	fa01 f605 	lsl.w	r6, r1, r5
 80082c6:	1d72      	adds	r2, r6, #5
 80082c8:	0092      	lsls	r2, r2, #2
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 fdb0 	bl	8008e30 <_calloc_r>
 80082d0:	b160      	cbz	r0, 80082ec <_Balloc+0x64>
 80082d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082d6:	e00e      	b.n	80082f6 <_Balloc+0x6e>
 80082d8:	2221      	movs	r2, #33	@ 0x21
 80082da:	2104      	movs	r1, #4
 80082dc:	4620      	mov	r0, r4
 80082de:	f000 fda7 	bl	8008e30 <_calloc_r>
 80082e2:	69e3      	ldr	r3, [r4, #28]
 80082e4:	60f0      	str	r0, [r6, #12]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1e4      	bne.n	80082b6 <_Balloc+0x2e>
 80082ec:	2000      	movs	r0, #0
 80082ee:	bd70      	pop	{r4, r5, r6, pc}
 80082f0:	6802      	ldr	r2, [r0, #0]
 80082f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082f6:	2300      	movs	r3, #0
 80082f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082fc:	e7f7      	b.n	80082ee <_Balloc+0x66>
 80082fe:	bf00      	nop
 8008300:	0800ca5d 	.word	0x0800ca5d
 8008304:	0800cadd 	.word	0x0800cadd

08008308 <_Bfree>:
 8008308:	b570      	push	{r4, r5, r6, lr}
 800830a:	69c6      	ldr	r6, [r0, #28]
 800830c:	4605      	mov	r5, r0
 800830e:	460c      	mov	r4, r1
 8008310:	b976      	cbnz	r6, 8008330 <_Bfree+0x28>
 8008312:	2010      	movs	r0, #16
 8008314:	f7ff ff02 	bl	800811c <malloc>
 8008318:	4602      	mov	r2, r0
 800831a:	61e8      	str	r0, [r5, #28]
 800831c:	b920      	cbnz	r0, 8008328 <_Bfree+0x20>
 800831e:	4b09      	ldr	r3, [pc, #36]	@ (8008344 <_Bfree+0x3c>)
 8008320:	4809      	ldr	r0, [pc, #36]	@ (8008348 <_Bfree+0x40>)
 8008322:	218f      	movs	r1, #143	@ 0x8f
 8008324:	f000 fd66 	bl	8008df4 <__assert_func>
 8008328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800832c:	6006      	str	r6, [r0, #0]
 800832e:	60c6      	str	r6, [r0, #12]
 8008330:	b13c      	cbz	r4, 8008342 <_Bfree+0x3a>
 8008332:	69eb      	ldr	r3, [r5, #28]
 8008334:	6862      	ldr	r2, [r4, #4]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800833c:	6021      	str	r1, [r4, #0]
 800833e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008342:	bd70      	pop	{r4, r5, r6, pc}
 8008344:	0800ca5d 	.word	0x0800ca5d
 8008348:	0800cadd 	.word	0x0800cadd

0800834c <__multadd>:
 800834c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008350:	690d      	ldr	r5, [r1, #16]
 8008352:	4607      	mov	r7, r0
 8008354:	460c      	mov	r4, r1
 8008356:	461e      	mov	r6, r3
 8008358:	f101 0c14 	add.w	ip, r1, #20
 800835c:	2000      	movs	r0, #0
 800835e:	f8dc 3000 	ldr.w	r3, [ip]
 8008362:	b299      	uxth	r1, r3
 8008364:	fb02 6101 	mla	r1, r2, r1, r6
 8008368:	0c1e      	lsrs	r6, r3, #16
 800836a:	0c0b      	lsrs	r3, r1, #16
 800836c:	fb02 3306 	mla	r3, r2, r6, r3
 8008370:	b289      	uxth	r1, r1
 8008372:	3001      	adds	r0, #1
 8008374:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008378:	4285      	cmp	r5, r0
 800837a:	f84c 1b04 	str.w	r1, [ip], #4
 800837e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008382:	dcec      	bgt.n	800835e <__multadd+0x12>
 8008384:	b30e      	cbz	r6, 80083ca <__multadd+0x7e>
 8008386:	68a3      	ldr	r3, [r4, #8]
 8008388:	42ab      	cmp	r3, r5
 800838a:	dc19      	bgt.n	80083c0 <__multadd+0x74>
 800838c:	6861      	ldr	r1, [r4, #4]
 800838e:	4638      	mov	r0, r7
 8008390:	3101      	adds	r1, #1
 8008392:	f7ff ff79 	bl	8008288 <_Balloc>
 8008396:	4680      	mov	r8, r0
 8008398:	b928      	cbnz	r0, 80083a6 <__multadd+0x5a>
 800839a:	4602      	mov	r2, r0
 800839c:	4b0c      	ldr	r3, [pc, #48]	@ (80083d0 <__multadd+0x84>)
 800839e:	480d      	ldr	r0, [pc, #52]	@ (80083d4 <__multadd+0x88>)
 80083a0:	21ba      	movs	r1, #186	@ 0xba
 80083a2:	f000 fd27 	bl	8008df4 <__assert_func>
 80083a6:	6922      	ldr	r2, [r4, #16]
 80083a8:	3202      	adds	r2, #2
 80083aa:	f104 010c 	add.w	r1, r4, #12
 80083ae:	0092      	lsls	r2, r2, #2
 80083b0:	300c      	adds	r0, #12
 80083b2:	f000 fd11 	bl	8008dd8 <memcpy>
 80083b6:	4621      	mov	r1, r4
 80083b8:	4638      	mov	r0, r7
 80083ba:	f7ff ffa5 	bl	8008308 <_Bfree>
 80083be:	4644      	mov	r4, r8
 80083c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083c4:	3501      	adds	r5, #1
 80083c6:	615e      	str	r6, [r3, #20]
 80083c8:	6125      	str	r5, [r4, #16]
 80083ca:	4620      	mov	r0, r4
 80083cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083d0:	0800cacc 	.word	0x0800cacc
 80083d4:	0800cadd 	.word	0x0800cadd

080083d8 <__hi0bits>:
 80083d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80083dc:	4603      	mov	r3, r0
 80083de:	bf36      	itet	cc
 80083e0:	0403      	lslcc	r3, r0, #16
 80083e2:	2000      	movcs	r0, #0
 80083e4:	2010      	movcc	r0, #16
 80083e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80083ea:	bf3c      	itt	cc
 80083ec:	021b      	lslcc	r3, r3, #8
 80083ee:	3008      	addcc	r0, #8
 80083f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083f4:	bf3c      	itt	cc
 80083f6:	011b      	lslcc	r3, r3, #4
 80083f8:	3004      	addcc	r0, #4
 80083fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083fe:	bf3c      	itt	cc
 8008400:	009b      	lslcc	r3, r3, #2
 8008402:	3002      	addcc	r0, #2
 8008404:	2b00      	cmp	r3, #0
 8008406:	db05      	blt.n	8008414 <__hi0bits+0x3c>
 8008408:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800840c:	f100 0001 	add.w	r0, r0, #1
 8008410:	bf08      	it	eq
 8008412:	2020      	moveq	r0, #32
 8008414:	4770      	bx	lr

08008416 <__lo0bits>:
 8008416:	6803      	ldr	r3, [r0, #0]
 8008418:	4602      	mov	r2, r0
 800841a:	f013 0007 	ands.w	r0, r3, #7
 800841e:	d00b      	beq.n	8008438 <__lo0bits+0x22>
 8008420:	07d9      	lsls	r1, r3, #31
 8008422:	d421      	bmi.n	8008468 <__lo0bits+0x52>
 8008424:	0798      	lsls	r0, r3, #30
 8008426:	bf49      	itett	mi
 8008428:	085b      	lsrmi	r3, r3, #1
 800842a:	089b      	lsrpl	r3, r3, #2
 800842c:	2001      	movmi	r0, #1
 800842e:	6013      	strmi	r3, [r2, #0]
 8008430:	bf5c      	itt	pl
 8008432:	6013      	strpl	r3, [r2, #0]
 8008434:	2002      	movpl	r0, #2
 8008436:	4770      	bx	lr
 8008438:	b299      	uxth	r1, r3
 800843a:	b909      	cbnz	r1, 8008440 <__lo0bits+0x2a>
 800843c:	0c1b      	lsrs	r3, r3, #16
 800843e:	2010      	movs	r0, #16
 8008440:	b2d9      	uxtb	r1, r3
 8008442:	b909      	cbnz	r1, 8008448 <__lo0bits+0x32>
 8008444:	3008      	adds	r0, #8
 8008446:	0a1b      	lsrs	r3, r3, #8
 8008448:	0719      	lsls	r1, r3, #28
 800844a:	bf04      	itt	eq
 800844c:	091b      	lsreq	r3, r3, #4
 800844e:	3004      	addeq	r0, #4
 8008450:	0799      	lsls	r1, r3, #30
 8008452:	bf04      	itt	eq
 8008454:	089b      	lsreq	r3, r3, #2
 8008456:	3002      	addeq	r0, #2
 8008458:	07d9      	lsls	r1, r3, #31
 800845a:	d403      	bmi.n	8008464 <__lo0bits+0x4e>
 800845c:	085b      	lsrs	r3, r3, #1
 800845e:	f100 0001 	add.w	r0, r0, #1
 8008462:	d003      	beq.n	800846c <__lo0bits+0x56>
 8008464:	6013      	str	r3, [r2, #0]
 8008466:	4770      	bx	lr
 8008468:	2000      	movs	r0, #0
 800846a:	4770      	bx	lr
 800846c:	2020      	movs	r0, #32
 800846e:	4770      	bx	lr

08008470 <__i2b>:
 8008470:	b510      	push	{r4, lr}
 8008472:	460c      	mov	r4, r1
 8008474:	2101      	movs	r1, #1
 8008476:	f7ff ff07 	bl	8008288 <_Balloc>
 800847a:	4602      	mov	r2, r0
 800847c:	b928      	cbnz	r0, 800848a <__i2b+0x1a>
 800847e:	4b05      	ldr	r3, [pc, #20]	@ (8008494 <__i2b+0x24>)
 8008480:	4805      	ldr	r0, [pc, #20]	@ (8008498 <__i2b+0x28>)
 8008482:	f240 1145 	movw	r1, #325	@ 0x145
 8008486:	f000 fcb5 	bl	8008df4 <__assert_func>
 800848a:	2301      	movs	r3, #1
 800848c:	6144      	str	r4, [r0, #20]
 800848e:	6103      	str	r3, [r0, #16]
 8008490:	bd10      	pop	{r4, pc}
 8008492:	bf00      	nop
 8008494:	0800cacc 	.word	0x0800cacc
 8008498:	0800cadd 	.word	0x0800cadd

0800849c <__multiply>:
 800849c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a0:	4617      	mov	r7, r2
 80084a2:	690a      	ldr	r2, [r1, #16]
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	bfa8      	it	ge
 80084aa:	463b      	movge	r3, r7
 80084ac:	4689      	mov	r9, r1
 80084ae:	bfa4      	itt	ge
 80084b0:	460f      	movge	r7, r1
 80084b2:	4699      	movge	r9, r3
 80084b4:	693d      	ldr	r5, [r7, #16]
 80084b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	eb05 060a 	add.w	r6, r5, sl
 80084c2:	42b3      	cmp	r3, r6
 80084c4:	b085      	sub	sp, #20
 80084c6:	bfb8      	it	lt
 80084c8:	3101      	addlt	r1, #1
 80084ca:	f7ff fedd 	bl	8008288 <_Balloc>
 80084ce:	b930      	cbnz	r0, 80084de <__multiply+0x42>
 80084d0:	4602      	mov	r2, r0
 80084d2:	4b41      	ldr	r3, [pc, #260]	@ (80085d8 <__multiply+0x13c>)
 80084d4:	4841      	ldr	r0, [pc, #260]	@ (80085dc <__multiply+0x140>)
 80084d6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80084da:	f000 fc8b 	bl	8008df4 <__assert_func>
 80084de:	f100 0414 	add.w	r4, r0, #20
 80084e2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80084e6:	4623      	mov	r3, r4
 80084e8:	2200      	movs	r2, #0
 80084ea:	4573      	cmp	r3, lr
 80084ec:	d320      	bcc.n	8008530 <__multiply+0x94>
 80084ee:	f107 0814 	add.w	r8, r7, #20
 80084f2:	f109 0114 	add.w	r1, r9, #20
 80084f6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80084fa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80084fe:	9302      	str	r3, [sp, #8]
 8008500:	1beb      	subs	r3, r5, r7
 8008502:	3b15      	subs	r3, #21
 8008504:	f023 0303 	bic.w	r3, r3, #3
 8008508:	3304      	adds	r3, #4
 800850a:	3715      	adds	r7, #21
 800850c:	42bd      	cmp	r5, r7
 800850e:	bf38      	it	cc
 8008510:	2304      	movcc	r3, #4
 8008512:	9301      	str	r3, [sp, #4]
 8008514:	9b02      	ldr	r3, [sp, #8]
 8008516:	9103      	str	r1, [sp, #12]
 8008518:	428b      	cmp	r3, r1
 800851a:	d80c      	bhi.n	8008536 <__multiply+0x9a>
 800851c:	2e00      	cmp	r6, #0
 800851e:	dd03      	ble.n	8008528 <__multiply+0x8c>
 8008520:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008524:	2b00      	cmp	r3, #0
 8008526:	d055      	beq.n	80085d4 <__multiply+0x138>
 8008528:	6106      	str	r6, [r0, #16]
 800852a:	b005      	add	sp, #20
 800852c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008530:	f843 2b04 	str.w	r2, [r3], #4
 8008534:	e7d9      	b.n	80084ea <__multiply+0x4e>
 8008536:	f8b1 a000 	ldrh.w	sl, [r1]
 800853a:	f1ba 0f00 	cmp.w	sl, #0
 800853e:	d01f      	beq.n	8008580 <__multiply+0xe4>
 8008540:	46c4      	mov	ip, r8
 8008542:	46a1      	mov	r9, r4
 8008544:	2700      	movs	r7, #0
 8008546:	f85c 2b04 	ldr.w	r2, [ip], #4
 800854a:	f8d9 3000 	ldr.w	r3, [r9]
 800854e:	fa1f fb82 	uxth.w	fp, r2
 8008552:	b29b      	uxth	r3, r3
 8008554:	fb0a 330b 	mla	r3, sl, fp, r3
 8008558:	443b      	add	r3, r7
 800855a:	f8d9 7000 	ldr.w	r7, [r9]
 800855e:	0c12      	lsrs	r2, r2, #16
 8008560:	0c3f      	lsrs	r7, r7, #16
 8008562:	fb0a 7202 	mla	r2, sl, r2, r7
 8008566:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800856a:	b29b      	uxth	r3, r3
 800856c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008570:	4565      	cmp	r5, ip
 8008572:	f849 3b04 	str.w	r3, [r9], #4
 8008576:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800857a:	d8e4      	bhi.n	8008546 <__multiply+0xaa>
 800857c:	9b01      	ldr	r3, [sp, #4]
 800857e:	50e7      	str	r7, [r4, r3]
 8008580:	9b03      	ldr	r3, [sp, #12]
 8008582:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008586:	3104      	adds	r1, #4
 8008588:	f1b9 0f00 	cmp.w	r9, #0
 800858c:	d020      	beq.n	80085d0 <__multiply+0x134>
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	4647      	mov	r7, r8
 8008592:	46a4      	mov	ip, r4
 8008594:	f04f 0a00 	mov.w	sl, #0
 8008598:	f8b7 b000 	ldrh.w	fp, [r7]
 800859c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80085a0:	fb09 220b 	mla	r2, r9, fp, r2
 80085a4:	4452      	add	r2, sl
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085ac:	f84c 3b04 	str.w	r3, [ip], #4
 80085b0:	f857 3b04 	ldr.w	r3, [r7], #4
 80085b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085b8:	f8bc 3000 	ldrh.w	r3, [ip]
 80085bc:	fb09 330a 	mla	r3, r9, sl, r3
 80085c0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80085c4:	42bd      	cmp	r5, r7
 80085c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085ca:	d8e5      	bhi.n	8008598 <__multiply+0xfc>
 80085cc:	9a01      	ldr	r2, [sp, #4]
 80085ce:	50a3      	str	r3, [r4, r2]
 80085d0:	3404      	adds	r4, #4
 80085d2:	e79f      	b.n	8008514 <__multiply+0x78>
 80085d4:	3e01      	subs	r6, #1
 80085d6:	e7a1      	b.n	800851c <__multiply+0x80>
 80085d8:	0800cacc 	.word	0x0800cacc
 80085dc:	0800cadd 	.word	0x0800cadd

080085e0 <__pow5mult>:
 80085e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e4:	4615      	mov	r5, r2
 80085e6:	f012 0203 	ands.w	r2, r2, #3
 80085ea:	4607      	mov	r7, r0
 80085ec:	460e      	mov	r6, r1
 80085ee:	d007      	beq.n	8008600 <__pow5mult+0x20>
 80085f0:	4c25      	ldr	r4, [pc, #148]	@ (8008688 <__pow5mult+0xa8>)
 80085f2:	3a01      	subs	r2, #1
 80085f4:	2300      	movs	r3, #0
 80085f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085fa:	f7ff fea7 	bl	800834c <__multadd>
 80085fe:	4606      	mov	r6, r0
 8008600:	10ad      	asrs	r5, r5, #2
 8008602:	d03d      	beq.n	8008680 <__pow5mult+0xa0>
 8008604:	69fc      	ldr	r4, [r7, #28]
 8008606:	b97c      	cbnz	r4, 8008628 <__pow5mult+0x48>
 8008608:	2010      	movs	r0, #16
 800860a:	f7ff fd87 	bl	800811c <malloc>
 800860e:	4602      	mov	r2, r0
 8008610:	61f8      	str	r0, [r7, #28]
 8008612:	b928      	cbnz	r0, 8008620 <__pow5mult+0x40>
 8008614:	4b1d      	ldr	r3, [pc, #116]	@ (800868c <__pow5mult+0xac>)
 8008616:	481e      	ldr	r0, [pc, #120]	@ (8008690 <__pow5mult+0xb0>)
 8008618:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800861c:	f000 fbea 	bl	8008df4 <__assert_func>
 8008620:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008624:	6004      	str	r4, [r0, #0]
 8008626:	60c4      	str	r4, [r0, #12]
 8008628:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800862c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008630:	b94c      	cbnz	r4, 8008646 <__pow5mult+0x66>
 8008632:	f240 2171 	movw	r1, #625	@ 0x271
 8008636:	4638      	mov	r0, r7
 8008638:	f7ff ff1a 	bl	8008470 <__i2b>
 800863c:	2300      	movs	r3, #0
 800863e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008642:	4604      	mov	r4, r0
 8008644:	6003      	str	r3, [r0, #0]
 8008646:	f04f 0900 	mov.w	r9, #0
 800864a:	07eb      	lsls	r3, r5, #31
 800864c:	d50a      	bpl.n	8008664 <__pow5mult+0x84>
 800864e:	4631      	mov	r1, r6
 8008650:	4622      	mov	r2, r4
 8008652:	4638      	mov	r0, r7
 8008654:	f7ff ff22 	bl	800849c <__multiply>
 8008658:	4631      	mov	r1, r6
 800865a:	4680      	mov	r8, r0
 800865c:	4638      	mov	r0, r7
 800865e:	f7ff fe53 	bl	8008308 <_Bfree>
 8008662:	4646      	mov	r6, r8
 8008664:	106d      	asrs	r5, r5, #1
 8008666:	d00b      	beq.n	8008680 <__pow5mult+0xa0>
 8008668:	6820      	ldr	r0, [r4, #0]
 800866a:	b938      	cbnz	r0, 800867c <__pow5mult+0x9c>
 800866c:	4622      	mov	r2, r4
 800866e:	4621      	mov	r1, r4
 8008670:	4638      	mov	r0, r7
 8008672:	f7ff ff13 	bl	800849c <__multiply>
 8008676:	6020      	str	r0, [r4, #0]
 8008678:	f8c0 9000 	str.w	r9, [r0]
 800867c:	4604      	mov	r4, r0
 800867e:	e7e4      	b.n	800864a <__pow5mult+0x6a>
 8008680:	4630      	mov	r0, r6
 8008682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008686:	bf00      	nop
 8008688:	0800cb90 	.word	0x0800cb90
 800868c:	0800ca5d 	.word	0x0800ca5d
 8008690:	0800cadd 	.word	0x0800cadd

08008694 <__lshift>:
 8008694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008698:	460c      	mov	r4, r1
 800869a:	6849      	ldr	r1, [r1, #4]
 800869c:	6923      	ldr	r3, [r4, #16]
 800869e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086a2:	68a3      	ldr	r3, [r4, #8]
 80086a4:	4607      	mov	r7, r0
 80086a6:	4691      	mov	r9, r2
 80086a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086ac:	f108 0601 	add.w	r6, r8, #1
 80086b0:	42b3      	cmp	r3, r6
 80086b2:	db0b      	blt.n	80086cc <__lshift+0x38>
 80086b4:	4638      	mov	r0, r7
 80086b6:	f7ff fde7 	bl	8008288 <_Balloc>
 80086ba:	4605      	mov	r5, r0
 80086bc:	b948      	cbnz	r0, 80086d2 <__lshift+0x3e>
 80086be:	4602      	mov	r2, r0
 80086c0:	4b28      	ldr	r3, [pc, #160]	@ (8008764 <__lshift+0xd0>)
 80086c2:	4829      	ldr	r0, [pc, #164]	@ (8008768 <__lshift+0xd4>)
 80086c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80086c8:	f000 fb94 	bl	8008df4 <__assert_func>
 80086cc:	3101      	adds	r1, #1
 80086ce:	005b      	lsls	r3, r3, #1
 80086d0:	e7ee      	b.n	80086b0 <__lshift+0x1c>
 80086d2:	2300      	movs	r3, #0
 80086d4:	f100 0114 	add.w	r1, r0, #20
 80086d8:	f100 0210 	add.w	r2, r0, #16
 80086dc:	4618      	mov	r0, r3
 80086de:	4553      	cmp	r3, sl
 80086e0:	db33      	blt.n	800874a <__lshift+0xb6>
 80086e2:	6920      	ldr	r0, [r4, #16]
 80086e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086e8:	f104 0314 	add.w	r3, r4, #20
 80086ec:	f019 091f 	ands.w	r9, r9, #31
 80086f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80086f8:	d02b      	beq.n	8008752 <__lshift+0xbe>
 80086fa:	f1c9 0e20 	rsb	lr, r9, #32
 80086fe:	468a      	mov	sl, r1
 8008700:	2200      	movs	r2, #0
 8008702:	6818      	ldr	r0, [r3, #0]
 8008704:	fa00 f009 	lsl.w	r0, r0, r9
 8008708:	4310      	orrs	r0, r2
 800870a:	f84a 0b04 	str.w	r0, [sl], #4
 800870e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008712:	459c      	cmp	ip, r3
 8008714:	fa22 f20e 	lsr.w	r2, r2, lr
 8008718:	d8f3      	bhi.n	8008702 <__lshift+0x6e>
 800871a:	ebac 0304 	sub.w	r3, ip, r4
 800871e:	3b15      	subs	r3, #21
 8008720:	f023 0303 	bic.w	r3, r3, #3
 8008724:	3304      	adds	r3, #4
 8008726:	f104 0015 	add.w	r0, r4, #21
 800872a:	4560      	cmp	r0, ip
 800872c:	bf88      	it	hi
 800872e:	2304      	movhi	r3, #4
 8008730:	50ca      	str	r2, [r1, r3]
 8008732:	b10a      	cbz	r2, 8008738 <__lshift+0xa4>
 8008734:	f108 0602 	add.w	r6, r8, #2
 8008738:	3e01      	subs	r6, #1
 800873a:	4638      	mov	r0, r7
 800873c:	612e      	str	r6, [r5, #16]
 800873e:	4621      	mov	r1, r4
 8008740:	f7ff fde2 	bl	8008308 <_Bfree>
 8008744:	4628      	mov	r0, r5
 8008746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800874a:	f842 0f04 	str.w	r0, [r2, #4]!
 800874e:	3301      	adds	r3, #1
 8008750:	e7c5      	b.n	80086de <__lshift+0x4a>
 8008752:	3904      	subs	r1, #4
 8008754:	f853 2b04 	ldr.w	r2, [r3], #4
 8008758:	f841 2f04 	str.w	r2, [r1, #4]!
 800875c:	459c      	cmp	ip, r3
 800875e:	d8f9      	bhi.n	8008754 <__lshift+0xc0>
 8008760:	e7ea      	b.n	8008738 <__lshift+0xa4>
 8008762:	bf00      	nop
 8008764:	0800cacc 	.word	0x0800cacc
 8008768:	0800cadd 	.word	0x0800cadd

0800876c <__mcmp>:
 800876c:	690a      	ldr	r2, [r1, #16]
 800876e:	4603      	mov	r3, r0
 8008770:	6900      	ldr	r0, [r0, #16]
 8008772:	1a80      	subs	r0, r0, r2
 8008774:	b530      	push	{r4, r5, lr}
 8008776:	d10e      	bne.n	8008796 <__mcmp+0x2a>
 8008778:	3314      	adds	r3, #20
 800877a:	3114      	adds	r1, #20
 800877c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008780:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008784:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008788:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800878c:	4295      	cmp	r5, r2
 800878e:	d003      	beq.n	8008798 <__mcmp+0x2c>
 8008790:	d205      	bcs.n	800879e <__mcmp+0x32>
 8008792:	f04f 30ff 	mov.w	r0, #4294967295
 8008796:	bd30      	pop	{r4, r5, pc}
 8008798:	42a3      	cmp	r3, r4
 800879a:	d3f3      	bcc.n	8008784 <__mcmp+0x18>
 800879c:	e7fb      	b.n	8008796 <__mcmp+0x2a>
 800879e:	2001      	movs	r0, #1
 80087a0:	e7f9      	b.n	8008796 <__mcmp+0x2a>
	...

080087a4 <__mdiff>:
 80087a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a8:	4689      	mov	r9, r1
 80087aa:	4606      	mov	r6, r0
 80087ac:	4611      	mov	r1, r2
 80087ae:	4648      	mov	r0, r9
 80087b0:	4614      	mov	r4, r2
 80087b2:	f7ff ffdb 	bl	800876c <__mcmp>
 80087b6:	1e05      	subs	r5, r0, #0
 80087b8:	d112      	bne.n	80087e0 <__mdiff+0x3c>
 80087ba:	4629      	mov	r1, r5
 80087bc:	4630      	mov	r0, r6
 80087be:	f7ff fd63 	bl	8008288 <_Balloc>
 80087c2:	4602      	mov	r2, r0
 80087c4:	b928      	cbnz	r0, 80087d2 <__mdiff+0x2e>
 80087c6:	4b3f      	ldr	r3, [pc, #252]	@ (80088c4 <__mdiff+0x120>)
 80087c8:	f240 2137 	movw	r1, #567	@ 0x237
 80087cc:	483e      	ldr	r0, [pc, #248]	@ (80088c8 <__mdiff+0x124>)
 80087ce:	f000 fb11 	bl	8008df4 <__assert_func>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80087d8:	4610      	mov	r0, r2
 80087da:	b003      	add	sp, #12
 80087dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e0:	bfbc      	itt	lt
 80087e2:	464b      	movlt	r3, r9
 80087e4:	46a1      	movlt	r9, r4
 80087e6:	4630      	mov	r0, r6
 80087e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80087ec:	bfba      	itte	lt
 80087ee:	461c      	movlt	r4, r3
 80087f0:	2501      	movlt	r5, #1
 80087f2:	2500      	movge	r5, #0
 80087f4:	f7ff fd48 	bl	8008288 <_Balloc>
 80087f8:	4602      	mov	r2, r0
 80087fa:	b918      	cbnz	r0, 8008804 <__mdiff+0x60>
 80087fc:	4b31      	ldr	r3, [pc, #196]	@ (80088c4 <__mdiff+0x120>)
 80087fe:	f240 2145 	movw	r1, #581	@ 0x245
 8008802:	e7e3      	b.n	80087cc <__mdiff+0x28>
 8008804:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008808:	6926      	ldr	r6, [r4, #16]
 800880a:	60c5      	str	r5, [r0, #12]
 800880c:	f109 0310 	add.w	r3, r9, #16
 8008810:	f109 0514 	add.w	r5, r9, #20
 8008814:	f104 0e14 	add.w	lr, r4, #20
 8008818:	f100 0b14 	add.w	fp, r0, #20
 800881c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008820:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008824:	9301      	str	r3, [sp, #4]
 8008826:	46d9      	mov	r9, fp
 8008828:	f04f 0c00 	mov.w	ip, #0
 800882c:	9b01      	ldr	r3, [sp, #4]
 800882e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008832:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008836:	9301      	str	r3, [sp, #4]
 8008838:	fa1f f38a 	uxth.w	r3, sl
 800883c:	4619      	mov	r1, r3
 800883e:	b283      	uxth	r3, r0
 8008840:	1acb      	subs	r3, r1, r3
 8008842:	0c00      	lsrs	r0, r0, #16
 8008844:	4463      	add	r3, ip
 8008846:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800884a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800884e:	b29b      	uxth	r3, r3
 8008850:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008854:	4576      	cmp	r6, lr
 8008856:	f849 3b04 	str.w	r3, [r9], #4
 800885a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800885e:	d8e5      	bhi.n	800882c <__mdiff+0x88>
 8008860:	1b33      	subs	r3, r6, r4
 8008862:	3b15      	subs	r3, #21
 8008864:	f023 0303 	bic.w	r3, r3, #3
 8008868:	3415      	adds	r4, #21
 800886a:	3304      	adds	r3, #4
 800886c:	42a6      	cmp	r6, r4
 800886e:	bf38      	it	cc
 8008870:	2304      	movcc	r3, #4
 8008872:	441d      	add	r5, r3
 8008874:	445b      	add	r3, fp
 8008876:	461e      	mov	r6, r3
 8008878:	462c      	mov	r4, r5
 800887a:	4544      	cmp	r4, r8
 800887c:	d30e      	bcc.n	800889c <__mdiff+0xf8>
 800887e:	f108 0103 	add.w	r1, r8, #3
 8008882:	1b49      	subs	r1, r1, r5
 8008884:	f021 0103 	bic.w	r1, r1, #3
 8008888:	3d03      	subs	r5, #3
 800888a:	45a8      	cmp	r8, r5
 800888c:	bf38      	it	cc
 800888e:	2100      	movcc	r1, #0
 8008890:	440b      	add	r3, r1
 8008892:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008896:	b191      	cbz	r1, 80088be <__mdiff+0x11a>
 8008898:	6117      	str	r7, [r2, #16]
 800889a:	e79d      	b.n	80087d8 <__mdiff+0x34>
 800889c:	f854 1b04 	ldr.w	r1, [r4], #4
 80088a0:	46e6      	mov	lr, ip
 80088a2:	0c08      	lsrs	r0, r1, #16
 80088a4:	fa1c fc81 	uxtah	ip, ip, r1
 80088a8:	4471      	add	r1, lr
 80088aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80088ae:	b289      	uxth	r1, r1
 80088b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80088b4:	f846 1b04 	str.w	r1, [r6], #4
 80088b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80088bc:	e7dd      	b.n	800887a <__mdiff+0xd6>
 80088be:	3f01      	subs	r7, #1
 80088c0:	e7e7      	b.n	8008892 <__mdiff+0xee>
 80088c2:	bf00      	nop
 80088c4:	0800cacc 	.word	0x0800cacc
 80088c8:	0800cadd 	.word	0x0800cadd

080088cc <__d2b>:
 80088cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088d0:	460f      	mov	r7, r1
 80088d2:	2101      	movs	r1, #1
 80088d4:	ec59 8b10 	vmov	r8, r9, d0
 80088d8:	4616      	mov	r6, r2
 80088da:	f7ff fcd5 	bl	8008288 <_Balloc>
 80088de:	4604      	mov	r4, r0
 80088e0:	b930      	cbnz	r0, 80088f0 <__d2b+0x24>
 80088e2:	4602      	mov	r2, r0
 80088e4:	4b23      	ldr	r3, [pc, #140]	@ (8008974 <__d2b+0xa8>)
 80088e6:	4824      	ldr	r0, [pc, #144]	@ (8008978 <__d2b+0xac>)
 80088e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80088ec:	f000 fa82 	bl	8008df4 <__assert_func>
 80088f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80088f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088f8:	b10d      	cbz	r5, 80088fe <__d2b+0x32>
 80088fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80088fe:	9301      	str	r3, [sp, #4]
 8008900:	f1b8 0300 	subs.w	r3, r8, #0
 8008904:	d023      	beq.n	800894e <__d2b+0x82>
 8008906:	4668      	mov	r0, sp
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	f7ff fd84 	bl	8008416 <__lo0bits>
 800890e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008912:	b1d0      	cbz	r0, 800894a <__d2b+0x7e>
 8008914:	f1c0 0320 	rsb	r3, r0, #32
 8008918:	fa02 f303 	lsl.w	r3, r2, r3
 800891c:	430b      	orrs	r3, r1
 800891e:	40c2      	lsrs	r2, r0
 8008920:	6163      	str	r3, [r4, #20]
 8008922:	9201      	str	r2, [sp, #4]
 8008924:	9b01      	ldr	r3, [sp, #4]
 8008926:	61a3      	str	r3, [r4, #24]
 8008928:	2b00      	cmp	r3, #0
 800892a:	bf0c      	ite	eq
 800892c:	2201      	moveq	r2, #1
 800892e:	2202      	movne	r2, #2
 8008930:	6122      	str	r2, [r4, #16]
 8008932:	b1a5      	cbz	r5, 800895e <__d2b+0x92>
 8008934:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008938:	4405      	add	r5, r0
 800893a:	603d      	str	r5, [r7, #0]
 800893c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008940:	6030      	str	r0, [r6, #0]
 8008942:	4620      	mov	r0, r4
 8008944:	b003      	add	sp, #12
 8008946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800894a:	6161      	str	r1, [r4, #20]
 800894c:	e7ea      	b.n	8008924 <__d2b+0x58>
 800894e:	a801      	add	r0, sp, #4
 8008950:	f7ff fd61 	bl	8008416 <__lo0bits>
 8008954:	9b01      	ldr	r3, [sp, #4]
 8008956:	6163      	str	r3, [r4, #20]
 8008958:	3020      	adds	r0, #32
 800895a:	2201      	movs	r2, #1
 800895c:	e7e8      	b.n	8008930 <__d2b+0x64>
 800895e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008962:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008966:	6038      	str	r0, [r7, #0]
 8008968:	6918      	ldr	r0, [r3, #16]
 800896a:	f7ff fd35 	bl	80083d8 <__hi0bits>
 800896e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008972:	e7e5      	b.n	8008940 <__d2b+0x74>
 8008974:	0800cacc 	.word	0x0800cacc
 8008978:	0800cadd 	.word	0x0800cadd

0800897c <__ssputs_r>:
 800897c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008980:	688e      	ldr	r6, [r1, #8]
 8008982:	461f      	mov	r7, r3
 8008984:	42be      	cmp	r6, r7
 8008986:	680b      	ldr	r3, [r1, #0]
 8008988:	4682      	mov	sl, r0
 800898a:	460c      	mov	r4, r1
 800898c:	4690      	mov	r8, r2
 800898e:	d82d      	bhi.n	80089ec <__ssputs_r+0x70>
 8008990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008994:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008998:	d026      	beq.n	80089e8 <__ssputs_r+0x6c>
 800899a:	6965      	ldr	r5, [r4, #20]
 800899c:	6909      	ldr	r1, [r1, #16]
 800899e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089a2:	eba3 0901 	sub.w	r9, r3, r1
 80089a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089aa:	1c7b      	adds	r3, r7, #1
 80089ac:	444b      	add	r3, r9
 80089ae:	106d      	asrs	r5, r5, #1
 80089b0:	429d      	cmp	r5, r3
 80089b2:	bf38      	it	cc
 80089b4:	461d      	movcc	r5, r3
 80089b6:	0553      	lsls	r3, r2, #21
 80089b8:	d527      	bpl.n	8008a0a <__ssputs_r+0x8e>
 80089ba:	4629      	mov	r1, r5
 80089bc:	f7ff fbd8 	bl	8008170 <_malloc_r>
 80089c0:	4606      	mov	r6, r0
 80089c2:	b360      	cbz	r0, 8008a1e <__ssputs_r+0xa2>
 80089c4:	6921      	ldr	r1, [r4, #16]
 80089c6:	464a      	mov	r2, r9
 80089c8:	f000 fa06 	bl	8008dd8 <memcpy>
 80089cc:	89a3      	ldrh	r3, [r4, #12]
 80089ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80089d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089d6:	81a3      	strh	r3, [r4, #12]
 80089d8:	6126      	str	r6, [r4, #16]
 80089da:	6165      	str	r5, [r4, #20]
 80089dc:	444e      	add	r6, r9
 80089de:	eba5 0509 	sub.w	r5, r5, r9
 80089e2:	6026      	str	r6, [r4, #0]
 80089e4:	60a5      	str	r5, [r4, #8]
 80089e6:	463e      	mov	r6, r7
 80089e8:	42be      	cmp	r6, r7
 80089ea:	d900      	bls.n	80089ee <__ssputs_r+0x72>
 80089ec:	463e      	mov	r6, r7
 80089ee:	6820      	ldr	r0, [r4, #0]
 80089f0:	4632      	mov	r2, r6
 80089f2:	4641      	mov	r1, r8
 80089f4:	f000 f9c6 	bl	8008d84 <memmove>
 80089f8:	68a3      	ldr	r3, [r4, #8]
 80089fa:	1b9b      	subs	r3, r3, r6
 80089fc:	60a3      	str	r3, [r4, #8]
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	4433      	add	r3, r6
 8008a02:	6023      	str	r3, [r4, #0]
 8008a04:	2000      	movs	r0, #0
 8008a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0a:	462a      	mov	r2, r5
 8008a0c:	f000 fa36 	bl	8008e7c <_realloc_r>
 8008a10:	4606      	mov	r6, r0
 8008a12:	2800      	cmp	r0, #0
 8008a14:	d1e0      	bne.n	80089d8 <__ssputs_r+0x5c>
 8008a16:	6921      	ldr	r1, [r4, #16]
 8008a18:	4650      	mov	r0, sl
 8008a1a:	f7ff fb35 	bl	8008088 <_free_r>
 8008a1e:	230c      	movs	r3, #12
 8008a20:	f8ca 3000 	str.w	r3, [sl]
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a2a:	81a3      	strh	r3, [r4, #12]
 8008a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a30:	e7e9      	b.n	8008a06 <__ssputs_r+0x8a>
	...

08008a34 <_svfiprintf_r>:
 8008a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a38:	4698      	mov	r8, r3
 8008a3a:	898b      	ldrh	r3, [r1, #12]
 8008a3c:	061b      	lsls	r3, r3, #24
 8008a3e:	b09d      	sub	sp, #116	@ 0x74
 8008a40:	4607      	mov	r7, r0
 8008a42:	460d      	mov	r5, r1
 8008a44:	4614      	mov	r4, r2
 8008a46:	d510      	bpl.n	8008a6a <_svfiprintf_r+0x36>
 8008a48:	690b      	ldr	r3, [r1, #16]
 8008a4a:	b973      	cbnz	r3, 8008a6a <_svfiprintf_r+0x36>
 8008a4c:	2140      	movs	r1, #64	@ 0x40
 8008a4e:	f7ff fb8f 	bl	8008170 <_malloc_r>
 8008a52:	6028      	str	r0, [r5, #0]
 8008a54:	6128      	str	r0, [r5, #16]
 8008a56:	b930      	cbnz	r0, 8008a66 <_svfiprintf_r+0x32>
 8008a58:	230c      	movs	r3, #12
 8008a5a:	603b      	str	r3, [r7, #0]
 8008a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a60:	b01d      	add	sp, #116	@ 0x74
 8008a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a66:	2340      	movs	r3, #64	@ 0x40
 8008a68:	616b      	str	r3, [r5, #20]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a6e:	2320      	movs	r3, #32
 8008a70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a74:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a78:	2330      	movs	r3, #48	@ 0x30
 8008a7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008c18 <_svfiprintf_r+0x1e4>
 8008a7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a82:	f04f 0901 	mov.w	r9, #1
 8008a86:	4623      	mov	r3, r4
 8008a88:	469a      	mov	sl, r3
 8008a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a8e:	b10a      	cbz	r2, 8008a94 <_svfiprintf_r+0x60>
 8008a90:	2a25      	cmp	r2, #37	@ 0x25
 8008a92:	d1f9      	bne.n	8008a88 <_svfiprintf_r+0x54>
 8008a94:	ebba 0b04 	subs.w	fp, sl, r4
 8008a98:	d00b      	beq.n	8008ab2 <_svfiprintf_r+0x7e>
 8008a9a:	465b      	mov	r3, fp
 8008a9c:	4622      	mov	r2, r4
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	f7ff ff6b 	bl	800897c <__ssputs_r>
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	f000 80a7 	beq.w	8008bfa <_svfiprintf_r+0x1c6>
 8008aac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008aae:	445a      	add	r2, fp
 8008ab0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f000 809f 	beq.w	8008bfa <_svfiprintf_r+0x1c6>
 8008abc:	2300      	movs	r3, #0
 8008abe:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ac6:	f10a 0a01 	add.w	sl, sl, #1
 8008aca:	9304      	str	r3, [sp, #16]
 8008acc:	9307      	str	r3, [sp, #28]
 8008ace:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ad2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ad4:	4654      	mov	r4, sl
 8008ad6:	2205      	movs	r2, #5
 8008ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008adc:	484e      	ldr	r0, [pc, #312]	@ (8008c18 <_svfiprintf_r+0x1e4>)
 8008ade:	f7f7 fb97 	bl	8000210 <memchr>
 8008ae2:	9a04      	ldr	r2, [sp, #16]
 8008ae4:	b9d8      	cbnz	r0, 8008b1e <_svfiprintf_r+0xea>
 8008ae6:	06d0      	lsls	r0, r2, #27
 8008ae8:	bf44      	itt	mi
 8008aea:	2320      	movmi	r3, #32
 8008aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008af0:	0711      	lsls	r1, r2, #28
 8008af2:	bf44      	itt	mi
 8008af4:	232b      	movmi	r3, #43	@ 0x2b
 8008af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008afa:	f89a 3000 	ldrb.w	r3, [sl]
 8008afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b00:	d015      	beq.n	8008b2e <_svfiprintf_r+0xfa>
 8008b02:	9a07      	ldr	r2, [sp, #28]
 8008b04:	4654      	mov	r4, sl
 8008b06:	2000      	movs	r0, #0
 8008b08:	f04f 0c0a 	mov.w	ip, #10
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b12:	3b30      	subs	r3, #48	@ 0x30
 8008b14:	2b09      	cmp	r3, #9
 8008b16:	d94b      	bls.n	8008bb0 <_svfiprintf_r+0x17c>
 8008b18:	b1b0      	cbz	r0, 8008b48 <_svfiprintf_r+0x114>
 8008b1a:	9207      	str	r2, [sp, #28]
 8008b1c:	e014      	b.n	8008b48 <_svfiprintf_r+0x114>
 8008b1e:	eba0 0308 	sub.w	r3, r0, r8
 8008b22:	fa09 f303 	lsl.w	r3, r9, r3
 8008b26:	4313      	orrs	r3, r2
 8008b28:	9304      	str	r3, [sp, #16]
 8008b2a:	46a2      	mov	sl, r4
 8008b2c:	e7d2      	b.n	8008ad4 <_svfiprintf_r+0xa0>
 8008b2e:	9b03      	ldr	r3, [sp, #12]
 8008b30:	1d19      	adds	r1, r3, #4
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	9103      	str	r1, [sp, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	bfbb      	ittet	lt
 8008b3a:	425b      	neglt	r3, r3
 8008b3c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b40:	9307      	strge	r3, [sp, #28]
 8008b42:	9307      	strlt	r3, [sp, #28]
 8008b44:	bfb8      	it	lt
 8008b46:	9204      	strlt	r2, [sp, #16]
 8008b48:	7823      	ldrb	r3, [r4, #0]
 8008b4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b4c:	d10a      	bne.n	8008b64 <_svfiprintf_r+0x130>
 8008b4e:	7863      	ldrb	r3, [r4, #1]
 8008b50:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b52:	d132      	bne.n	8008bba <_svfiprintf_r+0x186>
 8008b54:	9b03      	ldr	r3, [sp, #12]
 8008b56:	1d1a      	adds	r2, r3, #4
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	9203      	str	r2, [sp, #12]
 8008b5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b60:	3402      	adds	r4, #2
 8008b62:	9305      	str	r3, [sp, #20]
 8008b64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008c28 <_svfiprintf_r+0x1f4>
 8008b68:	7821      	ldrb	r1, [r4, #0]
 8008b6a:	2203      	movs	r2, #3
 8008b6c:	4650      	mov	r0, sl
 8008b6e:	f7f7 fb4f 	bl	8000210 <memchr>
 8008b72:	b138      	cbz	r0, 8008b84 <_svfiprintf_r+0x150>
 8008b74:	9b04      	ldr	r3, [sp, #16]
 8008b76:	eba0 000a 	sub.w	r0, r0, sl
 8008b7a:	2240      	movs	r2, #64	@ 0x40
 8008b7c:	4082      	lsls	r2, r0
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	3401      	adds	r4, #1
 8008b82:	9304      	str	r3, [sp, #16]
 8008b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b88:	4824      	ldr	r0, [pc, #144]	@ (8008c1c <_svfiprintf_r+0x1e8>)
 8008b8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b8e:	2206      	movs	r2, #6
 8008b90:	f7f7 fb3e 	bl	8000210 <memchr>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	d036      	beq.n	8008c06 <_svfiprintf_r+0x1d2>
 8008b98:	4b21      	ldr	r3, [pc, #132]	@ (8008c20 <_svfiprintf_r+0x1ec>)
 8008b9a:	bb1b      	cbnz	r3, 8008be4 <_svfiprintf_r+0x1b0>
 8008b9c:	9b03      	ldr	r3, [sp, #12]
 8008b9e:	3307      	adds	r3, #7
 8008ba0:	f023 0307 	bic.w	r3, r3, #7
 8008ba4:	3308      	adds	r3, #8
 8008ba6:	9303      	str	r3, [sp, #12]
 8008ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008baa:	4433      	add	r3, r6
 8008bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bae:	e76a      	b.n	8008a86 <_svfiprintf_r+0x52>
 8008bb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	2001      	movs	r0, #1
 8008bb8:	e7a8      	b.n	8008b0c <_svfiprintf_r+0xd8>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	3401      	adds	r4, #1
 8008bbe:	9305      	str	r3, [sp, #20]
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	f04f 0c0a 	mov.w	ip, #10
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bcc:	3a30      	subs	r2, #48	@ 0x30
 8008bce:	2a09      	cmp	r2, #9
 8008bd0:	d903      	bls.n	8008bda <_svfiprintf_r+0x1a6>
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d0c6      	beq.n	8008b64 <_svfiprintf_r+0x130>
 8008bd6:	9105      	str	r1, [sp, #20]
 8008bd8:	e7c4      	b.n	8008b64 <_svfiprintf_r+0x130>
 8008bda:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bde:	4604      	mov	r4, r0
 8008be0:	2301      	movs	r3, #1
 8008be2:	e7f0      	b.n	8008bc6 <_svfiprintf_r+0x192>
 8008be4:	ab03      	add	r3, sp, #12
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	462a      	mov	r2, r5
 8008bea:	4b0e      	ldr	r3, [pc, #56]	@ (8008c24 <_svfiprintf_r+0x1f0>)
 8008bec:	a904      	add	r1, sp, #16
 8008bee:	4638      	mov	r0, r7
 8008bf0:	f7fd fe80 	bl	80068f4 <_printf_float>
 8008bf4:	1c42      	adds	r2, r0, #1
 8008bf6:	4606      	mov	r6, r0
 8008bf8:	d1d6      	bne.n	8008ba8 <_svfiprintf_r+0x174>
 8008bfa:	89ab      	ldrh	r3, [r5, #12]
 8008bfc:	065b      	lsls	r3, r3, #25
 8008bfe:	f53f af2d 	bmi.w	8008a5c <_svfiprintf_r+0x28>
 8008c02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c04:	e72c      	b.n	8008a60 <_svfiprintf_r+0x2c>
 8008c06:	ab03      	add	r3, sp, #12
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	462a      	mov	r2, r5
 8008c0c:	4b05      	ldr	r3, [pc, #20]	@ (8008c24 <_svfiprintf_r+0x1f0>)
 8008c0e:	a904      	add	r1, sp, #16
 8008c10:	4638      	mov	r0, r7
 8008c12:	f7fe f907 	bl	8006e24 <_printf_i>
 8008c16:	e7ed      	b.n	8008bf4 <_svfiprintf_r+0x1c0>
 8008c18:	0800cb36 	.word	0x0800cb36
 8008c1c:	0800cb40 	.word	0x0800cb40
 8008c20:	080068f5 	.word	0x080068f5
 8008c24:	0800897d 	.word	0x0800897d
 8008c28:	0800cb3c 	.word	0x0800cb3c

08008c2c <__sflush_r>:
 8008c2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c34:	0716      	lsls	r6, r2, #28
 8008c36:	4605      	mov	r5, r0
 8008c38:	460c      	mov	r4, r1
 8008c3a:	d454      	bmi.n	8008ce6 <__sflush_r+0xba>
 8008c3c:	684b      	ldr	r3, [r1, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	dc02      	bgt.n	8008c48 <__sflush_r+0x1c>
 8008c42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	dd48      	ble.n	8008cda <__sflush_r+0xae>
 8008c48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c4a:	2e00      	cmp	r6, #0
 8008c4c:	d045      	beq.n	8008cda <__sflush_r+0xae>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c54:	682f      	ldr	r7, [r5, #0]
 8008c56:	6a21      	ldr	r1, [r4, #32]
 8008c58:	602b      	str	r3, [r5, #0]
 8008c5a:	d030      	beq.n	8008cbe <__sflush_r+0x92>
 8008c5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	0759      	lsls	r1, r3, #29
 8008c62:	d505      	bpl.n	8008c70 <__sflush_r+0x44>
 8008c64:	6863      	ldr	r3, [r4, #4]
 8008c66:	1ad2      	subs	r2, r2, r3
 8008c68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c6a:	b10b      	cbz	r3, 8008c70 <__sflush_r+0x44>
 8008c6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c6e:	1ad2      	subs	r2, r2, r3
 8008c70:	2300      	movs	r3, #0
 8008c72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c74:	6a21      	ldr	r1, [r4, #32]
 8008c76:	4628      	mov	r0, r5
 8008c78:	47b0      	blx	r6
 8008c7a:	1c43      	adds	r3, r0, #1
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	d106      	bne.n	8008c8e <__sflush_r+0x62>
 8008c80:	6829      	ldr	r1, [r5, #0]
 8008c82:	291d      	cmp	r1, #29
 8008c84:	d82b      	bhi.n	8008cde <__sflush_r+0xb2>
 8008c86:	4a2a      	ldr	r2, [pc, #168]	@ (8008d30 <__sflush_r+0x104>)
 8008c88:	40ca      	lsrs	r2, r1
 8008c8a:	07d6      	lsls	r6, r2, #31
 8008c8c:	d527      	bpl.n	8008cde <__sflush_r+0xb2>
 8008c8e:	2200      	movs	r2, #0
 8008c90:	6062      	str	r2, [r4, #4]
 8008c92:	04d9      	lsls	r1, r3, #19
 8008c94:	6922      	ldr	r2, [r4, #16]
 8008c96:	6022      	str	r2, [r4, #0]
 8008c98:	d504      	bpl.n	8008ca4 <__sflush_r+0x78>
 8008c9a:	1c42      	adds	r2, r0, #1
 8008c9c:	d101      	bne.n	8008ca2 <__sflush_r+0x76>
 8008c9e:	682b      	ldr	r3, [r5, #0]
 8008ca0:	b903      	cbnz	r3, 8008ca4 <__sflush_r+0x78>
 8008ca2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ca4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ca6:	602f      	str	r7, [r5, #0]
 8008ca8:	b1b9      	cbz	r1, 8008cda <__sflush_r+0xae>
 8008caa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cae:	4299      	cmp	r1, r3
 8008cb0:	d002      	beq.n	8008cb8 <__sflush_r+0x8c>
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f7ff f9e8 	bl	8008088 <_free_r>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cbc:	e00d      	b.n	8008cda <__sflush_r+0xae>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	47b0      	blx	r6
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	1c50      	adds	r0, r2, #1
 8008cc8:	d1c9      	bne.n	8008c5e <__sflush_r+0x32>
 8008cca:	682b      	ldr	r3, [r5, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d0c6      	beq.n	8008c5e <__sflush_r+0x32>
 8008cd0:	2b1d      	cmp	r3, #29
 8008cd2:	d001      	beq.n	8008cd8 <__sflush_r+0xac>
 8008cd4:	2b16      	cmp	r3, #22
 8008cd6:	d11e      	bne.n	8008d16 <__sflush_r+0xea>
 8008cd8:	602f      	str	r7, [r5, #0]
 8008cda:	2000      	movs	r0, #0
 8008cdc:	e022      	b.n	8008d24 <__sflush_r+0xf8>
 8008cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ce2:	b21b      	sxth	r3, r3
 8008ce4:	e01b      	b.n	8008d1e <__sflush_r+0xf2>
 8008ce6:	690f      	ldr	r7, [r1, #16]
 8008ce8:	2f00      	cmp	r7, #0
 8008cea:	d0f6      	beq.n	8008cda <__sflush_r+0xae>
 8008cec:	0793      	lsls	r3, r2, #30
 8008cee:	680e      	ldr	r6, [r1, #0]
 8008cf0:	bf08      	it	eq
 8008cf2:	694b      	ldreq	r3, [r1, #20]
 8008cf4:	600f      	str	r7, [r1, #0]
 8008cf6:	bf18      	it	ne
 8008cf8:	2300      	movne	r3, #0
 8008cfa:	eba6 0807 	sub.w	r8, r6, r7
 8008cfe:	608b      	str	r3, [r1, #8]
 8008d00:	f1b8 0f00 	cmp.w	r8, #0
 8008d04:	dde9      	ble.n	8008cda <__sflush_r+0xae>
 8008d06:	6a21      	ldr	r1, [r4, #32]
 8008d08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d0a:	4643      	mov	r3, r8
 8008d0c:	463a      	mov	r2, r7
 8008d0e:	4628      	mov	r0, r5
 8008d10:	47b0      	blx	r6
 8008d12:	2800      	cmp	r0, #0
 8008d14:	dc08      	bgt.n	8008d28 <__sflush_r+0xfc>
 8008d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d1e:	81a3      	strh	r3, [r4, #12]
 8008d20:	f04f 30ff 	mov.w	r0, #4294967295
 8008d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d28:	4407      	add	r7, r0
 8008d2a:	eba8 0800 	sub.w	r8, r8, r0
 8008d2e:	e7e7      	b.n	8008d00 <__sflush_r+0xd4>
 8008d30:	20400001 	.word	0x20400001

08008d34 <_fflush_r>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	690b      	ldr	r3, [r1, #16]
 8008d38:	4605      	mov	r5, r0
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	b913      	cbnz	r3, 8008d44 <_fflush_r+0x10>
 8008d3e:	2500      	movs	r5, #0
 8008d40:	4628      	mov	r0, r5
 8008d42:	bd38      	pop	{r3, r4, r5, pc}
 8008d44:	b118      	cbz	r0, 8008d4e <_fflush_r+0x1a>
 8008d46:	6a03      	ldr	r3, [r0, #32]
 8008d48:	b90b      	cbnz	r3, 8008d4e <_fflush_r+0x1a>
 8008d4a:	f7fe fa15 	bl	8007178 <__sinit>
 8008d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0f3      	beq.n	8008d3e <_fflush_r+0xa>
 8008d56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d58:	07d0      	lsls	r0, r2, #31
 8008d5a:	d404      	bmi.n	8008d66 <_fflush_r+0x32>
 8008d5c:	0599      	lsls	r1, r3, #22
 8008d5e:	d402      	bmi.n	8008d66 <_fflush_r+0x32>
 8008d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d62:	f7fe fb36 	bl	80073d2 <__retarget_lock_acquire_recursive>
 8008d66:	4628      	mov	r0, r5
 8008d68:	4621      	mov	r1, r4
 8008d6a:	f7ff ff5f 	bl	8008c2c <__sflush_r>
 8008d6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d70:	07da      	lsls	r2, r3, #31
 8008d72:	4605      	mov	r5, r0
 8008d74:	d4e4      	bmi.n	8008d40 <_fflush_r+0xc>
 8008d76:	89a3      	ldrh	r3, [r4, #12]
 8008d78:	059b      	lsls	r3, r3, #22
 8008d7a:	d4e1      	bmi.n	8008d40 <_fflush_r+0xc>
 8008d7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d7e:	f7fe fb29 	bl	80073d4 <__retarget_lock_release_recursive>
 8008d82:	e7dd      	b.n	8008d40 <_fflush_r+0xc>

08008d84 <memmove>:
 8008d84:	4288      	cmp	r0, r1
 8008d86:	b510      	push	{r4, lr}
 8008d88:	eb01 0402 	add.w	r4, r1, r2
 8008d8c:	d902      	bls.n	8008d94 <memmove+0x10>
 8008d8e:	4284      	cmp	r4, r0
 8008d90:	4623      	mov	r3, r4
 8008d92:	d807      	bhi.n	8008da4 <memmove+0x20>
 8008d94:	1e43      	subs	r3, r0, #1
 8008d96:	42a1      	cmp	r1, r4
 8008d98:	d008      	beq.n	8008dac <memmove+0x28>
 8008d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008da2:	e7f8      	b.n	8008d96 <memmove+0x12>
 8008da4:	4402      	add	r2, r0
 8008da6:	4601      	mov	r1, r0
 8008da8:	428a      	cmp	r2, r1
 8008daa:	d100      	bne.n	8008dae <memmove+0x2a>
 8008dac:	bd10      	pop	{r4, pc}
 8008dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008db2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008db6:	e7f7      	b.n	8008da8 <memmove+0x24>

08008db8 <_sbrk_r>:
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	4d06      	ldr	r5, [pc, #24]	@ (8008dd4 <_sbrk_r+0x1c>)
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	4608      	mov	r0, r1
 8008dc2:	602b      	str	r3, [r5, #0]
 8008dc4:	f7fa fa06 	bl	80031d4 <_sbrk>
 8008dc8:	1c43      	adds	r3, r0, #1
 8008dca:	d102      	bne.n	8008dd2 <_sbrk_r+0x1a>
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	b103      	cbz	r3, 8008dd2 <_sbrk_r+0x1a>
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	20000874 	.word	0x20000874

08008dd8 <memcpy>:
 8008dd8:	440a      	add	r2, r1
 8008dda:	4291      	cmp	r1, r2
 8008ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008de0:	d100      	bne.n	8008de4 <memcpy+0xc>
 8008de2:	4770      	bx	lr
 8008de4:	b510      	push	{r4, lr}
 8008de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dee:	4291      	cmp	r1, r2
 8008df0:	d1f9      	bne.n	8008de6 <memcpy+0xe>
 8008df2:	bd10      	pop	{r4, pc}

08008df4 <__assert_func>:
 8008df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008df6:	4614      	mov	r4, r2
 8008df8:	461a      	mov	r2, r3
 8008dfa:	4b09      	ldr	r3, [pc, #36]	@ (8008e20 <__assert_func+0x2c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4605      	mov	r5, r0
 8008e00:	68d8      	ldr	r0, [r3, #12]
 8008e02:	b14c      	cbz	r4, 8008e18 <__assert_func+0x24>
 8008e04:	4b07      	ldr	r3, [pc, #28]	@ (8008e24 <__assert_func+0x30>)
 8008e06:	9100      	str	r1, [sp, #0]
 8008e08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e0c:	4906      	ldr	r1, [pc, #24]	@ (8008e28 <__assert_func+0x34>)
 8008e0e:	462b      	mov	r3, r5
 8008e10:	f000 f870 	bl	8008ef4 <fiprintf>
 8008e14:	f000 f880 	bl	8008f18 <abort>
 8008e18:	4b04      	ldr	r3, [pc, #16]	@ (8008e2c <__assert_func+0x38>)
 8008e1a:	461c      	mov	r4, r3
 8008e1c:	e7f3      	b.n	8008e06 <__assert_func+0x12>
 8008e1e:	bf00      	nop
 8008e20:	200001cc 	.word	0x200001cc
 8008e24:	0800cb51 	.word	0x0800cb51
 8008e28:	0800cb5e 	.word	0x0800cb5e
 8008e2c:	0800cb8c 	.word	0x0800cb8c

08008e30 <_calloc_r>:
 8008e30:	b570      	push	{r4, r5, r6, lr}
 8008e32:	fba1 5402 	umull	r5, r4, r1, r2
 8008e36:	b934      	cbnz	r4, 8008e46 <_calloc_r+0x16>
 8008e38:	4629      	mov	r1, r5
 8008e3a:	f7ff f999 	bl	8008170 <_malloc_r>
 8008e3e:	4606      	mov	r6, r0
 8008e40:	b928      	cbnz	r0, 8008e4e <_calloc_r+0x1e>
 8008e42:	4630      	mov	r0, r6
 8008e44:	bd70      	pop	{r4, r5, r6, pc}
 8008e46:	220c      	movs	r2, #12
 8008e48:	6002      	str	r2, [r0, #0]
 8008e4a:	2600      	movs	r6, #0
 8008e4c:	e7f9      	b.n	8008e42 <_calloc_r+0x12>
 8008e4e:	462a      	mov	r2, r5
 8008e50:	4621      	mov	r1, r4
 8008e52:	f7fe fa40 	bl	80072d6 <memset>
 8008e56:	e7f4      	b.n	8008e42 <_calloc_r+0x12>

08008e58 <__ascii_mbtowc>:
 8008e58:	b082      	sub	sp, #8
 8008e5a:	b901      	cbnz	r1, 8008e5e <__ascii_mbtowc+0x6>
 8008e5c:	a901      	add	r1, sp, #4
 8008e5e:	b142      	cbz	r2, 8008e72 <__ascii_mbtowc+0x1a>
 8008e60:	b14b      	cbz	r3, 8008e76 <__ascii_mbtowc+0x1e>
 8008e62:	7813      	ldrb	r3, [r2, #0]
 8008e64:	600b      	str	r3, [r1, #0]
 8008e66:	7812      	ldrb	r2, [r2, #0]
 8008e68:	1e10      	subs	r0, r2, #0
 8008e6a:	bf18      	it	ne
 8008e6c:	2001      	movne	r0, #1
 8008e6e:	b002      	add	sp, #8
 8008e70:	4770      	bx	lr
 8008e72:	4610      	mov	r0, r2
 8008e74:	e7fb      	b.n	8008e6e <__ascii_mbtowc+0x16>
 8008e76:	f06f 0001 	mvn.w	r0, #1
 8008e7a:	e7f8      	b.n	8008e6e <__ascii_mbtowc+0x16>

08008e7c <_realloc_r>:
 8008e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e80:	4607      	mov	r7, r0
 8008e82:	4614      	mov	r4, r2
 8008e84:	460d      	mov	r5, r1
 8008e86:	b921      	cbnz	r1, 8008e92 <_realloc_r+0x16>
 8008e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	f7ff b96f 	b.w	8008170 <_malloc_r>
 8008e92:	b92a      	cbnz	r2, 8008ea0 <_realloc_r+0x24>
 8008e94:	f7ff f8f8 	bl	8008088 <_free_r>
 8008e98:	4625      	mov	r5, r4
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea0:	f000 f841 	bl	8008f26 <_malloc_usable_size_r>
 8008ea4:	4284      	cmp	r4, r0
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	d802      	bhi.n	8008eb0 <_realloc_r+0x34>
 8008eaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008eae:	d8f4      	bhi.n	8008e9a <_realloc_r+0x1e>
 8008eb0:	4621      	mov	r1, r4
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	f7ff f95c 	bl	8008170 <_malloc_r>
 8008eb8:	4680      	mov	r8, r0
 8008eba:	b908      	cbnz	r0, 8008ec0 <_realloc_r+0x44>
 8008ebc:	4645      	mov	r5, r8
 8008ebe:	e7ec      	b.n	8008e9a <_realloc_r+0x1e>
 8008ec0:	42b4      	cmp	r4, r6
 8008ec2:	4622      	mov	r2, r4
 8008ec4:	4629      	mov	r1, r5
 8008ec6:	bf28      	it	cs
 8008ec8:	4632      	movcs	r2, r6
 8008eca:	f7ff ff85 	bl	8008dd8 <memcpy>
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	f7ff f8d9 	bl	8008088 <_free_r>
 8008ed6:	e7f1      	b.n	8008ebc <_realloc_r+0x40>

08008ed8 <__ascii_wctomb>:
 8008ed8:	4603      	mov	r3, r0
 8008eda:	4608      	mov	r0, r1
 8008edc:	b141      	cbz	r1, 8008ef0 <__ascii_wctomb+0x18>
 8008ede:	2aff      	cmp	r2, #255	@ 0xff
 8008ee0:	d904      	bls.n	8008eec <__ascii_wctomb+0x14>
 8008ee2:	228a      	movs	r2, #138	@ 0x8a
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eea:	4770      	bx	lr
 8008eec:	700a      	strb	r2, [r1, #0]
 8008eee:	2001      	movs	r0, #1
 8008ef0:	4770      	bx	lr
	...

08008ef4 <fiprintf>:
 8008ef4:	b40e      	push	{r1, r2, r3}
 8008ef6:	b503      	push	{r0, r1, lr}
 8008ef8:	4601      	mov	r1, r0
 8008efa:	ab03      	add	r3, sp, #12
 8008efc:	4805      	ldr	r0, [pc, #20]	@ (8008f14 <fiprintf+0x20>)
 8008efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f02:	6800      	ldr	r0, [r0, #0]
 8008f04:	9301      	str	r3, [sp, #4]
 8008f06:	f000 f83f 	bl	8008f88 <_vfiprintf_r>
 8008f0a:	b002      	add	sp, #8
 8008f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f10:	b003      	add	sp, #12
 8008f12:	4770      	bx	lr
 8008f14:	200001cc 	.word	0x200001cc

08008f18 <abort>:
 8008f18:	b508      	push	{r3, lr}
 8008f1a:	2006      	movs	r0, #6
 8008f1c:	f000 fa08 	bl	8009330 <raise>
 8008f20:	2001      	movs	r0, #1
 8008f22:	f7fa f8df 	bl	80030e4 <_exit>

08008f26 <_malloc_usable_size_r>:
 8008f26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f2a:	1f18      	subs	r0, r3, #4
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	bfbc      	itt	lt
 8008f30:	580b      	ldrlt	r3, [r1, r0]
 8008f32:	18c0      	addlt	r0, r0, r3
 8008f34:	4770      	bx	lr

08008f36 <__sfputc_r>:
 8008f36:	6893      	ldr	r3, [r2, #8]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	b410      	push	{r4}
 8008f3e:	6093      	str	r3, [r2, #8]
 8008f40:	da08      	bge.n	8008f54 <__sfputc_r+0x1e>
 8008f42:	6994      	ldr	r4, [r2, #24]
 8008f44:	42a3      	cmp	r3, r4
 8008f46:	db01      	blt.n	8008f4c <__sfputc_r+0x16>
 8008f48:	290a      	cmp	r1, #10
 8008f4a:	d103      	bne.n	8008f54 <__sfputc_r+0x1e>
 8008f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f50:	f000 b932 	b.w	80091b8 <__swbuf_r>
 8008f54:	6813      	ldr	r3, [r2, #0]
 8008f56:	1c58      	adds	r0, r3, #1
 8008f58:	6010      	str	r0, [r2, #0]
 8008f5a:	7019      	strb	r1, [r3, #0]
 8008f5c:	4608      	mov	r0, r1
 8008f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <__sfputs_r>:
 8008f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f66:	4606      	mov	r6, r0
 8008f68:	460f      	mov	r7, r1
 8008f6a:	4614      	mov	r4, r2
 8008f6c:	18d5      	adds	r5, r2, r3
 8008f6e:	42ac      	cmp	r4, r5
 8008f70:	d101      	bne.n	8008f76 <__sfputs_r+0x12>
 8008f72:	2000      	movs	r0, #0
 8008f74:	e007      	b.n	8008f86 <__sfputs_r+0x22>
 8008f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f7a:	463a      	mov	r2, r7
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f7ff ffda 	bl	8008f36 <__sfputc_r>
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	d1f3      	bne.n	8008f6e <__sfputs_r+0xa>
 8008f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f88 <_vfiprintf_r>:
 8008f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8c:	460d      	mov	r5, r1
 8008f8e:	b09d      	sub	sp, #116	@ 0x74
 8008f90:	4614      	mov	r4, r2
 8008f92:	4698      	mov	r8, r3
 8008f94:	4606      	mov	r6, r0
 8008f96:	b118      	cbz	r0, 8008fa0 <_vfiprintf_r+0x18>
 8008f98:	6a03      	ldr	r3, [r0, #32]
 8008f9a:	b90b      	cbnz	r3, 8008fa0 <_vfiprintf_r+0x18>
 8008f9c:	f7fe f8ec 	bl	8007178 <__sinit>
 8008fa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fa2:	07d9      	lsls	r1, r3, #31
 8008fa4:	d405      	bmi.n	8008fb2 <_vfiprintf_r+0x2a>
 8008fa6:	89ab      	ldrh	r3, [r5, #12]
 8008fa8:	059a      	lsls	r2, r3, #22
 8008faa:	d402      	bmi.n	8008fb2 <_vfiprintf_r+0x2a>
 8008fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fae:	f7fe fa10 	bl	80073d2 <__retarget_lock_acquire_recursive>
 8008fb2:	89ab      	ldrh	r3, [r5, #12]
 8008fb4:	071b      	lsls	r3, r3, #28
 8008fb6:	d501      	bpl.n	8008fbc <_vfiprintf_r+0x34>
 8008fb8:	692b      	ldr	r3, [r5, #16]
 8008fba:	b99b      	cbnz	r3, 8008fe4 <_vfiprintf_r+0x5c>
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f000 f938 	bl	8009234 <__swsetup_r>
 8008fc4:	b170      	cbz	r0, 8008fe4 <_vfiprintf_r+0x5c>
 8008fc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fc8:	07dc      	lsls	r4, r3, #31
 8008fca:	d504      	bpl.n	8008fd6 <_vfiprintf_r+0x4e>
 8008fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd0:	b01d      	add	sp, #116	@ 0x74
 8008fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd6:	89ab      	ldrh	r3, [r5, #12]
 8008fd8:	0598      	lsls	r0, r3, #22
 8008fda:	d4f7      	bmi.n	8008fcc <_vfiprintf_r+0x44>
 8008fdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fde:	f7fe f9f9 	bl	80073d4 <__retarget_lock_release_recursive>
 8008fe2:	e7f3      	b.n	8008fcc <_vfiprintf_r+0x44>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fe8:	2320      	movs	r3, #32
 8008fea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fee:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ff2:	2330      	movs	r3, #48	@ 0x30
 8008ff4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80091a4 <_vfiprintf_r+0x21c>
 8008ff8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ffc:	f04f 0901 	mov.w	r9, #1
 8009000:	4623      	mov	r3, r4
 8009002:	469a      	mov	sl, r3
 8009004:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009008:	b10a      	cbz	r2, 800900e <_vfiprintf_r+0x86>
 800900a:	2a25      	cmp	r2, #37	@ 0x25
 800900c:	d1f9      	bne.n	8009002 <_vfiprintf_r+0x7a>
 800900e:	ebba 0b04 	subs.w	fp, sl, r4
 8009012:	d00b      	beq.n	800902c <_vfiprintf_r+0xa4>
 8009014:	465b      	mov	r3, fp
 8009016:	4622      	mov	r2, r4
 8009018:	4629      	mov	r1, r5
 800901a:	4630      	mov	r0, r6
 800901c:	f7ff ffa2 	bl	8008f64 <__sfputs_r>
 8009020:	3001      	adds	r0, #1
 8009022:	f000 80a7 	beq.w	8009174 <_vfiprintf_r+0x1ec>
 8009026:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009028:	445a      	add	r2, fp
 800902a:	9209      	str	r2, [sp, #36]	@ 0x24
 800902c:	f89a 3000 	ldrb.w	r3, [sl]
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 809f 	beq.w	8009174 <_vfiprintf_r+0x1ec>
 8009036:	2300      	movs	r3, #0
 8009038:	f04f 32ff 	mov.w	r2, #4294967295
 800903c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009040:	f10a 0a01 	add.w	sl, sl, #1
 8009044:	9304      	str	r3, [sp, #16]
 8009046:	9307      	str	r3, [sp, #28]
 8009048:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800904c:	931a      	str	r3, [sp, #104]	@ 0x68
 800904e:	4654      	mov	r4, sl
 8009050:	2205      	movs	r2, #5
 8009052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009056:	4853      	ldr	r0, [pc, #332]	@ (80091a4 <_vfiprintf_r+0x21c>)
 8009058:	f7f7 f8da 	bl	8000210 <memchr>
 800905c:	9a04      	ldr	r2, [sp, #16]
 800905e:	b9d8      	cbnz	r0, 8009098 <_vfiprintf_r+0x110>
 8009060:	06d1      	lsls	r1, r2, #27
 8009062:	bf44      	itt	mi
 8009064:	2320      	movmi	r3, #32
 8009066:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800906a:	0713      	lsls	r3, r2, #28
 800906c:	bf44      	itt	mi
 800906e:	232b      	movmi	r3, #43	@ 0x2b
 8009070:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009074:	f89a 3000 	ldrb.w	r3, [sl]
 8009078:	2b2a      	cmp	r3, #42	@ 0x2a
 800907a:	d015      	beq.n	80090a8 <_vfiprintf_r+0x120>
 800907c:	9a07      	ldr	r2, [sp, #28]
 800907e:	4654      	mov	r4, sl
 8009080:	2000      	movs	r0, #0
 8009082:	f04f 0c0a 	mov.w	ip, #10
 8009086:	4621      	mov	r1, r4
 8009088:	f811 3b01 	ldrb.w	r3, [r1], #1
 800908c:	3b30      	subs	r3, #48	@ 0x30
 800908e:	2b09      	cmp	r3, #9
 8009090:	d94b      	bls.n	800912a <_vfiprintf_r+0x1a2>
 8009092:	b1b0      	cbz	r0, 80090c2 <_vfiprintf_r+0x13a>
 8009094:	9207      	str	r2, [sp, #28]
 8009096:	e014      	b.n	80090c2 <_vfiprintf_r+0x13a>
 8009098:	eba0 0308 	sub.w	r3, r0, r8
 800909c:	fa09 f303 	lsl.w	r3, r9, r3
 80090a0:	4313      	orrs	r3, r2
 80090a2:	9304      	str	r3, [sp, #16]
 80090a4:	46a2      	mov	sl, r4
 80090a6:	e7d2      	b.n	800904e <_vfiprintf_r+0xc6>
 80090a8:	9b03      	ldr	r3, [sp, #12]
 80090aa:	1d19      	adds	r1, r3, #4
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	9103      	str	r1, [sp, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	bfbb      	ittet	lt
 80090b4:	425b      	neglt	r3, r3
 80090b6:	f042 0202 	orrlt.w	r2, r2, #2
 80090ba:	9307      	strge	r3, [sp, #28]
 80090bc:	9307      	strlt	r3, [sp, #28]
 80090be:	bfb8      	it	lt
 80090c0:	9204      	strlt	r2, [sp, #16]
 80090c2:	7823      	ldrb	r3, [r4, #0]
 80090c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80090c6:	d10a      	bne.n	80090de <_vfiprintf_r+0x156>
 80090c8:	7863      	ldrb	r3, [r4, #1]
 80090ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80090cc:	d132      	bne.n	8009134 <_vfiprintf_r+0x1ac>
 80090ce:	9b03      	ldr	r3, [sp, #12]
 80090d0:	1d1a      	adds	r2, r3, #4
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	9203      	str	r2, [sp, #12]
 80090d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090da:	3402      	adds	r4, #2
 80090dc:	9305      	str	r3, [sp, #20]
 80090de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091b4 <_vfiprintf_r+0x22c>
 80090e2:	7821      	ldrb	r1, [r4, #0]
 80090e4:	2203      	movs	r2, #3
 80090e6:	4650      	mov	r0, sl
 80090e8:	f7f7 f892 	bl	8000210 <memchr>
 80090ec:	b138      	cbz	r0, 80090fe <_vfiprintf_r+0x176>
 80090ee:	9b04      	ldr	r3, [sp, #16]
 80090f0:	eba0 000a 	sub.w	r0, r0, sl
 80090f4:	2240      	movs	r2, #64	@ 0x40
 80090f6:	4082      	lsls	r2, r0
 80090f8:	4313      	orrs	r3, r2
 80090fa:	3401      	adds	r4, #1
 80090fc:	9304      	str	r3, [sp, #16]
 80090fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009102:	4829      	ldr	r0, [pc, #164]	@ (80091a8 <_vfiprintf_r+0x220>)
 8009104:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009108:	2206      	movs	r2, #6
 800910a:	f7f7 f881 	bl	8000210 <memchr>
 800910e:	2800      	cmp	r0, #0
 8009110:	d03f      	beq.n	8009192 <_vfiprintf_r+0x20a>
 8009112:	4b26      	ldr	r3, [pc, #152]	@ (80091ac <_vfiprintf_r+0x224>)
 8009114:	bb1b      	cbnz	r3, 800915e <_vfiprintf_r+0x1d6>
 8009116:	9b03      	ldr	r3, [sp, #12]
 8009118:	3307      	adds	r3, #7
 800911a:	f023 0307 	bic.w	r3, r3, #7
 800911e:	3308      	adds	r3, #8
 8009120:	9303      	str	r3, [sp, #12]
 8009122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009124:	443b      	add	r3, r7
 8009126:	9309      	str	r3, [sp, #36]	@ 0x24
 8009128:	e76a      	b.n	8009000 <_vfiprintf_r+0x78>
 800912a:	fb0c 3202 	mla	r2, ip, r2, r3
 800912e:	460c      	mov	r4, r1
 8009130:	2001      	movs	r0, #1
 8009132:	e7a8      	b.n	8009086 <_vfiprintf_r+0xfe>
 8009134:	2300      	movs	r3, #0
 8009136:	3401      	adds	r4, #1
 8009138:	9305      	str	r3, [sp, #20]
 800913a:	4619      	mov	r1, r3
 800913c:	f04f 0c0a 	mov.w	ip, #10
 8009140:	4620      	mov	r0, r4
 8009142:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009146:	3a30      	subs	r2, #48	@ 0x30
 8009148:	2a09      	cmp	r2, #9
 800914a:	d903      	bls.n	8009154 <_vfiprintf_r+0x1cc>
 800914c:	2b00      	cmp	r3, #0
 800914e:	d0c6      	beq.n	80090de <_vfiprintf_r+0x156>
 8009150:	9105      	str	r1, [sp, #20]
 8009152:	e7c4      	b.n	80090de <_vfiprintf_r+0x156>
 8009154:	fb0c 2101 	mla	r1, ip, r1, r2
 8009158:	4604      	mov	r4, r0
 800915a:	2301      	movs	r3, #1
 800915c:	e7f0      	b.n	8009140 <_vfiprintf_r+0x1b8>
 800915e:	ab03      	add	r3, sp, #12
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	462a      	mov	r2, r5
 8009164:	4b12      	ldr	r3, [pc, #72]	@ (80091b0 <_vfiprintf_r+0x228>)
 8009166:	a904      	add	r1, sp, #16
 8009168:	4630      	mov	r0, r6
 800916a:	f7fd fbc3 	bl	80068f4 <_printf_float>
 800916e:	4607      	mov	r7, r0
 8009170:	1c78      	adds	r0, r7, #1
 8009172:	d1d6      	bne.n	8009122 <_vfiprintf_r+0x19a>
 8009174:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009176:	07d9      	lsls	r1, r3, #31
 8009178:	d405      	bmi.n	8009186 <_vfiprintf_r+0x1fe>
 800917a:	89ab      	ldrh	r3, [r5, #12]
 800917c:	059a      	lsls	r2, r3, #22
 800917e:	d402      	bmi.n	8009186 <_vfiprintf_r+0x1fe>
 8009180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009182:	f7fe f927 	bl	80073d4 <__retarget_lock_release_recursive>
 8009186:	89ab      	ldrh	r3, [r5, #12]
 8009188:	065b      	lsls	r3, r3, #25
 800918a:	f53f af1f 	bmi.w	8008fcc <_vfiprintf_r+0x44>
 800918e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009190:	e71e      	b.n	8008fd0 <_vfiprintf_r+0x48>
 8009192:	ab03      	add	r3, sp, #12
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	462a      	mov	r2, r5
 8009198:	4b05      	ldr	r3, [pc, #20]	@ (80091b0 <_vfiprintf_r+0x228>)
 800919a:	a904      	add	r1, sp, #16
 800919c:	4630      	mov	r0, r6
 800919e:	f7fd fe41 	bl	8006e24 <_printf_i>
 80091a2:	e7e4      	b.n	800916e <_vfiprintf_r+0x1e6>
 80091a4:	0800cb36 	.word	0x0800cb36
 80091a8:	0800cb40 	.word	0x0800cb40
 80091ac:	080068f5 	.word	0x080068f5
 80091b0:	08008f65 	.word	0x08008f65
 80091b4:	0800cb3c 	.word	0x0800cb3c

080091b8 <__swbuf_r>:
 80091b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ba:	460e      	mov	r6, r1
 80091bc:	4614      	mov	r4, r2
 80091be:	4605      	mov	r5, r0
 80091c0:	b118      	cbz	r0, 80091ca <__swbuf_r+0x12>
 80091c2:	6a03      	ldr	r3, [r0, #32]
 80091c4:	b90b      	cbnz	r3, 80091ca <__swbuf_r+0x12>
 80091c6:	f7fd ffd7 	bl	8007178 <__sinit>
 80091ca:	69a3      	ldr	r3, [r4, #24]
 80091cc:	60a3      	str	r3, [r4, #8]
 80091ce:	89a3      	ldrh	r3, [r4, #12]
 80091d0:	071a      	lsls	r2, r3, #28
 80091d2:	d501      	bpl.n	80091d8 <__swbuf_r+0x20>
 80091d4:	6923      	ldr	r3, [r4, #16]
 80091d6:	b943      	cbnz	r3, 80091ea <__swbuf_r+0x32>
 80091d8:	4621      	mov	r1, r4
 80091da:	4628      	mov	r0, r5
 80091dc:	f000 f82a 	bl	8009234 <__swsetup_r>
 80091e0:	b118      	cbz	r0, 80091ea <__swbuf_r+0x32>
 80091e2:	f04f 37ff 	mov.w	r7, #4294967295
 80091e6:	4638      	mov	r0, r7
 80091e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	6922      	ldr	r2, [r4, #16]
 80091ee:	1a98      	subs	r0, r3, r2
 80091f0:	6963      	ldr	r3, [r4, #20]
 80091f2:	b2f6      	uxtb	r6, r6
 80091f4:	4283      	cmp	r3, r0
 80091f6:	4637      	mov	r7, r6
 80091f8:	dc05      	bgt.n	8009206 <__swbuf_r+0x4e>
 80091fa:	4621      	mov	r1, r4
 80091fc:	4628      	mov	r0, r5
 80091fe:	f7ff fd99 	bl	8008d34 <_fflush_r>
 8009202:	2800      	cmp	r0, #0
 8009204:	d1ed      	bne.n	80091e2 <__swbuf_r+0x2a>
 8009206:	68a3      	ldr	r3, [r4, #8]
 8009208:	3b01      	subs	r3, #1
 800920a:	60a3      	str	r3, [r4, #8]
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	1c5a      	adds	r2, r3, #1
 8009210:	6022      	str	r2, [r4, #0]
 8009212:	701e      	strb	r6, [r3, #0]
 8009214:	6962      	ldr	r2, [r4, #20]
 8009216:	1c43      	adds	r3, r0, #1
 8009218:	429a      	cmp	r2, r3
 800921a:	d004      	beq.n	8009226 <__swbuf_r+0x6e>
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	07db      	lsls	r3, r3, #31
 8009220:	d5e1      	bpl.n	80091e6 <__swbuf_r+0x2e>
 8009222:	2e0a      	cmp	r6, #10
 8009224:	d1df      	bne.n	80091e6 <__swbuf_r+0x2e>
 8009226:	4621      	mov	r1, r4
 8009228:	4628      	mov	r0, r5
 800922a:	f7ff fd83 	bl	8008d34 <_fflush_r>
 800922e:	2800      	cmp	r0, #0
 8009230:	d0d9      	beq.n	80091e6 <__swbuf_r+0x2e>
 8009232:	e7d6      	b.n	80091e2 <__swbuf_r+0x2a>

08009234 <__swsetup_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4b29      	ldr	r3, [pc, #164]	@ (80092dc <__swsetup_r+0xa8>)
 8009238:	4605      	mov	r5, r0
 800923a:	6818      	ldr	r0, [r3, #0]
 800923c:	460c      	mov	r4, r1
 800923e:	b118      	cbz	r0, 8009248 <__swsetup_r+0x14>
 8009240:	6a03      	ldr	r3, [r0, #32]
 8009242:	b90b      	cbnz	r3, 8009248 <__swsetup_r+0x14>
 8009244:	f7fd ff98 	bl	8007178 <__sinit>
 8009248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800924c:	0719      	lsls	r1, r3, #28
 800924e:	d422      	bmi.n	8009296 <__swsetup_r+0x62>
 8009250:	06da      	lsls	r2, r3, #27
 8009252:	d407      	bmi.n	8009264 <__swsetup_r+0x30>
 8009254:	2209      	movs	r2, #9
 8009256:	602a      	str	r2, [r5, #0]
 8009258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800925c:	81a3      	strh	r3, [r4, #12]
 800925e:	f04f 30ff 	mov.w	r0, #4294967295
 8009262:	e033      	b.n	80092cc <__swsetup_r+0x98>
 8009264:	0758      	lsls	r0, r3, #29
 8009266:	d512      	bpl.n	800928e <__swsetup_r+0x5a>
 8009268:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800926a:	b141      	cbz	r1, 800927e <__swsetup_r+0x4a>
 800926c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009270:	4299      	cmp	r1, r3
 8009272:	d002      	beq.n	800927a <__swsetup_r+0x46>
 8009274:	4628      	mov	r0, r5
 8009276:	f7fe ff07 	bl	8008088 <_free_r>
 800927a:	2300      	movs	r3, #0
 800927c:	6363      	str	r3, [r4, #52]	@ 0x34
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009284:	81a3      	strh	r3, [r4, #12]
 8009286:	2300      	movs	r3, #0
 8009288:	6063      	str	r3, [r4, #4]
 800928a:	6923      	ldr	r3, [r4, #16]
 800928c:	6023      	str	r3, [r4, #0]
 800928e:	89a3      	ldrh	r3, [r4, #12]
 8009290:	f043 0308 	orr.w	r3, r3, #8
 8009294:	81a3      	strh	r3, [r4, #12]
 8009296:	6923      	ldr	r3, [r4, #16]
 8009298:	b94b      	cbnz	r3, 80092ae <__swsetup_r+0x7a>
 800929a:	89a3      	ldrh	r3, [r4, #12]
 800929c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80092a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092a4:	d003      	beq.n	80092ae <__swsetup_r+0x7a>
 80092a6:	4621      	mov	r1, r4
 80092a8:	4628      	mov	r0, r5
 80092aa:	f000 f883 	bl	80093b4 <__smakebuf_r>
 80092ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092b2:	f013 0201 	ands.w	r2, r3, #1
 80092b6:	d00a      	beq.n	80092ce <__swsetup_r+0x9a>
 80092b8:	2200      	movs	r2, #0
 80092ba:	60a2      	str	r2, [r4, #8]
 80092bc:	6962      	ldr	r2, [r4, #20]
 80092be:	4252      	negs	r2, r2
 80092c0:	61a2      	str	r2, [r4, #24]
 80092c2:	6922      	ldr	r2, [r4, #16]
 80092c4:	b942      	cbnz	r2, 80092d8 <__swsetup_r+0xa4>
 80092c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80092ca:	d1c5      	bne.n	8009258 <__swsetup_r+0x24>
 80092cc:	bd38      	pop	{r3, r4, r5, pc}
 80092ce:	0799      	lsls	r1, r3, #30
 80092d0:	bf58      	it	pl
 80092d2:	6962      	ldrpl	r2, [r4, #20]
 80092d4:	60a2      	str	r2, [r4, #8]
 80092d6:	e7f4      	b.n	80092c2 <__swsetup_r+0x8e>
 80092d8:	2000      	movs	r0, #0
 80092da:	e7f7      	b.n	80092cc <__swsetup_r+0x98>
 80092dc:	200001cc 	.word	0x200001cc

080092e0 <_raise_r>:
 80092e0:	291f      	cmp	r1, #31
 80092e2:	b538      	push	{r3, r4, r5, lr}
 80092e4:	4605      	mov	r5, r0
 80092e6:	460c      	mov	r4, r1
 80092e8:	d904      	bls.n	80092f4 <_raise_r+0x14>
 80092ea:	2316      	movs	r3, #22
 80092ec:	6003      	str	r3, [r0, #0]
 80092ee:	f04f 30ff 	mov.w	r0, #4294967295
 80092f2:	bd38      	pop	{r3, r4, r5, pc}
 80092f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80092f6:	b112      	cbz	r2, 80092fe <_raise_r+0x1e>
 80092f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092fc:	b94b      	cbnz	r3, 8009312 <_raise_r+0x32>
 80092fe:	4628      	mov	r0, r5
 8009300:	f000 f830 	bl	8009364 <_getpid_r>
 8009304:	4622      	mov	r2, r4
 8009306:	4601      	mov	r1, r0
 8009308:	4628      	mov	r0, r5
 800930a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800930e:	f000 b817 	b.w	8009340 <_kill_r>
 8009312:	2b01      	cmp	r3, #1
 8009314:	d00a      	beq.n	800932c <_raise_r+0x4c>
 8009316:	1c59      	adds	r1, r3, #1
 8009318:	d103      	bne.n	8009322 <_raise_r+0x42>
 800931a:	2316      	movs	r3, #22
 800931c:	6003      	str	r3, [r0, #0]
 800931e:	2001      	movs	r0, #1
 8009320:	e7e7      	b.n	80092f2 <_raise_r+0x12>
 8009322:	2100      	movs	r1, #0
 8009324:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009328:	4620      	mov	r0, r4
 800932a:	4798      	blx	r3
 800932c:	2000      	movs	r0, #0
 800932e:	e7e0      	b.n	80092f2 <_raise_r+0x12>

08009330 <raise>:
 8009330:	4b02      	ldr	r3, [pc, #8]	@ (800933c <raise+0xc>)
 8009332:	4601      	mov	r1, r0
 8009334:	6818      	ldr	r0, [r3, #0]
 8009336:	f7ff bfd3 	b.w	80092e0 <_raise_r>
 800933a:	bf00      	nop
 800933c:	200001cc 	.word	0x200001cc

08009340 <_kill_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4d07      	ldr	r5, [pc, #28]	@ (8009360 <_kill_r+0x20>)
 8009344:	2300      	movs	r3, #0
 8009346:	4604      	mov	r4, r0
 8009348:	4608      	mov	r0, r1
 800934a:	4611      	mov	r1, r2
 800934c:	602b      	str	r3, [r5, #0]
 800934e:	f7f9 feb9 	bl	80030c4 <_kill>
 8009352:	1c43      	adds	r3, r0, #1
 8009354:	d102      	bne.n	800935c <_kill_r+0x1c>
 8009356:	682b      	ldr	r3, [r5, #0]
 8009358:	b103      	cbz	r3, 800935c <_kill_r+0x1c>
 800935a:	6023      	str	r3, [r4, #0]
 800935c:	bd38      	pop	{r3, r4, r5, pc}
 800935e:	bf00      	nop
 8009360:	20000874 	.word	0x20000874

08009364 <_getpid_r>:
 8009364:	f7f9 bea6 	b.w	80030b4 <_getpid>

08009368 <__swhatbuf_r>:
 8009368:	b570      	push	{r4, r5, r6, lr}
 800936a:	460c      	mov	r4, r1
 800936c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009370:	2900      	cmp	r1, #0
 8009372:	b096      	sub	sp, #88	@ 0x58
 8009374:	4615      	mov	r5, r2
 8009376:	461e      	mov	r6, r3
 8009378:	da0d      	bge.n	8009396 <__swhatbuf_r+0x2e>
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009380:	f04f 0100 	mov.w	r1, #0
 8009384:	bf14      	ite	ne
 8009386:	2340      	movne	r3, #64	@ 0x40
 8009388:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800938c:	2000      	movs	r0, #0
 800938e:	6031      	str	r1, [r6, #0]
 8009390:	602b      	str	r3, [r5, #0]
 8009392:	b016      	add	sp, #88	@ 0x58
 8009394:	bd70      	pop	{r4, r5, r6, pc}
 8009396:	466a      	mov	r2, sp
 8009398:	f000 f848 	bl	800942c <_fstat_r>
 800939c:	2800      	cmp	r0, #0
 800939e:	dbec      	blt.n	800937a <__swhatbuf_r+0x12>
 80093a0:	9901      	ldr	r1, [sp, #4]
 80093a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80093aa:	4259      	negs	r1, r3
 80093ac:	4159      	adcs	r1, r3
 80093ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093b2:	e7eb      	b.n	800938c <__swhatbuf_r+0x24>

080093b4 <__smakebuf_r>:
 80093b4:	898b      	ldrh	r3, [r1, #12]
 80093b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093b8:	079d      	lsls	r5, r3, #30
 80093ba:	4606      	mov	r6, r0
 80093bc:	460c      	mov	r4, r1
 80093be:	d507      	bpl.n	80093d0 <__smakebuf_r+0x1c>
 80093c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	6123      	str	r3, [r4, #16]
 80093c8:	2301      	movs	r3, #1
 80093ca:	6163      	str	r3, [r4, #20]
 80093cc:	b003      	add	sp, #12
 80093ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093d0:	ab01      	add	r3, sp, #4
 80093d2:	466a      	mov	r2, sp
 80093d4:	f7ff ffc8 	bl	8009368 <__swhatbuf_r>
 80093d8:	9f00      	ldr	r7, [sp, #0]
 80093da:	4605      	mov	r5, r0
 80093dc:	4639      	mov	r1, r7
 80093de:	4630      	mov	r0, r6
 80093e0:	f7fe fec6 	bl	8008170 <_malloc_r>
 80093e4:	b948      	cbnz	r0, 80093fa <__smakebuf_r+0x46>
 80093e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ea:	059a      	lsls	r2, r3, #22
 80093ec:	d4ee      	bmi.n	80093cc <__smakebuf_r+0x18>
 80093ee:	f023 0303 	bic.w	r3, r3, #3
 80093f2:	f043 0302 	orr.w	r3, r3, #2
 80093f6:	81a3      	strh	r3, [r4, #12]
 80093f8:	e7e2      	b.n	80093c0 <__smakebuf_r+0xc>
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	6020      	str	r0, [r4, #0]
 80093fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009402:	81a3      	strh	r3, [r4, #12]
 8009404:	9b01      	ldr	r3, [sp, #4]
 8009406:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800940a:	b15b      	cbz	r3, 8009424 <__smakebuf_r+0x70>
 800940c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009410:	4630      	mov	r0, r6
 8009412:	f000 f81d 	bl	8009450 <_isatty_r>
 8009416:	b128      	cbz	r0, 8009424 <__smakebuf_r+0x70>
 8009418:	89a3      	ldrh	r3, [r4, #12]
 800941a:	f023 0303 	bic.w	r3, r3, #3
 800941e:	f043 0301 	orr.w	r3, r3, #1
 8009422:	81a3      	strh	r3, [r4, #12]
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	431d      	orrs	r5, r3
 8009428:	81a5      	strh	r5, [r4, #12]
 800942a:	e7cf      	b.n	80093cc <__smakebuf_r+0x18>

0800942c <_fstat_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4d07      	ldr	r5, [pc, #28]	@ (800944c <_fstat_r+0x20>)
 8009430:	2300      	movs	r3, #0
 8009432:	4604      	mov	r4, r0
 8009434:	4608      	mov	r0, r1
 8009436:	4611      	mov	r1, r2
 8009438:	602b      	str	r3, [r5, #0]
 800943a:	f7f9 fea3 	bl	8003184 <_fstat>
 800943e:	1c43      	adds	r3, r0, #1
 8009440:	d102      	bne.n	8009448 <_fstat_r+0x1c>
 8009442:	682b      	ldr	r3, [r5, #0]
 8009444:	b103      	cbz	r3, 8009448 <_fstat_r+0x1c>
 8009446:	6023      	str	r3, [r4, #0]
 8009448:	bd38      	pop	{r3, r4, r5, pc}
 800944a:	bf00      	nop
 800944c:	20000874 	.word	0x20000874

08009450 <_isatty_r>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	4d06      	ldr	r5, [pc, #24]	@ (800946c <_isatty_r+0x1c>)
 8009454:	2300      	movs	r3, #0
 8009456:	4604      	mov	r4, r0
 8009458:	4608      	mov	r0, r1
 800945a:	602b      	str	r3, [r5, #0]
 800945c:	f7f9 fea2 	bl	80031a4 <_isatty>
 8009460:	1c43      	adds	r3, r0, #1
 8009462:	d102      	bne.n	800946a <_isatty_r+0x1a>
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	b103      	cbz	r3, 800946a <_isatty_r+0x1a>
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	bd38      	pop	{r3, r4, r5, pc}
 800946c:	20000874 	.word	0x20000874

08009470 <atan2>:
 8009470:	f000 bc9a 	b.w	8009da8 <__ieee754_atan2>

08009474 <pow>:
 8009474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009476:	ed2d 8b02 	vpush	{d8}
 800947a:	eeb0 8a40 	vmov.f32	s16, s0
 800947e:	eef0 8a60 	vmov.f32	s17, s1
 8009482:	ec55 4b11 	vmov	r4, r5, d1
 8009486:	f000 fd57 	bl	8009f38 <__ieee754_pow>
 800948a:	4622      	mov	r2, r4
 800948c:	462b      	mov	r3, r5
 800948e:	4620      	mov	r0, r4
 8009490:	4629      	mov	r1, r5
 8009492:	ec57 6b10 	vmov	r6, r7, d0
 8009496:	f7f7 fb69 	bl	8000b6c <__aeabi_dcmpun>
 800949a:	2800      	cmp	r0, #0
 800949c:	d13b      	bne.n	8009516 <pow+0xa2>
 800949e:	ec51 0b18 	vmov	r0, r1, d8
 80094a2:	2200      	movs	r2, #0
 80094a4:	2300      	movs	r3, #0
 80094a6:	f7f7 fb2f 	bl	8000b08 <__aeabi_dcmpeq>
 80094aa:	b1b8      	cbz	r0, 80094dc <pow+0x68>
 80094ac:	2200      	movs	r2, #0
 80094ae:	2300      	movs	r3, #0
 80094b0:	4620      	mov	r0, r4
 80094b2:	4629      	mov	r1, r5
 80094b4:	f7f7 fb28 	bl	8000b08 <__aeabi_dcmpeq>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d146      	bne.n	800954a <pow+0xd6>
 80094bc:	ec45 4b10 	vmov	d0, r4, r5
 80094c0:	f000 fa00 	bl	80098c4 <finite>
 80094c4:	b338      	cbz	r0, 8009516 <pow+0xa2>
 80094c6:	2200      	movs	r2, #0
 80094c8:	2300      	movs	r3, #0
 80094ca:	4620      	mov	r0, r4
 80094cc:	4629      	mov	r1, r5
 80094ce:	f7f7 fb25 	bl	8000b1c <__aeabi_dcmplt>
 80094d2:	b300      	cbz	r0, 8009516 <pow+0xa2>
 80094d4:	f7fd ff52 	bl	800737c <__errno>
 80094d8:	2322      	movs	r3, #34	@ 0x22
 80094da:	e01b      	b.n	8009514 <pow+0xa0>
 80094dc:	ec47 6b10 	vmov	d0, r6, r7
 80094e0:	f000 f9f0 	bl	80098c4 <finite>
 80094e4:	b9e0      	cbnz	r0, 8009520 <pow+0xac>
 80094e6:	eeb0 0a48 	vmov.f32	s0, s16
 80094ea:	eef0 0a68 	vmov.f32	s1, s17
 80094ee:	f000 f9e9 	bl	80098c4 <finite>
 80094f2:	b1a8      	cbz	r0, 8009520 <pow+0xac>
 80094f4:	ec45 4b10 	vmov	d0, r4, r5
 80094f8:	f000 f9e4 	bl	80098c4 <finite>
 80094fc:	b180      	cbz	r0, 8009520 <pow+0xac>
 80094fe:	4632      	mov	r2, r6
 8009500:	463b      	mov	r3, r7
 8009502:	4630      	mov	r0, r6
 8009504:	4639      	mov	r1, r7
 8009506:	f7f7 fb31 	bl	8000b6c <__aeabi_dcmpun>
 800950a:	2800      	cmp	r0, #0
 800950c:	d0e2      	beq.n	80094d4 <pow+0x60>
 800950e:	f7fd ff35 	bl	800737c <__errno>
 8009512:	2321      	movs	r3, #33	@ 0x21
 8009514:	6003      	str	r3, [r0, #0]
 8009516:	ecbd 8b02 	vpop	{d8}
 800951a:	ec47 6b10 	vmov	d0, r6, r7
 800951e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009520:	2200      	movs	r2, #0
 8009522:	2300      	movs	r3, #0
 8009524:	4630      	mov	r0, r6
 8009526:	4639      	mov	r1, r7
 8009528:	f7f7 faee 	bl	8000b08 <__aeabi_dcmpeq>
 800952c:	2800      	cmp	r0, #0
 800952e:	d0f2      	beq.n	8009516 <pow+0xa2>
 8009530:	eeb0 0a48 	vmov.f32	s0, s16
 8009534:	eef0 0a68 	vmov.f32	s1, s17
 8009538:	f000 f9c4 	bl	80098c4 <finite>
 800953c:	2800      	cmp	r0, #0
 800953e:	d0ea      	beq.n	8009516 <pow+0xa2>
 8009540:	ec45 4b10 	vmov	d0, r4, r5
 8009544:	f000 f9be 	bl	80098c4 <finite>
 8009548:	e7c3      	b.n	80094d2 <pow+0x5e>
 800954a:	4f01      	ldr	r7, [pc, #4]	@ (8009550 <pow+0xdc>)
 800954c:	2600      	movs	r6, #0
 800954e:	e7e2      	b.n	8009516 <pow+0xa2>
 8009550:	3ff00000 	.word	0x3ff00000

08009554 <sqrt>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	ed2d 8b02 	vpush	{d8}
 800955a:	ec55 4b10 	vmov	r4, r5, d0
 800955e:	f000 f9c7 	bl	80098f0 <__ieee754_sqrt>
 8009562:	4622      	mov	r2, r4
 8009564:	462b      	mov	r3, r5
 8009566:	4620      	mov	r0, r4
 8009568:	4629      	mov	r1, r5
 800956a:	eeb0 8a40 	vmov.f32	s16, s0
 800956e:	eef0 8a60 	vmov.f32	s17, s1
 8009572:	f7f7 fafb 	bl	8000b6c <__aeabi_dcmpun>
 8009576:	b990      	cbnz	r0, 800959e <sqrt+0x4a>
 8009578:	2200      	movs	r2, #0
 800957a:	2300      	movs	r3, #0
 800957c:	4620      	mov	r0, r4
 800957e:	4629      	mov	r1, r5
 8009580:	f7f7 facc 	bl	8000b1c <__aeabi_dcmplt>
 8009584:	b158      	cbz	r0, 800959e <sqrt+0x4a>
 8009586:	f7fd fef9 	bl	800737c <__errno>
 800958a:	2321      	movs	r3, #33	@ 0x21
 800958c:	6003      	str	r3, [r0, #0]
 800958e:	2200      	movs	r2, #0
 8009590:	2300      	movs	r3, #0
 8009592:	4610      	mov	r0, r2
 8009594:	4619      	mov	r1, r3
 8009596:	f7f7 f979 	bl	800088c <__aeabi_ddiv>
 800959a:	ec41 0b18 	vmov	d8, r0, r1
 800959e:	eeb0 0a48 	vmov.f32	s0, s16
 80095a2:	eef0 0a68 	vmov.f32	s1, s17
 80095a6:	ecbd 8b02 	vpop	{d8}
 80095aa:	bd38      	pop	{r3, r4, r5, pc}
 80095ac:	0000      	movs	r0, r0
	...

080095b0 <cos>:
 80095b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095b2:	ec53 2b10 	vmov	r2, r3, d0
 80095b6:	4826      	ldr	r0, [pc, #152]	@ (8009650 <cos+0xa0>)
 80095b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80095bc:	4281      	cmp	r1, r0
 80095be:	d806      	bhi.n	80095ce <cos+0x1e>
 80095c0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009648 <cos+0x98>
 80095c4:	b005      	add	sp, #20
 80095c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80095ca:	f000 ba69 	b.w	8009aa0 <__kernel_cos>
 80095ce:	4821      	ldr	r0, [pc, #132]	@ (8009654 <cos+0xa4>)
 80095d0:	4281      	cmp	r1, r0
 80095d2:	d908      	bls.n	80095e6 <cos+0x36>
 80095d4:	4610      	mov	r0, r2
 80095d6:	4619      	mov	r1, r3
 80095d8:	f7f6 fe76 	bl	80002c8 <__aeabi_dsub>
 80095dc:	ec41 0b10 	vmov	d0, r0, r1
 80095e0:	b005      	add	sp, #20
 80095e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80095e6:	4668      	mov	r0, sp
 80095e8:	f001 f9f2 	bl	800a9d0 <__ieee754_rem_pio2>
 80095ec:	f000 0003 	and.w	r0, r0, #3
 80095f0:	2801      	cmp	r0, #1
 80095f2:	d00b      	beq.n	800960c <cos+0x5c>
 80095f4:	2802      	cmp	r0, #2
 80095f6:	d015      	beq.n	8009624 <cos+0x74>
 80095f8:	b9d8      	cbnz	r0, 8009632 <cos+0x82>
 80095fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80095fe:	ed9d 0b00 	vldr	d0, [sp]
 8009602:	f000 fa4d 	bl	8009aa0 <__kernel_cos>
 8009606:	ec51 0b10 	vmov	r0, r1, d0
 800960a:	e7e7      	b.n	80095dc <cos+0x2c>
 800960c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009610:	ed9d 0b00 	vldr	d0, [sp]
 8009614:	f000 fb0c 	bl	8009c30 <__kernel_sin>
 8009618:	ec53 2b10 	vmov	r2, r3, d0
 800961c:	4610      	mov	r0, r2
 800961e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009622:	e7db      	b.n	80095dc <cos+0x2c>
 8009624:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009628:	ed9d 0b00 	vldr	d0, [sp]
 800962c:	f000 fa38 	bl	8009aa0 <__kernel_cos>
 8009630:	e7f2      	b.n	8009618 <cos+0x68>
 8009632:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009636:	ed9d 0b00 	vldr	d0, [sp]
 800963a:	2001      	movs	r0, #1
 800963c:	f000 faf8 	bl	8009c30 <__kernel_sin>
 8009640:	e7e1      	b.n	8009606 <cos+0x56>
 8009642:	bf00      	nop
 8009644:	f3af 8000 	nop.w
	...
 8009650:	3fe921fb 	.word	0x3fe921fb
 8009654:	7fefffff 	.word	0x7fefffff

08009658 <sin>:
 8009658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800965a:	ec53 2b10 	vmov	r2, r3, d0
 800965e:	4826      	ldr	r0, [pc, #152]	@ (80096f8 <sin+0xa0>)
 8009660:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009664:	4281      	cmp	r1, r0
 8009666:	d807      	bhi.n	8009678 <sin+0x20>
 8009668:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80096f0 <sin+0x98>
 800966c:	2000      	movs	r0, #0
 800966e:	b005      	add	sp, #20
 8009670:	f85d eb04 	ldr.w	lr, [sp], #4
 8009674:	f000 badc 	b.w	8009c30 <__kernel_sin>
 8009678:	4820      	ldr	r0, [pc, #128]	@ (80096fc <sin+0xa4>)
 800967a:	4281      	cmp	r1, r0
 800967c:	d908      	bls.n	8009690 <sin+0x38>
 800967e:	4610      	mov	r0, r2
 8009680:	4619      	mov	r1, r3
 8009682:	f7f6 fe21 	bl	80002c8 <__aeabi_dsub>
 8009686:	ec41 0b10 	vmov	d0, r0, r1
 800968a:	b005      	add	sp, #20
 800968c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009690:	4668      	mov	r0, sp
 8009692:	f001 f99d 	bl	800a9d0 <__ieee754_rem_pio2>
 8009696:	f000 0003 	and.w	r0, r0, #3
 800969a:	2801      	cmp	r0, #1
 800969c:	d00c      	beq.n	80096b8 <sin+0x60>
 800969e:	2802      	cmp	r0, #2
 80096a0:	d011      	beq.n	80096c6 <sin+0x6e>
 80096a2:	b9e8      	cbnz	r0, 80096e0 <sin+0x88>
 80096a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096a8:	ed9d 0b00 	vldr	d0, [sp]
 80096ac:	2001      	movs	r0, #1
 80096ae:	f000 fabf 	bl	8009c30 <__kernel_sin>
 80096b2:	ec51 0b10 	vmov	r0, r1, d0
 80096b6:	e7e6      	b.n	8009686 <sin+0x2e>
 80096b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096bc:	ed9d 0b00 	vldr	d0, [sp]
 80096c0:	f000 f9ee 	bl	8009aa0 <__kernel_cos>
 80096c4:	e7f5      	b.n	80096b2 <sin+0x5a>
 80096c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096ca:	ed9d 0b00 	vldr	d0, [sp]
 80096ce:	2001      	movs	r0, #1
 80096d0:	f000 faae 	bl	8009c30 <__kernel_sin>
 80096d4:	ec53 2b10 	vmov	r2, r3, d0
 80096d8:	4610      	mov	r0, r2
 80096da:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80096de:	e7d2      	b.n	8009686 <sin+0x2e>
 80096e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096e4:	ed9d 0b00 	vldr	d0, [sp]
 80096e8:	f000 f9da 	bl	8009aa0 <__kernel_cos>
 80096ec:	e7f2      	b.n	80096d4 <sin+0x7c>
 80096ee:	bf00      	nop
	...
 80096f8:	3fe921fb 	.word	0x3fe921fb
 80096fc:	7fefffff 	.word	0x7fefffff

08009700 <powf>:
 8009700:	b508      	push	{r3, lr}
 8009702:	ed2d 8b04 	vpush	{d8-d9}
 8009706:	eeb0 8a60 	vmov.f32	s16, s1
 800970a:	eeb0 9a40 	vmov.f32	s18, s0
 800970e:	f001 fd9b 	bl	800b248 <__ieee754_powf>
 8009712:	eeb4 8a48 	vcmp.f32	s16, s16
 8009716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971a:	eef0 8a40 	vmov.f32	s17, s0
 800971e:	d63e      	bvs.n	800979e <powf+0x9e>
 8009720:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009728:	d112      	bne.n	8009750 <powf+0x50>
 800972a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800972e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009732:	d039      	beq.n	80097a8 <powf+0xa8>
 8009734:	eeb0 0a48 	vmov.f32	s0, s16
 8009738:	f000 f8cf 	bl	80098da <finitef>
 800973c:	b378      	cbz	r0, 800979e <powf+0x9e>
 800973e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009746:	d52a      	bpl.n	800979e <powf+0x9e>
 8009748:	f7fd fe18 	bl	800737c <__errno>
 800974c:	2322      	movs	r3, #34	@ 0x22
 800974e:	e014      	b.n	800977a <powf+0x7a>
 8009750:	f000 f8c3 	bl	80098da <finitef>
 8009754:	b998      	cbnz	r0, 800977e <powf+0x7e>
 8009756:	eeb0 0a49 	vmov.f32	s0, s18
 800975a:	f000 f8be 	bl	80098da <finitef>
 800975e:	b170      	cbz	r0, 800977e <powf+0x7e>
 8009760:	eeb0 0a48 	vmov.f32	s0, s16
 8009764:	f000 f8b9 	bl	80098da <finitef>
 8009768:	b148      	cbz	r0, 800977e <powf+0x7e>
 800976a:	eef4 8a68 	vcmp.f32	s17, s17
 800976e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009772:	d7e9      	bvc.n	8009748 <powf+0x48>
 8009774:	f7fd fe02 	bl	800737c <__errno>
 8009778:	2321      	movs	r3, #33	@ 0x21
 800977a:	6003      	str	r3, [r0, #0]
 800977c:	e00f      	b.n	800979e <powf+0x9e>
 800977e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009786:	d10a      	bne.n	800979e <powf+0x9e>
 8009788:	eeb0 0a49 	vmov.f32	s0, s18
 800978c:	f000 f8a5 	bl	80098da <finitef>
 8009790:	b128      	cbz	r0, 800979e <powf+0x9e>
 8009792:	eeb0 0a48 	vmov.f32	s0, s16
 8009796:	f000 f8a0 	bl	80098da <finitef>
 800979a:	2800      	cmp	r0, #0
 800979c:	d1d4      	bne.n	8009748 <powf+0x48>
 800979e:	eeb0 0a68 	vmov.f32	s0, s17
 80097a2:	ecbd 8b04 	vpop	{d8-d9}
 80097a6:	bd08      	pop	{r3, pc}
 80097a8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80097ac:	e7f7      	b.n	800979e <powf+0x9e>
	...

080097b0 <cosf>:
 80097b0:	ee10 3a10 	vmov	r3, s0
 80097b4:	b507      	push	{r0, r1, r2, lr}
 80097b6:	4a1e      	ldr	r2, [pc, #120]	@ (8009830 <cosf+0x80>)
 80097b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097bc:	4293      	cmp	r3, r2
 80097be:	d806      	bhi.n	80097ce <cosf+0x1e>
 80097c0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8009834 <cosf+0x84>
 80097c4:	b003      	add	sp, #12
 80097c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80097ca:	f001 bc9d 	b.w	800b108 <__kernel_cosf>
 80097ce:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80097d2:	d304      	bcc.n	80097de <cosf+0x2e>
 80097d4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80097d8:	b003      	add	sp, #12
 80097da:	f85d fb04 	ldr.w	pc, [sp], #4
 80097de:	4668      	mov	r0, sp
 80097e0:	f002 f800 	bl	800b7e4 <__ieee754_rem_pio2f>
 80097e4:	f000 0003 	and.w	r0, r0, #3
 80097e8:	2801      	cmp	r0, #1
 80097ea:	d009      	beq.n	8009800 <cosf+0x50>
 80097ec:	2802      	cmp	r0, #2
 80097ee:	d010      	beq.n	8009812 <cosf+0x62>
 80097f0:	b9b0      	cbnz	r0, 8009820 <cosf+0x70>
 80097f2:	eddd 0a01 	vldr	s1, [sp, #4]
 80097f6:	ed9d 0a00 	vldr	s0, [sp]
 80097fa:	f001 fc85 	bl	800b108 <__kernel_cosf>
 80097fe:	e7eb      	b.n	80097d8 <cosf+0x28>
 8009800:	eddd 0a01 	vldr	s1, [sp, #4]
 8009804:	ed9d 0a00 	vldr	s0, [sp]
 8009808:	f001 fcd6 	bl	800b1b8 <__kernel_sinf>
 800980c:	eeb1 0a40 	vneg.f32	s0, s0
 8009810:	e7e2      	b.n	80097d8 <cosf+0x28>
 8009812:	eddd 0a01 	vldr	s1, [sp, #4]
 8009816:	ed9d 0a00 	vldr	s0, [sp]
 800981a:	f001 fc75 	bl	800b108 <__kernel_cosf>
 800981e:	e7f5      	b.n	800980c <cosf+0x5c>
 8009820:	eddd 0a01 	vldr	s1, [sp, #4]
 8009824:	ed9d 0a00 	vldr	s0, [sp]
 8009828:	2001      	movs	r0, #1
 800982a:	f001 fcc5 	bl	800b1b8 <__kernel_sinf>
 800982e:	e7d3      	b.n	80097d8 <cosf+0x28>
 8009830:	3f490fd8 	.word	0x3f490fd8
 8009834:	00000000 	.word	0x00000000

08009838 <sinf>:
 8009838:	ee10 3a10 	vmov	r3, s0
 800983c:	b507      	push	{r0, r1, r2, lr}
 800983e:	4a1f      	ldr	r2, [pc, #124]	@ (80098bc <sinf+0x84>)
 8009840:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009844:	4293      	cmp	r3, r2
 8009846:	d807      	bhi.n	8009858 <sinf+0x20>
 8009848:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80098c0 <sinf+0x88>
 800984c:	2000      	movs	r0, #0
 800984e:	b003      	add	sp, #12
 8009850:	f85d eb04 	ldr.w	lr, [sp], #4
 8009854:	f001 bcb0 	b.w	800b1b8 <__kernel_sinf>
 8009858:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800985c:	d304      	bcc.n	8009868 <sinf+0x30>
 800985e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009862:	b003      	add	sp, #12
 8009864:	f85d fb04 	ldr.w	pc, [sp], #4
 8009868:	4668      	mov	r0, sp
 800986a:	f001 ffbb 	bl	800b7e4 <__ieee754_rem_pio2f>
 800986e:	f000 0003 	and.w	r0, r0, #3
 8009872:	2801      	cmp	r0, #1
 8009874:	d00a      	beq.n	800988c <sinf+0x54>
 8009876:	2802      	cmp	r0, #2
 8009878:	d00f      	beq.n	800989a <sinf+0x62>
 800987a:	b9c0      	cbnz	r0, 80098ae <sinf+0x76>
 800987c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009880:	ed9d 0a00 	vldr	s0, [sp]
 8009884:	2001      	movs	r0, #1
 8009886:	f001 fc97 	bl	800b1b8 <__kernel_sinf>
 800988a:	e7ea      	b.n	8009862 <sinf+0x2a>
 800988c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009890:	ed9d 0a00 	vldr	s0, [sp]
 8009894:	f001 fc38 	bl	800b108 <__kernel_cosf>
 8009898:	e7e3      	b.n	8009862 <sinf+0x2a>
 800989a:	eddd 0a01 	vldr	s1, [sp, #4]
 800989e:	ed9d 0a00 	vldr	s0, [sp]
 80098a2:	2001      	movs	r0, #1
 80098a4:	f001 fc88 	bl	800b1b8 <__kernel_sinf>
 80098a8:	eeb1 0a40 	vneg.f32	s0, s0
 80098ac:	e7d9      	b.n	8009862 <sinf+0x2a>
 80098ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80098b2:	ed9d 0a00 	vldr	s0, [sp]
 80098b6:	f001 fc27 	bl	800b108 <__kernel_cosf>
 80098ba:	e7f5      	b.n	80098a8 <sinf+0x70>
 80098bc:	3f490fd8 	.word	0x3f490fd8
 80098c0:	00000000 	.word	0x00000000

080098c4 <finite>:
 80098c4:	b082      	sub	sp, #8
 80098c6:	ed8d 0b00 	vstr	d0, [sp]
 80098ca:	9801      	ldr	r0, [sp, #4]
 80098cc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80098d0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80098d4:	0fc0      	lsrs	r0, r0, #31
 80098d6:	b002      	add	sp, #8
 80098d8:	4770      	bx	lr

080098da <finitef>:
 80098da:	ee10 3a10 	vmov	r3, s0
 80098de:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80098e2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80098e6:	bfac      	ite	ge
 80098e8:	2000      	movge	r0, #0
 80098ea:	2001      	movlt	r0, #1
 80098ec:	4770      	bx	lr
	...

080098f0 <__ieee754_sqrt>:
 80098f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	4a66      	ldr	r2, [pc, #408]	@ (8009a90 <__ieee754_sqrt+0x1a0>)
 80098f6:	ec55 4b10 	vmov	r4, r5, d0
 80098fa:	43aa      	bics	r2, r5
 80098fc:	462b      	mov	r3, r5
 80098fe:	4621      	mov	r1, r4
 8009900:	d110      	bne.n	8009924 <__ieee754_sqrt+0x34>
 8009902:	4622      	mov	r2, r4
 8009904:	4620      	mov	r0, r4
 8009906:	4629      	mov	r1, r5
 8009908:	f7f6 fe96 	bl	8000638 <__aeabi_dmul>
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	4620      	mov	r0, r4
 8009912:	4629      	mov	r1, r5
 8009914:	f7f6 fcda 	bl	80002cc <__adddf3>
 8009918:	4604      	mov	r4, r0
 800991a:	460d      	mov	r5, r1
 800991c:	ec45 4b10 	vmov	d0, r4, r5
 8009920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009924:	2d00      	cmp	r5, #0
 8009926:	dc0e      	bgt.n	8009946 <__ieee754_sqrt+0x56>
 8009928:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800992c:	4322      	orrs	r2, r4
 800992e:	d0f5      	beq.n	800991c <__ieee754_sqrt+0x2c>
 8009930:	b19d      	cbz	r5, 800995a <__ieee754_sqrt+0x6a>
 8009932:	4622      	mov	r2, r4
 8009934:	4620      	mov	r0, r4
 8009936:	4629      	mov	r1, r5
 8009938:	f7f6 fcc6 	bl	80002c8 <__aeabi_dsub>
 800993c:	4602      	mov	r2, r0
 800993e:	460b      	mov	r3, r1
 8009940:	f7f6 ffa4 	bl	800088c <__aeabi_ddiv>
 8009944:	e7e8      	b.n	8009918 <__ieee754_sqrt+0x28>
 8009946:	152a      	asrs	r2, r5, #20
 8009948:	d115      	bne.n	8009976 <__ieee754_sqrt+0x86>
 800994a:	2000      	movs	r0, #0
 800994c:	e009      	b.n	8009962 <__ieee754_sqrt+0x72>
 800994e:	0acb      	lsrs	r3, r1, #11
 8009950:	3a15      	subs	r2, #21
 8009952:	0549      	lsls	r1, r1, #21
 8009954:	2b00      	cmp	r3, #0
 8009956:	d0fa      	beq.n	800994e <__ieee754_sqrt+0x5e>
 8009958:	e7f7      	b.n	800994a <__ieee754_sqrt+0x5a>
 800995a:	462a      	mov	r2, r5
 800995c:	e7fa      	b.n	8009954 <__ieee754_sqrt+0x64>
 800995e:	005b      	lsls	r3, r3, #1
 8009960:	3001      	adds	r0, #1
 8009962:	02dc      	lsls	r4, r3, #11
 8009964:	d5fb      	bpl.n	800995e <__ieee754_sqrt+0x6e>
 8009966:	1e44      	subs	r4, r0, #1
 8009968:	1b12      	subs	r2, r2, r4
 800996a:	f1c0 0420 	rsb	r4, r0, #32
 800996e:	fa21 f404 	lsr.w	r4, r1, r4
 8009972:	4323      	orrs	r3, r4
 8009974:	4081      	lsls	r1, r0
 8009976:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800997a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800997e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009982:	07d2      	lsls	r2, r2, #31
 8009984:	bf5c      	itt	pl
 8009986:	005b      	lslpl	r3, r3, #1
 8009988:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800998c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009990:	bf58      	it	pl
 8009992:	0049      	lslpl	r1, r1, #1
 8009994:	2600      	movs	r6, #0
 8009996:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800999a:	107f      	asrs	r7, r7, #1
 800999c:	0049      	lsls	r1, r1, #1
 800999e:	2016      	movs	r0, #22
 80099a0:	4632      	mov	r2, r6
 80099a2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80099a6:	1915      	adds	r5, r2, r4
 80099a8:	429d      	cmp	r5, r3
 80099aa:	bfde      	ittt	le
 80099ac:	192a      	addle	r2, r5, r4
 80099ae:	1b5b      	suble	r3, r3, r5
 80099b0:	1936      	addle	r6, r6, r4
 80099b2:	0fcd      	lsrs	r5, r1, #31
 80099b4:	3801      	subs	r0, #1
 80099b6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80099ba:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80099be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80099c2:	d1f0      	bne.n	80099a6 <__ieee754_sqrt+0xb6>
 80099c4:	4605      	mov	r5, r0
 80099c6:	2420      	movs	r4, #32
 80099c8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80099cc:	4293      	cmp	r3, r2
 80099ce:	eb0c 0e00 	add.w	lr, ip, r0
 80099d2:	dc02      	bgt.n	80099da <__ieee754_sqrt+0xea>
 80099d4:	d113      	bne.n	80099fe <__ieee754_sqrt+0x10e>
 80099d6:	458e      	cmp	lr, r1
 80099d8:	d811      	bhi.n	80099fe <__ieee754_sqrt+0x10e>
 80099da:	f1be 0f00 	cmp.w	lr, #0
 80099de:	eb0e 000c 	add.w	r0, lr, ip
 80099e2:	da3f      	bge.n	8009a64 <__ieee754_sqrt+0x174>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	db3d      	blt.n	8009a64 <__ieee754_sqrt+0x174>
 80099e8:	f102 0801 	add.w	r8, r2, #1
 80099ec:	1a9b      	subs	r3, r3, r2
 80099ee:	458e      	cmp	lr, r1
 80099f0:	bf88      	it	hi
 80099f2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80099f6:	eba1 010e 	sub.w	r1, r1, lr
 80099fa:	4465      	add	r5, ip
 80099fc:	4642      	mov	r2, r8
 80099fe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009a02:	3c01      	subs	r4, #1
 8009a04:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009a08:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009a0c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009a10:	d1dc      	bne.n	80099cc <__ieee754_sqrt+0xdc>
 8009a12:	4319      	orrs	r1, r3
 8009a14:	d01b      	beq.n	8009a4e <__ieee754_sqrt+0x15e>
 8009a16:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8009a94 <__ieee754_sqrt+0x1a4>
 8009a1a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8009a98 <__ieee754_sqrt+0x1a8>
 8009a1e:	e9da 0100 	ldrd	r0, r1, [sl]
 8009a22:	e9db 2300 	ldrd	r2, r3, [fp]
 8009a26:	f7f6 fc4f 	bl	80002c8 <__aeabi_dsub>
 8009a2a:	e9da 8900 	ldrd	r8, r9, [sl]
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	4640      	mov	r0, r8
 8009a34:	4649      	mov	r1, r9
 8009a36:	f7f7 f87b 	bl	8000b30 <__aeabi_dcmple>
 8009a3a:	b140      	cbz	r0, 8009a4e <__ieee754_sqrt+0x15e>
 8009a3c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009a40:	e9da 0100 	ldrd	r0, r1, [sl]
 8009a44:	e9db 2300 	ldrd	r2, r3, [fp]
 8009a48:	d10e      	bne.n	8009a68 <__ieee754_sqrt+0x178>
 8009a4a:	3601      	adds	r6, #1
 8009a4c:	4625      	mov	r5, r4
 8009a4e:	1073      	asrs	r3, r6, #1
 8009a50:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8009a54:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8009a58:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8009a5c:	086b      	lsrs	r3, r5, #1
 8009a5e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8009a62:	e759      	b.n	8009918 <__ieee754_sqrt+0x28>
 8009a64:	4690      	mov	r8, r2
 8009a66:	e7c1      	b.n	80099ec <__ieee754_sqrt+0xfc>
 8009a68:	f7f6 fc30 	bl	80002cc <__adddf3>
 8009a6c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009a70:	4602      	mov	r2, r0
 8009a72:	460b      	mov	r3, r1
 8009a74:	4640      	mov	r0, r8
 8009a76:	4649      	mov	r1, r9
 8009a78:	f7f7 f850 	bl	8000b1c <__aeabi_dcmplt>
 8009a7c:	b120      	cbz	r0, 8009a88 <__ieee754_sqrt+0x198>
 8009a7e:	1cab      	adds	r3, r5, #2
 8009a80:	bf08      	it	eq
 8009a82:	3601      	addeq	r6, #1
 8009a84:	3502      	adds	r5, #2
 8009a86:	e7e2      	b.n	8009a4e <__ieee754_sqrt+0x15e>
 8009a88:	1c6b      	adds	r3, r5, #1
 8009a8a:	f023 0501 	bic.w	r5, r3, #1
 8009a8e:	e7de      	b.n	8009a4e <__ieee754_sqrt+0x15e>
 8009a90:	7ff00000 	.word	0x7ff00000
 8009a94:	0800cda0 	.word	0x0800cda0
 8009a98:	0800cd98 	.word	0x0800cd98
 8009a9c:	00000000 	.word	0x00000000

08009aa0 <__kernel_cos>:
 8009aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	ec57 6b10 	vmov	r6, r7, d0
 8009aa8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009aac:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8009ab0:	ed8d 1b00 	vstr	d1, [sp]
 8009ab4:	d206      	bcs.n	8009ac4 <__kernel_cos+0x24>
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	4639      	mov	r1, r7
 8009aba:	f7f7 f86d 	bl	8000b98 <__aeabi_d2iz>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	f000 8088 	beq.w	8009bd4 <__kernel_cos+0x134>
 8009ac4:	4632      	mov	r2, r6
 8009ac6:	463b      	mov	r3, r7
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f6 fdb4 	bl	8000638 <__aeabi_dmul>
 8009ad0:	4b51      	ldr	r3, [pc, #324]	@ (8009c18 <__kernel_cos+0x178>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	460d      	mov	r5, r1
 8009ad8:	f7f6 fdae 	bl	8000638 <__aeabi_dmul>
 8009adc:	a340      	add	r3, pc, #256	@ (adr r3, 8009be0 <__kernel_cos+0x140>)
 8009ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae2:	4682      	mov	sl, r0
 8009ae4:	468b      	mov	fp, r1
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	4629      	mov	r1, r5
 8009aea:	f7f6 fda5 	bl	8000638 <__aeabi_dmul>
 8009aee:	a33e      	add	r3, pc, #248	@ (adr r3, 8009be8 <__kernel_cos+0x148>)
 8009af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af4:	f7f6 fbea 	bl	80002cc <__adddf3>
 8009af8:	4622      	mov	r2, r4
 8009afa:	462b      	mov	r3, r5
 8009afc:	f7f6 fd9c 	bl	8000638 <__aeabi_dmul>
 8009b00:	a33b      	add	r3, pc, #236	@ (adr r3, 8009bf0 <__kernel_cos+0x150>)
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	f7f6 fbdf 	bl	80002c8 <__aeabi_dsub>
 8009b0a:	4622      	mov	r2, r4
 8009b0c:	462b      	mov	r3, r5
 8009b0e:	f7f6 fd93 	bl	8000638 <__aeabi_dmul>
 8009b12:	a339      	add	r3, pc, #228	@ (adr r3, 8009bf8 <__kernel_cos+0x158>)
 8009b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b18:	f7f6 fbd8 	bl	80002cc <__adddf3>
 8009b1c:	4622      	mov	r2, r4
 8009b1e:	462b      	mov	r3, r5
 8009b20:	f7f6 fd8a 	bl	8000638 <__aeabi_dmul>
 8009b24:	a336      	add	r3, pc, #216	@ (adr r3, 8009c00 <__kernel_cos+0x160>)
 8009b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2a:	f7f6 fbcd 	bl	80002c8 <__aeabi_dsub>
 8009b2e:	4622      	mov	r2, r4
 8009b30:	462b      	mov	r3, r5
 8009b32:	f7f6 fd81 	bl	8000638 <__aeabi_dmul>
 8009b36:	a334      	add	r3, pc, #208	@ (adr r3, 8009c08 <__kernel_cos+0x168>)
 8009b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3c:	f7f6 fbc6 	bl	80002cc <__adddf3>
 8009b40:	4622      	mov	r2, r4
 8009b42:	462b      	mov	r3, r5
 8009b44:	f7f6 fd78 	bl	8000638 <__aeabi_dmul>
 8009b48:	4622      	mov	r2, r4
 8009b4a:	462b      	mov	r3, r5
 8009b4c:	f7f6 fd74 	bl	8000638 <__aeabi_dmul>
 8009b50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b54:	4604      	mov	r4, r0
 8009b56:	460d      	mov	r5, r1
 8009b58:	4630      	mov	r0, r6
 8009b5a:	4639      	mov	r1, r7
 8009b5c:	f7f6 fd6c 	bl	8000638 <__aeabi_dmul>
 8009b60:	460b      	mov	r3, r1
 8009b62:	4602      	mov	r2, r0
 8009b64:	4629      	mov	r1, r5
 8009b66:	4620      	mov	r0, r4
 8009b68:	f7f6 fbae 	bl	80002c8 <__aeabi_dsub>
 8009b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8009c1c <__kernel_cos+0x17c>)
 8009b6e:	4598      	cmp	r8, r3
 8009b70:	4606      	mov	r6, r0
 8009b72:	460f      	mov	r7, r1
 8009b74:	d810      	bhi.n	8009b98 <__kernel_cos+0xf8>
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	4650      	mov	r0, sl
 8009b7c:	4659      	mov	r1, fp
 8009b7e:	f7f6 fba3 	bl	80002c8 <__aeabi_dsub>
 8009b82:	460b      	mov	r3, r1
 8009b84:	4926      	ldr	r1, [pc, #152]	@ (8009c20 <__kernel_cos+0x180>)
 8009b86:	4602      	mov	r2, r0
 8009b88:	2000      	movs	r0, #0
 8009b8a:	f7f6 fb9d 	bl	80002c8 <__aeabi_dsub>
 8009b8e:	ec41 0b10 	vmov	d0, r0, r1
 8009b92:	b003      	add	sp, #12
 8009b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b98:	4b22      	ldr	r3, [pc, #136]	@ (8009c24 <__kernel_cos+0x184>)
 8009b9a:	4921      	ldr	r1, [pc, #132]	@ (8009c20 <__kernel_cos+0x180>)
 8009b9c:	4598      	cmp	r8, r3
 8009b9e:	bf8c      	ite	hi
 8009ba0:	4d21      	ldrhi	r5, [pc, #132]	@ (8009c28 <__kernel_cos+0x188>)
 8009ba2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8009ba6:	2400      	movs	r4, #0
 8009ba8:	4622      	mov	r2, r4
 8009baa:	462b      	mov	r3, r5
 8009bac:	2000      	movs	r0, #0
 8009bae:	f7f6 fb8b 	bl	80002c8 <__aeabi_dsub>
 8009bb2:	4622      	mov	r2, r4
 8009bb4:	4680      	mov	r8, r0
 8009bb6:	4689      	mov	r9, r1
 8009bb8:	462b      	mov	r3, r5
 8009bba:	4650      	mov	r0, sl
 8009bbc:	4659      	mov	r1, fp
 8009bbe:	f7f6 fb83 	bl	80002c8 <__aeabi_dsub>
 8009bc2:	4632      	mov	r2, r6
 8009bc4:	463b      	mov	r3, r7
 8009bc6:	f7f6 fb7f 	bl	80002c8 <__aeabi_dsub>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	4640      	mov	r0, r8
 8009bd0:	4649      	mov	r1, r9
 8009bd2:	e7da      	b.n	8009b8a <__kernel_cos+0xea>
 8009bd4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009c10 <__kernel_cos+0x170>
 8009bd8:	e7db      	b.n	8009b92 <__kernel_cos+0xf2>
 8009bda:	bf00      	nop
 8009bdc:	f3af 8000 	nop.w
 8009be0:	be8838d4 	.word	0xbe8838d4
 8009be4:	bda8fae9 	.word	0xbda8fae9
 8009be8:	bdb4b1c4 	.word	0xbdb4b1c4
 8009bec:	3e21ee9e 	.word	0x3e21ee9e
 8009bf0:	809c52ad 	.word	0x809c52ad
 8009bf4:	3e927e4f 	.word	0x3e927e4f
 8009bf8:	19cb1590 	.word	0x19cb1590
 8009bfc:	3efa01a0 	.word	0x3efa01a0
 8009c00:	16c15177 	.word	0x16c15177
 8009c04:	3f56c16c 	.word	0x3f56c16c
 8009c08:	5555554c 	.word	0x5555554c
 8009c0c:	3fa55555 	.word	0x3fa55555
 8009c10:	00000000 	.word	0x00000000
 8009c14:	3ff00000 	.word	0x3ff00000
 8009c18:	3fe00000 	.word	0x3fe00000
 8009c1c:	3fd33332 	.word	0x3fd33332
 8009c20:	3ff00000 	.word	0x3ff00000
 8009c24:	3fe90000 	.word	0x3fe90000
 8009c28:	3fd20000 	.word	0x3fd20000
 8009c2c:	00000000 	.word	0x00000000

08009c30 <__kernel_sin>:
 8009c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c34:	ec55 4b10 	vmov	r4, r5, d0
 8009c38:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009c3c:	b085      	sub	sp, #20
 8009c3e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009c42:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009c46:	4680      	mov	r8, r0
 8009c48:	d205      	bcs.n	8009c56 <__kernel_sin+0x26>
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	4629      	mov	r1, r5
 8009c4e:	f7f6 ffa3 	bl	8000b98 <__aeabi_d2iz>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d052      	beq.n	8009cfc <__kernel_sin+0xcc>
 8009c56:	4622      	mov	r2, r4
 8009c58:	462b      	mov	r3, r5
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	4629      	mov	r1, r5
 8009c5e:	f7f6 fceb 	bl	8000638 <__aeabi_dmul>
 8009c62:	4682      	mov	sl, r0
 8009c64:	468b      	mov	fp, r1
 8009c66:	4602      	mov	r2, r0
 8009c68:	460b      	mov	r3, r1
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	f7f6 fce3 	bl	8000638 <__aeabi_dmul>
 8009c72:	a342      	add	r3, pc, #264	@ (adr r3, 8009d7c <__kernel_sin+0x14c>)
 8009c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c78:	e9cd 0100 	strd	r0, r1, [sp]
 8009c7c:	4650      	mov	r0, sl
 8009c7e:	4659      	mov	r1, fp
 8009c80:	f7f6 fcda 	bl	8000638 <__aeabi_dmul>
 8009c84:	a33f      	add	r3, pc, #252	@ (adr r3, 8009d84 <__kernel_sin+0x154>)
 8009c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8a:	f7f6 fb1d 	bl	80002c8 <__aeabi_dsub>
 8009c8e:	4652      	mov	r2, sl
 8009c90:	465b      	mov	r3, fp
 8009c92:	f7f6 fcd1 	bl	8000638 <__aeabi_dmul>
 8009c96:	a33d      	add	r3, pc, #244	@ (adr r3, 8009d8c <__kernel_sin+0x15c>)
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	f7f6 fb16 	bl	80002cc <__adddf3>
 8009ca0:	4652      	mov	r2, sl
 8009ca2:	465b      	mov	r3, fp
 8009ca4:	f7f6 fcc8 	bl	8000638 <__aeabi_dmul>
 8009ca8:	a33a      	add	r3, pc, #232	@ (adr r3, 8009d94 <__kernel_sin+0x164>)
 8009caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cae:	f7f6 fb0b 	bl	80002c8 <__aeabi_dsub>
 8009cb2:	4652      	mov	r2, sl
 8009cb4:	465b      	mov	r3, fp
 8009cb6:	f7f6 fcbf 	bl	8000638 <__aeabi_dmul>
 8009cba:	a338      	add	r3, pc, #224	@ (adr r3, 8009d9c <__kernel_sin+0x16c>)
 8009cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc0:	f7f6 fb04 	bl	80002cc <__adddf3>
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	460f      	mov	r7, r1
 8009cc8:	f1b8 0f00 	cmp.w	r8, #0
 8009ccc:	d11b      	bne.n	8009d06 <__kernel_sin+0xd6>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	4650      	mov	r0, sl
 8009cd4:	4659      	mov	r1, fp
 8009cd6:	f7f6 fcaf 	bl	8000638 <__aeabi_dmul>
 8009cda:	a325      	add	r3, pc, #148	@ (adr r3, 8009d70 <__kernel_sin+0x140>)
 8009cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce0:	f7f6 faf2 	bl	80002c8 <__aeabi_dsub>
 8009ce4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ce8:	f7f6 fca6 	bl	8000638 <__aeabi_dmul>
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	f7f6 faea 	bl	80002cc <__adddf3>
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	ec45 4b10 	vmov	d0, r4, r5
 8009d00:	b005      	add	sp, #20
 8009d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8009d78 <__kernel_sin+0x148>)
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f7f6 fc93 	bl	8000638 <__aeabi_dmul>
 8009d12:	4632      	mov	r2, r6
 8009d14:	4680      	mov	r8, r0
 8009d16:	4689      	mov	r9, r1
 8009d18:	463b      	mov	r3, r7
 8009d1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d1e:	f7f6 fc8b 	bl	8000638 <__aeabi_dmul>
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	4640      	mov	r0, r8
 8009d28:	4649      	mov	r1, r9
 8009d2a:	f7f6 facd 	bl	80002c8 <__aeabi_dsub>
 8009d2e:	4652      	mov	r2, sl
 8009d30:	465b      	mov	r3, fp
 8009d32:	f7f6 fc81 	bl	8000638 <__aeabi_dmul>
 8009d36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d3a:	f7f6 fac5 	bl	80002c8 <__aeabi_dsub>
 8009d3e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009d70 <__kernel_sin+0x140>)
 8009d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d44:	4606      	mov	r6, r0
 8009d46:	460f      	mov	r7, r1
 8009d48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d4c:	f7f6 fc74 	bl	8000638 <__aeabi_dmul>
 8009d50:	4602      	mov	r2, r0
 8009d52:	460b      	mov	r3, r1
 8009d54:	4630      	mov	r0, r6
 8009d56:	4639      	mov	r1, r7
 8009d58:	f7f6 fab8 	bl	80002cc <__adddf3>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4620      	mov	r0, r4
 8009d62:	4629      	mov	r1, r5
 8009d64:	f7f6 fab0 	bl	80002c8 <__aeabi_dsub>
 8009d68:	e7c6      	b.n	8009cf8 <__kernel_sin+0xc8>
 8009d6a:	bf00      	nop
 8009d6c:	f3af 8000 	nop.w
 8009d70:	55555549 	.word	0x55555549
 8009d74:	3fc55555 	.word	0x3fc55555
 8009d78:	3fe00000 	.word	0x3fe00000
 8009d7c:	5acfd57c 	.word	0x5acfd57c
 8009d80:	3de5d93a 	.word	0x3de5d93a
 8009d84:	8a2b9ceb 	.word	0x8a2b9ceb
 8009d88:	3e5ae5e6 	.word	0x3e5ae5e6
 8009d8c:	57b1fe7d 	.word	0x57b1fe7d
 8009d90:	3ec71de3 	.word	0x3ec71de3
 8009d94:	19c161d5 	.word	0x19c161d5
 8009d98:	3f2a01a0 	.word	0x3f2a01a0
 8009d9c:	1110f8a6 	.word	0x1110f8a6
 8009da0:	3f811111 	.word	0x3f811111
 8009da4:	00000000 	.word	0x00000000

08009da8 <__ieee754_atan2>:
 8009da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dac:	ec57 6b11 	vmov	r6, r7, d1
 8009db0:	4273      	negs	r3, r6
 8009db2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8009f30 <__ieee754_atan2+0x188>
 8009db6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8009dba:	4333      	orrs	r3, r6
 8009dbc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009dc0:	4543      	cmp	r3, r8
 8009dc2:	ec51 0b10 	vmov	r0, r1, d0
 8009dc6:	4635      	mov	r5, r6
 8009dc8:	d809      	bhi.n	8009dde <__ieee754_atan2+0x36>
 8009dca:	4244      	negs	r4, r0
 8009dcc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009dd0:	4304      	orrs	r4, r0
 8009dd2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009dd6:	4544      	cmp	r4, r8
 8009dd8:	468e      	mov	lr, r1
 8009dda:	4681      	mov	r9, r0
 8009ddc:	d907      	bls.n	8009dee <__ieee754_atan2+0x46>
 8009dde:	4632      	mov	r2, r6
 8009de0:	463b      	mov	r3, r7
 8009de2:	f7f6 fa73 	bl	80002cc <__adddf3>
 8009de6:	ec41 0b10 	vmov	d0, r0, r1
 8009dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dee:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8009df2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8009df6:	4334      	orrs	r4, r6
 8009df8:	d103      	bne.n	8009e02 <__ieee754_atan2+0x5a>
 8009dfa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dfe:	f000 bfe3 	b.w	800adc8 <atan>
 8009e02:	17bc      	asrs	r4, r7, #30
 8009e04:	f004 0402 	and.w	r4, r4, #2
 8009e08:	ea53 0909 	orrs.w	r9, r3, r9
 8009e0c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009e10:	d107      	bne.n	8009e22 <__ieee754_atan2+0x7a>
 8009e12:	2c02      	cmp	r4, #2
 8009e14:	d05f      	beq.n	8009ed6 <__ieee754_atan2+0x12e>
 8009e16:	2c03      	cmp	r4, #3
 8009e18:	d1e5      	bne.n	8009de6 <__ieee754_atan2+0x3e>
 8009e1a:	a143      	add	r1, pc, #268	@ (adr r1, 8009f28 <__ieee754_atan2+0x180>)
 8009e1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e20:	e7e1      	b.n	8009de6 <__ieee754_atan2+0x3e>
 8009e22:	4315      	orrs	r5, r2
 8009e24:	d106      	bne.n	8009e34 <__ieee754_atan2+0x8c>
 8009e26:	f1be 0f00 	cmp.w	lr, #0
 8009e2a:	db5f      	blt.n	8009eec <__ieee754_atan2+0x144>
 8009e2c:	a136      	add	r1, pc, #216	@ (adr r1, 8009f08 <__ieee754_atan2+0x160>)
 8009e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e32:	e7d8      	b.n	8009de6 <__ieee754_atan2+0x3e>
 8009e34:	4542      	cmp	r2, r8
 8009e36:	d10f      	bne.n	8009e58 <__ieee754_atan2+0xb0>
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8009e3e:	d107      	bne.n	8009e50 <__ieee754_atan2+0xa8>
 8009e40:	2c02      	cmp	r4, #2
 8009e42:	d84c      	bhi.n	8009ede <__ieee754_atan2+0x136>
 8009e44:	4b36      	ldr	r3, [pc, #216]	@ (8009f20 <__ieee754_atan2+0x178>)
 8009e46:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e4e:	e7ca      	b.n	8009de6 <__ieee754_atan2+0x3e>
 8009e50:	2c02      	cmp	r4, #2
 8009e52:	d848      	bhi.n	8009ee6 <__ieee754_atan2+0x13e>
 8009e54:	4b33      	ldr	r3, [pc, #204]	@ (8009f24 <__ieee754_atan2+0x17c>)
 8009e56:	e7f6      	b.n	8009e46 <__ieee754_atan2+0x9e>
 8009e58:	4543      	cmp	r3, r8
 8009e5a:	d0e4      	beq.n	8009e26 <__ieee754_atan2+0x7e>
 8009e5c:	1a9b      	subs	r3, r3, r2
 8009e5e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8009e62:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e66:	da1e      	bge.n	8009ea6 <__ieee754_atan2+0xfe>
 8009e68:	2f00      	cmp	r7, #0
 8009e6a:	da01      	bge.n	8009e70 <__ieee754_atan2+0xc8>
 8009e6c:	323c      	adds	r2, #60	@ 0x3c
 8009e6e:	db1e      	blt.n	8009eae <__ieee754_atan2+0x106>
 8009e70:	4632      	mov	r2, r6
 8009e72:	463b      	mov	r3, r7
 8009e74:	f7f6 fd0a 	bl	800088c <__aeabi_ddiv>
 8009e78:	ec41 0b10 	vmov	d0, r0, r1
 8009e7c:	f001 f93c 	bl	800b0f8 <fabs>
 8009e80:	f000 ffa2 	bl	800adc8 <atan>
 8009e84:	ec51 0b10 	vmov	r0, r1, d0
 8009e88:	2c01      	cmp	r4, #1
 8009e8a:	d013      	beq.n	8009eb4 <__ieee754_atan2+0x10c>
 8009e8c:	2c02      	cmp	r4, #2
 8009e8e:	d015      	beq.n	8009ebc <__ieee754_atan2+0x114>
 8009e90:	2c00      	cmp	r4, #0
 8009e92:	d0a8      	beq.n	8009de6 <__ieee754_atan2+0x3e>
 8009e94:	a318      	add	r3, pc, #96	@ (adr r3, 8009ef8 <__ieee754_atan2+0x150>)
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	f7f6 fa15 	bl	80002c8 <__aeabi_dsub>
 8009e9e:	a318      	add	r3, pc, #96	@ (adr r3, 8009f00 <__ieee754_atan2+0x158>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	e014      	b.n	8009ed0 <__ieee754_atan2+0x128>
 8009ea6:	a118      	add	r1, pc, #96	@ (adr r1, 8009f08 <__ieee754_atan2+0x160>)
 8009ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eac:	e7ec      	b.n	8009e88 <__ieee754_atan2+0xe0>
 8009eae:	2000      	movs	r0, #0
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	e7e9      	b.n	8009e88 <__ieee754_atan2+0xe0>
 8009eb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009eb8:	4619      	mov	r1, r3
 8009eba:	e794      	b.n	8009de6 <__ieee754_atan2+0x3e>
 8009ebc:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ef8 <__ieee754_atan2+0x150>)
 8009ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec2:	f7f6 fa01 	bl	80002c8 <__aeabi_dsub>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	a10d      	add	r1, pc, #52	@ (adr r1, 8009f00 <__ieee754_atan2+0x158>)
 8009ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ed0:	f7f6 f9fa 	bl	80002c8 <__aeabi_dsub>
 8009ed4:	e787      	b.n	8009de6 <__ieee754_atan2+0x3e>
 8009ed6:	a10a      	add	r1, pc, #40	@ (adr r1, 8009f00 <__ieee754_atan2+0x158>)
 8009ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009edc:	e783      	b.n	8009de6 <__ieee754_atan2+0x3e>
 8009ede:	a10c      	add	r1, pc, #48	@ (adr r1, 8009f10 <__ieee754_atan2+0x168>)
 8009ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ee4:	e77f      	b.n	8009de6 <__ieee754_atan2+0x3e>
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	2100      	movs	r1, #0
 8009eea:	e77c      	b.n	8009de6 <__ieee754_atan2+0x3e>
 8009eec:	a10a      	add	r1, pc, #40	@ (adr r1, 8009f18 <__ieee754_atan2+0x170>)
 8009eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ef2:	e778      	b.n	8009de6 <__ieee754_atan2+0x3e>
 8009ef4:	f3af 8000 	nop.w
 8009ef8:	33145c07 	.word	0x33145c07
 8009efc:	3ca1a626 	.word	0x3ca1a626
 8009f00:	54442d18 	.word	0x54442d18
 8009f04:	400921fb 	.word	0x400921fb
 8009f08:	54442d18 	.word	0x54442d18
 8009f0c:	3ff921fb 	.word	0x3ff921fb
 8009f10:	54442d18 	.word	0x54442d18
 8009f14:	3fe921fb 	.word	0x3fe921fb
 8009f18:	54442d18 	.word	0x54442d18
 8009f1c:	bff921fb 	.word	0xbff921fb
 8009f20:	0800cdc0 	.word	0x0800cdc0
 8009f24:	0800cda8 	.word	0x0800cda8
 8009f28:	54442d18 	.word	0x54442d18
 8009f2c:	c00921fb 	.word	0xc00921fb
 8009f30:	7ff00000 	.word	0x7ff00000
 8009f34:	00000000 	.word	0x00000000

08009f38 <__ieee754_pow>:
 8009f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3c:	b091      	sub	sp, #68	@ 0x44
 8009f3e:	ed8d 1b00 	vstr	d1, [sp]
 8009f42:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009f46:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009f4a:	ea5a 0001 	orrs.w	r0, sl, r1
 8009f4e:	ec57 6b10 	vmov	r6, r7, d0
 8009f52:	d113      	bne.n	8009f7c <__ieee754_pow+0x44>
 8009f54:	19b3      	adds	r3, r6, r6
 8009f56:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009f5a:	4152      	adcs	r2, r2
 8009f5c:	4298      	cmp	r0, r3
 8009f5e:	4b9a      	ldr	r3, [pc, #616]	@ (800a1c8 <__ieee754_pow+0x290>)
 8009f60:	4193      	sbcs	r3, r2
 8009f62:	f080 84ee 	bcs.w	800a942 <__ieee754_pow+0xa0a>
 8009f66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	4639      	mov	r1, r7
 8009f6e:	f7f6 f9ad 	bl	80002cc <__adddf3>
 8009f72:	ec41 0b10 	vmov	d0, r0, r1
 8009f76:	b011      	add	sp, #68	@ 0x44
 8009f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7c:	4a93      	ldr	r2, [pc, #588]	@ (800a1cc <__ieee754_pow+0x294>)
 8009f7e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8009f82:	4295      	cmp	r5, r2
 8009f84:	46b8      	mov	r8, r7
 8009f86:	4633      	mov	r3, r6
 8009f88:	d80a      	bhi.n	8009fa0 <__ieee754_pow+0x68>
 8009f8a:	d104      	bne.n	8009f96 <__ieee754_pow+0x5e>
 8009f8c:	2e00      	cmp	r6, #0
 8009f8e:	d1ea      	bne.n	8009f66 <__ieee754_pow+0x2e>
 8009f90:	45aa      	cmp	sl, r5
 8009f92:	d8e8      	bhi.n	8009f66 <__ieee754_pow+0x2e>
 8009f94:	e001      	b.n	8009f9a <__ieee754_pow+0x62>
 8009f96:	4592      	cmp	sl, r2
 8009f98:	d802      	bhi.n	8009fa0 <__ieee754_pow+0x68>
 8009f9a:	4592      	cmp	sl, r2
 8009f9c:	d10f      	bne.n	8009fbe <__ieee754_pow+0x86>
 8009f9e:	b171      	cbz	r1, 8009fbe <__ieee754_pow+0x86>
 8009fa0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009fa4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009fa8:	ea58 0803 	orrs.w	r8, r8, r3
 8009fac:	d1db      	bne.n	8009f66 <__ieee754_pow+0x2e>
 8009fae:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009fb2:	18db      	adds	r3, r3, r3
 8009fb4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009fb8:	4152      	adcs	r2, r2
 8009fba:	4598      	cmp	r8, r3
 8009fbc:	e7cf      	b.n	8009f5e <__ieee754_pow+0x26>
 8009fbe:	f1b8 0f00 	cmp.w	r8, #0
 8009fc2:	46ab      	mov	fp, r5
 8009fc4:	da43      	bge.n	800a04e <__ieee754_pow+0x116>
 8009fc6:	4a82      	ldr	r2, [pc, #520]	@ (800a1d0 <__ieee754_pow+0x298>)
 8009fc8:	4592      	cmp	sl, r2
 8009fca:	d856      	bhi.n	800a07a <__ieee754_pow+0x142>
 8009fcc:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009fd0:	4592      	cmp	sl, r2
 8009fd2:	f240 84c5 	bls.w	800a960 <__ieee754_pow+0xa28>
 8009fd6:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009fda:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009fde:	2a14      	cmp	r2, #20
 8009fe0:	dd18      	ble.n	800a014 <__ieee754_pow+0xdc>
 8009fe2:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009fe6:	fa21 f402 	lsr.w	r4, r1, r2
 8009fea:	fa04 f202 	lsl.w	r2, r4, r2
 8009fee:	428a      	cmp	r2, r1
 8009ff0:	f040 84b6 	bne.w	800a960 <__ieee754_pow+0xa28>
 8009ff4:	f004 0401 	and.w	r4, r4, #1
 8009ff8:	f1c4 0402 	rsb	r4, r4, #2
 8009ffc:	2900      	cmp	r1, #0
 8009ffe:	d159      	bne.n	800a0b4 <__ieee754_pow+0x17c>
 800a000:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800a004:	d148      	bne.n	800a098 <__ieee754_pow+0x160>
 800a006:	4632      	mov	r2, r6
 800a008:	463b      	mov	r3, r7
 800a00a:	4630      	mov	r0, r6
 800a00c:	4639      	mov	r1, r7
 800a00e:	f7f6 fb13 	bl	8000638 <__aeabi_dmul>
 800a012:	e7ae      	b.n	8009f72 <__ieee754_pow+0x3a>
 800a014:	2900      	cmp	r1, #0
 800a016:	d14c      	bne.n	800a0b2 <__ieee754_pow+0x17a>
 800a018:	f1c2 0214 	rsb	r2, r2, #20
 800a01c:	fa4a f402 	asr.w	r4, sl, r2
 800a020:	fa04 f202 	lsl.w	r2, r4, r2
 800a024:	4552      	cmp	r2, sl
 800a026:	f040 8498 	bne.w	800a95a <__ieee754_pow+0xa22>
 800a02a:	f004 0401 	and.w	r4, r4, #1
 800a02e:	f1c4 0402 	rsb	r4, r4, #2
 800a032:	4a68      	ldr	r2, [pc, #416]	@ (800a1d4 <__ieee754_pow+0x29c>)
 800a034:	4592      	cmp	sl, r2
 800a036:	d1e3      	bne.n	800a000 <__ieee754_pow+0xc8>
 800a038:	f1b9 0f00 	cmp.w	r9, #0
 800a03c:	f280 8489 	bge.w	800a952 <__ieee754_pow+0xa1a>
 800a040:	4964      	ldr	r1, [pc, #400]	@ (800a1d4 <__ieee754_pow+0x29c>)
 800a042:	4632      	mov	r2, r6
 800a044:	463b      	mov	r3, r7
 800a046:	2000      	movs	r0, #0
 800a048:	f7f6 fc20 	bl	800088c <__aeabi_ddiv>
 800a04c:	e791      	b.n	8009f72 <__ieee754_pow+0x3a>
 800a04e:	2400      	movs	r4, #0
 800a050:	bb81      	cbnz	r1, 800a0b4 <__ieee754_pow+0x17c>
 800a052:	4a5e      	ldr	r2, [pc, #376]	@ (800a1cc <__ieee754_pow+0x294>)
 800a054:	4592      	cmp	sl, r2
 800a056:	d1ec      	bne.n	800a032 <__ieee754_pow+0xfa>
 800a058:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800a05c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800a060:	431a      	orrs	r2, r3
 800a062:	f000 846e 	beq.w	800a942 <__ieee754_pow+0xa0a>
 800a066:	4b5c      	ldr	r3, [pc, #368]	@ (800a1d8 <__ieee754_pow+0x2a0>)
 800a068:	429d      	cmp	r5, r3
 800a06a:	d908      	bls.n	800a07e <__ieee754_pow+0x146>
 800a06c:	f1b9 0f00 	cmp.w	r9, #0
 800a070:	f280 846b 	bge.w	800a94a <__ieee754_pow+0xa12>
 800a074:	2000      	movs	r0, #0
 800a076:	2100      	movs	r1, #0
 800a078:	e77b      	b.n	8009f72 <__ieee754_pow+0x3a>
 800a07a:	2402      	movs	r4, #2
 800a07c:	e7e8      	b.n	800a050 <__ieee754_pow+0x118>
 800a07e:	f1b9 0f00 	cmp.w	r9, #0
 800a082:	f04f 0000 	mov.w	r0, #0
 800a086:	f04f 0100 	mov.w	r1, #0
 800a08a:	f6bf af72 	bge.w	8009f72 <__ieee754_pow+0x3a>
 800a08e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a092:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a096:	e76c      	b.n	8009f72 <__ieee754_pow+0x3a>
 800a098:	4a50      	ldr	r2, [pc, #320]	@ (800a1dc <__ieee754_pow+0x2a4>)
 800a09a:	4591      	cmp	r9, r2
 800a09c:	d10a      	bne.n	800a0b4 <__ieee754_pow+0x17c>
 800a09e:	f1b8 0f00 	cmp.w	r8, #0
 800a0a2:	db07      	blt.n	800a0b4 <__ieee754_pow+0x17c>
 800a0a4:	ec47 6b10 	vmov	d0, r6, r7
 800a0a8:	b011      	add	sp, #68	@ 0x44
 800a0aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ae:	f7ff bc1f 	b.w	80098f0 <__ieee754_sqrt>
 800a0b2:	2400      	movs	r4, #0
 800a0b4:	ec47 6b10 	vmov	d0, r6, r7
 800a0b8:	9302      	str	r3, [sp, #8]
 800a0ba:	f001 f81d 	bl	800b0f8 <fabs>
 800a0be:	9b02      	ldr	r3, [sp, #8]
 800a0c0:	ec51 0b10 	vmov	r0, r1, d0
 800a0c4:	bb43      	cbnz	r3, 800a118 <__ieee754_pow+0x1e0>
 800a0c6:	4b43      	ldr	r3, [pc, #268]	@ (800a1d4 <__ieee754_pow+0x29c>)
 800a0c8:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d000      	beq.n	800a0d2 <__ieee754_pow+0x19a>
 800a0d0:	bb15      	cbnz	r5, 800a118 <__ieee754_pow+0x1e0>
 800a0d2:	f1b9 0f00 	cmp.w	r9, #0
 800a0d6:	da05      	bge.n	800a0e4 <__ieee754_pow+0x1ac>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	2000      	movs	r0, #0
 800a0de:	493d      	ldr	r1, [pc, #244]	@ (800a1d4 <__ieee754_pow+0x29c>)
 800a0e0:	f7f6 fbd4 	bl	800088c <__aeabi_ddiv>
 800a0e4:	f1b8 0f00 	cmp.w	r8, #0
 800a0e8:	f6bf af43 	bge.w	8009f72 <__ieee754_pow+0x3a>
 800a0ec:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a0f0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a0f4:	4325      	orrs	r5, r4
 800a0f6:	d108      	bne.n	800a10a <__ieee754_pow+0x1d2>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	4619      	mov	r1, r3
 800a100:	f7f6 f8e2 	bl	80002c8 <__aeabi_dsub>
 800a104:	4602      	mov	r2, r0
 800a106:	460b      	mov	r3, r1
 800a108:	e79e      	b.n	800a048 <__ieee754_pow+0x110>
 800a10a:	2c01      	cmp	r4, #1
 800a10c:	f47f af31 	bne.w	8009f72 <__ieee754_pow+0x3a>
 800a110:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a114:	4619      	mov	r1, r3
 800a116:	e72c      	b.n	8009f72 <__ieee754_pow+0x3a>
 800a118:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800a11c:	3b01      	subs	r3, #1
 800a11e:	ea53 0204 	orrs.w	r2, r3, r4
 800a122:	d102      	bne.n	800a12a <__ieee754_pow+0x1f2>
 800a124:	4632      	mov	r2, r6
 800a126:	463b      	mov	r3, r7
 800a128:	e7e8      	b.n	800a0fc <__ieee754_pow+0x1c4>
 800a12a:	3c01      	subs	r4, #1
 800a12c:	431c      	orrs	r4, r3
 800a12e:	d016      	beq.n	800a15e <__ieee754_pow+0x226>
 800a130:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a1b8 <__ieee754_pow+0x280>
 800a134:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800a138:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a13c:	f240 8110 	bls.w	800a360 <__ieee754_pow+0x428>
 800a140:	4b27      	ldr	r3, [pc, #156]	@ (800a1e0 <__ieee754_pow+0x2a8>)
 800a142:	459a      	cmp	sl, r3
 800a144:	4b24      	ldr	r3, [pc, #144]	@ (800a1d8 <__ieee754_pow+0x2a0>)
 800a146:	d916      	bls.n	800a176 <__ieee754_pow+0x23e>
 800a148:	429d      	cmp	r5, r3
 800a14a:	d80b      	bhi.n	800a164 <__ieee754_pow+0x22c>
 800a14c:	f1b9 0f00 	cmp.w	r9, #0
 800a150:	da0b      	bge.n	800a16a <__ieee754_pow+0x232>
 800a152:	2000      	movs	r0, #0
 800a154:	b011      	add	sp, #68	@ 0x44
 800a156:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15a:	f001 bd2d 	b.w	800bbb8 <__math_oflow>
 800a15e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800a1c0 <__ieee754_pow+0x288>
 800a162:	e7e7      	b.n	800a134 <__ieee754_pow+0x1fc>
 800a164:	f1b9 0f00 	cmp.w	r9, #0
 800a168:	dcf3      	bgt.n	800a152 <__ieee754_pow+0x21a>
 800a16a:	2000      	movs	r0, #0
 800a16c:	b011      	add	sp, #68	@ 0x44
 800a16e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a172:	f001 bd19 	b.w	800bba8 <__math_uflow>
 800a176:	429d      	cmp	r5, r3
 800a178:	d20c      	bcs.n	800a194 <__ieee754_pow+0x25c>
 800a17a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a17e:	2200      	movs	r2, #0
 800a180:	2300      	movs	r3, #0
 800a182:	f7f6 fccb 	bl	8000b1c <__aeabi_dcmplt>
 800a186:	3800      	subs	r0, #0
 800a188:	bf18      	it	ne
 800a18a:	2001      	movne	r0, #1
 800a18c:	f1b9 0f00 	cmp.w	r9, #0
 800a190:	daec      	bge.n	800a16c <__ieee754_pow+0x234>
 800a192:	e7df      	b.n	800a154 <__ieee754_pow+0x21c>
 800a194:	4b0f      	ldr	r3, [pc, #60]	@ (800a1d4 <__ieee754_pow+0x29c>)
 800a196:	429d      	cmp	r5, r3
 800a198:	f04f 0200 	mov.w	r2, #0
 800a19c:	d922      	bls.n	800a1e4 <__ieee754_pow+0x2ac>
 800a19e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f7f6 fcba 	bl	8000b1c <__aeabi_dcmplt>
 800a1a8:	3800      	subs	r0, #0
 800a1aa:	bf18      	it	ne
 800a1ac:	2001      	movne	r0, #1
 800a1ae:	f1b9 0f00 	cmp.w	r9, #0
 800a1b2:	dccf      	bgt.n	800a154 <__ieee754_pow+0x21c>
 800a1b4:	e7da      	b.n	800a16c <__ieee754_pow+0x234>
 800a1b6:	bf00      	nop
 800a1b8:	00000000 	.word	0x00000000
 800a1bc:	3ff00000 	.word	0x3ff00000
 800a1c0:	00000000 	.word	0x00000000
 800a1c4:	bff00000 	.word	0xbff00000
 800a1c8:	fff00000 	.word	0xfff00000
 800a1cc:	7ff00000 	.word	0x7ff00000
 800a1d0:	433fffff 	.word	0x433fffff
 800a1d4:	3ff00000 	.word	0x3ff00000
 800a1d8:	3fefffff 	.word	0x3fefffff
 800a1dc:	3fe00000 	.word	0x3fe00000
 800a1e0:	43f00000 	.word	0x43f00000
 800a1e4:	4b5a      	ldr	r3, [pc, #360]	@ (800a350 <__ieee754_pow+0x418>)
 800a1e6:	f7f6 f86f 	bl	80002c8 <__aeabi_dsub>
 800a1ea:	a351      	add	r3, pc, #324	@ (adr r3, 800a330 <__ieee754_pow+0x3f8>)
 800a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	460d      	mov	r5, r1
 800a1f4:	f7f6 fa20 	bl	8000638 <__aeabi_dmul>
 800a1f8:	a34f      	add	r3, pc, #316	@ (adr r3, 800a338 <__ieee754_pow+0x400>)
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	4606      	mov	r6, r0
 800a200:	460f      	mov	r7, r1
 800a202:	4620      	mov	r0, r4
 800a204:	4629      	mov	r1, r5
 800a206:	f7f6 fa17 	bl	8000638 <__aeabi_dmul>
 800a20a:	4b52      	ldr	r3, [pc, #328]	@ (800a354 <__ieee754_pow+0x41c>)
 800a20c:	4682      	mov	sl, r0
 800a20e:	468b      	mov	fp, r1
 800a210:	2200      	movs	r2, #0
 800a212:	4620      	mov	r0, r4
 800a214:	4629      	mov	r1, r5
 800a216:	f7f6 fa0f 	bl	8000638 <__aeabi_dmul>
 800a21a:	4602      	mov	r2, r0
 800a21c:	460b      	mov	r3, r1
 800a21e:	a148      	add	r1, pc, #288	@ (adr r1, 800a340 <__ieee754_pow+0x408>)
 800a220:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a224:	f7f6 f850 	bl	80002c8 <__aeabi_dsub>
 800a228:	4622      	mov	r2, r4
 800a22a:	462b      	mov	r3, r5
 800a22c:	f7f6 fa04 	bl	8000638 <__aeabi_dmul>
 800a230:	4602      	mov	r2, r0
 800a232:	460b      	mov	r3, r1
 800a234:	2000      	movs	r0, #0
 800a236:	4948      	ldr	r1, [pc, #288]	@ (800a358 <__ieee754_pow+0x420>)
 800a238:	f7f6 f846 	bl	80002c8 <__aeabi_dsub>
 800a23c:	4622      	mov	r2, r4
 800a23e:	4680      	mov	r8, r0
 800a240:	4689      	mov	r9, r1
 800a242:	462b      	mov	r3, r5
 800a244:	4620      	mov	r0, r4
 800a246:	4629      	mov	r1, r5
 800a248:	f7f6 f9f6 	bl	8000638 <__aeabi_dmul>
 800a24c:	4602      	mov	r2, r0
 800a24e:	460b      	mov	r3, r1
 800a250:	4640      	mov	r0, r8
 800a252:	4649      	mov	r1, r9
 800a254:	f7f6 f9f0 	bl	8000638 <__aeabi_dmul>
 800a258:	a33b      	add	r3, pc, #236	@ (adr r3, 800a348 <__ieee754_pow+0x410>)
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	f7f6 f9eb 	bl	8000638 <__aeabi_dmul>
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	4650      	mov	r0, sl
 800a268:	4659      	mov	r1, fp
 800a26a:	f7f6 f82d 	bl	80002c8 <__aeabi_dsub>
 800a26e:	4602      	mov	r2, r0
 800a270:	460b      	mov	r3, r1
 800a272:	4680      	mov	r8, r0
 800a274:	4689      	mov	r9, r1
 800a276:	4630      	mov	r0, r6
 800a278:	4639      	mov	r1, r7
 800a27a:	f7f6 f827 	bl	80002cc <__adddf3>
 800a27e:	2400      	movs	r4, #0
 800a280:	4632      	mov	r2, r6
 800a282:	463b      	mov	r3, r7
 800a284:	4620      	mov	r0, r4
 800a286:	460d      	mov	r5, r1
 800a288:	f7f6 f81e 	bl	80002c8 <__aeabi_dsub>
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	4640      	mov	r0, r8
 800a292:	4649      	mov	r1, r9
 800a294:	f7f6 f818 	bl	80002c8 <__aeabi_dsub>
 800a298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a29c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	9304      	str	r3, [sp, #16]
 800a2a4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a2a8:	4606      	mov	r6, r0
 800a2aa:	460f      	mov	r7, r1
 800a2ac:	465b      	mov	r3, fp
 800a2ae:	4652      	mov	r2, sl
 800a2b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2b4:	f7f6 f808 	bl	80002c8 <__aeabi_dsub>
 800a2b8:	4622      	mov	r2, r4
 800a2ba:	462b      	mov	r3, r5
 800a2bc:	f7f6 f9bc 	bl	8000638 <__aeabi_dmul>
 800a2c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2c4:	4680      	mov	r8, r0
 800a2c6:	4689      	mov	r9, r1
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	4639      	mov	r1, r7
 800a2cc:	f7f6 f9b4 	bl	8000638 <__aeabi_dmul>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4640      	mov	r0, r8
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	f7f5 fff8 	bl	80002cc <__adddf3>
 800a2dc:	465b      	mov	r3, fp
 800a2de:	4606      	mov	r6, r0
 800a2e0:	460f      	mov	r7, r1
 800a2e2:	4652      	mov	r2, sl
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	f7f6 f9a6 	bl	8000638 <__aeabi_dmul>
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	4680      	mov	r8, r0
 800a2f2:	4689      	mov	r9, r1
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	4639      	mov	r1, r7
 800a2f8:	f7f5 ffe8 	bl	80002cc <__adddf3>
 800a2fc:	4b17      	ldr	r3, [pc, #92]	@ (800a35c <__ieee754_pow+0x424>)
 800a2fe:	4299      	cmp	r1, r3
 800a300:	4604      	mov	r4, r0
 800a302:	460d      	mov	r5, r1
 800a304:	468b      	mov	fp, r1
 800a306:	f340 820b 	ble.w	800a720 <__ieee754_pow+0x7e8>
 800a30a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a30e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a312:	4303      	orrs	r3, r0
 800a314:	f000 81ea 	beq.w	800a6ec <__ieee754_pow+0x7b4>
 800a318:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a31c:	2200      	movs	r2, #0
 800a31e:	2300      	movs	r3, #0
 800a320:	f7f6 fbfc 	bl	8000b1c <__aeabi_dcmplt>
 800a324:	3800      	subs	r0, #0
 800a326:	bf18      	it	ne
 800a328:	2001      	movne	r0, #1
 800a32a:	e713      	b.n	800a154 <__ieee754_pow+0x21c>
 800a32c:	f3af 8000 	nop.w
 800a330:	60000000 	.word	0x60000000
 800a334:	3ff71547 	.word	0x3ff71547
 800a338:	f85ddf44 	.word	0xf85ddf44
 800a33c:	3e54ae0b 	.word	0x3e54ae0b
 800a340:	55555555 	.word	0x55555555
 800a344:	3fd55555 	.word	0x3fd55555
 800a348:	652b82fe 	.word	0x652b82fe
 800a34c:	3ff71547 	.word	0x3ff71547
 800a350:	3ff00000 	.word	0x3ff00000
 800a354:	3fd00000 	.word	0x3fd00000
 800a358:	3fe00000 	.word	0x3fe00000
 800a35c:	408fffff 	.word	0x408fffff
 800a360:	4bd5      	ldr	r3, [pc, #852]	@ (800a6b8 <__ieee754_pow+0x780>)
 800a362:	ea08 0303 	and.w	r3, r8, r3
 800a366:	2200      	movs	r2, #0
 800a368:	b92b      	cbnz	r3, 800a376 <__ieee754_pow+0x43e>
 800a36a:	4bd4      	ldr	r3, [pc, #848]	@ (800a6bc <__ieee754_pow+0x784>)
 800a36c:	f7f6 f964 	bl	8000638 <__aeabi_dmul>
 800a370:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a374:	468b      	mov	fp, r1
 800a376:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a37a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a37e:	4413      	add	r3, r2
 800a380:	930a      	str	r3, [sp, #40]	@ 0x28
 800a382:	4bcf      	ldr	r3, [pc, #828]	@ (800a6c0 <__ieee754_pow+0x788>)
 800a384:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a388:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a38c:	459b      	cmp	fp, r3
 800a38e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a392:	dd08      	ble.n	800a3a6 <__ieee754_pow+0x46e>
 800a394:	4bcb      	ldr	r3, [pc, #812]	@ (800a6c4 <__ieee754_pow+0x78c>)
 800a396:	459b      	cmp	fp, r3
 800a398:	f340 81a5 	ble.w	800a6e6 <__ieee754_pow+0x7ae>
 800a39c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a39e:	3301      	adds	r3, #1
 800a3a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3a2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a3a6:	f04f 0a00 	mov.w	sl, #0
 800a3aa:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a3ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3b0:	4bc5      	ldr	r3, [pc, #788]	@ (800a6c8 <__ieee754_pow+0x790>)
 800a3b2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a3b6:	ed93 7b00 	vldr	d7, [r3]
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	ec53 2b17 	vmov	r2, r3, d7
 800a3c0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a3c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a3c8:	f7f5 ff7e 	bl	80002c8 <__aeabi_dsub>
 800a3cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	460f      	mov	r7, r1
 800a3d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3d8:	f7f5 ff78 	bl	80002cc <__adddf3>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	49ba      	ldr	r1, [pc, #744]	@ (800a6cc <__ieee754_pow+0x794>)
 800a3e4:	f7f6 fa52 	bl	800088c <__aeabi_ddiv>
 800a3e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	4639      	mov	r1, r7
 800a3f4:	f7f6 f920 	bl	8000638 <__aeabi_dmul>
 800a3f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3fc:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a400:	106d      	asrs	r5, r5, #1
 800a402:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a406:	f04f 0b00 	mov.w	fp, #0
 800a40a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a40e:	4661      	mov	r1, ip
 800a410:	2200      	movs	r2, #0
 800a412:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a416:	4658      	mov	r0, fp
 800a418:	46e1      	mov	r9, ip
 800a41a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a41e:	4614      	mov	r4, r2
 800a420:	461d      	mov	r5, r3
 800a422:	f7f6 f909 	bl	8000638 <__aeabi_dmul>
 800a426:	4602      	mov	r2, r0
 800a428:	460b      	mov	r3, r1
 800a42a:	4630      	mov	r0, r6
 800a42c:	4639      	mov	r1, r7
 800a42e:	f7f5 ff4b 	bl	80002c8 <__aeabi_dsub>
 800a432:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a436:	4606      	mov	r6, r0
 800a438:	460f      	mov	r7, r1
 800a43a:	4620      	mov	r0, r4
 800a43c:	4629      	mov	r1, r5
 800a43e:	f7f5 ff43 	bl	80002c8 <__aeabi_dsub>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a44a:	f7f5 ff3d 	bl	80002c8 <__aeabi_dsub>
 800a44e:	465a      	mov	r2, fp
 800a450:	464b      	mov	r3, r9
 800a452:	f7f6 f8f1 	bl	8000638 <__aeabi_dmul>
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	4630      	mov	r0, r6
 800a45c:	4639      	mov	r1, r7
 800a45e:	f7f5 ff33 	bl	80002c8 <__aeabi_dsub>
 800a462:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a466:	f7f6 f8e7 	bl	8000638 <__aeabi_dmul>
 800a46a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a46e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a472:	4610      	mov	r0, r2
 800a474:	4619      	mov	r1, r3
 800a476:	f7f6 f8df 	bl	8000638 <__aeabi_dmul>
 800a47a:	a37d      	add	r3, pc, #500	@ (adr r3, 800a670 <__ieee754_pow+0x738>)
 800a47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a480:	4604      	mov	r4, r0
 800a482:	460d      	mov	r5, r1
 800a484:	f7f6 f8d8 	bl	8000638 <__aeabi_dmul>
 800a488:	a37b      	add	r3, pc, #492	@ (adr r3, 800a678 <__ieee754_pow+0x740>)
 800a48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48e:	f7f5 ff1d 	bl	80002cc <__adddf3>
 800a492:	4622      	mov	r2, r4
 800a494:	462b      	mov	r3, r5
 800a496:	f7f6 f8cf 	bl	8000638 <__aeabi_dmul>
 800a49a:	a379      	add	r3, pc, #484	@ (adr r3, 800a680 <__ieee754_pow+0x748>)
 800a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a0:	f7f5 ff14 	bl	80002cc <__adddf3>
 800a4a4:	4622      	mov	r2, r4
 800a4a6:	462b      	mov	r3, r5
 800a4a8:	f7f6 f8c6 	bl	8000638 <__aeabi_dmul>
 800a4ac:	a376      	add	r3, pc, #472	@ (adr r3, 800a688 <__ieee754_pow+0x750>)
 800a4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b2:	f7f5 ff0b 	bl	80002cc <__adddf3>
 800a4b6:	4622      	mov	r2, r4
 800a4b8:	462b      	mov	r3, r5
 800a4ba:	f7f6 f8bd 	bl	8000638 <__aeabi_dmul>
 800a4be:	a374      	add	r3, pc, #464	@ (adr r3, 800a690 <__ieee754_pow+0x758>)
 800a4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c4:	f7f5 ff02 	bl	80002cc <__adddf3>
 800a4c8:	4622      	mov	r2, r4
 800a4ca:	462b      	mov	r3, r5
 800a4cc:	f7f6 f8b4 	bl	8000638 <__aeabi_dmul>
 800a4d0:	a371      	add	r3, pc, #452	@ (adr r3, 800a698 <__ieee754_pow+0x760>)
 800a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d6:	f7f5 fef9 	bl	80002cc <__adddf3>
 800a4da:	4622      	mov	r2, r4
 800a4dc:	4606      	mov	r6, r0
 800a4de:	460f      	mov	r7, r1
 800a4e0:	462b      	mov	r3, r5
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	f7f6 f8a7 	bl	8000638 <__aeabi_dmul>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	4639      	mov	r1, r7
 800a4f2:	f7f6 f8a1 	bl	8000638 <__aeabi_dmul>
 800a4f6:	465a      	mov	r2, fp
 800a4f8:	4604      	mov	r4, r0
 800a4fa:	460d      	mov	r5, r1
 800a4fc:	464b      	mov	r3, r9
 800a4fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a502:	f7f5 fee3 	bl	80002cc <__adddf3>
 800a506:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a50a:	f7f6 f895 	bl	8000638 <__aeabi_dmul>
 800a50e:	4622      	mov	r2, r4
 800a510:	462b      	mov	r3, r5
 800a512:	f7f5 fedb 	bl	80002cc <__adddf3>
 800a516:	465a      	mov	r2, fp
 800a518:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a51c:	464b      	mov	r3, r9
 800a51e:	4658      	mov	r0, fp
 800a520:	4649      	mov	r1, r9
 800a522:	f7f6 f889 	bl	8000638 <__aeabi_dmul>
 800a526:	4b6a      	ldr	r3, [pc, #424]	@ (800a6d0 <__ieee754_pow+0x798>)
 800a528:	2200      	movs	r2, #0
 800a52a:	4606      	mov	r6, r0
 800a52c:	460f      	mov	r7, r1
 800a52e:	f7f5 fecd 	bl	80002cc <__adddf3>
 800a532:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a536:	f7f5 fec9 	bl	80002cc <__adddf3>
 800a53a:	46d8      	mov	r8, fp
 800a53c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a540:	460d      	mov	r5, r1
 800a542:	465a      	mov	r2, fp
 800a544:	460b      	mov	r3, r1
 800a546:	4640      	mov	r0, r8
 800a548:	4649      	mov	r1, r9
 800a54a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a54e:	f7f6 f873 	bl	8000638 <__aeabi_dmul>
 800a552:	465c      	mov	r4, fp
 800a554:	4680      	mov	r8, r0
 800a556:	4689      	mov	r9, r1
 800a558:	4b5d      	ldr	r3, [pc, #372]	@ (800a6d0 <__ieee754_pow+0x798>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	4620      	mov	r0, r4
 800a55e:	4629      	mov	r1, r5
 800a560:	f7f5 feb2 	bl	80002c8 <__aeabi_dsub>
 800a564:	4632      	mov	r2, r6
 800a566:	463b      	mov	r3, r7
 800a568:	f7f5 feae 	bl	80002c8 <__aeabi_dsub>
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a574:	f7f5 fea8 	bl	80002c8 <__aeabi_dsub>
 800a578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a57c:	f7f6 f85c 	bl	8000638 <__aeabi_dmul>
 800a580:	4622      	mov	r2, r4
 800a582:	4606      	mov	r6, r0
 800a584:	460f      	mov	r7, r1
 800a586:	462b      	mov	r3, r5
 800a588:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a58c:	f7f6 f854 	bl	8000638 <__aeabi_dmul>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	4630      	mov	r0, r6
 800a596:	4639      	mov	r1, r7
 800a598:	f7f5 fe98 	bl	80002cc <__adddf3>
 800a59c:	4606      	mov	r6, r0
 800a59e:	460f      	mov	r7, r1
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	4640      	mov	r0, r8
 800a5a6:	4649      	mov	r1, r9
 800a5a8:	f7f5 fe90 	bl	80002cc <__adddf3>
 800a5ac:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a5b0:	a33b      	add	r3, pc, #236	@ (adr r3, 800a6a0 <__ieee754_pow+0x768>)
 800a5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b6:	4658      	mov	r0, fp
 800a5b8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a5bc:	460d      	mov	r5, r1
 800a5be:	f7f6 f83b 	bl	8000638 <__aeabi_dmul>
 800a5c2:	465c      	mov	r4, fp
 800a5c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5c8:	4642      	mov	r2, r8
 800a5ca:	464b      	mov	r3, r9
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	4629      	mov	r1, r5
 800a5d0:	f7f5 fe7a 	bl	80002c8 <__aeabi_dsub>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4630      	mov	r0, r6
 800a5da:	4639      	mov	r1, r7
 800a5dc:	f7f5 fe74 	bl	80002c8 <__aeabi_dsub>
 800a5e0:	a331      	add	r3, pc, #196	@ (adr r3, 800a6a8 <__ieee754_pow+0x770>)
 800a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e6:	f7f6 f827 	bl	8000638 <__aeabi_dmul>
 800a5ea:	a331      	add	r3, pc, #196	@ (adr r3, 800a6b0 <__ieee754_pow+0x778>)
 800a5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f0:	4606      	mov	r6, r0
 800a5f2:	460f      	mov	r7, r1
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	4629      	mov	r1, r5
 800a5f8:	f7f6 f81e 	bl	8000638 <__aeabi_dmul>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	4630      	mov	r0, r6
 800a602:	4639      	mov	r1, r7
 800a604:	f7f5 fe62 	bl	80002cc <__adddf3>
 800a608:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a60a:	4b32      	ldr	r3, [pc, #200]	@ (800a6d4 <__ieee754_pow+0x79c>)
 800a60c:	4413      	add	r3, r2
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	f7f5 fe5b 	bl	80002cc <__adddf3>
 800a616:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a61a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a61c:	f7f5 ffa2 	bl	8000564 <__aeabi_i2d>
 800a620:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a622:	4b2d      	ldr	r3, [pc, #180]	@ (800a6d8 <__ieee754_pow+0x7a0>)
 800a624:	4413      	add	r3, r2
 800a626:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a62a:	4606      	mov	r6, r0
 800a62c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a630:	460f      	mov	r7, r1
 800a632:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a636:	f7f5 fe49 	bl	80002cc <__adddf3>
 800a63a:	4642      	mov	r2, r8
 800a63c:	464b      	mov	r3, r9
 800a63e:	f7f5 fe45 	bl	80002cc <__adddf3>
 800a642:	4632      	mov	r2, r6
 800a644:	463b      	mov	r3, r7
 800a646:	f7f5 fe41 	bl	80002cc <__adddf3>
 800a64a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a64e:	4632      	mov	r2, r6
 800a650:	463b      	mov	r3, r7
 800a652:	4658      	mov	r0, fp
 800a654:	460d      	mov	r5, r1
 800a656:	f7f5 fe37 	bl	80002c8 <__aeabi_dsub>
 800a65a:	4642      	mov	r2, r8
 800a65c:	464b      	mov	r3, r9
 800a65e:	f7f5 fe33 	bl	80002c8 <__aeabi_dsub>
 800a662:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a666:	f7f5 fe2f 	bl	80002c8 <__aeabi_dsub>
 800a66a:	465c      	mov	r4, fp
 800a66c:	e036      	b.n	800a6dc <__ieee754_pow+0x7a4>
 800a66e:	bf00      	nop
 800a670:	4a454eef 	.word	0x4a454eef
 800a674:	3fca7e28 	.word	0x3fca7e28
 800a678:	93c9db65 	.word	0x93c9db65
 800a67c:	3fcd864a 	.word	0x3fcd864a
 800a680:	a91d4101 	.word	0xa91d4101
 800a684:	3fd17460 	.word	0x3fd17460
 800a688:	518f264d 	.word	0x518f264d
 800a68c:	3fd55555 	.word	0x3fd55555
 800a690:	db6fabff 	.word	0xdb6fabff
 800a694:	3fdb6db6 	.word	0x3fdb6db6
 800a698:	33333303 	.word	0x33333303
 800a69c:	3fe33333 	.word	0x3fe33333
 800a6a0:	e0000000 	.word	0xe0000000
 800a6a4:	3feec709 	.word	0x3feec709
 800a6a8:	dc3a03fd 	.word	0xdc3a03fd
 800a6ac:	3feec709 	.word	0x3feec709
 800a6b0:	145b01f5 	.word	0x145b01f5
 800a6b4:	be3e2fe0 	.word	0xbe3e2fe0
 800a6b8:	7ff00000 	.word	0x7ff00000
 800a6bc:	43400000 	.word	0x43400000
 800a6c0:	0003988e 	.word	0x0003988e
 800a6c4:	000bb679 	.word	0x000bb679
 800a6c8:	0800cdf8 	.word	0x0800cdf8
 800a6cc:	3ff00000 	.word	0x3ff00000
 800a6d0:	40080000 	.word	0x40080000
 800a6d4:	0800cdd8 	.word	0x0800cdd8
 800a6d8:	0800cde8 	.word	0x0800cde8
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6e4:	e5d6      	b.n	800a294 <__ieee754_pow+0x35c>
 800a6e6:	f04f 0a01 	mov.w	sl, #1
 800a6ea:	e65e      	b.n	800a3aa <__ieee754_pow+0x472>
 800a6ec:	a3b5      	add	r3, pc, #724	@ (adr r3, 800a9c4 <__ieee754_pow+0xa8c>)
 800a6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	4639      	mov	r1, r7
 800a6f6:	f7f5 fde9 	bl	80002cc <__adddf3>
 800a6fa:	4642      	mov	r2, r8
 800a6fc:	e9cd 0100 	strd	r0, r1, [sp]
 800a700:	464b      	mov	r3, r9
 800a702:	4620      	mov	r0, r4
 800a704:	4629      	mov	r1, r5
 800a706:	f7f5 fddf 	bl	80002c8 <__aeabi_dsub>
 800a70a:	4602      	mov	r2, r0
 800a70c:	460b      	mov	r3, r1
 800a70e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a712:	f7f6 fa21 	bl	8000b58 <__aeabi_dcmpgt>
 800a716:	2800      	cmp	r0, #0
 800a718:	f47f adfe 	bne.w	800a318 <__ieee754_pow+0x3e0>
 800a71c:	4ba2      	ldr	r3, [pc, #648]	@ (800a9a8 <__ieee754_pow+0xa70>)
 800a71e:	e022      	b.n	800a766 <__ieee754_pow+0x82e>
 800a720:	4ca2      	ldr	r4, [pc, #648]	@ (800a9ac <__ieee754_pow+0xa74>)
 800a722:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a726:	42a3      	cmp	r3, r4
 800a728:	d919      	bls.n	800a75e <__ieee754_pow+0x826>
 800a72a:	4ba1      	ldr	r3, [pc, #644]	@ (800a9b0 <__ieee754_pow+0xa78>)
 800a72c:	440b      	add	r3, r1
 800a72e:	4303      	orrs	r3, r0
 800a730:	d009      	beq.n	800a746 <__ieee754_pow+0x80e>
 800a732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a736:	2200      	movs	r2, #0
 800a738:	2300      	movs	r3, #0
 800a73a:	f7f6 f9ef 	bl	8000b1c <__aeabi_dcmplt>
 800a73e:	3800      	subs	r0, #0
 800a740:	bf18      	it	ne
 800a742:	2001      	movne	r0, #1
 800a744:	e512      	b.n	800a16c <__ieee754_pow+0x234>
 800a746:	4642      	mov	r2, r8
 800a748:	464b      	mov	r3, r9
 800a74a:	f7f5 fdbd 	bl	80002c8 <__aeabi_dsub>
 800a74e:	4632      	mov	r2, r6
 800a750:	463b      	mov	r3, r7
 800a752:	f7f6 f9f7 	bl	8000b44 <__aeabi_dcmpge>
 800a756:	2800      	cmp	r0, #0
 800a758:	d1eb      	bne.n	800a732 <__ieee754_pow+0x7fa>
 800a75a:	4b96      	ldr	r3, [pc, #600]	@ (800a9b4 <__ieee754_pow+0xa7c>)
 800a75c:	e003      	b.n	800a766 <__ieee754_pow+0x82e>
 800a75e:	4a96      	ldr	r2, [pc, #600]	@ (800a9b8 <__ieee754_pow+0xa80>)
 800a760:	4293      	cmp	r3, r2
 800a762:	f240 80e7 	bls.w	800a934 <__ieee754_pow+0x9fc>
 800a766:	151b      	asrs	r3, r3, #20
 800a768:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800a76c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800a770:	fa4a fa03 	asr.w	sl, sl, r3
 800a774:	44da      	add	sl, fp
 800a776:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a77a:	4890      	ldr	r0, [pc, #576]	@ (800a9bc <__ieee754_pow+0xa84>)
 800a77c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a780:	4108      	asrs	r0, r1
 800a782:	ea00 030a 	and.w	r3, r0, sl
 800a786:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a78a:	f1c1 0114 	rsb	r1, r1, #20
 800a78e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a792:	fa4a fa01 	asr.w	sl, sl, r1
 800a796:	f1bb 0f00 	cmp.w	fp, #0
 800a79a:	4640      	mov	r0, r8
 800a79c:	4649      	mov	r1, r9
 800a79e:	f04f 0200 	mov.w	r2, #0
 800a7a2:	bfb8      	it	lt
 800a7a4:	f1ca 0a00 	rsblt	sl, sl, #0
 800a7a8:	f7f5 fd8e 	bl	80002c8 <__aeabi_dsub>
 800a7ac:	4680      	mov	r8, r0
 800a7ae:	4689      	mov	r9, r1
 800a7b0:	4632      	mov	r2, r6
 800a7b2:	463b      	mov	r3, r7
 800a7b4:	4640      	mov	r0, r8
 800a7b6:	4649      	mov	r1, r9
 800a7b8:	f7f5 fd88 	bl	80002cc <__adddf3>
 800a7bc:	2400      	movs	r4, #0
 800a7be:	a36a      	add	r3, pc, #424	@ (adr r3, 800a968 <__ieee754_pow+0xa30>)
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	460d      	mov	r5, r1
 800a7c8:	f7f5 ff36 	bl	8000638 <__aeabi_dmul>
 800a7cc:	4642      	mov	r2, r8
 800a7ce:	e9cd 0100 	strd	r0, r1, [sp]
 800a7d2:	464b      	mov	r3, r9
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	f7f5 fd76 	bl	80002c8 <__aeabi_dsub>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	4639      	mov	r1, r7
 800a7e4:	f7f5 fd70 	bl	80002c8 <__aeabi_dsub>
 800a7e8:	a361      	add	r3, pc, #388	@ (adr r3, 800a970 <__ieee754_pow+0xa38>)
 800a7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ee:	f7f5 ff23 	bl	8000638 <__aeabi_dmul>
 800a7f2:	a361      	add	r3, pc, #388	@ (adr r3, 800a978 <__ieee754_pow+0xa40>)
 800a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f8:	4680      	mov	r8, r0
 800a7fa:	4689      	mov	r9, r1
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	4629      	mov	r1, r5
 800a800:	f7f5 ff1a 	bl	8000638 <__aeabi_dmul>
 800a804:	4602      	mov	r2, r0
 800a806:	460b      	mov	r3, r1
 800a808:	4640      	mov	r0, r8
 800a80a:	4649      	mov	r1, r9
 800a80c:	f7f5 fd5e 	bl	80002cc <__adddf3>
 800a810:	4604      	mov	r4, r0
 800a812:	460d      	mov	r5, r1
 800a814:	4602      	mov	r2, r0
 800a816:	460b      	mov	r3, r1
 800a818:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a81c:	f7f5 fd56 	bl	80002cc <__adddf3>
 800a820:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a824:	4680      	mov	r8, r0
 800a826:	4689      	mov	r9, r1
 800a828:	f7f5 fd4e 	bl	80002c8 <__aeabi_dsub>
 800a82c:	4602      	mov	r2, r0
 800a82e:	460b      	mov	r3, r1
 800a830:	4620      	mov	r0, r4
 800a832:	4629      	mov	r1, r5
 800a834:	f7f5 fd48 	bl	80002c8 <__aeabi_dsub>
 800a838:	4642      	mov	r2, r8
 800a83a:	4606      	mov	r6, r0
 800a83c:	460f      	mov	r7, r1
 800a83e:	464b      	mov	r3, r9
 800a840:	4640      	mov	r0, r8
 800a842:	4649      	mov	r1, r9
 800a844:	f7f5 fef8 	bl	8000638 <__aeabi_dmul>
 800a848:	a34d      	add	r3, pc, #308	@ (adr r3, 800a980 <__ieee754_pow+0xa48>)
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	4604      	mov	r4, r0
 800a850:	460d      	mov	r5, r1
 800a852:	f7f5 fef1 	bl	8000638 <__aeabi_dmul>
 800a856:	a34c      	add	r3, pc, #304	@ (adr r3, 800a988 <__ieee754_pow+0xa50>)
 800a858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85c:	f7f5 fd34 	bl	80002c8 <__aeabi_dsub>
 800a860:	4622      	mov	r2, r4
 800a862:	462b      	mov	r3, r5
 800a864:	f7f5 fee8 	bl	8000638 <__aeabi_dmul>
 800a868:	a349      	add	r3, pc, #292	@ (adr r3, 800a990 <__ieee754_pow+0xa58>)
 800a86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86e:	f7f5 fd2d 	bl	80002cc <__adddf3>
 800a872:	4622      	mov	r2, r4
 800a874:	462b      	mov	r3, r5
 800a876:	f7f5 fedf 	bl	8000638 <__aeabi_dmul>
 800a87a:	a347      	add	r3, pc, #284	@ (adr r3, 800a998 <__ieee754_pow+0xa60>)
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	f7f5 fd22 	bl	80002c8 <__aeabi_dsub>
 800a884:	4622      	mov	r2, r4
 800a886:	462b      	mov	r3, r5
 800a888:	f7f5 fed6 	bl	8000638 <__aeabi_dmul>
 800a88c:	a344      	add	r3, pc, #272	@ (adr r3, 800a9a0 <__ieee754_pow+0xa68>)
 800a88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a892:	f7f5 fd1b 	bl	80002cc <__adddf3>
 800a896:	4622      	mov	r2, r4
 800a898:	462b      	mov	r3, r5
 800a89a:	f7f5 fecd 	bl	8000638 <__aeabi_dmul>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	4640      	mov	r0, r8
 800a8a4:	4649      	mov	r1, r9
 800a8a6:	f7f5 fd0f 	bl	80002c8 <__aeabi_dsub>
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	460d      	mov	r5, r1
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	4640      	mov	r0, r8
 800a8b4:	4649      	mov	r1, r9
 800a8b6:	f7f5 febf 	bl	8000638 <__aeabi_dmul>
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	e9cd 0100 	strd	r0, r1, [sp]
 800a8c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	f7f5 fcfe 	bl	80002c8 <__aeabi_dsub>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8d4:	f7f5 ffda 	bl	800088c <__aeabi_ddiv>
 800a8d8:	4632      	mov	r2, r6
 800a8da:	4604      	mov	r4, r0
 800a8dc:	460d      	mov	r5, r1
 800a8de:	463b      	mov	r3, r7
 800a8e0:	4640      	mov	r0, r8
 800a8e2:	4649      	mov	r1, r9
 800a8e4:	f7f5 fea8 	bl	8000638 <__aeabi_dmul>
 800a8e8:	4632      	mov	r2, r6
 800a8ea:	463b      	mov	r3, r7
 800a8ec:	f7f5 fcee 	bl	80002cc <__adddf3>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	f7f5 fce6 	bl	80002c8 <__aeabi_dsub>
 800a8fc:	4642      	mov	r2, r8
 800a8fe:	464b      	mov	r3, r9
 800a900:	f7f5 fce2 	bl	80002c8 <__aeabi_dsub>
 800a904:	460b      	mov	r3, r1
 800a906:	4602      	mov	r2, r0
 800a908:	492d      	ldr	r1, [pc, #180]	@ (800a9c0 <__ieee754_pow+0xa88>)
 800a90a:	2000      	movs	r0, #0
 800a90c:	f7f5 fcdc 	bl	80002c8 <__aeabi_dsub>
 800a910:	ec41 0b10 	vmov	d0, r0, r1
 800a914:	ee10 3a90 	vmov	r3, s1
 800a918:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a91c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a920:	da0b      	bge.n	800a93a <__ieee754_pow+0xa02>
 800a922:	4650      	mov	r0, sl
 800a924:	f001 f898 	bl	800ba58 <scalbn>
 800a928:	ec51 0b10 	vmov	r0, r1, d0
 800a92c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a930:	f7ff bb6d 	b.w	800a00e <__ieee754_pow+0xd6>
 800a934:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a938:	e73a      	b.n	800a7b0 <__ieee754_pow+0x878>
 800a93a:	ec51 0b10 	vmov	r0, r1, d0
 800a93e:	4619      	mov	r1, r3
 800a940:	e7f4      	b.n	800a92c <__ieee754_pow+0x9f4>
 800a942:	491f      	ldr	r1, [pc, #124]	@ (800a9c0 <__ieee754_pow+0xa88>)
 800a944:	2000      	movs	r0, #0
 800a946:	f7ff bb14 	b.w	8009f72 <__ieee754_pow+0x3a>
 800a94a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a94e:	f7ff bb10 	b.w	8009f72 <__ieee754_pow+0x3a>
 800a952:	4630      	mov	r0, r6
 800a954:	4639      	mov	r1, r7
 800a956:	f7ff bb0c 	b.w	8009f72 <__ieee754_pow+0x3a>
 800a95a:	460c      	mov	r4, r1
 800a95c:	f7ff bb69 	b.w	800a032 <__ieee754_pow+0xfa>
 800a960:	2400      	movs	r4, #0
 800a962:	f7ff bb4b 	b.w	8009ffc <__ieee754_pow+0xc4>
 800a966:	bf00      	nop
 800a968:	00000000 	.word	0x00000000
 800a96c:	3fe62e43 	.word	0x3fe62e43
 800a970:	fefa39ef 	.word	0xfefa39ef
 800a974:	3fe62e42 	.word	0x3fe62e42
 800a978:	0ca86c39 	.word	0x0ca86c39
 800a97c:	be205c61 	.word	0xbe205c61
 800a980:	72bea4d0 	.word	0x72bea4d0
 800a984:	3e663769 	.word	0x3e663769
 800a988:	c5d26bf1 	.word	0xc5d26bf1
 800a98c:	3ebbbd41 	.word	0x3ebbbd41
 800a990:	af25de2c 	.word	0xaf25de2c
 800a994:	3f11566a 	.word	0x3f11566a
 800a998:	16bebd93 	.word	0x16bebd93
 800a99c:	3f66c16c 	.word	0x3f66c16c
 800a9a0:	5555553e 	.word	0x5555553e
 800a9a4:	3fc55555 	.word	0x3fc55555
 800a9a8:	40900000 	.word	0x40900000
 800a9ac:	4090cbff 	.word	0x4090cbff
 800a9b0:	3f6f3400 	.word	0x3f6f3400
 800a9b4:	4090cc00 	.word	0x4090cc00
 800a9b8:	3fe00000 	.word	0x3fe00000
 800a9bc:	fff00000 	.word	0xfff00000
 800a9c0:	3ff00000 	.word	0x3ff00000
 800a9c4:	652b82fe 	.word	0x652b82fe
 800a9c8:	3c971547 	.word	0x3c971547
 800a9cc:	00000000 	.word	0x00000000

0800a9d0 <__ieee754_rem_pio2>:
 800a9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d4:	ec57 6b10 	vmov	r6, r7, d0
 800a9d8:	4bc5      	ldr	r3, [pc, #788]	@ (800acf0 <__ieee754_rem_pio2+0x320>)
 800a9da:	b08d      	sub	sp, #52	@ 0x34
 800a9dc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a9e0:	4598      	cmp	r8, r3
 800a9e2:	4604      	mov	r4, r0
 800a9e4:	9704      	str	r7, [sp, #16]
 800a9e6:	d807      	bhi.n	800a9f8 <__ieee754_rem_pio2+0x28>
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	ed80 0b00 	vstr	d0, [r0]
 800a9f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a9f4:	2500      	movs	r5, #0
 800a9f6:	e028      	b.n	800aa4a <__ieee754_rem_pio2+0x7a>
 800a9f8:	4bbe      	ldr	r3, [pc, #760]	@ (800acf4 <__ieee754_rem_pio2+0x324>)
 800a9fa:	4598      	cmp	r8, r3
 800a9fc:	d878      	bhi.n	800aaf0 <__ieee754_rem_pio2+0x120>
 800a9fe:	9b04      	ldr	r3, [sp, #16]
 800aa00:	4dbd      	ldr	r5, [pc, #756]	@ (800acf8 <__ieee754_rem_pio2+0x328>)
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	4630      	mov	r0, r6
 800aa06:	a3ac      	add	r3, pc, #688	@ (adr r3, 800acb8 <__ieee754_rem_pio2+0x2e8>)
 800aa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0c:	4639      	mov	r1, r7
 800aa0e:	dd38      	ble.n	800aa82 <__ieee754_rem_pio2+0xb2>
 800aa10:	f7f5 fc5a 	bl	80002c8 <__aeabi_dsub>
 800aa14:	45a8      	cmp	r8, r5
 800aa16:	4606      	mov	r6, r0
 800aa18:	460f      	mov	r7, r1
 800aa1a:	d01a      	beq.n	800aa52 <__ieee754_rem_pio2+0x82>
 800aa1c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800acc0 <__ieee754_rem_pio2+0x2f0>)
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	f7f5 fc51 	bl	80002c8 <__aeabi_dsub>
 800aa26:	4602      	mov	r2, r0
 800aa28:	460b      	mov	r3, r1
 800aa2a:	4680      	mov	r8, r0
 800aa2c:	4689      	mov	r9, r1
 800aa2e:	4630      	mov	r0, r6
 800aa30:	4639      	mov	r1, r7
 800aa32:	f7f5 fc49 	bl	80002c8 <__aeabi_dsub>
 800aa36:	a3a2      	add	r3, pc, #648	@ (adr r3, 800acc0 <__ieee754_rem_pio2+0x2f0>)
 800aa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3c:	f7f5 fc44 	bl	80002c8 <__aeabi_dsub>
 800aa40:	e9c4 8900 	strd	r8, r9, [r4]
 800aa44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa48:	2501      	movs	r5, #1
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	b00d      	add	sp, #52	@ 0x34
 800aa4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa52:	a39d      	add	r3, pc, #628	@ (adr r3, 800acc8 <__ieee754_rem_pio2+0x2f8>)
 800aa54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa58:	f7f5 fc36 	bl	80002c8 <__aeabi_dsub>
 800aa5c:	a39c      	add	r3, pc, #624	@ (adr r3, 800acd0 <__ieee754_rem_pio2+0x300>)
 800aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa62:	4606      	mov	r6, r0
 800aa64:	460f      	mov	r7, r1
 800aa66:	f7f5 fc2f 	bl	80002c8 <__aeabi_dsub>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	4680      	mov	r8, r0
 800aa70:	4689      	mov	r9, r1
 800aa72:	4630      	mov	r0, r6
 800aa74:	4639      	mov	r1, r7
 800aa76:	f7f5 fc27 	bl	80002c8 <__aeabi_dsub>
 800aa7a:	a395      	add	r3, pc, #596	@ (adr r3, 800acd0 <__ieee754_rem_pio2+0x300>)
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	e7dc      	b.n	800aa3c <__ieee754_rem_pio2+0x6c>
 800aa82:	f7f5 fc23 	bl	80002cc <__adddf3>
 800aa86:	45a8      	cmp	r8, r5
 800aa88:	4606      	mov	r6, r0
 800aa8a:	460f      	mov	r7, r1
 800aa8c:	d018      	beq.n	800aac0 <__ieee754_rem_pio2+0xf0>
 800aa8e:	a38c      	add	r3, pc, #560	@ (adr r3, 800acc0 <__ieee754_rem_pio2+0x2f0>)
 800aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa94:	f7f5 fc1a 	bl	80002cc <__adddf3>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	4680      	mov	r8, r0
 800aa9e:	4689      	mov	r9, r1
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	4639      	mov	r1, r7
 800aaa4:	f7f5 fc10 	bl	80002c8 <__aeabi_dsub>
 800aaa8:	a385      	add	r3, pc, #532	@ (adr r3, 800acc0 <__ieee754_rem_pio2+0x2f0>)
 800aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaae:	f7f5 fc0d 	bl	80002cc <__adddf3>
 800aab2:	f04f 35ff 	mov.w	r5, #4294967295
 800aab6:	e9c4 8900 	strd	r8, r9, [r4]
 800aaba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aabe:	e7c4      	b.n	800aa4a <__ieee754_rem_pio2+0x7a>
 800aac0:	a381      	add	r3, pc, #516	@ (adr r3, 800acc8 <__ieee754_rem_pio2+0x2f8>)
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	f7f5 fc01 	bl	80002cc <__adddf3>
 800aaca:	a381      	add	r3, pc, #516	@ (adr r3, 800acd0 <__ieee754_rem_pio2+0x300>)
 800aacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad0:	4606      	mov	r6, r0
 800aad2:	460f      	mov	r7, r1
 800aad4:	f7f5 fbfa 	bl	80002cc <__adddf3>
 800aad8:	4602      	mov	r2, r0
 800aada:	460b      	mov	r3, r1
 800aadc:	4680      	mov	r8, r0
 800aade:	4689      	mov	r9, r1
 800aae0:	4630      	mov	r0, r6
 800aae2:	4639      	mov	r1, r7
 800aae4:	f7f5 fbf0 	bl	80002c8 <__aeabi_dsub>
 800aae8:	a379      	add	r3, pc, #484	@ (adr r3, 800acd0 <__ieee754_rem_pio2+0x300>)
 800aaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaee:	e7de      	b.n	800aaae <__ieee754_rem_pio2+0xde>
 800aaf0:	4b82      	ldr	r3, [pc, #520]	@ (800acfc <__ieee754_rem_pio2+0x32c>)
 800aaf2:	4598      	cmp	r8, r3
 800aaf4:	f200 80d1 	bhi.w	800ac9a <__ieee754_rem_pio2+0x2ca>
 800aaf8:	f000 fafe 	bl	800b0f8 <fabs>
 800aafc:	ec57 6b10 	vmov	r6, r7, d0
 800ab00:	a375      	add	r3, pc, #468	@ (adr r3, 800acd8 <__ieee754_rem_pio2+0x308>)
 800ab02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab06:	4630      	mov	r0, r6
 800ab08:	4639      	mov	r1, r7
 800ab0a:	f7f5 fd95 	bl	8000638 <__aeabi_dmul>
 800ab0e:	4b7c      	ldr	r3, [pc, #496]	@ (800ad00 <__ieee754_rem_pio2+0x330>)
 800ab10:	2200      	movs	r2, #0
 800ab12:	f7f5 fbdb 	bl	80002cc <__adddf3>
 800ab16:	f7f6 f83f 	bl	8000b98 <__aeabi_d2iz>
 800ab1a:	4605      	mov	r5, r0
 800ab1c:	f7f5 fd22 	bl	8000564 <__aeabi_i2d>
 800ab20:	4602      	mov	r2, r0
 800ab22:	460b      	mov	r3, r1
 800ab24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab28:	a363      	add	r3, pc, #396	@ (adr r3, 800acb8 <__ieee754_rem_pio2+0x2e8>)
 800ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2e:	f7f5 fd83 	bl	8000638 <__aeabi_dmul>
 800ab32:	4602      	mov	r2, r0
 800ab34:	460b      	mov	r3, r1
 800ab36:	4630      	mov	r0, r6
 800ab38:	4639      	mov	r1, r7
 800ab3a:	f7f5 fbc5 	bl	80002c8 <__aeabi_dsub>
 800ab3e:	a360      	add	r3, pc, #384	@ (adr r3, 800acc0 <__ieee754_rem_pio2+0x2f0>)
 800ab40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab44:	4682      	mov	sl, r0
 800ab46:	468b      	mov	fp, r1
 800ab48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab4c:	f7f5 fd74 	bl	8000638 <__aeabi_dmul>
 800ab50:	2d1f      	cmp	r5, #31
 800ab52:	4606      	mov	r6, r0
 800ab54:	460f      	mov	r7, r1
 800ab56:	dc0c      	bgt.n	800ab72 <__ieee754_rem_pio2+0x1a2>
 800ab58:	4b6a      	ldr	r3, [pc, #424]	@ (800ad04 <__ieee754_rem_pio2+0x334>)
 800ab5a:	1e6a      	subs	r2, r5, #1
 800ab5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab60:	4543      	cmp	r3, r8
 800ab62:	d006      	beq.n	800ab72 <__ieee754_rem_pio2+0x1a2>
 800ab64:	4632      	mov	r2, r6
 800ab66:	463b      	mov	r3, r7
 800ab68:	4650      	mov	r0, sl
 800ab6a:	4659      	mov	r1, fp
 800ab6c:	f7f5 fbac 	bl	80002c8 <__aeabi_dsub>
 800ab70:	e00e      	b.n	800ab90 <__ieee754_rem_pio2+0x1c0>
 800ab72:	463b      	mov	r3, r7
 800ab74:	4632      	mov	r2, r6
 800ab76:	4650      	mov	r0, sl
 800ab78:	4659      	mov	r1, fp
 800ab7a:	f7f5 fba5 	bl	80002c8 <__aeabi_dsub>
 800ab7e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ab82:	9305      	str	r3, [sp, #20]
 800ab84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab88:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ab8c:	2b10      	cmp	r3, #16
 800ab8e:	dc02      	bgt.n	800ab96 <__ieee754_rem_pio2+0x1c6>
 800ab90:	e9c4 0100 	strd	r0, r1, [r4]
 800ab94:	e039      	b.n	800ac0a <__ieee754_rem_pio2+0x23a>
 800ab96:	a34c      	add	r3, pc, #304	@ (adr r3, 800acc8 <__ieee754_rem_pio2+0x2f8>)
 800ab98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aba0:	f7f5 fd4a 	bl	8000638 <__aeabi_dmul>
 800aba4:	4606      	mov	r6, r0
 800aba6:	460f      	mov	r7, r1
 800aba8:	4602      	mov	r2, r0
 800abaa:	460b      	mov	r3, r1
 800abac:	4650      	mov	r0, sl
 800abae:	4659      	mov	r1, fp
 800abb0:	f7f5 fb8a 	bl	80002c8 <__aeabi_dsub>
 800abb4:	4602      	mov	r2, r0
 800abb6:	460b      	mov	r3, r1
 800abb8:	4680      	mov	r8, r0
 800abba:	4689      	mov	r9, r1
 800abbc:	4650      	mov	r0, sl
 800abbe:	4659      	mov	r1, fp
 800abc0:	f7f5 fb82 	bl	80002c8 <__aeabi_dsub>
 800abc4:	4632      	mov	r2, r6
 800abc6:	463b      	mov	r3, r7
 800abc8:	f7f5 fb7e 	bl	80002c8 <__aeabi_dsub>
 800abcc:	a340      	add	r3, pc, #256	@ (adr r3, 800acd0 <__ieee754_rem_pio2+0x300>)
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	4606      	mov	r6, r0
 800abd4:	460f      	mov	r7, r1
 800abd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abda:	f7f5 fd2d 	bl	8000638 <__aeabi_dmul>
 800abde:	4632      	mov	r2, r6
 800abe0:	463b      	mov	r3, r7
 800abe2:	f7f5 fb71 	bl	80002c8 <__aeabi_dsub>
 800abe6:	4602      	mov	r2, r0
 800abe8:	460b      	mov	r3, r1
 800abea:	4606      	mov	r6, r0
 800abec:	460f      	mov	r7, r1
 800abee:	4640      	mov	r0, r8
 800abf0:	4649      	mov	r1, r9
 800abf2:	f7f5 fb69 	bl	80002c8 <__aeabi_dsub>
 800abf6:	9a05      	ldr	r2, [sp, #20]
 800abf8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800abfc:	1ad3      	subs	r3, r2, r3
 800abfe:	2b31      	cmp	r3, #49	@ 0x31
 800ac00:	dc20      	bgt.n	800ac44 <__ieee754_rem_pio2+0x274>
 800ac02:	e9c4 0100 	strd	r0, r1, [r4]
 800ac06:	46c2      	mov	sl, r8
 800ac08:	46cb      	mov	fp, r9
 800ac0a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ac0e:	4650      	mov	r0, sl
 800ac10:	4642      	mov	r2, r8
 800ac12:	464b      	mov	r3, r9
 800ac14:	4659      	mov	r1, fp
 800ac16:	f7f5 fb57 	bl	80002c8 <__aeabi_dsub>
 800ac1a:	463b      	mov	r3, r7
 800ac1c:	4632      	mov	r2, r6
 800ac1e:	f7f5 fb53 	bl	80002c8 <__aeabi_dsub>
 800ac22:	9b04      	ldr	r3, [sp, #16]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac2a:	f6bf af0e 	bge.w	800aa4a <__ieee754_rem_pio2+0x7a>
 800ac2e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ac32:	6063      	str	r3, [r4, #4]
 800ac34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac38:	f8c4 8000 	str.w	r8, [r4]
 800ac3c:	60a0      	str	r0, [r4, #8]
 800ac3e:	60e3      	str	r3, [r4, #12]
 800ac40:	426d      	negs	r5, r5
 800ac42:	e702      	b.n	800aa4a <__ieee754_rem_pio2+0x7a>
 800ac44:	a326      	add	r3, pc, #152	@ (adr r3, 800ace0 <__ieee754_rem_pio2+0x310>)
 800ac46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac4e:	f7f5 fcf3 	bl	8000638 <__aeabi_dmul>
 800ac52:	4606      	mov	r6, r0
 800ac54:	460f      	mov	r7, r1
 800ac56:	4602      	mov	r2, r0
 800ac58:	460b      	mov	r3, r1
 800ac5a:	4640      	mov	r0, r8
 800ac5c:	4649      	mov	r1, r9
 800ac5e:	f7f5 fb33 	bl	80002c8 <__aeabi_dsub>
 800ac62:	4602      	mov	r2, r0
 800ac64:	460b      	mov	r3, r1
 800ac66:	4682      	mov	sl, r0
 800ac68:	468b      	mov	fp, r1
 800ac6a:	4640      	mov	r0, r8
 800ac6c:	4649      	mov	r1, r9
 800ac6e:	f7f5 fb2b 	bl	80002c8 <__aeabi_dsub>
 800ac72:	4632      	mov	r2, r6
 800ac74:	463b      	mov	r3, r7
 800ac76:	f7f5 fb27 	bl	80002c8 <__aeabi_dsub>
 800ac7a:	a31b      	add	r3, pc, #108	@ (adr r3, 800ace8 <__ieee754_rem_pio2+0x318>)
 800ac7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac80:	4606      	mov	r6, r0
 800ac82:	460f      	mov	r7, r1
 800ac84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac88:	f7f5 fcd6 	bl	8000638 <__aeabi_dmul>
 800ac8c:	4632      	mov	r2, r6
 800ac8e:	463b      	mov	r3, r7
 800ac90:	f7f5 fb1a 	bl	80002c8 <__aeabi_dsub>
 800ac94:	4606      	mov	r6, r0
 800ac96:	460f      	mov	r7, r1
 800ac98:	e764      	b.n	800ab64 <__ieee754_rem_pio2+0x194>
 800ac9a:	4b1b      	ldr	r3, [pc, #108]	@ (800ad08 <__ieee754_rem_pio2+0x338>)
 800ac9c:	4598      	cmp	r8, r3
 800ac9e:	d935      	bls.n	800ad0c <__ieee754_rem_pio2+0x33c>
 800aca0:	4632      	mov	r2, r6
 800aca2:	463b      	mov	r3, r7
 800aca4:	4630      	mov	r0, r6
 800aca6:	4639      	mov	r1, r7
 800aca8:	f7f5 fb0e 	bl	80002c8 <__aeabi_dsub>
 800acac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800acb0:	e9c4 0100 	strd	r0, r1, [r4]
 800acb4:	e69e      	b.n	800a9f4 <__ieee754_rem_pio2+0x24>
 800acb6:	bf00      	nop
 800acb8:	54400000 	.word	0x54400000
 800acbc:	3ff921fb 	.word	0x3ff921fb
 800acc0:	1a626331 	.word	0x1a626331
 800acc4:	3dd0b461 	.word	0x3dd0b461
 800acc8:	1a600000 	.word	0x1a600000
 800accc:	3dd0b461 	.word	0x3dd0b461
 800acd0:	2e037073 	.word	0x2e037073
 800acd4:	3ba3198a 	.word	0x3ba3198a
 800acd8:	6dc9c883 	.word	0x6dc9c883
 800acdc:	3fe45f30 	.word	0x3fe45f30
 800ace0:	2e000000 	.word	0x2e000000
 800ace4:	3ba3198a 	.word	0x3ba3198a
 800ace8:	252049c1 	.word	0x252049c1
 800acec:	397b839a 	.word	0x397b839a
 800acf0:	3fe921fb 	.word	0x3fe921fb
 800acf4:	4002d97b 	.word	0x4002d97b
 800acf8:	3ff921fb 	.word	0x3ff921fb
 800acfc:	413921fb 	.word	0x413921fb
 800ad00:	3fe00000 	.word	0x3fe00000
 800ad04:	0800ce08 	.word	0x0800ce08
 800ad08:	7fefffff 	.word	0x7fefffff
 800ad0c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ad10:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ad14:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ad18:	4630      	mov	r0, r6
 800ad1a:	460f      	mov	r7, r1
 800ad1c:	f7f5 ff3c 	bl	8000b98 <__aeabi_d2iz>
 800ad20:	f7f5 fc20 	bl	8000564 <__aeabi_i2d>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	4630      	mov	r0, r6
 800ad2a:	4639      	mov	r1, r7
 800ad2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad30:	f7f5 faca 	bl	80002c8 <__aeabi_dsub>
 800ad34:	4b22      	ldr	r3, [pc, #136]	@ (800adc0 <__ieee754_rem_pio2+0x3f0>)
 800ad36:	2200      	movs	r2, #0
 800ad38:	f7f5 fc7e 	bl	8000638 <__aeabi_dmul>
 800ad3c:	460f      	mov	r7, r1
 800ad3e:	4606      	mov	r6, r0
 800ad40:	f7f5 ff2a 	bl	8000b98 <__aeabi_d2iz>
 800ad44:	f7f5 fc0e 	bl	8000564 <__aeabi_i2d>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	4630      	mov	r0, r6
 800ad4e:	4639      	mov	r1, r7
 800ad50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ad54:	f7f5 fab8 	bl	80002c8 <__aeabi_dsub>
 800ad58:	4b19      	ldr	r3, [pc, #100]	@ (800adc0 <__ieee754_rem_pio2+0x3f0>)
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f7f5 fc6c 	bl	8000638 <__aeabi_dmul>
 800ad60:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ad64:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ad68:	f04f 0803 	mov.w	r8, #3
 800ad6c:	2600      	movs	r6, #0
 800ad6e:	2700      	movs	r7, #0
 800ad70:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ad74:	4632      	mov	r2, r6
 800ad76:	463b      	mov	r3, r7
 800ad78:	46c2      	mov	sl, r8
 800ad7a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad7e:	f7f5 fec3 	bl	8000b08 <__aeabi_dcmpeq>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d1f4      	bne.n	800ad70 <__ieee754_rem_pio2+0x3a0>
 800ad86:	4b0f      	ldr	r3, [pc, #60]	@ (800adc4 <__ieee754_rem_pio2+0x3f4>)
 800ad88:	9301      	str	r3, [sp, #4]
 800ad8a:	2302      	movs	r3, #2
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	462a      	mov	r2, r5
 800ad90:	4653      	mov	r3, sl
 800ad92:	4621      	mov	r1, r4
 800ad94:	a806      	add	r0, sp, #24
 800ad96:	f000 ffa7 	bl	800bce8 <__kernel_rem_pio2>
 800ad9a:	9b04      	ldr	r3, [sp, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	4605      	mov	r5, r0
 800ada0:	f6bf ae53 	bge.w	800aa4a <__ieee754_rem_pio2+0x7a>
 800ada4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ada8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800adac:	e9c4 2300 	strd	r2, r3, [r4]
 800adb0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800adb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800adb8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800adbc:	e740      	b.n	800ac40 <__ieee754_rem_pio2+0x270>
 800adbe:	bf00      	nop
 800adc0:	41700000 	.word	0x41700000
 800adc4:	0800ce88 	.word	0x0800ce88

0800adc8 <atan>:
 800adc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adcc:	ec55 4b10 	vmov	r4, r5, d0
 800add0:	4bbf      	ldr	r3, [pc, #764]	@ (800b0d0 <atan+0x308>)
 800add2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800add6:	429e      	cmp	r6, r3
 800add8:	46ab      	mov	fp, r5
 800adda:	d918      	bls.n	800ae0e <atan+0x46>
 800addc:	4bbd      	ldr	r3, [pc, #756]	@ (800b0d4 <atan+0x30c>)
 800adde:	429e      	cmp	r6, r3
 800ade0:	d801      	bhi.n	800ade6 <atan+0x1e>
 800ade2:	d109      	bne.n	800adf8 <atan+0x30>
 800ade4:	b144      	cbz	r4, 800adf8 <atan+0x30>
 800ade6:	4622      	mov	r2, r4
 800ade8:	462b      	mov	r3, r5
 800adea:	4620      	mov	r0, r4
 800adec:	4629      	mov	r1, r5
 800adee:	f7f5 fa6d 	bl	80002cc <__adddf3>
 800adf2:	4604      	mov	r4, r0
 800adf4:	460d      	mov	r5, r1
 800adf6:	e006      	b.n	800ae06 <atan+0x3e>
 800adf8:	f1bb 0f00 	cmp.w	fp, #0
 800adfc:	f340 812b 	ble.w	800b056 <atan+0x28e>
 800ae00:	a597      	add	r5, pc, #604	@ (adr r5, 800b060 <atan+0x298>)
 800ae02:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae06:	ec45 4b10 	vmov	d0, r4, r5
 800ae0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae0e:	4bb2      	ldr	r3, [pc, #712]	@ (800b0d8 <atan+0x310>)
 800ae10:	429e      	cmp	r6, r3
 800ae12:	d813      	bhi.n	800ae3c <atan+0x74>
 800ae14:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800ae18:	429e      	cmp	r6, r3
 800ae1a:	d80c      	bhi.n	800ae36 <atan+0x6e>
 800ae1c:	a392      	add	r3, pc, #584	@ (adr r3, 800b068 <atan+0x2a0>)
 800ae1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae22:	4620      	mov	r0, r4
 800ae24:	4629      	mov	r1, r5
 800ae26:	f7f5 fa51 	bl	80002cc <__adddf3>
 800ae2a:	4bac      	ldr	r3, [pc, #688]	@ (800b0dc <atan+0x314>)
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f7f5 fe93 	bl	8000b58 <__aeabi_dcmpgt>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d1e7      	bne.n	800ae06 <atan+0x3e>
 800ae36:	f04f 3aff 	mov.w	sl, #4294967295
 800ae3a:	e029      	b.n	800ae90 <atan+0xc8>
 800ae3c:	f000 f95c 	bl	800b0f8 <fabs>
 800ae40:	4ba7      	ldr	r3, [pc, #668]	@ (800b0e0 <atan+0x318>)
 800ae42:	429e      	cmp	r6, r3
 800ae44:	ec55 4b10 	vmov	r4, r5, d0
 800ae48:	f200 80bc 	bhi.w	800afc4 <atan+0x1fc>
 800ae4c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800ae50:	429e      	cmp	r6, r3
 800ae52:	f200 809e 	bhi.w	800af92 <atan+0x1ca>
 800ae56:	4622      	mov	r2, r4
 800ae58:	462b      	mov	r3, r5
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	f7f5 fa35 	bl	80002cc <__adddf3>
 800ae62:	4b9e      	ldr	r3, [pc, #632]	@ (800b0dc <atan+0x314>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	f7f5 fa2f 	bl	80002c8 <__aeabi_dsub>
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	460f      	mov	r7, r1
 800ae70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ae74:	4620      	mov	r0, r4
 800ae76:	4629      	mov	r1, r5
 800ae78:	f7f5 fa28 	bl	80002cc <__adddf3>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	460b      	mov	r3, r1
 800ae80:	4630      	mov	r0, r6
 800ae82:	4639      	mov	r1, r7
 800ae84:	f7f5 fd02 	bl	800088c <__aeabi_ddiv>
 800ae88:	f04f 0a00 	mov.w	sl, #0
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	460d      	mov	r5, r1
 800ae90:	4622      	mov	r2, r4
 800ae92:	462b      	mov	r3, r5
 800ae94:	4620      	mov	r0, r4
 800ae96:	4629      	mov	r1, r5
 800ae98:	f7f5 fbce 	bl	8000638 <__aeabi_dmul>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	460b      	mov	r3, r1
 800aea0:	4680      	mov	r8, r0
 800aea2:	4689      	mov	r9, r1
 800aea4:	f7f5 fbc8 	bl	8000638 <__aeabi_dmul>
 800aea8:	a371      	add	r3, pc, #452	@ (adr r3, 800b070 <atan+0x2a8>)
 800aeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeae:	4606      	mov	r6, r0
 800aeb0:	460f      	mov	r7, r1
 800aeb2:	f7f5 fbc1 	bl	8000638 <__aeabi_dmul>
 800aeb6:	a370      	add	r3, pc, #448	@ (adr r3, 800b078 <atan+0x2b0>)
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	f7f5 fa06 	bl	80002cc <__adddf3>
 800aec0:	4632      	mov	r2, r6
 800aec2:	463b      	mov	r3, r7
 800aec4:	f7f5 fbb8 	bl	8000638 <__aeabi_dmul>
 800aec8:	a36d      	add	r3, pc, #436	@ (adr r3, 800b080 <atan+0x2b8>)
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	f7f5 f9fd 	bl	80002cc <__adddf3>
 800aed2:	4632      	mov	r2, r6
 800aed4:	463b      	mov	r3, r7
 800aed6:	f7f5 fbaf 	bl	8000638 <__aeabi_dmul>
 800aeda:	a36b      	add	r3, pc, #428	@ (adr r3, 800b088 <atan+0x2c0>)
 800aedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee0:	f7f5 f9f4 	bl	80002cc <__adddf3>
 800aee4:	4632      	mov	r2, r6
 800aee6:	463b      	mov	r3, r7
 800aee8:	f7f5 fba6 	bl	8000638 <__aeabi_dmul>
 800aeec:	a368      	add	r3, pc, #416	@ (adr r3, 800b090 <atan+0x2c8>)
 800aeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef2:	f7f5 f9eb 	bl	80002cc <__adddf3>
 800aef6:	4632      	mov	r2, r6
 800aef8:	463b      	mov	r3, r7
 800aefa:	f7f5 fb9d 	bl	8000638 <__aeabi_dmul>
 800aefe:	a366      	add	r3, pc, #408	@ (adr r3, 800b098 <atan+0x2d0>)
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	f7f5 f9e2 	bl	80002cc <__adddf3>
 800af08:	4642      	mov	r2, r8
 800af0a:	464b      	mov	r3, r9
 800af0c:	f7f5 fb94 	bl	8000638 <__aeabi_dmul>
 800af10:	a363      	add	r3, pc, #396	@ (adr r3, 800b0a0 <atan+0x2d8>)
 800af12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af16:	4680      	mov	r8, r0
 800af18:	4689      	mov	r9, r1
 800af1a:	4630      	mov	r0, r6
 800af1c:	4639      	mov	r1, r7
 800af1e:	f7f5 fb8b 	bl	8000638 <__aeabi_dmul>
 800af22:	a361      	add	r3, pc, #388	@ (adr r3, 800b0a8 <atan+0x2e0>)
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	f7f5 f9ce 	bl	80002c8 <__aeabi_dsub>
 800af2c:	4632      	mov	r2, r6
 800af2e:	463b      	mov	r3, r7
 800af30:	f7f5 fb82 	bl	8000638 <__aeabi_dmul>
 800af34:	a35e      	add	r3, pc, #376	@ (adr r3, 800b0b0 <atan+0x2e8>)
 800af36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3a:	f7f5 f9c5 	bl	80002c8 <__aeabi_dsub>
 800af3e:	4632      	mov	r2, r6
 800af40:	463b      	mov	r3, r7
 800af42:	f7f5 fb79 	bl	8000638 <__aeabi_dmul>
 800af46:	a35c      	add	r3, pc, #368	@ (adr r3, 800b0b8 <atan+0x2f0>)
 800af48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4c:	f7f5 f9bc 	bl	80002c8 <__aeabi_dsub>
 800af50:	4632      	mov	r2, r6
 800af52:	463b      	mov	r3, r7
 800af54:	f7f5 fb70 	bl	8000638 <__aeabi_dmul>
 800af58:	a359      	add	r3, pc, #356	@ (adr r3, 800b0c0 <atan+0x2f8>)
 800af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5e:	f7f5 f9b3 	bl	80002c8 <__aeabi_dsub>
 800af62:	4632      	mov	r2, r6
 800af64:	463b      	mov	r3, r7
 800af66:	f7f5 fb67 	bl	8000638 <__aeabi_dmul>
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
 800af6e:	4640      	mov	r0, r8
 800af70:	4649      	mov	r1, r9
 800af72:	f7f5 f9ab 	bl	80002cc <__adddf3>
 800af76:	4622      	mov	r2, r4
 800af78:	462b      	mov	r3, r5
 800af7a:	f7f5 fb5d 	bl	8000638 <__aeabi_dmul>
 800af7e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	d148      	bne.n	800b01a <atan+0x252>
 800af88:	4620      	mov	r0, r4
 800af8a:	4629      	mov	r1, r5
 800af8c:	f7f5 f99c 	bl	80002c8 <__aeabi_dsub>
 800af90:	e72f      	b.n	800adf2 <atan+0x2a>
 800af92:	4b52      	ldr	r3, [pc, #328]	@ (800b0dc <atan+0x314>)
 800af94:	2200      	movs	r2, #0
 800af96:	4620      	mov	r0, r4
 800af98:	4629      	mov	r1, r5
 800af9a:	f7f5 f995 	bl	80002c8 <__aeabi_dsub>
 800af9e:	4b4f      	ldr	r3, [pc, #316]	@ (800b0dc <atan+0x314>)
 800afa0:	4606      	mov	r6, r0
 800afa2:	460f      	mov	r7, r1
 800afa4:	2200      	movs	r2, #0
 800afa6:	4620      	mov	r0, r4
 800afa8:	4629      	mov	r1, r5
 800afaa:	f7f5 f98f 	bl	80002cc <__adddf3>
 800afae:	4602      	mov	r2, r0
 800afb0:	460b      	mov	r3, r1
 800afb2:	4630      	mov	r0, r6
 800afb4:	4639      	mov	r1, r7
 800afb6:	f7f5 fc69 	bl	800088c <__aeabi_ddiv>
 800afba:	f04f 0a01 	mov.w	sl, #1
 800afbe:	4604      	mov	r4, r0
 800afc0:	460d      	mov	r5, r1
 800afc2:	e765      	b.n	800ae90 <atan+0xc8>
 800afc4:	4b47      	ldr	r3, [pc, #284]	@ (800b0e4 <atan+0x31c>)
 800afc6:	429e      	cmp	r6, r3
 800afc8:	d21c      	bcs.n	800b004 <atan+0x23c>
 800afca:	4b47      	ldr	r3, [pc, #284]	@ (800b0e8 <atan+0x320>)
 800afcc:	2200      	movs	r2, #0
 800afce:	4620      	mov	r0, r4
 800afd0:	4629      	mov	r1, r5
 800afd2:	f7f5 f979 	bl	80002c8 <__aeabi_dsub>
 800afd6:	4b44      	ldr	r3, [pc, #272]	@ (800b0e8 <atan+0x320>)
 800afd8:	4606      	mov	r6, r0
 800afda:	460f      	mov	r7, r1
 800afdc:	2200      	movs	r2, #0
 800afde:	4620      	mov	r0, r4
 800afe0:	4629      	mov	r1, r5
 800afe2:	f7f5 fb29 	bl	8000638 <__aeabi_dmul>
 800afe6:	4b3d      	ldr	r3, [pc, #244]	@ (800b0dc <atan+0x314>)
 800afe8:	2200      	movs	r2, #0
 800afea:	f7f5 f96f 	bl	80002cc <__adddf3>
 800afee:	4602      	mov	r2, r0
 800aff0:	460b      	mov	r3, r1
 800aff2:	4630      	mov	r0, r6
 800aff4:	4639      	mov	r1, r7
 800aff6:	f7f5 fc49 	bl	800088c <__aeabi_ddiv>
 800affa:	f04f 0a02 	mov.w	sl, #2
 800affe:	4604      	mov	r4, r0
 800b000:	460d      	mov	r5, r1
 800b002:	e745      	b.n	800ae90 <atan+0xc8>
 800b004:	4622      	mov	r2, r4
 800b006:	462b      	mov	r3, r5
 800b008:	4938      	ldr	r1, [pc, #224]	@ (800b0ec <atan+0x324>)
 800b00a:	2000      	movs	r0, #0
 800b00c:	f7f5 fc3e 	bl	800088c <__aeabi_ddiv>
 800b010:	f04f 0a03 	mov.w	sl, #3
 800b014:	4604      	mov	r4, r0
 800b016:	460d      	mov	r5, r1
 800b018:	e73a      	b.n	800ae90 <atan+0xc8>
 800b01a:	4b35      	ldr	r3, [pc, #212]	@ (800b0f0 <atan+0x328>)
 800b01c:	4e35      	ldr	r6, [pc, #212]	@ (800b0f4 <atan+0x32c>)
 800b01e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b026:	f7f5 f94f 	bl	80002c8 <__aeabi_dsub>
 800b02a:	4622      	mov	r2, r4
 800b02c:	462b      	mov	r3, r5
 800b02e:	f7f5 f94b 	bl	80002c8 <__aeabi_dsub>
 800b032:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b036:	4602      	mov	r2, r0
 800b038:	460b      	mov	r3, r1
 800b03a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b03e:	f7f5 f943 	bl	80002c8 <__aeabi_dsub>
 800b042:	f1bb 0f00 	cmp.w	fp, #0
 800b046:	4604      	mov	r4, r0
 800b048:	460d      	mov	r5, r1
 800b04a:	f6bf aedc 	bge.w	800ae06 <atan+0x3e>
 800b04e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b052:	461d      	mov	r5, r3
 800b054:	e6d7      	b.n	800ae06 <atan+0x3e>
 800b056:	a51c      	add	r5, pc, #112	@ (adr r5, 800b0c8 <atan+0x300>)
 800b058:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b05c:	e6d3      	b.n	800ae06 <atan+0x3e>
 800b05e:	bf00      	nop
 800b060:	54442d18 	.word	0x54442d18
 800b064:	3ff921fb 	.word	0x3ff921fb
 800b068:	8800759c 	.word	0x8800759c
 800b06c:	7e37e43c 	.word	0x7e37e43c
 800b070:	e322da11 	.word	0xe322da11
 800b074:	3f90ad3a 	.word	0x3f90ad3a
 800b078:	24760deb 	.word	0x24760deb
 800b07c:	3fa97b4b 	.word	0x3fa97b4b
 800b080:	a0d03d51 	.word	0xa0d03d51
 800b084:	3fb10d66 	.word	0x3fb10d66
 800b088:	c54c206e 	.word	0xc54c206e
 800b08c:	3fb745cd 	.word	0x3fb745cd
 800b090:	920083ff 	.word	0x920083ff
 800b094:	3fc24924 	.word	0x3fc24924
 800b098:	5555550d 	.word	0x5555550d
 800b09c:	3fd55555 	.word	0x3fd55555
 800b0a0:	2c6a6c2f 	.word	0x2c6a6c2f
 800b0a4:	bfa2b444 	.word	0xbfa2b444
 800b0a8:	52defd9a 	.word	0x52defd9a
 800b0ac:	3fadde2d 	.word	0x3fadde2d
 800b0b0:	af749a6d 	.word	0xaf749a6d
 800b0b4:	3fb3b0f2 	.word	0x3fb3b0f2
 800b0b8:	fe231671 	.word	0xfe231671
 800b0bc:	3fbc71c6 	.word	0x3fbc71c6
 800b0c0:	9998ebc4 	.word	0x9998ebc4
 800b0c4:	3fc99999 	.word	0x3fc99999
 800b0c8:	54442d18 	.word	0x54442d18
 800b0cc:	bff921fb 	.word	0xbff921fb
 800b0d0:	440fffff 	.word	0x440fffff
 800b0d4:	7ff00000 	.word	0x7ff00000
 800b0d8:	3fdbffff 	.word	0x3fdbffff
 800b0dc:	3ff00000 	.word	0x3ff00000
 800b0e0:	3ff2ffff 	.word	0x3ff2ffff
 800b0e4:	40038000 	.word	0x40038000
 800b0e8:	3ff80000 	.word	0x3ff80000
 800b0ec:	bff00000 	.word	0xbff00000
 800b0f0:	0800cf90 	.word	0x0800cf90
 800b0f4:	0800cfb0 	.word	0x0800cfb0

0800b0f8 <fabs>:
 800b0f8:	ec51 0b10 	vmov	r0, r1, d0
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b102:	ec43 2b10 	vmov	d0, r2, r3
 800b106:	4770      	bx	lr

0800b108 <__kernel_cosf>:
 800b108:	ee10 3a10 	vmov	r3, s0
 800b10c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b110:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b114:	eef0 6a40 	vmov.f32	s13, s0
 800b118:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b11c:	d204      	bcs.n	800b128 <__kernel_cosf+0x20>
 800b11e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b122:	ee17 2a90 	vmov	r2, s15
 800b126:	b342      	cbz	r2, 800b17a <__kernel_cosf+0x72>
 800b128:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b12c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b198 <__kernel_cosf+0x90>
 800b130:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b19c <__kernel_cosf+0x94>
 800b134:	4a1a      	ldr	r2, [pc, #104]	@ (800b1a0 <__kernel_cosf+0x98>)
 800b136:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b13a:	4293      	cmp	r3, r2
 800b13c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b1a4 <__kernel_cosf+0x9c>
 800b140:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b144:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b1a8 <__kernel_cosf+0xa0>
 800b148:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b14c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b1ac <__kernel_cosf+0xa4>
 800b150:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b154:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b1b0 <__kernel_cosf+0xa8>
 800b158:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b15c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b160:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b164:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b168:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b16c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b170:	d804      	bhi.n	800b17c <__kernel_cosf+0x74>
 800b172:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b176:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b17a:	4770      	bx	lr
 800b17c:	4a0d      	ldr	r2, [pc, #52]	@ (800b1b4 <__kernel_cosf+0xac>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	bf9a      	itte	ls
 800b182:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b186:	ee07 3a10 	vmovls	s14, r3
 800b18a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b18e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b192:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b196:	e7ec      	b.n	800b172 <__kernel_cosf+0x6a>
 800b198:	ad47d74e 	.word	0xad47d74e
 800b19c:	310f74f6 	.word	0x310f74f6
 800b1a0:	3e999999 	.word	0x3e999999
 800b1a4:	b493f27c 	.word	0xb493f27c
 800b1a8:	37d00d01 	.word	0x37d00d01
 800b1ac:	bab60b61 	.word	0xbab60b61
 800b1b0:	3d2aaaab 	.word	0x3d2aaaab
 800b1b4:	3f480000 	.word	0x3f480000

0800b1b8 <__kernel_sinf>:
 800b1b8:	ee10 3a10 	vmov	r3, s0
 800b1bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1c0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b1c4:	d204      	bcs.n	800b1d0 <__kernel_sinf+0x18>
 800b1c6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b1ca:	ee17 3a90 	vmov	r3, s15
 800b1ce:	b35b      	cbz	r3, 800b228 <__kernel_sinf+0x70>
 800b1d0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b1d4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b22c <__kernel_sinf+0x74>
 800b1d8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b230 <__kernel_sinf+0x78>
 800b1dc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b1e0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b234 <__kernel_sinf+0x7c>
 800b1e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b1e8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b238 <__kernel_sinf+0x80>
 800b1ec:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b1f0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b23c <__kernel_sinf+0x84>
 800b1f4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b1f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b1fc:	b930      	cbnz	r0, 800b20c <__kernel_sinf+0x54>
 800b1fe:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b240 <__kernel_sinf+0x88>
 800b202:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b206:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b20a:	4770      	bx	lr
 800b20c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b210:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b214:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b218:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b21c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b244 <__kernel_sinf+0x8c>
 800b220:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b224:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop
 800b22c:	2f2ec9d3 	.word	0x2f2ec9d3
 800b230:	b2d72f34 	.word	0xb2d72f34
 800b234:	3638ef1b 	.word	0x3638ef1b
 800b238:	b9500d01 	.word	0xb9500d01
 800b23c:	3c088889 	.word	0x3c088889
 800b240:	be2aaaab 	.word	0xbe2aaaab
 800b244:	3e2aaaab 	.word	0x3e2aaaab

0800b248 <__ieee754_powf>:
 800b248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b24c:	ee10 4a90 	vmov	r4, s1
 800b250:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800b254:	ed2d 8b02 	vpush	{d8}
 800b258:	ee10 6a10 	vmov	r6, s0
 800b25c:	eeb0 8a40 	vmov.f32	s16, s0
 800b260:	eef0 8a60 	vmov.f32	s17, s1
 800b264:	d10c      	bne.n	800b280 <__ieee754_powf+0x38>
 800b266:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800b26a:	0076      	lsls	r6, r6, #1
 800b26c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800b270:	f240 8274 	bls.w	800b75c <__ieee754_powf+0x514>
 800b274:	ee38 0a28 	vadd.f32	s0, s16, s17
 800b278:	ecbd 8b02 	vpop	{d8}
 800b27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b280:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800b284:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800b288:	d802      	bhi.n	800b290 <__ieee754_powf+0x48>
 800b28a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800b28e:	d908      	bls.n	800b2a2 <__ieee754_powf+0x5a>
 800b290:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800b294:	d1ee      	bne.n	800b274 <__ieee754_powf+0x2c>
 800b296:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800b29a:	0064      	lsls	r4, r4, #1
 800b29c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800b2a0:	e7e6      	b.n	800b270 <__ieee754_powf+0x28>
 800b2a2:	2e00      	cmp	r6, #0
 800b2a4:	da1f      	bge.n	800b2e6 <__ieee754_powf+0x9e>
 800b2a6:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800b2aa:	f080 8260 	bcs.w	800b76e <__ieee754_powf+0x526>
 800b2ae:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800b2b2:	d32f      	bcc.n	800b314 <__ieee754_powf+0xcc>
 800b2b4:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800b2b8:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800b2bc:	fa49 f503 	asr.w	r5, r9, r3
 800b2c0:	fa05 f303 	lsl.w	r3, r5, r3
 800b2c4:	454b      	cmp	r3, r9
 800b2c6:	d123      	bne.n	800b310 <__ieee754_powf+0xc8>
 800b2c8:	f005 0501 	and.w	r5, r5, #1
 800b2cc:	f1c5 0502 	rsb	r5, r5, #2
 800b2d0:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800b2d4:	d11f      	bne.n	800b316 <__ieee754_powf+0xce>
 800b2d6:	2c00      	cmp	r4, #0
 800b2d8:	f280 8246 	bge.w	800b768 <__ieee754_powf+0x520>
 800b2dc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b2e0:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800b2e4:	e7c8      	b.n	800b278 <__ieee754_powf+0x30>
 800b2e6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800b2ea:	d111      	bne.n	800b310 <__ieee754_powf+0xc8>
 800b2ec:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800b2f0:	f000 8234 	beq.w	800b75c <__ieee754_powf+0x514>
 800b2f4:	d906      	bls.n	800b304 <__ieee754_powf+0xbc>
 800b2f6:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800b60c <__ieee754_powf+0x3c4>
 800b2fa:	2c00      	cmp	r4, #0
 800b2fc:	bfa8      	it	ge
 800b2fe:	eeb0 0a68 	vmovge.f32	s0, s17
 800b302:	e7b9      	b.n	800b278 <__ieee754_powf+0x30>
 800b304:	2c00      	cmp	r4, #0
 800b306:	f280 822c 	bge.w	800b762 <__ieee754_powf+0x51a>
 800b30a:	eeb1 0a68 	vneg.f32	s0, s17
 800b30e:	e7b3      	b.n	800b278 <__ieee754_powf+0x30>
 800b310:	2500      	movs	r5, #0
 800b312:	e7dd      	b.n	800b2d0 <__ieee754_powf+0x88>
 800b314:	2500      	movs	r5, #0
 800b316:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800b31a:	d102      	bne.n	800b322 <__ieee754_powf+0xda>
 800b31c:	ee28 0a08 	vmul.f32	s0, s16, s16
 800b320:	e7aa      	b.n	800b278 <__ieee754_powf+0x30>
 800b322:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800b326:	f040 8227 	bne.w	800b778 <__ieee754_powf+0x530>
 800b32a:	2e00      	cmp	r6, #0
 800b32c:	f2c0 8224 	blt.w	800b778 <__ieee754_powf+0x530>
 800b330:	eeb0 0a48 	vmov.f32	s0, s16
 800b334:	ecbd 8b02 	vpop	{d8}
 800b338:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b33c:	f000 bcd0 	b.w	800bce0 <__ieee754_sqrtf>
 800b340:	2d01      	cmp	r5, #1
 800b342:	d199      	bne.n	800b278 <__ieee754_powf+0x30>
 800b344:	eeb1 0a40 	vneg.f32	s0, s0
 800b348:	e796      	b.n	800b278 <__ieee754_powf+0x30>
 800b34a:	0ff0      	lsrs	r0, r6, #31
 800b34c:	3801      	subs	r0, #1
 800b34e:	ea55 0300 	orrs.w	r3, r5, r0
 800b352:	d104      	bne.n	800b35e <__ieee754_powf+0x116>
 800b354:	ee38 8a48 	vsub.f32	s16, s16, s16
 800b358:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800b35c:	e78c      	b.n	800b278 <__ieee754_powf+0x30>
 800b35e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800b362:	d96d      	bls.n	800b440 <__ieee754_powf+0x1f8>
 800b364:	4baa      	ldr	r3, [pc, #680]	@ (800b610 <__ieee754_powf+0x3c8>)
 800b366:	4598      	cmp	r8, r3
 800b368:	d808      	bhi.n	800b37c <__ieee754_powf+0x134>
 800b36a:	2c00      	cmp	r4, #0
 800b36c:	da0b      	bge.n	800b386 <__ieee754_powf+0x13e>
 800b36e:	2000      	movs	r0, #0
 800b370:	ecbd 8b02 	vpop	{d8}
 800b374:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b378:	f000 bcac 	b.w	800bcd4 <__math_oflowf>
 800b37c:	4ba5      	ldr	r3, [pc, #660]	@ (800b614 <__ieee754_powf+0x3cc>)
 800b37e:	4598      	cmp	r8, r3
 800b380:	d908      	bls.n	800b394 <__ieee754_powf+0x14c>
 800b382:	2c00      	cmp	r4, #0
 800b384:	dcf3      	bgt.n	800b36e <__ieee754_powf+0x126>
 800b386:	2000      	movs	r0, #0
 800b388:	ecbd 8b02 	vpop	{d8}
 800b38c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b390:	f000 bc9a 	b.w	800bcc8 <__math_uflowf>
 800b394:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b398:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b39c:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800b618 <__ieee754_powf+0x3d0>
 800b3a0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800b3a4:	eee0 6a67 	vfms.f32	s13, s0, s15
 800b3a8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b3ac:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800b3b0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b3b4:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800b61c <__ieee754_powf+0x3d4>
 800b3b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3bc:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800b620 <__ieee754_powf+0x3d8>
 800b3c0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800b3c4:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800b624 <__ieee754_powf+0x3dc>
 800b3c8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b3cc:	eeb0 7a67 	vmov.f32	s14, s15
 800b3d0:	eea0 7a26 	vfma.f32	s14, s0, s13
 800b3d4:	ee17 3a10 	vmov	r3, s14
 800b3d8:	f36f 030b 	bfc	r3, #0, #12
 800b3dc:	ee07 3a10 	vmov	s14, r3
 800b3e0:	eeb0 6a47 	vmov.f32	s12, s14
 800b3e4:	eea0 6a66 	vfms.f32	s12, s0, s13
 800b3e8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b3ec:	3d01      	subs	r5, #1
 800b3ee:	4305      	orrs	r5, r0
 800b3f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3f4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800b3f8:	f36f 040b 	bfc	r4, #0, #12
 800b3fc:	bf18      	it	ne
 800b3fe:	eeb0 8a66 	vmovne.f32	s16, s13
 800b402:	ee06 4a90 	vmov	s13, r4
 800b406:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800b40a:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800b40e:	ee67 7a26 	vmul.f32	s15, s14, s13
 800b412:	eee6 0a07 	vfma.f32	s1, s12, s14
 800b416:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800b41a:	ee17 1a10 	vmov	r1, s14
 800b41e:	2900      	cmp	r1, #0
 800b420:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b424:	f340 80dd 	ble.w	800b5e2 <__ieee754_powf+0x39a>
 800b428:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800b42c:	f240 80ca 	bls.w	800b5c4 <__ieee754_powf+0x37c>
 800b430:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b438:	bf4c      	ite	mi
 800b43a:	2001      	movmi	r0, #1
 800b43c:	2000      	movpl	r0, #0
 800b43e:	e797      	b.n	800b370 <__ieee754_powf+0x128>
 800b440:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800b444:	bf01      	itttt	eq
 800b446:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800b628 <__ieee754_powf+0x3e0>
 800b44a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800b44e:	f06f 0317 	mvneq.w	r3, #23
 800b452:	ee17 7a90 	vmoveq	r7, s15
 800b456:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800b45a:	bf18      	it	ne
 800b45c:	2300      	movne	r3, #0
 800b45e:	3a7f      	subs	r2, #127	@ 0x7f
 800b460:	441a      	add	r2, r3
 800b462:	4b72      	ldr	r3, [pc, #456]	@ (800b62c <__ieee754_powf+0x3e4>)
 800b464:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800b468:	429f      	cmp	r7, r3
 800b46a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800b46e:	dd06      	ble.n	800b47e <__ieee754_powf+0x236>
 800b470:	4b6f      	ldr	r3, [pc, #444]	@ (800b630 <__ieee754_powf+0x3e8>)
 800b472:	429f      	cmp	r7, r3
 800b474:	f340 80a4 	ble.w	800b5c0 <__ieee754_powf+0x378>
 800b478:	3201      	adds	r2, #1
 800b47a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800b47e:	2600      	movs	r6, #0
 800b480:	4b6c      	ldr	r3, [pc, #432]	@ (800b634 <__ieee754_powf+0x3ec>)
 800b482:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800b486:	ee07 1a10 	vmov	s14, r1
 800b48a:	edd3 5a00 	vldr	s11, [r3]
 800b48e:	4b6a      	ldr	r3, [pc, #424]	@ (800b638 <__ieee754_powf+0x3f0>)
 800b490:	ee75 7a87 	vadd.f32	s15, s11, s14
 800b494:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b498:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800b49c:	1049      	asrs	r1, r1, #1
 800b49e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800b4a2:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800b4a6:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800b4aa:	ee37 6a65 	vsub.f32	s12, s14, s11
 800b4ae:	ee07 1a90 	vmov	s15, r1
 800b4b2:	ee26 5a24 	vmul.f32	s10, s12, s9
 800b4b6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800b4ba:	ee15 7a10 	vmov	r7, s10
 800b4be:	401f      	ands	r7, r3
 800b4c0:	ee06 7a90 	vmov	s13, r7
 800b4c4:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800b4c8:	ee37 7a65 	vsub.f32	s14, s14, s11
 800b4cc:	ee65 7a05 	vmul.f32	s15, s10, s10
 800b4d0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800b4d4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800b63c <__ieee754_powf+0x3f4>
 800b4d8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800b640 <__ieee754_powf+0x3f8>
 800b4dc:	eee7 5a87 	vfma.f32	s11, s15, s14
 800b4e0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800b644 <__ieee754_powf+0x3fc>
 800b4e4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b4e8:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800b618 <__ieee754_powf+0x3d0>
 800b4ec:	eee7 5a27 	vfma.f32	s11, s14, s15
 800b4f0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800b648 <__ieee754_powf+0x400>
 800b4f4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b4f8:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800b64c <__ieee754_powf+0x404>
 800b4fc:	ee26 6a24 	vmul.f32	s12, s12, s9
 800b500:	eee7 5a27 	vfma.f32	s11, s14, s15
 800b504:	ee35 7a26 	vadd.f32	s14, s10, s13
 800b508:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800b50c:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b510:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800b514:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800b518:	eef0 5a67 	vmov.f32	s11, s15
 800b51c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800b520:	ee75 5a87 	vadd.f32	s11, s11, s14
 800b524:	ee15 1a90 	vmov	r1, s11
 800b528:	4019      	ands	r1, r3
 800b52a:	ee05 1a90 	vmov	s11, r1
 800b52e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800b532:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800b536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b53a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b53e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b542:	eeb0 6a67 	vmov.f32	s12, s15
 800b546:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800b54a:	ee16 1a10 	vmov	r1, s12
 800b54e:	4019      	ands	r1, r3
 800b550:	ee06 1a10 	vmov	s12, r1
 800b554:	eeb0 7a46 	vmov.f32	s14, s12
 800b558:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800b55c:	493c      	ldr	r1, [pc, #240]	@ (800b650 <__ieee754_powf+0x408>)
 800b55e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800b562:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b566:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800b654 <__ieee754_powf+0x40c>
 800b56a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800b658 <__ieee754_powf+0x410>
 800b56e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b572:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800b65c <__ieee754_powf+0x414>
 800b576:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b57a:	ed91 7a00 	vldr	s14, [r1]
 800b57e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b582:	ee07 2a10 	vmov	s14, r2
 800b586:	4a36      	ldr	r2, [pc, #216]	@ (800b660 <__ieee754_powf+0x418>)
 800b588:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800b58c:	eeb0 7a67 	vmov.f32	s14, s15
 800b590:	eea6 7a25 	vfma.f32	s14, s12, s11
 800b594:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800b598:	ed92 5a00 	vldr	s10, [r2]
 800b59c:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b5a0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b5a4:	ee17 2a10 	vmov	r2, s14
 800b5a8:	401a      	ands	r2, r3
 800b5aa:	ee07 2a10 	vmov	s14, r2
 800b5ae:	ee77 6a66 	vsub.f32	s13, s14, s13
 800b5b2:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800b5b6:	eee6 6a65 	vfms.f32	s13, s12, s11
 800b5ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b5be:	e715      	b.n	800b3ec <__ieee754_powf+0x1a4>
 800b5c0:	2601      	movs	r6, #1
 800b5c2:	e75d      	b.n	800b480 <__ieee754_powf+0x238>
 800b5c4:	d152      	bne.n	800b66c <__ieee754_powf+0x424>
 800b5c6:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800b664 <__ieee754_powf+0x41c>
 800b5ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b5ce:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800b5d2:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5da:	f73f af29 	bgt.w	800b430 <__ieee754_powf+0x1e8>
 800b5de:	2386      	movs	r3, #134	@ 0x86
 800b5e0:	e048      	b.n	800b674 <__ieee754_powf+0x42c>
 800b5e2:	4a21      	ldr	r2, [pc, #132]	@ (800b668 <__ieee754_powf+0x420>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d907      	bls.n	800b5f8 <__ieee754_powf+0x3b0>
 800b5e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f0:	bf4c      	ite	mi
 800b5f2:	2001      	movmi	r0, #1
 800b5f4:	2000      	movpl	r0, #0
 800b5f6:	e6c7      	b.n	800b388 <__ieee754_powf+0x140>
 800b5f8:	d138      	bne.n	800b66c <__ieee754_powf+0x424>
 800b5fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b5fe:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b606:	dbea      	blt.n	800b5de <__ieee754_powf+0x396>
 800b608:	e7ee      	b.n	800b5e8 <__ieee754_powf+0x3a0>
 800b60a:	bf00      	nop
 800b60c:	00000000 	.word	0x00000000
 800b610:	3f7ffff3 	.word	0x3f7ffff3
 800b614:	3f800007 	.word	0x3f800007
 800b618:	3eaaaaab 	.word	0x3eaaaaab
 800b61c:	3fb8aa00 	.word	0x3fb8aa00
 800b620:	3fb8aa3b 	.word	0x3fb8aa3b
 800b624:	36eca570 	.word	0x36eca570
 800b628:	4b800000 	.word	0x4b800000
 800b62c:	001cc471 	.word	0x001cc471
 800b630:	005db3d6 	.word	0x005db3d6
 800b634:	0800cfe0 	.word	0x0800cfe0
 800b638:	fffff000 	.word	0xfffff000
 800b63c:	3e6c3255 	.word	0x3e6c3255
 800b640:	3e53f142 	.word	0x3e53f142
 800b644:	3e8ba305 	.word	0x3e8ba305
 800b648:	3edb6db7 	.word	0x3edb6db7
 800b64c:	3f19999a 	.word	0x3f19999a
 800b650:	0800cfd0 	.word	0x0800cfd0
 800b654:	3f76384f 	.word	0x3f76384f
 800b658:	3f763800 	.word	0x3f763800
 800b65c:	369dc3a0 	.word	0x369dc3a0
 800b660:	0800cfd8 	.word	0x0800cfd8
 800b664:	3338aa3c 	.word	0x3338aa3c
 800b668:	43160000 	.word	0x43160000
 800b66c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800b670:	d96f      	bls.n	800b752 <__ieee754_powf+0x50a>
 800b672:	15db      	asrs	r3, r3, #23
 800b674:	3b7e      	subs	r3, #126	@ 0x7e
 800b676:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800b67a:	4118      	asrs	r0, r3
 800b67c:	4408      	add	r0, r1
 800b67e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b682:	4a4e      	ldr	r2, [pc, #312]	@ (800b7bc <__ieee754_powf+0x574>)
 800b684:	3b7f      	subs	r3, #127	@ 0x7f
 800b686:	411a      	asrs	r2, r3
 800b688:	4002      	ands	r2, r0
 800b68a:	ee07 2a10 	vmov	s14, r2
 800b68e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800b692:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800b696:	f1c3 0317 	rsb	r3, r3, #23
 800b69a:	4118      	asrs	r0, r3
 800b69c:	2900      	cmp	r1, #0
 800b69e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b6a2:	bfb8      	it	lt
 800b6a4:	4240      	neglt	r0, r0
 800b6a6:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800b6aa:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800b7c0 <__ieee754_powf+0x578>
 800b6ae:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800b7c4 <__ieee754_powf+0x57c>
 800b6b2:	ee16 3a90 	vmov	r3, s13
 800b6b6:	f36f 030b 	bfc	r3, #0, #12
 800b6ba:	ee06 3a90 	vmov	s13, r3
 800b6be:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b6c2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b6c6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b6ca:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800b7c8 <__ieee754_powf+0x580>
 800b6ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b6d2:	eee0 7a87 	vfma.f32	s15, s1, s14
 800b6d6:	eeb0 7a67 	vmov.f32	s14, s15
 800b6da:	eea6 7a86 	vfma.f32	s14, s13, s12
 800b6de:	eef0 5a47 	vmov.f32	s11, s14
 800b6e2:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800b6e6:	ee67 6a07 	vmul.f32	s13, s14, s14
 800b6ea:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b6ee:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800b7cc <__ieee754_powf+0x584>
 800b6f2:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800b7d0 <__ieee754_powf+0x588>
 800b6f6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800b6fa:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800b7d4 <__ieee754_powf+0x58c>
 800b6fe:	eee6 5a26 	vfma.f32	s11, s12, s13
 800b702:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800b7d8 <__ieee754_powf+0x590>
 800b706:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800b70a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b7dc <__ieee754_powf+0x594>
 800b70e:	eee6 5a26 	vfma.f32	s11, s12, s13
 800b712:	eeb0 6a47 	vmov.f32	s12, s14
 800b716:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800b71a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b71e:	ee67 5a06 	vmul.f32	s11, s14, s12
 800b722:	ee36 6a66 	vsub.f32	s12, s12, s13
 800b726:	eee7 7a27 	vfma.f32	s15, s14, s15
 800b72a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800b72e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b732:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b736:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b73a:	ee10 3a10 	vmov	r3, s0
 800b73e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800b742:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b746:	da06      	bge.n	800b756 <__ieee754_powf+0x50e>
 800b748:	f000 fa3e 	bl	800bbc8 <scalbnf>
 800b74c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b750:	e592      	b.n	800b278 <__ieee754_powf+0x30>
 800b752:	2000      	movs	r0, #0
 800b754:	e7a7      	b.n	800b6a6 <__ieee754_powf+0x45e>
 800b756:	ee00 3a10 	vmov	s0, r3
 800b75a:	e7f7      	b.n	800b74c <__ieee754_powf+0x504>
 800b75c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b760:	e58a      	b.n	800b278 <__ieee754_powf+0x30>
 800b762:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800b7e0 <__ieee754_powf+0x598>
 800b766:	e587      	b.n	800b278 <__ieee754_powf+0x30>
 800b768:	eeb0 0a48 	vmov.f32	s0, s16
 800b76c:	e584      	b.n	800b278 <__ieee754_powf+0x30>
 800b76e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800b772:	f43f adbb 	beq.w	800b2ec <__ieee754_powf+0xa4>
 800b776:	2502      	movs	r5, #2
 800b778:	eeb0 0a48 	vmov.f32	s0, s16
 800b77c:	f000 f962 	bl	800ba44 <fabsf>
 800b780:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800b784:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800b788:	4647      	mov	r7, r8
 800b78a:	d003      	beq.n	800b794 <__ieee754_powf+0x54c>
 800b78c:	f1b8 0f00 	cmp.w	r8, #0
 800b790:	f47f addb 	bne.w	800b34a <__ieee754_powf+0x102>
 800b794:	2c00      	cmp	r4, #0
 800b796:	bfbc      	itt	lt
 800b798:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800b79c:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800b7a0:	2e00      	cmp	r6, #0
 800b7a2:	f6bf ad69 	bge.w	800b278 <__ieee754_powf+0x30>
 800b7a6:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800b7aa:	ea58 0805 	orrs.w	r8, r8, r5
 800b7ae:	f47f adc7 	bne.w	800b340 <__ieee754_powf+0xf8>
 800b7b2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b7b6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b7ba:	e55d      	b.n	800b278 <__ieee754_powf+0x30>
 800b7bc:	ff800000 	.word	0xff800000
 800b7c0:	3f317218 	.word	0x3f317218
 800b7c4:	3f317200 	.word	0x3f317200
 800b7c8:	35bfbe8c 	.word	0x35bfbe8c
 800b7cc:	b5ddea0e 	.word	0xb5ddea0e
 800b7d0:	3331bb4c 	.word	0x3331bb4c
 800b7d4:	388ab355 	.word	0x388ab355
 800b7d8:	bb360b61 	.word	0xbb360b61
 800b7dc:	3e2aaaab 	.word	0x3e2aaaab
 800b7e0:	00000000 	.word	0x00000000

0800b7e4 <__ieee754_rem_pio2f>:
 800b7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7e6:	ee10 6a10 	vmov	r6, s0
 800b7ea:	4b88      	ldr	r3, [pc, #544]	@ (800ba0c <__ieee754_rem_pio2f+0x228>)
 800b7ec:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b7f0:	429d      	cmp	r5, r3
 800b7f2:	b087      	sub	sp, #28
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	d805      	bhi.n	800b804 <__ieee754_rem_pio2f+0x20>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	ed80 0a00 	vstr	s0, [r0]
 800b7fe:	6043      	str	r3, [r0, #4]
 800b800:	2000      	movs	r0, #0
 800b802:	e022      	b.n	800b84a <__ieee754_rem_pio2f+0x66>
 800b804:	4b82      	ldr	r3, [pc, #520]	@ (800ba10 <__ieee754_rem_pio2f+0x22c>)
 800b806:	429d      	cmp	r5, r3
 800b808:	d83a      	bhi.n	800b880 <__ieee754_rem_pio2f+0x9c>
 800b80a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b80e:	2e00      	cmp	r6, #0
 800b810:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800ba14 <__ieee754_rem_pio2f+0x230>
 800b814:	4a80      	ldr	r2, [pc, #512]	@ (800ba18 <__ieee754_rem_pio2f+0x234>)
 800b816:	f023 030f 	bic.w	r3, r3, #15
 800b81a:	dd18      	ble.n	800b84e <__ieee754_rem_pio2f+0x6a>
 800b81c:	4293      	cmp	r3, r2
 800b81e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b822:	bf09      	itett	eq
 800b824:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800ba1c <__ieee754_rem_pio2f+0x238>
 800b828:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800ba20 <__ieee754_rem_pio2f+0x23c>
 800b82c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800ba24 <__ieee754_rem_pio2f+0x240>
 800b830:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b834:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b838:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b83c:	ed80 7a00 	vstr	s14, [r0]
 800b840:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b844:	edc0 7a01 	vstr	s15, [r0, #4]
 800b848:	2001      	movs	r0, #1
 800b84a:	b007      	add	sp, #28
 800b84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b84e:	4293      	cmp	r3, r2
 800b850:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b854:	bf09      	itett	eq
 800b856:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800ba1c <__ieee754_rem_pio2f+0x238>
 800b85a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800ba20 <__ieee754_rem_pio2f+0x23c>
 800b85e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800ba24 <__ieee754_rem_pio2f+0x240>
 800b862:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b866:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b86a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b86e:	ed80 7a00 	vstr	s14, [r0]
 800b872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b876:	edc0 7a01 	vstr	s15, [r0, #4]
 800b87a:	f04f 30ff 	mov.w	r0, #4294967295
 800b87e:	e7e4      	b.n	800b84a <__ieee754_rem_pio2f+0x66>
 800b880:	4b69      	ldr	r3, [pc, #420]	@ (800ba28 <__ieee754_rem_pio2f+0x244>)
 800b882:	429d      	cmp	r5, r3
 800b884:	d873      	bhi.n	800b96e <__ieee754_rem_pio2f+0x18a>
 800b886:	f000 f8dd 	bl	800ba44 <fabsf>
 800b88a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800ba2c <__ieee754_rem_pio2f+0x248>
 800b88e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b892:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b896:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b89a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b89e:	ee17 0a90 	vmov	r0, s15
 800b8a2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800ba14 <__ieee754_rem_pio2f+0x230>
 800b8a6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b8aa:	281f      	cmp	r0, #31
 800b8ac:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800ba20 <__ieee754_rem_pio2f+0x23c>
 800b8b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8b4:	eeb1 6a47 	vneg.f32	s12, s14
 800b8b8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b8bc:	ee16 1a90 	vmov	r1, s13
 800b8c0:	dc09      	bgt.n	800b8d6 <__ieee754_rem_pio2f+0xf2>
 800b8c2:	4a5b      	ldr	r2, [pc, #364]	@ (800ba30 <__ieee754_rem_pio2f+0x24c>)
 800b8c4:	1e47      	subs	r7, r0, #1
 800b8c6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b8ca:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b8ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d107      	bne.n	800b8e6 <__ieee754_rem_pio2f+0x102>
 800b8d6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b8da:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b8de:	2a08      	cmp	r2, #8
 800b8e0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b8e4:	dc14      	bgt.n	800b910 <__ieee754_rem_pio2f+0x12c>
 800b8e6:	6021      	str	r1, [r4, #0]
 800b8e8:	ed94 7a00 	vldr	s14, [r4]
 800b8ec:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b8f0:	2e00      	cmp	r6, #0
 800b8f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b8f6:	ed84 0a01 	vstr	s0, [r4, #4]
 800b8fa:	daa6      	bge.n	800b84a <__ieee754_rem_pio2f+0x66>
 800b8fc:	eeb1 7a47 	vneg.f32	s14, s14
 800b900:	eeb1 0a40 	vneg.f32	s0, s0
 800b904:	ed84 7a00 	vstr	s14, [r4]
 800b908:	ed84 0a01 	vstr	s0, [r4, #4]
 800b90c:	4240      	negs	r0, r0
 800b90e:	e79c      	b.n	800b84a <__ieee754_rem_pio2f+0x66>
 800b910:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800ba1c <__ieee754_rem_pio2f+0x238>
 800b914:	eef0 6a40 	vmov.f32	s13, s0
 800b918:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b91c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b920:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b924:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800ba24 <__ieee754_rem_pio2f+0x240>
 800b928:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b92c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b930:	ee15 2a90 	vmov	r2, s11
 800b934:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b938:	1a5b      	subs	r3, r3, r1
 800b93a:	2b19      	cmp	r3, #25
 800b93c:	dc04      	bgt.n	800b948 <__ieee754_rem_pio2f+0x164>
 800b93e:	edc4 5a00 	vstr	s11, [r4]
 800b942:	eeb0 0a66 	vmov.f32	s0, s13
 800b946:	e7cf      	b.n	800b8e8 <__ieee754_rem_pio2f+0x104>
 800b948:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800ba34 <__ieee754_rem_pio2f+0x250>
 800b94c:	eeb0 0a66 	vmov.f32	s0, s13
 800b950:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b954:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b958:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800ba38 <__ieee754_rem_pio2f+0x254>
 800b95c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b960:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b964:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b968:	ed84 7a00 	vstr	s14, [r4]
 800b96c:	e7bc      	b.n	800b8e8 <__ieee754_rem_pio2f+0x104>
 800b96e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b972:	d306      	bcc.n	800b982 <__ieee754_rem_pio2f+0x19e>
 800b974:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b978:	edc0 7a01 	vstr	s15, [r0, #4]
 800b97c:	edc0 7a00 	vstr	s15, [r0]
 800b980:	e73e      	b.n	800b800 <__ieee754_rem_pio2f+0x1c>
 800b982:	15ea      	asrs	r2, r5, #23
 800b984:	3a86      	subs	r2, #134	@ 0x86
 800b986:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b98a:	ee07 3a90 	vmov	s15, r3
 800b98e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b992:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800ba3c <__ieee754_rem_pio2f+0x258>
 800b996:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b99a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b99e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b9a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b9a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b9aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b9ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9b2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b9b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b9ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9c2:	edcd 7a05 	vstr	s15, [sp, #20]
 800b9c6:	d11e      	bne.n	800ba06 <__ieee754_rem_pio2f+0x222>
 800b9c8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9d0:	bf0c      	ite	eq
 800b9d2:	2301      	moveq	r3, #1
 800b9d4:	2302      	movne	r3, #2
 800b9d6:	491a      	ldr	r1, [pc, #104]	@ (800ba40 <__ieee754_rem_pio2f+0x25c>)
 800b9d8:	9101      	str	r1, [sp, #4]
 800b9da:	2102      	movs	r1, #2
 800b9dc:	9100      	str	r1, [sp, #0]
 800b9de:	a803      	add	r0, sp, #12
 800b9e0:	4621      	mov	r1, r4
 800b9e2:	f000 fcd1 	bl	800c388 <__kernel_rem_pio2f>
 800b9e6:	2e00      	cmp	r6, #0
 800b9e8:	f6bf af2f 	bge.w	800b84a <__ieee754_rem_pio2f+0x66>
 800b9ec:	edd4 7a00 	vldr	s15, [r4]
 800b9f0:	eef1 7a67 	vneg.f32	s15, s15
 800b9f4:	edc4 7a00 	vstr	s15, [r4]
 800b9f8:	edd4 7a01 	vldr	s15, [r4, #4]
 800b9fc:	eef1 7a67 	vneg.f32	s15, s15
 800ba00:	edc4 7a01 	vstr	s15, [r4, #4]
 800ba04:	e782      	b.n	800b90c <__ieee754_rem_pio2f+0x128>
 800ba06:	2303      	movs	r3, #3
 800ba08:	e7e5      	b.n	800b9d6 <__ieee754_rem_pio2f+0x1f2>
 800ba0a:	bf00      	nop
 800ba0c:	3f490fd8 	.word	0x3f490fd8
 800ba10:	4016cbe3 	.word	0x4016cbe3
 800ba14:	3fc90f80 	.word	0x3fc90f80
 800ba18:	3fc90fd0 	.word	0x3fc90fd0
 800ba1c:	37354400 	.word	0x37354400
 800ba20:	37354443 	.word	0x37354443
 800ba24:	2e85a308 	.word	0x2e85a308
 800ba28:	43490f80 	.word	0x43490f80
 800ba2c:	3f22f984 	.word	0x3f22f984
 800ba30:	0800cfe8 	.word	0x0800cfe8
 800ba34:	2e85a300 	.word	0x2e85a300
 800ba38:	248d3132 	.word	0x248d3132
 800ba3c:	43800000 	.word	0x43800000
 800ba40:	0800d068 	.word	0x0800d068

0800ba44 <fabsf>:
 800ba44:	ee10 3a10 	vmov	r3, s0
 800ba48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba4c:	ee00 3a10 	vmov	s0, r3
 800ba50:	4770      	bx	lr
 800ba52:	0000      	movs	r0, r0
 800ba54:	0000      	movs	r0, r0
	...

0800ba58 <scalbn>:
 800ba58:	b570      	push	{r4, r5, r6, lr}
 800ba5a:	ec55 4b10 	vmov	r4, r5, d0
 800ba5e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ba62:	4606      	mov	r6, r0
 800ba64:	462b      	mov	r3, r5
 800ba66:	b991      	cbnz	r1, 800ba8e <scalbn+0x36>
 800ba68:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ba6c:	4323      	orrs	r3, r4
 800ba6e:	d03b      	beq.n	800bae8 <scalbn+0x90>
 800ba70:	4b33      	ldr	r3, [pc, #204]	@ (800bb40 <scalbn+0xe8>)
 800ba72:	4620      	mov	r0, r4
 800ba74:	4629      	mov	r1, r5
 800ba76:	2200      	movs	r2, #0
 800ba78:	f7f4 fdde 	bl	8000638 <__aeabi_dmul>
 800ba7c:	4b31      	ldr	r3, [pc, #196]	@ (800bb44 <scalbn+0xec>)
 800ba7e:	429e      	cmp	r6, r3
 800ba80:	4604      	mov	r4, r0
 800ba82:	460d      	mov	r5, r1
 800ba84:	da0f      	bge.n	800baa6 <scalbn+0x4e>
 800ba86:	a326      	add	r3, pc, #152	@ (adr r3, 800bb20 <scalbn+0xc8>)
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	e01e      	b.n	800bacc <scalbn+0x74>
 800ba8e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ba92:	4291      	cmp	r1, r2
 800ba94:	d10b      	bne.n	800baae <scalbn+0x56>
 800ba96:	4622      	mov	r2, r4
 800ba98:	4620      	mov	r0, r4
 800ba9a:	4629      	mov	r1, r5
 800ba9c:	f7f4 fc16 	bl	80002cc <__adddf3>
 800baa0:	4604      	mov	r4, r0
 800baa2:	460d      	mov	r5, r1
 800baa4:	e020      	b.n	800bae8 <scalbn+0x90>
 800baa6:	460b      	mov	r3, r1
 800baa8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800baac:	3936      	subs	r1, #54	@ 0x36
 800baae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800bab2:	4296      	cmp	r6, r2
 800bab4:	dd0d      	ble.n	800bad2 <scalbn+0x7a>
 800bab6:	2d00      	cmp	r5, #0
 800bab8:	a11b      	add	r1, pc, #108	@ (adr r1, 800bb28 <scalbn+0xd0>)
 800baba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800babe:	da02      	bge.n	800bac6 <scalbn+0x6e>
 800bac0:	a11b      	add	r1, pc, #108	@ (adr r1, 800bb30 <scalbn+0xd8>)
 800bac2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bac6:	a318      	add	r3, pc, #96	@ (adr r3, 800bb28 <scalbn+0xd0>)
 800bac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bacc:	f7f4 fdb4 	bl	8000638 <__aeabi_dmul>
 800bad0:	e7e6      	b.n	800baa0 <scalbn+0x48>
 800bad2:	1872      	adds	r2, r6, r1
 800bad4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bad8:	428a      	cmp	r2, r1
 800bada:	dcec      	bgt.n	800bab6 <scalbn+0x5e>
 800badc:	2a00      	cmp	r2, #0
 800bade:	dd06      	ble.n	800baee <scalbn+0x96>
 800bae0:	f36f 531e 	bfc	r3, #20, #11
 800bae4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bae8:	ec45 4b10 	vmov	d0, r4, r5
 800baec:	bd70      	pop	{r4, r5, r6, pc}
 800baee:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800baf2:	da08      	bge.n	800bb06 <scalbn+0xae>
 800baf4:	2d00      	cmp	r5, #0
 800baf6:	a10a      	add	r1, pc, #40	@ (adr r1, 800bb20 <scalbn+0xc8>)
 800baf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bafc:	dac3      	bge.n	800ba86 <scalbn+0x2e>
 800bafe:	a10e      	add	r1, pc, #56	@ (adr r1, 800bb38 <scalbn+0xe0>)
 800bb00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb04:	e7bf      	b.n	800ba86 <scalbn+0x2e>
 800bb06:	3236      	adds	r2, #54	@ 0x36
 800bb08:	f36f 531e 	bfc	r3, #20, #11
 800bb0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb10:	4620      	mov	r0, r4
 800bb12:	4b0d      	ldr	r3, [pc, #52]	@ (800bb48 <scalbn+0xf0>)
 800bb14:	4629      	mov	r1, r5
 800bb16:	2200      	movs	r2, #0
 800bb18:	e7d8      	b.n	800bacc <scalbn+0x74>
 800bb1a:	bf00      	nop
 800bb1c:	f3af 8000 	nop.w
 800bb20:	c2f8f359 	.word	0xc2f8f359
 800bb24:	01a56e1f 	.word	0x01a56e1f
 800bb28:	8800759c 	.word	0x8800759c
 800bb2c:	7e37e43c 	.word	0x7e37e43c
 800bb30:	8800759c 	.word	0x8800759c
 800bb34:	fe37e43c 	.word	0xfe37e43c
 800bb38:	c2f8f359 	.word	0xc2f8f359
 800bb3c:	81a56e1f 	.word	0x81a56e1f
 800bb40:	43500000 	.word	0x43500000
 800bb44:	ffff3cb0 	.word	0xffff3cb0
 800bb48:	3c900000 	.word	0x3c900000

0800bb4c <with_errno>:
 800bb4c:	b510      	push	{r4, lr}
 800bb4e:	ed2d 8b02 	vpush	{d8}
 800bb52:	eeb0 8a40 	vmov.f32	s16, s0
 800bb56:	eef0 8a60 	vmov.f32	s17, s1
 800bb5a:	4604      	mov	r4, r0
 800bb5c:	f7fb fc0e 	bl	800737c <__errno>
 800bb60:	eeb0 0a48 	vmov.f32	s0, s16
 800bb64:	eef0 0a68 	vmov.f32	s1, s17
 800bb68:	ecbd 8b02 	vpop	{d8}
 800bb6c:	6004      	str	r4, [r0, #0]
 800bb6e:	bd10      	pop	{r4, pc}

0800bb70 <xflow>:
 800bb70:	4603      	mov	r3, r0
 800bb72:	b507      	push	{r0, r1, r2, lr}
 800bb74:	ec51 0b10 	vmov	r0, r1, d0
 800bb78:	b183      	cbz	r3, 800bb9c <xflow+0x2c>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bb80:	e9cd 2300 	strd	r2, r3, [sp]
 800bb84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb88:	f7f4 fd56 	bl	8000638 <__aeabi_dmul>
 800bb8c:	ec41 0b10 	vmov	d0, r0, r1
 800bb90:	2022      	movs	r0, #34	@ 0x22
 800bb92:	b003      	add	sp, #12
 800bb94:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb98:	f7ff bfd8 	b.w	800bb4c <with_errno>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	e7ee      	b.n	800bb80 <xflow+0x10>
 800bba2:	0000      	movs	r0, r0
 800bba4:	0000      	movs	r0, r0
	...

0800bba8 <__math_uflow>:
 800bba8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bbb0 <__math_uflow+0x8>
 800bbac:	f7ff bfe0 	b.w	800bb70 <xflow>
 800bbb0:	00000000 	.word	0x00000000
 800bbb4:	10000000 	.word	0x10000000

0800bbb8 <__math_oflow>:
 800bbb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bbc0 <__math_oflow+0x8>
 800bbbc:	f7ff bfd8 	b.w	800bb70 <xflow>
 800bbc0:	00000000 	.word	0x00000000
 800bbc4:	70000000 	.word	0x70000000

0800bbc8 <scalbnf>:
 800bbc8:	ee10 3a10 	vmov	r3, s0
 800bbcc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800bbd0:	d02b      	beq.n	800bc2a <scalbnf+0x62>
 800bbd2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bbd6:	d302      	bcc.n	800bbde <scalbnf+0x16>
 800bbd8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bbdc:	4770      	bx	lr
 800bbde:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800bbe2:	d123      	bne.n	800bc2c <scalbnf+0x64>
 800bbe4:	4b24      	ldr	r3, [pc, #144]	@ (800bc78 <scalbnf+0xb0>)
 800bbe6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800bc7c <scalbnf+0xb4>
 800bbea:	4298      	cmp	r0, r3
 800bbec:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bbf0:	db17      	blt.n	800bc22 <scalbnf+0x5a>
 800bbf2:	ee10 3a10 	vmov	r3, s0
 800bbf6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bbfa:	3a19      	subs	r2, #25
 800bbfc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bc00:	4288      	cmp	r0, r1
 800bc02:	dd15      	ble.n	800bc30 <scalbnf+0x68>
 800bc04:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800bc80 <scalbnf+0xb8>
 800bc08:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800bc84 <scalbnf+0xbc>
 800bc0c:	ee10 3a10 	vmov	r3, s0
 800bc10:	eeb0 7a67 	vmov.f32	s14, s15
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	bfb8      	it	lt
 800bc18:	eef0 7a66 	vmovlt.f32	s15, s13
 800bc1c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800bc20:	4770      	bx	lr
 800bc22:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bc88 <scalbnf+0xc0>
 800bc26:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bc2a:	4770      	bx	lr
 800bc2c:	0dd2      	lsrs	r2, r2, #23
 800bc2e:	e7e5      	b.n	800bbfc <scalbnf+0x34>
 800bc30:	4410      	add	r0, r2
 800bc32:	28fe      	cmp	r0, #254	@ 0xfe
 800bc34:	dce6      	bgt.n	800bc04 <scalbnf+0x3c>
 800bc36:	2800      	cmp	r0, #0
 800bc38:	dd06      	ble.n	800bc48 <scalbnf+0x80>
 800bc3a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bc3e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bc42:	ee00 3a10 	vmov	s0, r3
 800bc46:	4770      	bx	lr
 800bc48:	f110 0f16 	cmn.w	r0, #22
 800bc4c:	da09      	bge.n	800bc62 <scalbnf+0x9a>
 800bc4e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800bc88 <scalbnf+0xc0>
 800bc52:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800bc8c <scalbnf+0xc4>
 800bc56:	ee10 3a10 	vmov	r3, s0
 800bc5a:	eeb0 7a67 	vmov.f32	s14, s15
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	e7d9      	b.n	800bc16 <scalbnf+0x4e>
 800bc62:	3019      	adds	r0, #25
 800bc64:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bc68:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bc6c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800bc90 <scalbnf+0xc8>
 800bc70:	ee07 3a90 	vmov	s15, r3
 800bc74:	e7d7      	b.n	800bc26 <scalbnf+0x5e>
 800bc76:	bf00      	nop
 800bc78:	ffff3cb0 	.word	0xffff3cb0
 800bc7c:	4c000000 	.word	0x4c000000
 800bc80:	7149f2ca 	.word	0x7149f2ca
 800bc84:	f149f2ca 	.word	0xf149f2ca
 800bc88:	0da24260 	.word	0x0da24260
 800bc8c:	8da24260 	.word	0x8da24260
 800bc90:	33000000 	.word	0x33000000

0800bc94 <with_errnof>:
 800bc94:	b510      	push	{r4, lr}
 800bc96:	ed2d 8b02 	vpush	{d8}
 800bc9a:	eeb0 8a40 	vmov.f32	s16, s0
 800bc9e:	4604      	mov	r4, r0
 800bca0:	f7fb fb6c 	bl	800737c <__errno>
 800bca4:	eeb0 0a48 	vmov.f32	s0, s16
 800bca8:	ecbd 8b02 	vpop	{d8}
 800bcac:	6004      	str	r4, [r0, #0]
 800bcae:	bd10      	pop	{r4, pc}

0800bcb0 <xflowf>:
 800bcb0:	b130      	cbz	r0, 800bcc0 <xflowf+0x10>
 800bcb2:	eef1 7a40 	vneg.f32	s15, s0
 800bcb6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bcba:	2022      	movs	r0, #34	@ 0x22
 800bcbc:	f7ff bfea 	b.w	800bc94 <with_errnof>
 800bcc0:	eef0 7a40 	vmov.f32	s15, s0
 800bcc4:	e7f7      	b.n	800bcb6 <xflowf+0x6>
	...

0800bcc8 <__math_uflowf>:
 800bcc8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bcd0 <__math_uflowf+0x8>
 800bccc:	f7ff bff0 	b.w	800bcb0 <xflowf>
 800bcd0:	10000000 	.word	0x10000000

0800bcd4 <__math_oflowf>:
 800bcd4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bcdc <__math_oflowf+0x8>
 800bcd8:	f7ff bfea 	b.w	800bcb0 <xflowf>
 800bcdc:	70000000 	.word	0x70000000

0800bce0 <__ieee754_sqrtf>:
 800bce0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bce4:	4770      	bx	lr
	...

0800bce8 <__kernel_rem_pio2>:
 800bce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcec:	ed2d 8b02 	vpush	{d8}
 800bcf0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800bcf4:	f112 0f14 	cmn.w	r2, #20
 800bcf8:	9306      	str	r3, [sp, #24]
 800bcfa:	9104      	str	r1, [sp, #16]
 800bcfc:	4bc2      	ldr	r3, [pc, #776]	@ (800c008 <__kernel_rem_pio2+0x320>)
 800bcfe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800bd00:	9008      	str	r0, [sp, #32]
 800bd02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	9b06      	ldr	r3, [sp, #24]
 800bd0a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bd0e:	bfa8      	it	ge
 800bd10:	1ed4      	subge	r4, r2, #3
 800bd12:	9305      	str	r3, [sp, #20]
 800bd14:	bfb2      	itee	lt
 800bd16:	2400      	movlt	r4, #0
 800bd18:	2318      	movge	r3, #24
 800bd1a:	fb94 f4f3 	sdivge	r4, r4, r3
 800bd1e:	f06f 0317 	mvn.w	r3, #23
 800bd22:	fb04 3303 	mla	r3, r4, r3, r3
 800bd26:	eb03 0b02 	add.w	fp, r3, r2
 800bd2a:	9b00      	ldr	r3, [sp, #0]
 800bd2c:	9a05      	ldr	r2, [sp, #20]
 800bd2e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800bff8 <__kernel_rem_pio2+0x310>
 800bd32:	eb03 0802 	add.w	r8, r3, r2
 800bd36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800bd38:	1aa7      	subs	r7, r4, r2
 800bd3a:	ae20      	add	r6, sp, #128	@ 0x80
 800bd3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bd40:	2500      	movs	r5, #0
 800bd42:	4545      	cmp	r5, r8
 800bd44:	dd12      	ble.n	800bd6c <__kernel_rem_pio2+0x84>
 800bd46:	9b06      	ldr	r3, [sp, #24]
 800bd48:	aa20      	add	r2, sp, #128	@ 0x80
 800bd4a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bd4e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800bd52:	2700      	movs	r7, #0
 800bd54:	9b00      	ldr	r3, [sp, #0]
 800bd56:	429f      	cmp	r7, r3
 800bd58:	dc2e      	bgt.n	800bdb8 <__kernel_rem_pio2+0xd0>
 800bd5a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800bff8 <__kernel_rem_pio2+0x310>
 800bd5e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd62:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd66:	46a8      	mov	r8, r5
 800bd68:	2600      	movs	r6, #0
 800bd6a:	e01b      	b.n	800bda4 <__kernel_rem_pio2+0xbc>
 800bd6c:	42ef      	cmn	r7, r5
 800bd6e:	d407      	bmi.n	800bd80 <__kernel_rem_pio2+0x98>
 800bd70:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bd74:	f7f4 fbf6 	bl	8000564 <__aeabi_i2d>
 800bd78:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bd7c:	3501      	adds	r5, #1
 800bd7e:	e7e0      	b.n	800bd42 <__kernel_rem_pio2+0x5a>
 800bd80:	ec51 0b18 	vmov	r0, r1, d8
 800bd84:	e7f8      	b.n	800bd78 <__kernel_rem_pio2+0x90>
 800bd86:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800bd8a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bd8e:	f7f4 fc53 	bl	8000638 <__aeabi_dmul>
 800bd92:	4602      	mov	r2, r0
 800bd94:	460b      	mov	r3, r1
 800bd96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd9a:	f7f4 fa97 	bl	80002cc <__adddf3>
 800bd9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bda2:	3601      	adds	r6, #1
 800bda4:	9b05      	ldr	r3, [sp, #20]
 800bda6:	429e      	cmp	r6, r3
 800bda8:	dded      	ble.n	800bd86 <__kernel_rem_pio2+0x9e>
 800bdaa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bdae:	3701      	adds	r7, #1
 800bdb0:	ecaa 7b02 	vstmia	sl!, {d7}
 800bdb4:	3508      	adds	r5, #8
 800bdb6:	e7cd      	b.n	800bd54 <__kernel_rem_pio2+0x6c>
 800bdb8:	9b00      	ldr	r3, [sp, #0]
 800bdba:	f8dd 8000 	ldr.w	r8, [sp]
 800bdbe:	aa0c      	add	r2, sp, #48	@ 0x30
 800bdc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bdc4:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdc6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800bdc8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bdcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdce:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800bdd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdd4:	ab98      	add	r3, sp, #608	@ 0x260
 800bdd6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bdda:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800bdde:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bde2:	ac0c      	add	r4, sp, #48	@ 0x30
 800bde4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800bde6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800bdea:	46a1      	mov	r9, r4
 800bdec:	46c2      	mov	sl, r8
 800bdee:	f1ba 0f00 	cmp.w	sl, #0
 800bdf2:	dc77      	bgt.n	800bee4 <__kernel_rem_pio2+0x1fc>
 800bdf4:	4658      	mov	r0, fp
 800bdf6:	ed9d 0b02 	vldr	d0, [sp, #8]
 800bdfa:	f7ff fe2d 	bl	800ba58 <scalbn>
 800bdfe:	ec57 6b10 	vmov	r6, r7, d0
 800be02:	2200      	movs	r2, #0
 800be04:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800be08:	4630      	mov	r0, r6
 800be0a:	4639      	mov	r1, r7
 800be0c:	f7f4 fc14 	bl	8000638 <__aeabi_dmul>
 800be10:	ec41 0b10 	vmov	d0, r0, r1
 800be14:	f000 fd20 	bl	800c858 <floor>
 800be18:	4b7c      	ldr	r3, [pc, #496]	@ (800c00c <__kernel_rem_pio2+0x324>)
 800be1a:	ec51 0b10 	vmov	r0, r1, d0
 800be1e:	2200      	movs	r2, #0
 800be20:	f7f4 fc0a 	bl	8000638 <__aeabi_dmul>
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	4630      	mov	r0, r6
 800be2a:	4639      	mov	r1, r7
 800be2c:	f7f4 fa4c 	bl	80002c8 <__aeabi_dsub>
 800be30:	460f      	mov	r7, r1
 800be32:	4606      	mov	r6, r0
 800be34:	f7f4 feb0 	bl	8000b98 <__aeabi_d2iz>
 800be38:	9002      	str	r0, [sp, #8]
 800be3a:	f7f4 fb93 	bl	8000564 <__aeabi_i2d>
 800be3e:	4602      	mov	r2, r0
 800be40:	460b      	mov	r3, r1
 800be42:	4630      	mov	r0, r6
 800be44:	4639      	mov	r1, r7
 800be46:	f7f4 fa3f 	bl	80002c8 <__aeabi_dsub>
 800be4a:	f1bb 0f00 	cmp.w	fp, #0
 800be4e:	4606      	mov	r6, r0
 800be50:	460f      	mov	r7, r1
 800be52:	dd6c      	ble.n	800bf2e <__kernel_rem_pio2+0x246>
 800be54:	f108 31ff 	add.w	r1, r8, #4294967295
 800be58:	ab0c      	add	r3, sp, #48	@ 0x30
 800be5a:	9d02      	ldr	r5, [sp, #8]
 800be5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be60:	f1cb 0018 	rsb	r0, fp, #24
 800be64:	fa43 f200 	asr.w	r2, r3, r0
 800be68:	4415      	add	r5, r2
 800be6a:	4082      	lsls	r2, r0
 800be6c:	1a9b      	subs	r3, r3, r2
 800be6e:	aa0c      	add	r2, sp, #48	@ 0x30
 800be70:	9502      	str	r5, [sp, #8]
 800be72:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800be76:	f1cb 0217 	rsb	r2, fp, #23
 800be7a:	fa43 f902 	asr.w	r9, r3, r2
 800be7e:	f1b9 0f00 	cmp.w	r9, #0
 800be82:	dd64      	ble.n	800bf4e <__kernel_rem_pio2+0x266>
 800be84:	9b02      	ldr	r3, [sp, #8]
 800be86:	2200      	movs	r2, #0
 800be88:	3301      	adds	r3, #1
 800be8a:	9302      	str	r3, [sp, #8]
 800be8c:	4615      	mov	r5, r2
 800be8e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800be92:	4590      	cmp	r8, r2
 800be94:	f300 80a1 	bgt.w	800bfda <__kernel_rem_pio2+0x2f2>
 800be98:	f1bb 0f00 	cmp.w	fp, #0
 800be9c:	dd07      	ble.n	800beae <__kernel_rem_pio2+0x1c6>
 800be9e:	f1bb 0f01 	cmp.w	fp, #1
 800bea2:	f000 80c1 	beq.w	800c028 <__kernel_rem_pio2+0x340>
 800bea6:	f1bb 0f02 	cmp.w	fp, #2
 800beaa:	f000 80c8 	beq.w	800c03e <__kernel_rem_pio2+0x356>
 800beae:	f1b9 0f02 	cmp.w	r9, #2
 800beb2:	d14c      	bne.n	800bf4e <__kernel_rem_pio2+0x266>
 800beb4:	4632      	mov	r2, r6
 800beb6:	463b      	mov	r3, r7
 800beb8:	4955      	ldr	r1, [pc, #340]	@ (800c010 <__kernel_rem_pio2+0x328>)
 800beba:	2000      	movs	r0, #0
 800bebc:	f7f4 fa04 	bl	80002c8 <__aeabi_dsub>
 800bec0:	4606      	mov	r6, r0
 800bec2:	460f      	mov	r7, r1
 800bec4:	2d00      	cmp	r5, #0
 800bec6:	d042      	beq.n	800bf4e <__kernel_rem_pio2+0x266>
 800bec8:	4658      	mov	r0, fp
 800beca:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800c000 <__kernel_rem_pio2+0x318>
 800bece:	f7ff fdc3 	bl	800ba58 <scalbn>
 800bed2:	4630      	mov	r0, r6
 800bed4:	4639      	mov	r1, r7
 800bed6:	ec53 2b10 	vmov	r2, r3, d0
 800beda:	f7f4 f9f5 	bl	80002c8 <__aeabi_dsub>
 800bede:	4606      	mov	r6, r0
 800bee0:	460f      	mov	r7, r1
 800bee2:	e034      	b.n	800bf4e <__kernel_rem_pio2+0x266>
 800bee4:	4b4b      	ldr	r3, [pc, #300]	@ (800c014 <__kernel_rem_pio2+0x32c>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beec:	f7f4 fba4 	bl	8000638 <__aeabi_dmul>
 800bef0:	f7f4 fe52 	bl	8000b98 <__aeabi_d2iz>
 800bef4:	f7f4 fb36 	bl	8000564 <__aeabi_i2d>
 800bef8:	4b47      	ldr	r3, [pc, #284]	@ (800c018 <__kernel_rem_pio2+0x330>)
 800befa:	2200      	movs	r2, #0
 800befc:	4606      	mov	r6, r0
 800befe:	460f      	mov	r7, r1
 800bf00:	f7f4 fb9a 	bl	8000638 <__aeabi_dmul>
 800bf04:	4602      	mov	r2, r0
 800bf06:	460b      	mov	r3, r1
 800bf08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf0c:	f7f4 f9dc 	bl	80002c8 <__aeabi_dsub>
 800bf10:	f7f4 fe42 	bl	8000b98 <__aeabi_d2iz>
 800bf14:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bf18:	f849 0b04 	str.w	r0, [r9], #4
 800bf1c:	4639      	mov	r1, r7
 800bf1e:	4630      	mov	r0, r6
 800bf20:	f7f4 f9d4 	bl	80002cc <__adddf3>
 800bf24:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf2c:	e75f      	b.n	800bdee <__kernel_rem_pio2+0x106>
 800bf2e:	d107      	bne.n	800bf40 <__kernel_rem_pio2+0x258>
 800bf30:	f108 33ff 	add.w	r3, r8, #4294967295
 800bf34:	aa0c      	add	r2, sp, #48	@ 0x30
 800bf36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf3a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800bf3e:	e79e      	b.n	800be7e <__kernel_rem_pio2+0x196>
 800bf40:	4b36      	ldr	r3, [pc, #216]	@ (800c01c <__kernel_rem_pio2+0x334>)
 800bf42:	2200      	movs	r2, #0
 800bf44:	f7f4 fdfe 	bl	8000b44 <__aeabi_dcmpge>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	d143      	bne.n	800bfd4 <__kernel_rem_pio2+0x2ec>
 800bf4c:	4681      	mov	r9, r0
 800bf4e:	2200      	movs	r2, #0
 800bf50:	2300      	movs	r3, #0
 800bf52:	4630      	mov	r0, r6
 800bf54:	4639      	mov	r1, r7
 800bf56:	f7f4 fdd7 	bl	8000b08 <__aeabi_dcmpeq>
 800bf5a:	2800      	cmp	r0, #0
 800bf5c:	f000 80c1 	beq.w	800c0e2 <__kernel_rem_pio2+0x3fa>
 800bf60:	f108 33ff 	add.w	r3, r8, #4294967295
 800bf64:	2200      	movs	r2, #0
 800bf66:	9900      	ldr	r1, [sp, #0]
 800bf68:	428b      	cmp	r3, r1
 800bf6a:	da70      	bge.n	800c04e <__kernel_rem_pio2+0x366>
 800bf6c:	2a00      	cmp	r2, #0
 800bf6e:	f000 808b 	beq.w	800c088 <__kernel_rem_pio2+0x3a0>
 800bf72:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf76:	ab0c      	add	r3, sp, #48	@ 0x30
 800bf78:	f1ab 0b18 	sub.w	fp, fp, #24
 800bf7c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d0f6      	beq.n	800bf72 <__kernel_rem_pio2+0x28a>
 800bf84:	4658      	mov	r0, fp
 800bf86:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800c000 <__kernel_rem_pio2+0x318>
 800bf8a:	f7ff fd65 	bl	800ba58 <scalbn>
 800bf8e:	f108 0301 	add.w	r3, r8, #1
 800bf92:	00da      	lsls	r2, r3, #3
 800bf94:	9205      	str	r2, [sp, #20]
 800bf96:	ec55 4b10 	vmov	r4, r5, d0
 800bf9a:	aa70      	add	r2, sp, #448	@ 0x1c0
 800bf9c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800c014 <__kernel_rem_pio2+0x32c>
 800bfa0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800bfa4:	4646      	mov	r6, r8
 800bfa6:	f04f 0a00 	mov.w	sl, #0
 800bfaa:	2e00      	cmp	r6, #0
 800bfac:	f280 80d1 	bge.w	800c152 <__kernel_rem_pio2+0x46a>
 800bfb0:	4644      	mov	r4, r8
 800bfb2:	2c00      	cmp	r4, #0
 800bfb4:	f2c0 80ff 	blt.w	800c1b6 <__kernel_rem_pio2+0x4ce>
 800bfb8:	4b19      	ldr	r3, [pc, #100]	@ (800c020 <__kernel_rem_pio2+0x338>)
 800bfba:	461f      	mov	r7, r3
 800bfbc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800bfbe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bfc2:	9306      	str	r3, [sp, #24]
 800bfc4:	f04f 0a00 	mov.w	sl, #0
 800bfc8:	f04f 0b00 	mov.w	fp, #0
 800bfcc:	2600      	movs	r6, #0
 800bfce:	eba8 0504 	sub.w	r5, r8, r4
 800bfd2:	e0e4      	b.n	800c19e <__kernel_rem_pio2+0x4b6>
 800bfd4:	f04f 0902 	mov.w	r9, #2
 800bfd8:	e754      	b.n	800be84 <__kernel_rem_pio2+0x19c>
 800bfda:	f854 3b04 	ldr.w	r3, [r4], #4
 800bfde:	bb0d      	cbnz	r5, 800c024 <__kernel_rem_pio2+0x33c>
 800bfe0:	b123      	cbz	r3, 800bfec <__kernel_rem_pio2+0x304>
 800bfe2:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800bfe6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfea:	2301      	movs	r3, #1
 800bfec:	3201      	adds	r2, #1
 800bfee:	461d      	mov	r5, r3
 800bff0:	e74f      	b.n	800be92 <__kernel_rem_pio2+0x1aa>
 800bff2:	bf00      	nop
 800bff4:	f3af 8000 	nop.w
	...
 800c004:	3ff00000 	.word	0x3ff00000
 800c008:	0800d3c0 	.word	0x0800d3c0
 800c00c:	40200000 	.word	0x40200000
 800c010:	3ff00000 	.word	0x3ff00000
 800c014:	3e700000 	.word	0x3e700000
 800c018:	41700000 	.word	0x41700000
 800c01c:	3fe00000 	.word	0x3fe00000
 800c020:	0800d380 	.word	0x0800d380
 800c024:	1acb      	subs	r3, r1, r3
 800c026:	e7de      	b.n	800bfe6 <__kernel_rem_pio2+0x2fe>
 800c028:	f108 32ff 	add.w	r2, r8, #4294967295
 800c02c:	ab0c      	add	r3, sp, #48	@ 0x30
 800c02e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c032:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c036:	a90c      	add	r1, sp, #48	@ 0x30
 800c038:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c03c:	e737      	b.n	800beae <__kernel_rem_pio2+0x1c6>
 800c03e:	f108 32ff 	add.w	r2, r8, #4294967295
 800c042:	ab0c      	add	r3, sp, #48	@ 0x30
 800c044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c048:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c04c:	e7f3      	b.n	800c036 <__kernel_rem_pio2+0x34e>
 800c04e:	a90c      	add	r1, sp, #48	@ 0x30
 800c050:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c054:	3b01      	subs	r3, #1
 800c056:	430a      	orrs	r2, r1
 800c058:	e785      	b.n	800bf66 <__kernel_rem_pio2+0x27e>
 800c05a:	3401      	adds	r4, #1
 800c05c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c060:	2a00      	cmp	r2, #0
 800c062:	d0fa      	beq.n	800c05a <__kernel_rem_pio2+0x372>
 800c064:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c066:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c06a:	eb0d 0503 	add.w	r5, sp, r3
 800c06e:	9b06      	ldr	r3, [sp, #24]
 800c070:	aa20      	add	r2, sp, #128	@ 0x80
 800c072:	4443      	add	r3, r8
 800c074:	f108 0701 	add.w	r7, r8, #1
 800c078:	3d98      	subs	r5, #152	@ 0x98
 800c07a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800c07e:	4444      	add	r4, r8
 800c080:	42bc      	cmp	r4, r7
 800c082:	da04      	bge.n	800c08e <__kernel_rem_pio2+0x3a6>
 800c084:	46a0      	mov	r8, r4
 800c086:	e6a2      	b.n	800bdce <__kernel_rem_pio2+0xe6>
 800c088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c08a:	2401      	movs	r4, #1
 800c08c:	e7e6      	b.n	800c05c <__kernel_rem_pio2+0x374>
 800c08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c090:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c094:	f7f4 fa66 	bl	8000564 <__aeabi_i2d>
 800c098:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800c358 <__kernel_rem_pio2+0x670>
 800c09c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c0a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c0a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c0a8:	46b2      	mov	sl, r6
 800c0aa:	f04f 0800 	mov.w	r8, #0
 800c0ae:	9b05      	ldr	r3, [sp, #20]
 800c0b0:	4598      	cmp	r8, r3
 800c0b2:	dd05      	ble.n	800c0c0 <__kernel_rem_pio2+0x3d8>
 800c0b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0b8:	3701      	adds	r7, #1
 800c0ba:	eca5 7b02 	vstmia	r5!, {d7}
 800c0be:	e7df      	b.n	800c080 <__kernel_rem_pio2+0x398>
 800c0c0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800c0c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c0c8:	f7f4 fab6 	bl	8000638 <__aeabi_dmul>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0d4:	f7f4 f8fa 	bl	80002cc <__adddf3>
 800c0d8:	f108 0801 	add.w	r8, r8, #1
 800c0dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0e0:	e7e5      	b.n	800c0ae <__kernel_rem_pio2+0x3c6>
 800c0e2:	f1cb 0000 	rsb	r0, fp, #0
 800c0e6:	ec47 6b10 	vmov	d0, r6, r7
 800c0ea:	f7ff fcb5 	bl	800ba58 <scalbn>
 800c0ee:	ec55 4b10 	vmov	r4, r5, d0
 800c0f2:	4b9b      	ldr	r3, [pc, #620]	@ (800c360 <__kernel_rem_pio2+0x678>)
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	f7f4 fd23 	bl	8000b44 <__aeabi_dcmpge>
 800c0fe:	b300      	cbz	r0, 800c142 <__kernel_rem_pio2+0x45a>
 800c100:	4b98      	ldr	r3, [pc, #608]	@ (800c364 <__kernel_rem_pio2+0x67c>)
 800c102:	2200      	movs	r2, #0
 800c104:	4620      	mov	r0, r4
 800c106:	4629      	mov	r1, r5
 800c108:	f7f4 fa96 	bl	8000638 <__aeabi_dmul>
 800c10c:	f7f4 fd44 	bl	8000b98 <__aeabi_d2iz>
 800c110:	4606      	mov	r6, r0
 800c112:	f7f4 fa27 	bl	8000564 <__aeabi_i2d>
 800c116:	4b92      	ldr	r3, [pc, #584]	@ (800c360 <__kernel_rem_pio2+0x678>)
 800c118:	2200      	movs	r2, #0
 800c11a:	f7f4 fa8d 	bl	8000638 <__aeabi_dmul>
 800c11e:	460b      	mov	r3, r1
 800c120:	4602      	mov	r2, r0
 800c122:	4629      	mov	r1, r5
 800c124:	4620      	mov	r0, r4
 800c126:	f7f4 f8cf 	bl	80002c8 <__aeabi_dsub>
 800c12a:	f7f4 fd35 	bl	8000b98 <__aeabi_d2iz>
 800c12e:	ab0c      	add	r3, sp, #48	@ 0x30
 800c130:	f10b 0b18 	add.w	fp, fp, #24
 800c134:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c138:	f108 0801 	add.w	r8, r8, #1
 800c13c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c140:	e720      	b.n	800bf84 <__kernel_rem_pio2+0x29c>
 800c142:	4620      	mov	r0, r4
 800c144:	4629      	mov	r1, r5
 800c146:	f7f4 fd27 	bl	8000b98 <__aeabi_d2iz>
 800c14a:	ab0c      	add	r3, sp, #48	@ 0x30
 800c14c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c150:	e718      	b.n	800bf84 <__kernel_rem_pio2+0x29c>
 800c152:	ab0c      	add	r3, sp, #48	@ 0x30
 800c154:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c158:	f7f4 fa04 	bl	8000564 <__aeabi_i2d>
 800c15c:	4622      	mov	r2, r4
 800c15e:	462b      	mov	r3, r5
 800c160:	f7f4 fa6a 	bl	8000638 <__aeabi_dmul>
 800c164:	4652      	mov	r2, sl
 800c166:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c16a:	465b      	mov	r3, fp
 800c16c:	4620      	mov	r0, r4
 800c16e:	4629      	mov	r1, r5
 800c170:	f7f4 fa62 	bl	8000638 <__aeabi_dmul>
 800c174:	3e01      	subs	r6, #1
 800c176:	4604      	mov	r4, r0
 800c178:	460d      	mov	r5, r1
 800c17a:	e716      	b.n	800bfaa <__kernel_rem_pio2+0x2c2>
 800c17c:	9906      	ldr	r1, [sp, #24]
 800c17e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c182:	9106      	str	r1, [sp, #24]
 800c184:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c188:	f7f4 fa56 	bl	8000638 <__aeabi_dmul>
 800c18c:	4602      	mov	r2, r0
 800c18e:	460b      	mov	r3, r1
 800c190:	4650      	mov	r0, sl
 800c192:	4659      	mov	r1, fp
 800c194:	f7f4 f89a 	bl	80002cc <__adddf3>
 800c198:	3601      	adds	r6, #1
 800c19a:	4682      	mov	sl, r0
 800c19c:	468b      	mov	fp, r1
 800c19e:	9b00      	ldr	r3, [sp, #0]
 800c1a0:	429e      	cmp	r6, r3
 800c1a2:	dc01      	bgt.n	800c1a8 <__kernel_rem_pio2+0x4c0>
 800c1a4:	42ae      	cmp	r6, r5
 800c1a6:	dde9      	ble.n	800c17c <__kernel_rem_pio2+0x494>
 800c1a8:	ab48      	add	r3, sp, #288	@ 0x120
 800c1aa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c1ae:	e9c5 ab00 	strd	sl, fp, [r5]
 800c1b2:	3c01      	subs	r4, #1
 800c1b4:	e6fd      	b.n	800bfb2 <__kernel_rem_pio2+0x2ca>
 800c1b6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c1b8:	2b02      	cmp	r3, #2
 800c1ba:	dc0b      	bgt.n	800c1d4 <__kernel_rem_pio2+0x4ec>
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	dc35      	bgt.n	800c22c <__kernel_rem_pio2+0x544>
 800c1c0:	d059      	beq.n	800c276 <__kernel_rem_pio2+0x58e>
 800c1c2:	9b02      	ldr	r3, [sp, #8]
 800c1c4:	f003 0007 	and.w	r0, r3, #7
 800c1c8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c1cc:	ecbd 8b02 	vpop	{d8}
 800c1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c1d6:	2b03      	cmp	r3, #3
 800c1d8:	d1f3      	bne.n	800c1c2 <__kernel_rem_pio2+0x4da>
 800c1da:	9b05      	ldr	r3, [sp, #20]
 800c1dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c1e0:	eb0d 0403 	add.w	r4, sp, r3
 800c1e4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c1e8:	4625      	mov	r5, r4
 800c1ea:	46c2      	mov	sl, r8
 800c1ec:	f1ba 0f00 	cmp.w	sl, #0
 800c1f0:	dc69      	bgt.n	800c2c6 <__kernel_rem_pio2+0x5de>
 800c1f2:	4645      	mov	r5, r8
 800c1f4:	2d01      	cmp	r5, #1
 800c1f6:	f300 8087 	bgt.w	800c308 <__kernel_rem_pio2+0x620>
 800c1fa:	9c05      	ldr	r4, [sp, #20]
 800c1fc:	ab48      	add	r3, sp, #288	@ 0x120
 800c1fe:	441c      	add	r4, r3
 800c200:	2000      	movs	r0, #0
 800c202:	2100      	movs	r1, #0
 800c204:	f1b8 0f01 	cmp.w	r8, #1
 800c208:	f300 809c 	bgt.w	800c344 <__kernel_rem_pio2+0x65c>
 800c20c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800c210:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800c214:	f1b9 0f00 	cmp.w	r9, #0
 800c218:	f040 80a6 	bne.w	800c368 <__kernel_rem_pio2+0x680>
 800c21c:	9b04      	ldr	r3, [sp, #16]
 800c21e:	e9c3 5600 	strd	r5, r6, [r3]
 800c222:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c226:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c22a:	e7ca      	b.n	800c1c2 <__kernel_rem_pio2+0x4da>
 800c22c:	9d05      	ldr	r5, [sp, #20]
 800c22e:	ab48      	add	r3, sp, #288	@ 0x120
 800c230:	441d      	add	r5, r3
 800c232:	4644      	mov	r4, r8
 800c234:	2000      	movs	r0, #0
 800c236:	2100      	movs	r1, #0
 800c238:	2c00      	cmp	r4, #0
 800c23a:	da35      	bge.n	800c2a8 <__kernel_rem_pio2+0x5c0>
 800c23c:	f1b9 0f00 	cmp.w	r9, #0
 800c240:	d038      	beq.n	800c2b4 <__kernel_rem_pio2+0x5cc>
 800c242:	4602      	mov	r2, r0
 800c244:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c248:	9c04      	ldr	r4, [sp, #16]
 800c24a:	e9c4 2300 	strd	r2, r3, [r4]
 800c24e:	4602      	mov	r2, r0
 800c250:	460b      	mov	r3, r1
 800c252:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c256:	f7f4 f837 	bl	80002c8 <__aeabi_dsub>
 800c25a:	ad4a      	add	r5, sp, #296	@ 0x128
 800c25c:	2401      	movs	r4, #1
 800c25e:	45a0      	cmp	r8, r4
 800c260:	da2b      	bge.n	800c2ba <__kernel_rem_pio2+0x5d2>
 800c262:	f1b9 0f00 	cmp.w	r9, #0
 800c266:	d002      	beq.n	800c26e <__kernel_rem_pio2+0x586>
 800c268:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c26c:	4619      	mov	r1, r3
 800c26e:	9b04      	ldr	r3, [sp, #16]
 800c270:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c274:	e7a5      	b.n	800c1c2 <__kernel_rem_pio2+0x4da>
 800c276:	9c05      	ldr	r4, [sp, #20]
 800c278:	ab48      	add	r3, sp, #288	@ 0x120
 800c27a:	441c      	add	r4, r3
 800c27c:	2000      	movs	r0, #0
 800c27e:	2100      	movs	r1, #0
 800c280:	f1b8 0f00 	cmp.w	r8, #0
 800c284:	da09      	bge.n	800c29a <__kernel_rem_pio2+0x5b2>
 800c286:	f1b9 0f00 	cmp.w	r9, #0
 800c28a:	d002      	beq.n	800c292 <__kernel_rem_pio2+0x5aa>
 800c28c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c290:	4619      	mov	r1, r3
 800c292:	9b04      	ldr	r3, [sp, #16]
 800c294:	e9c3 0100 	strd	r0, r1, [r3]
 800c298:	e793      	b.n	800c1c2 <__kernel_rem_pio2+0x4da>
 800c29a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c29e:	f7f4 f815 	bl	80002cc <__adddf3>
 800c2a2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2a6:	e7eb      	b.n	800c280 <__kernel_rem_pio2+0x598>
 800c2a8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c2ac:	f7f4 f80e 	bl	80002cc <__adddf3>
 800c2b0:	3c01      	subs	r4, #1
 800c2b2:	e7c1      	b.n	800c238 <__kernel_rem_pio2+0x550>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	e7c6      	b.n	800c248 <__kernel_rem_pio2+0x560>
 800c2ba:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c2be:	f7f4 f805 	bl	80002cc <__adddf3>
 800c2c2:	3401      	adds	r4, #1
 800c2c4:	e7cb      	b.n	800c25e <__kernel_rem_pio2+0x576>
 800c2c6:	ed35 7b02 	vldmdb	r5!, {d7}
 800c2ca:	ed8d 7b00 	vstr	d7, [sp]
 800c2ce:	ed95 7b02 	vldr	d7, [r5, #8]
 800c2d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2d6:	ec53 2b17 	vmov	r2, r3, d7
 800c2da:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c2de:	f7f3 fff5 	bl	80002cc <__adddf3>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	4606      	mov	r6, r0
 800c2e8:	460f      	mov	r7, r1
 800c2ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2ee:	f7f3 ffeb 	bl	80002c8 <__aeabi_dsub>
 800c2f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2f6:	f7f3 ffe9 	bl	80002cc <__adddf3>
 800c2fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2fe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c302:	e9c5 6700 	strd	r6, r7, [r5]
 800c306:	e771      	b.n	800c1ec <__kernel_rem_pio2+0x504>
 800c308:	ed34 7b02 	vldmdb	r4!, {d7}
 800c30c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c310:	ec51 0b17 	vmov	r0, r1, d7
 800c314:	4652      	mov	r2, sl
 800c316:	465b      	mov	r3, fp
 800c318:	ed8d 7b00 	vstr	d7, [sp]
 800c31c:	f7f3 ffd6 	bl	80002cc <__adddf3>
 800c320:	4602      	mov	r2, r0
 800c322:	460b      	mov	r3, r1
 800c324:	4606      	mov	r6, r0
 800c326:	460f      	mov	r7, r1
 800c328:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c32c:	f7f3 ffcc 	bl	80002c8 <__aeabi_dsub>
 800c330:	4652      	mov	r2, sl
 800c332:	465b      	mov	r3, fp
 800c334:	f7f3 ffca 	bl	80002cc <__adddf3>
 800c338:	3d01      	subs	r5, #1
 800c33a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c33e:	e9c4 6700 	strd	r6, r7, [r4]
 800c342:	e757      	b.n	800c1f4 <__kernel_rem_pio2+0x50c>
 800c344:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c348:	f7f3 ffc0 	bl	80002cc <__adddf3>
 800c34c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c350:	e758      	b.n	800c204 <__kernel_rem_pio2+0x51c>
 800c352:	bf00      	nop
 800c354:	f3af 8000 	nop.w
	...
 800c360:	41700000 	.word	0x41700000
 800c364:	3e700000 	.word	0x3e700000
 800c368:	9b04      	ldr	r3, [sp, #16]
 800c36a:	9a04      	ldr	r2, [sp, #16]
 800c36c:	601d      	str	r5, [r3, #0]
 800c36e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800c372:	605c      	str	r4, [r3, #4]
 800c374:	609f      	str	r7, [r3, #8]
 800c376:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800c37a:	60d3      	str	r3, [r2, #12]
 800c37c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c380:	6110      	str	r0, [r2, #16]
 800c382:	6153      	str	r3, [r2, #20]
 800c384:	e71d      	b.n	800c1c2 <__kernel_rem_pio2+0x4da>
 800c386:	bf00      	nop

0800c388 <__kernel_rem_pio2f>:
 800c388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38c:	ed2d 8b04 	vpush	{d8-d9}
 800c390:	b0d9      	sub	sp, #356	@ 0x164
 800c392:	4690      	mov	r8, r2
 800c394:	9001      	str	r0, [sp, #4]
 800c396:	4ab6      	ldr	r2, [pc, #728]	@ (800c670 <__kernel_rem_pio2f+0x2e8>)
 800c398:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800c39a:	f118 0f04 	cmn.w	r8, #4
 800c39e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800c3a2:	460f      	mov	r7, r1
 800c3a4:	f103 3bff 	add.w	fp, r3, #4294967295
 800c3a8:	db26      	blt.n	800c3f8 <__kernel_rem_pio2f+0x70>
 800c3aa:	f1b8 0203 	subs.w	r2, r8, #3
 800c3ae:	bf48      	it	mi
 800c3b0:	f108 0204 	addmi.w	r2, r8, #4
 800c3b4:	10d2      	asrs	r2, r2, #3
 800c3b6:	1c55      	adds	r5, r2, #1
 800c3b8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c3ba:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800c680 <__kernel_rem_pio2f+0x2f8>
 800c3be:	00e8      	lsls	r0, r5, #3
 800c3c0:	eba2 060b 	sub.w	r6, r2, fp
 800c3c4:	9002      	str	r0, [sp, #8]
 800c3c6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800c3ca:	eb0a 0c0b 	add.w	ip, sl, fp
 800c3ce:	ac1c      	add	r4, sp, #112	@ 0x70
 800c3d0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	4560      	cmp	r0, ip
 800c3d8:	dd10      	ble.n	800c3fc <__kernel_rem_pio2f+0x74>
 800c3da:	a91c      	add	r1, sp, #112	@ 0x70
 800c3dc:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800c3e0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800c3e4:	2600      	movs	r6, #0
 800c3e6:	4556      	cmp	r6, sl
 800c3e8:	dc24      	bgt.n	800c434 <__kernel_rem_pio2f+0xac>
 800c3ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c3ee:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800c680 <__kernel_rem_pio2f+0x2f8>
 800c3f2:	4684      	mov	ip, r0
 800c3f4:	2400      	movs	r4, #0
 800c3f6:	e016      	b.n	800c426 <__kernel_rem_pio2f+0x9e>
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	e7dc      	b.n	800c3b6 <__kernel_rem_pio2f+0x2e>
 800c3fc:	42c6      	cmn	r6, r0
 800c3fe:	bf5d      	ittte	pl
 800c400:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800c404:	ee07 1a90 	vmovpl	s15, r1
 800c408:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c40c:	eef0 7a47 	vmovmi.f32	s15, s14
 800c410:	ece4 7a01 	vstmia	r4!, {s15}
 800c414:	3001      	adds	r0, #1
 800c416:	e7de      	b.n	800c3d6 <__kernel_rem_pio2f+0x4e>
 800c418:	ecfe 6a01 	vldmia	lr!, {s13}
 800c41c:	ed3c 7a01 	vldmdb	ip!, {s14}
 800c420:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c424:	3401      	adds	r4, #1
 800c426:	455c      	cmp	r4, fp
 800c428:	ddf6      	ble.n	800c418 <__kernel_rem_pio2f+0x90>
 800c42a:	ece9 7a01 	vstmia	r9!, {s15}
 800c42e:	3601      	adds	r6, #1
 800c430:	3004      	adds	r0, #4
 800c432:	e7d8      	b.n	800c3e6 <__kernel_rem_pio2f+0x5e>
 800c434:	a908      	add	r1, sp, #32
 800c436:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c43a:	9104      	str	r1, [sp, #16]
 800c43c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c43e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800c67c <__kernel_rem_pio2f+0x2f4>
 800c442:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800c678 <__kernel_rem_pio2f+0x2f0>
 800c446:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c44a:	9203      	str	r2, [sp, #12]
 800c44c:	4654      	mov	r4, sl
 800c44e:	00a2      	lsls	r2, r4, #2
 800c450:	9205      	str	r2, [sp, #20]
 800c452:	aa58      	add	r2, sp, #352	@ 0x160
 800c454:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c458:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800c45c:	a944      	add	r1, sp, #272	@ 0x110
 800c45e:	aa08      	add	r2, sp, #32
 800c460:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800c464:	4694      	mov	ip, r2
 800c466:	4626      	mov	r6, r4
 800c468:	2e00      	cmp	r6, #0
 800c46a:	dc4c      	bgt.n	800c506 <__kernel_rem_pio2f+0x17e>
 800c46c:	4628      	mov	r0, r5
 800c46e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c472:	f7ff fba9 	bl	800bbc8 <scalbnf>
 800c476:	eeb0 8a40 	vmov.f32	s16, s0
 800c47a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800c47e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c482:	f000 fa65 	bl	800c950 <floorf>
 800c486:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800c48a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c48e:	2d00      	cmp	r5, #0
 800c490:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c494:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c498:	ee17 9a90 	vmov	r9, s15
 800c49c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4a0:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c4a4:	dd41      	ble.n	800c52a <__kernel_rem_pio2f+0x1a2>
 800c4a6:	f104 3cff 	add.w	ip, r4, #4294967295
 800c4aa:	a908      	add	r1, sp, #32
 800c4ac:	f1c5 0e08 	rsb	lr, r5, #8
 800c4b0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800c4b4:	fa46 f00e 	asr.w	r0, r6, lr
 800c4b8:	4481      	add	r9, r0
 800c4ba:	fa00 f00e 	lsl.w	r0, r0, lr
 800c4be:	1a36      	subs	r6, r6, r0
 800c4c0:	f1c5 0007 	rsb	r0, r5, #7
 800c4c4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800c4c8:	4106      	asrs	r6, r0
 800c4ca:	2e00      	cmp	r6, #0
 800c4cc:	dd3c      	ble.n	800c548 <__kernel_rem_pio2f+0x1c0>
 800c4ce:	f04f 0e00 	mov.w	lr, #0
 800c4d2:	f109 0901 	add.w	r9, r9, #1
 800c4d6:	4670      	mov	r0, lr
 800c4d8:	4574      	cmp	r4, lr
 800c4da:	dc68      	bgt.n	800c5ae <__kernel_rem_pio2f+0x226>
 800c4dc:	2d00      	cmp	r5, #0
 800c4de:	dd03      	ble.n	800c4e8 <__kernel_rem_pio2f+0x160>
 800c4e0:	2d01      	cmp	r5, #1
 800c4e2:	d074      	beq.n	800c5ce <__kernel_rem_pio2f+0x246>
 800c4e4:	2d02      	cmp	r5, #2
 800c4e6:	d07d      	beq.n	800c5e4 <__kernel_rem_pio2f+0x25c>
 800c4e8:	2e02      	cmp	r6, #2
 800c4ea:	d12d      	bne.n	800c548 <__kernel_rem_pio2f+0x1c0>
 800c4ec:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c4f0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c4f4:	b340      	cbz	r0, 800c548 <__kernel_rem_pio2f+0x1c0>
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	9306      	str	r3, [sp, #24]
 800c4fa:	f7ff fb65 	bl	800bbc8 <scalbnf>
 800c4fe:	9b06      	ldr	r3, [sp, #24]
 800c500:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c504:	e020      	b.n	800c548 <__kernel_rem_pio2f+0x1c0>
 800c506:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c50a:	3e01      	subs	r6, #1
 800c50c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c514:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c518:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c51c:	ecac 0a01 	vstmia	ip!, {s0}
 800c520:	ed30 0a01 	vldmdb	r0!, {s0}
 800c524:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c528:	e79e      	b.n	800c468 <__kernel_rem_pio2f+0xe0>
 800c52a:	d105      	bne.n	800c538 <__kernel_rem_pio2f+0x1b0>
 800c52c:	1e60      	subs	r0, r4, #1
 800c52e:	a908      	add	r1, sp, #32
 800c530:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800c534:	11f6      	asrs	r6, r6, #7
 800c536:	e7c8      	b.n	800c4ca <__kernel_rem_pio2f+0x142>
 800c538:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c53c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c544:	da31      	bge.n	800c5aa <__kernel_rem_pio2f+0x222>
 800c546:	2600      	movs	r6, #0
 800c548:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c550:	f040 8098 	bne.w	800c684 <__kernel_rem_pio2f+0x2fc>
 800c554:	1e60      	subs	r0, r4, #1
 800c556:	2200      	movs	r2, #0
 800c558:	4550      	cmp	r0, sl
 800c55a:	da4b      	bge.n	800c5f4 <__kernel_rem_pio2f+0x26c>
 800c55c:	2a00      	cmp	r2, #0
 800c55e:	d065      	beq.n	800c62c <__kernel_rem_pio2f+0x2a4>
 800c560:	3c01      	subs	r4, #1
 800c562:	ab08      	add	r3, sp, #32
 800c564:	3d08      	subs	r5, #8
 800c566:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d0f8      	beq.n	800c560 <__kernel_rem_pio2f+0x1d8>
 800c56e:	4628      	mov	r0, r5
 800c570:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c574:	f7ff fb28 	bl	800bbc8 <scalbnf>
 800c578:	1c63      	adds	r3, r4, #1
 800c57a:	aa44      	add	r2, sp, #272	@ 0x110
 800c57c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800c67c <__kernel_rem_pio2f+0x2f4>
 800c580:	0099      	lsls	r1, r3, #2
 800c582:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c586:	4623      	mov	r3, r4
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f280 80a9 	bge.w	800c6e0 <__kernel_rem_pio2f+0x358>
 800c58e:	4623      	mov	r3, r4
 800c590:	2b00      	cmp	r3, #0
 800c592:	f2c0 80c7 	blt.w	800c724 <__kernel_rem_pio2f+0x39c>
 800c596:	aa44      	add	r2, sp, #272	@ 0x110
 800c598:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c59c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800c674 <__kernel_rem_pio2f+0x2ec>
 800c5a0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800c680 <__kernel_rem_pio2f+0x2f8>
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	1ae2      	subs	r2, r4, r3
 800c5a8:	e0b1      	b.n	800c70e <__kernel_rem_pio2f+0x386>
 800c5aa:	2602      	movs	r6, #2
 800c5ac:	e78f      	b.n	800c4ce <__kernel_rem_pio2f+0x146>
 800c5ae:	f852 1b04 	ldr.w	r1, [r2], #4
 800c5b2:	b948      	cbnz	r0, 800c5c8 <__kernel_rem_pio2f+0x240>
 800c5b4:	b121      	cbz	r1, 800c5c0 <__kernel_rem_pio2f+0x238>
 800c5b6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800c5ba:	f842 1c04 	str.w	r1, [r2, #-4]
 800c5be:	2101      	movs	r1, #1
 800c5c0:	f10e 0e01 	add.w	lr, lr, #1
 800c5c4:	4608      	mov	r0, r1
 800c5c6:	e787      	b.n	800c4d8 <__kernel_rem_pio2f+0x150>
 800c5c8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800c5cc:	e7f5      	b.n	800c5ba <__kernel_rem_pio2f+0x232>
 800c5ce:	f104 3cff 	add.w	ip, r4, #4294967295
 800c5d2:	aa08      	add	r2, sp, #32
 800c5d4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c5d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c5dc:	a908      	add	r1, sp, #32
 800c5de:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c5e2:	e781      	b.n	800c4e8 <__kernel_rem_pio2f+0x160>
 800c5e4:	f104 3cff 	add.w	ip, r4, #4294967295
 800c5e8:	aa08      	add	r2, sp, #32
 800c5ea:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c5ee:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c5f2:	e7f3      	b.n	800c5dc <__kernel_rem_pio2f+0x254>
 800c5f4:	a908      	add	r1, sp, #32
 800c5f6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c5fa:	3801      	subs	r0, #1
 800c5fc:	430a      	orrs	r2, r1
 800c5fe:	e7ab      	b.n	800c558 <__kernel_rem_pio2f+0x1d0>
 800c600:	3201      	adds	r2, #1
 800c602:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800c606:	2e00      	cmp	r6, #0
 800c608:	d0fa      	beq.n	800c600 <__kernel_rem_pio2f+0x278>
 800c60a:	9905      	ldr	r1, [sp, #20]
 800c60c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800c610:	eb0d 0001 	add.w	r0, sp, r1
 800c614:	18e6      	adds	r6, r4, r3
 800c616:	a91c      	add	r1, sp, #112	@ 0x70
 800c618:	f104 0c01 	add.w	ip, r4, #1
 800c61c:	384c      	subs	r0, #76	@ 0x4c
 800c61e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800c622:	4422      	add	r2, r4
 800c624:	4562      	cmp	r2, ip
 800c626:	da04      	bge.n	800c632 <__kernel_rem_pio2f+0x2aa>
 800c628:	4614      	mov	r4, r2
 800c62a:	e710      	b.n	800c44e <__kernel_rem_pio2f+0xc6>
 800c62c:	9804      	ldr	r0, [sp, #16]
 800c62e:	2201      	movs	r2, #1
 800c630:	e7e7      	b.n	800c602 <__kernel_rem_pio2f+0x27a>
 800c632:	9903      	ldr	r1, [sp, #12]
 800c634:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c638:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800c63c:	9105      	str	r1, [sp, #20]
 800c63e:	ee07 1a90 	vmov	s15, r1
 800c642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c646:	2400      	movs	r4, #0
 800c648:	ece6 7a01 	vstmia	r6!, {s15}
 800c64c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800c680 <__kernel_rem_pio2f+0x2f8>
 800c650:	46b1      	mov	r9, r6
 800c652:	455c      	cmp	r4, fp
 800c654:	dd04      	ble.n	800c660 <__kernel_rem_pio2f+0x2d8>
 800c656:	ece0 7a01 	vstmia	r0!, {s15}
 800c65a:	f10c 0c01 	add.w	ip, ip, #1
 800c65e:	e7e1      	b.n	800c624 <__kernel_rem_pio2f+0x29c>
 800c660:	ecfe 6a01 	vldmia	lr!, {s13}
 800c664:	ed39 7a01 	vldmdb	r9!, {s14}
 800c668:	3401      	adds	r4, #1
 800c66a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c66e:	e7f0      	b.n	800c652 <__kernel_rem_pio2f+0x2ca>
 800c670:	0800d3fc 	.word	0x0800d3fc
 800c674:	0800d3d0 	.word	0x0800d3d0
 800c678:	43800000 	.word	0x43800000
 800c67c:	3b800000 	.word	0x3b800000
 800c680:	00000000 	.word	0x00000000
 800c684:	9b02      	ldr	r3, [sp, #8]
 800c686:	eeb0 0a48 	vmov.f32	s0, s16
 800c68a:	eba3 0008 	sub.w	r0, r3, r8
 800c68e:	f7ff fa9b 	bl	800bbc8 <scalbnf>
 800c692:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800c678 <__kernel_rem_pio2f+0x2f0>
 800c696:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c69e:	db19      	blt.n	800c6d4 <__kernel_rem_pio2f+0x34c>
 800c6a0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800c67c <__kernel_rem_pio2f+0x2f4>
 800c6a4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c6a8:	aa08      	add	r2, sp, #32
 800c6aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c6ae:	3508      	adds	r5, #8
 800c6b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c6b4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c6b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c6bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c6c0:	ee10 3a10 	vmov	r3, s0
 800c6c4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c6c8:	ee17 3a90 	vmov	r3, s15
 800c6cc:	3401      	adds	r4, #1
 800c6ce:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c6d2:	e74c      	b.n	800c56e <__kernel_rem_pio2f+0x1e6>
 800c6d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c6d8:	aa08      	add	r2, sp, #32
 800c6da:	ee10 3a10 	vmov	r3, s0
 800c6de:	e7f6      	b.n	800c6ce <__kernel_rem_pio2f+0x346>
 800c6e0:	a808      	add	r0, sp, #32
 800c6e2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c6e6:	9001      	str	r0, [sp, #4]
 800c6e8:	ee07 0a90 	vmov	s15, r0
 800c6ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c6f6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c6fa:	ed62 7a01 	vstmdb	r2!, {s15}
 800c6fe:	e743      	b.n	800c588 <__kernel_rem_pio2f+0x200>
 800c700:	ecfc 6a01 	vldmia	ip!, {s13}
 800c704:	ecb5 7a01 	vldmia	r5!, {s14}
 800c708:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c70c:	3001      	adds	r0, #1
 800c70e:	4550      	cmp	r0, sl
 800c710:	dc01      	bgt.n	800c716 <__kernel_rem_pio2f+0x38e>
 800c712:	4290      	cmp	r0, r2
 800c714:	ddf4      	ble.n	800c700 <__kernel_rem_pio2f+0x378>
 800c716:	a858      	add	r0, sp, #352	@ 0x160
 800c718:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c71c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c720:	3b01      	subs	r3, #1
 800c722:	e735      	b.n	800c590 <__kernel_rem_pio2f+0x208>
 800c724:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c726:	2b02      	cmp	r3, #2
 800c728:	dc09      	bgt.n	800c73e <__kernel_rem_pio2f+0x3b6>
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	dc27      	bgt.n	800c77e <__kernel_rem_pio2f+0x3f6>
 800c72e:	d040      	beq.n	800c7b2 <__kernel_rem_pio2f+0x42a>
 800c730:	f009 0007 	and.w	r0, r9, #7
 800c734:	b059      	add	sp, #356	@ 0x164
 800c736:	ecbd 8b04 	vpop	{d8-d9}
 800c73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c73e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c740:	2b03      	cmp	r3, #3
 800c742:	d1f5      	bne.n	800c730 <__kernel_rem_pio2f+0x3a8>
 800c744:	aa30      	add	r2, sp, #192	@ 0xc0
 800c746:	1f0b      	subs	r3, r1, #4
 800c748:	4413      	add	r3, r2
 800c74a:	461a      	mov	r2, r3
 800c74c:	4620      	mov	r0, r4
 800c74e:	2800      	cmp	r0, #0
 800c750:	dc50      	bgt.n	800c7f4 <__kernel_rem_pio2f+0x46c>
 800c752:	4622      	mov	r2, r4
 800c754:	2a01      	cmp	r2, #1
 800c756:	dc5d      	bgt.n	800c814 <__kernel_rem_pio2f+0x48c>
 800c758:	ab30      	add	r3, sp, #192	@ 0xc0
 800c75a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800c680 <__kernel_rem_pio2f+0x2f8>
 800c75e:	440b      	add	r3, r1
 800c760:	2c01      	cmp	r4, #1
 800c762:	dc67      	bgt.n	800c834 <__kernel_rem_pio2f+0x4ac>
 800c764:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c768:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c76c:	2e00      	cmp	r6, #0
 800c76e:	d167      	bne.n	800c840 <__kernel_rem_pio2f+0x4b8>
 800c770:	edc7 6a00 	vstr	s13, [r7]
 800c774:	ed87 7a01 	vstr	s14, [r7, #4]
 800c778:	edc7 7a02 	vstr	s15, [r7, #8]
 800c77c:	e7d8      	b.n	800c730 <__kernel_rem_pio2f+0x3a8>
 800c77e:	ab30      	add	r3, sp, #192	@ 0xc0
 800c780:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800c680 <__kernel_rem_pio2f+0x2f8>
 800c784:	440b      	add	r3, r1
 800c786:	4622      	mov	r2, r4
 800c788:	2a00      	cmp	r2, #0
 800c78a:	da24      	bge.n	800c7d6 <__kernel_rem_pio2f+0x44e>
 800c78c:	b34e      	cbz	r6, 800c7e2 <__kernel_rem_pio2f+0x45a>
 800c78e:	eef1 7a47 	vneg.f32	s15, s14
 800c792:	edc7 7a00 	vstr	s15, [r7]
 800c796:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800c79a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c79e:	aa31      	add	r2, sp, #196	@ 0xc4
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	429c      	cmp	r4, r3
 800c7a4:	da20      	bge.n	800c7e8 <__kernel_rem_pio2f+0x460>
 800c7a6:	b10e      	cbz	r6, 800c7ac <__kernel_rem_pio2f+0x424>
 800c7a8:	eef1 7a67 	vneg.f32	s15, s15
 800c7ac:	edc7 7a01 	vstr	s15, [r7, #4]
 800c7b0:	e7be      	b.n	800c730 <__kernel_rem_pio2f+0x3a8>
 800c7b2:	ab30      	add	r3, sp, #192	@ 0xc0
 800c7b4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800c680 <__kernel_rem_pio2f+0x2f8>
 800c7b8:	440b      	add	r3, r1
 800c7ba:	2c00      	cmp	r4, #0
 800c7bc:	da05      	bge.n	800c7ca <__kernel_rem_pio2f+0x442>
 800c7be:	b10e      	cbz	r6, 800c7c4 <__kernel_rem_pio2f+0x43c>
 800c7c0:	eef1 7a67 	vneg.f32	s15, s15
 800c7c4:	edc7 7a00 	vstr	s15, [r7]
 800c7c8:	e7b2      	b.n	800c730 <__kernel_rem_pio2f+0x3a8>
 800c7ca:	ed33 7a01 	vldmdb	r3!, {s14}
 800c7ce:	3c01      	subs	r4, #1
 800c7d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c7d4:	e7f1      	b.n	800c7ba <__kernel_rem_pio2f+0x432>
 800c7d6:	ed73 7a01 	vldmdb	r3!, {s15}
 800c7da:	3a01      	subs	r2, #1
 800c7dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c7e0:	e7d2      	b.n	800c788 <__kernel_rem_pio2f+0x400>
 800c7e2:	eef0 7a47 	vmov.f32	s15, s14
 800c7e6:	e7d4      	b.n	800c792 <__kernel_rem_pio2f+0x40a>
 800c7e8:	ecb2 7a01 	vldmia	r2!, {s14}
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c7f2:	e7d6      	b.n	800c7a2 <__kernel_rem_pio2f+0x41a>
 800c7f4:	ed72 7a01 	vldmdb	r2!, {s15}
 800c7f8:	edd2 6a01 	vldr	s13, [r2, #4]
 800c7fc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c800:	3801      	subs	r0, #1
 800c802:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c806:	ed82 7a00 	vstr	s14, [r2]
 800c80a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c80e:	edc2 7a01 	vstr	s15, [r2, #4]
 800c812:	e79c      	b.n	800c74e <__kernel_rem_pio2f+0x3c6>
 800c814:	ed73 7a01 	vldmdb	r3!, {s15}
 800c818:	edd3 6a01 	vldr	s13, [r3, #4]
 800c81c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c820:	3a01      	subs	r2, #1
 800c822:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c826:	ed83 7a00 	vstr	s14, [r3]
 800c82a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c82e:	edc3 7a01 	vstr	s15, [r3, #4]
 800c832:	e78f      	b.n	800c754 <__kernel_rem_pio2f+0x3cc>
 800c834:	ed33 7a01 	vldmdb	r3!, {s14}
 800c838:	3c01      	subs	r4, #1
 800c83a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c83e:	e78f      	b.n	800c760 <__kernel_rem_pio2f+0x3d8>
 800c840:	eef1 6a66 	vneg.f32	s13, s13
 800c844:	eeb1 7a47 	vneg.f32	s14, s14
 800c848:	edc7 6a00 	vstr	s13, [r7]
 800c84c:	ed87 7a01 	vstr	s14, [r7, #4]
 800c850:	eef1 7a67 	vneg.f32	s15, s15
 800c854:	e790      	b.n	800c778 <__kernel_rem_pio2f+0x3f0>
 800c856:	bf00      	nop

0800c858 <floor>:
 800c858:	ec51 0b10 	vmov	r0, r1, d0
 800c85c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c864:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c868:	2e13      	cmp	r6, #19
 800c86a:	460c      	mov	r4, r1
 800c86c:	4605      	mov	r5, r0
 800c86e:	4680      	mov	r8, r0
 800c870:	dc34      	bgt.n	800c8dc <floor+0x84>
 800c872:	2e00      	cmp	r6, #0
 800c874:	da17      	bge.n	800c8a6 <floor+0x4e>
 800c876:	a332      	add	r3, pc, #200	@ (adr r3, 800c940 <floor+0xe8>)
 800c878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87c:	f7f3 fd26 	bl	80002cc <__adddf3>
 800c880:	2200      	movs	r2, #0
 800c882:	2300      	movs	r3, #0
 800c884:	f7f4 f968 	bl	8000b58 <__aeabi_dcmpgt>
 800c888:	b150      	cbz	r0, 800c8a0 <floor+0x48>
 800c88a:	2c00      	cmp	r4, #0
 800c88c:	da55      	bge.n	800c93a <floor+0xe2>
 800c88e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c892:	432c      	orrs	r4, r5
 800c894:	2500      	movs	r5, #0
 800c896:	42ac      	cmp	r4, r5
 800c898:	4c2b      	ldr	r4, [pc, #172]	@ (800c948 <floor+0xf0>)
 800c89a:	bf08      	it	eq
 800c89c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c8a0:	4621      	mov	r1, r4
 800c8a2:	4628      	mov	r0, r5
 800c8a4:	e023      	b.n	800c8ee <floor+0x96>
 800c8a6:	4f29      	ldr	r7, [pc, #164]	@ (800c94c <floor+0xf4>)
 800c8a8:	4137      	asrs	r7, r6
 800c8aa:	ea01 0307 	and.w	r3, r1, r7
 800c8ae:	4303      	orrs	r3, r0
 800c8b0:	d01d      	beq.n	800c8ee <floor+0x96>
 800c8b2:	a323      	add	r3, pc, #140	@ (adr r3, 800c940 <floor+0xe8>)
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	f7f3 fd08 	bl	80002cc <__adddf3>
 800c8bc:	2200      	movs	r2, #0
 800c8be:	2300      	movs	r3, #0
 800c8c0:	f7f4 f94a 	bl	8000b58 <__aeabi_dcmpgt>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	d0eb      	beq.n	800c8a0 <floor+0x48>
 800c8c8:	2c00      	cmp	r4, #0
 800c8ca:	bfbe      	ittt	lt
 800c8cc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c8d0:	4133      	asrlt	r3, r6
 800c8d2:	18e4      	addlt	r4, r4, r3
 800c8d4:	ea24 0407 	bic.w	r4, r4, r7
 800c8d8:	2500      	movs	r5, #0
 800c8da:	e7e1      	b.n	800c8a0 <floor+0x48>
 800c8dc:	2e33      	cmp	r6, #51	@ 0x33
 800c8de:	dd0a      	ble.n	800c8f6 <floor+0x9e>
 800c8e0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c8e4:	d103      	bne.n	800c8ee <floor+0x96>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	f7f3 fcef 	bl	80002cc <__adddf3>
 800c8ee:	ec41 0b10 	vmov	d0, r0, r1
 800c8f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c8fa:	f04f 37ff 	mov.w	r7, #4294967295
 800c8fe:	40df      	lsrs	r7, r3
 800c900:	4207      	tst	r7, r0
 800c902:	d0f4      	beq.n	800c8ee <floor+0x96>
 800c904:	a30e      	add	r3, pc, #56	@ (adr r3, 800c940 <floor+0xe8>)
 800c906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90a:	f7f3 fcdf 	bl	80002cc <__adddf3>
 800c90e:	2200      	movs	r2, #0
 800c910:	2300      	movs	r3, #0
 800c912:	f7f4 f921 	bl	8000b58 <__aeabi_dcmpgt>
 800c916:	2800      	cmp	r0, #0
 800c918:	d0c2      	beq.n	800c8a0 <floor+0x48>
 800c91a:	2c00      	cmp	r4, #0
 800c91c:	da0a      	bge.n	800c934 <floor+0xdc>
 800c91e:	2e14      	cmp	r6, #20
 800c920:	d101      	bne.n	800c926 <floor+0xce>
 800c922:	3401      	adds	r4, #1
 800c924:	e006      	b.n	800c934 <floor+0xdc>
 800c926:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c92a:	2301      	movs	r3, #1
 800c92c:	40b3      	lsls	r3, r6
 800c92e:	441d      	add	r5, r3
 800c930:	4545      	cmp	r5, r8
 800c932:	d3f6      	bcc.n	800c922 <floor+0xca>
 800c934:	ea25 0507 	bic.w	r5, r5, r7
 800c938:	e7b2      	b.n	800c8a0 <floor+0x48>
 800c93a:	2500      	movs	r5, #0
 800c93c:	462c      	mov	r4, r5
 800c93e:	e7af      	b.n	800c8a0 <floor+0x48>
 800c940:	8800759c 	.word	0x8800759c
 800c944:	7e37e43c 	.word	0x7e37e43c
 800c948:	bff00000 	.word	0xbff00000
 800c94c:	000fffff 	.word	0x000fffff

0800c950 <floorf>:
 800c950:	ee10 3a10 	vmov	r3, s0
 800c954:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c958:	3a7f      	subs	r2, #127	@ 0x7f
 800c95a:	2a16      	cmp	r2, #22
 800c95c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c960:	dc2b      	bgt.n	800c9ba <floorf+0x6a>
 800c962:	2a00      	cmp	r2, #0
 800c964:	da12      	bge.n	800c98c <floorf+0x3c>
 800c966:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c9cc <floorf+0x7c>
 800c96a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c96e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c976:	dd06      	ble.n	800c986 <floorf+0x36>
 800c978:	2b00      	cmp	r3, #0
 800c97a:	da24      	bge.n	800c9c6 <floorf+0x76>
 800c97c:	2900      	cmp	r1, #0
 800c97e:	4b14      	ldr	r3, [pc, #80]	@ (800c9d0 <floorf+0x80>)
 800c980:	bf08      	it	eq
 800c982:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c986:	ee00 3a10 	vmov	s0, r3
 800c98a:	4770      	bx	lr
 800c98c:	4911      	ldr	r1, [pc, #68]	@ (800c9d4 <floorf+0x84>)
 800c98e:	4111      	asrs	r1, r2
 800c990:	420b      	tst	r3, r1
 800c992:	d0fa      	beq.n	800c98a <floorf+0x3a>
 800c994:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c9cc <floorf+0x7c>
 800c998:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c99c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a4:	ddef      	ble.n	800c986 <floorf+0x36>
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	bfbe      	ittt	lt
 800c9aa:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c9ae:	fa40 f202 	asrlt.w	r2, r0, r2
 800c9b2:	189b      	addlt	r3, r3, r2
 800c9b4:	ea23 0301 	bic.w	r3, r3, r1
 800c9b8:	e7e5      	b.n	800c986 <floorf+0x36>
 800c9ba:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c9be:	d3e4      	bcc.n	800c98a <floorf+0x3a>
 800c9c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c9c4:	4770      	bx	lr
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	e7dd      	b.n	800c986 <floorf+0x36>
 800c9ca:	bf00      	nop
 800c9cc:	7149f2ca 	.word	0x7149f2ca
 800c9d0:	bf800000 	.word	0xbf800000
 800c9d4:	007fffff 	.word	0x007fffff

0800c9d8 <_init>:
 800c9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9da:	bf00      	nop
 800c9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9de:	bc08      	pop	{r3}
 800c9e0:	469e      	mov	lr, r3
 800c9e2:	4770      	bx	lr

0800c9e4 <_fini>:
 800c9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e6:	bf00      	nop
 800c9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ea:	bc08      	pop	{r3}
 800c9ec:	469e      	mov	lr, r3
 800c9ee:	4770      	bx	lr
