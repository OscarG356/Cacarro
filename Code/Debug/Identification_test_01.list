
Identification_test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000caf8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a18  0800ccc8  0800ccc8  0000dcc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6e0  0800d6e0  0000f4ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d6e0  0800d6e0  0000e6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d6e8  0800d6e8  0000f4ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6e8  0800d6e8  0000e6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d6ec  0800d6ec  0000e6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004ec  20000000  0800d6f0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  200004ec  0800dbdc  0000f4ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009ec  0800dbdc  0000f9ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f4ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1b6  00000000  00000000  0000f51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002266  00000000  00000000  0001e6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00020938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b10  00000000  00000000  00021760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f1b  00000000  00000000  00022270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fb8  00000000  00000000  0004518b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3966  00000000  00000000  00056143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129aa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005580  00000000  00000000  00129aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0012f06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200004ec 	.word	0x200004ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ccb0 	.word	0x0800ccb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004f0 	.word	0x200004f0
 800020c:	0800ccb0 	.word	0x0800ccb0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	0000      	movs	r0, r0
	...

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fbc:	ed2d 8b02 	vpush	{d8}
 8000fc0:	b094      	sub	sp, #80	@ 0x50
 8000fc2:	af06      	add	r7, sp, #24
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 8000fc4:	f002 fae4 	bl	8003590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc8:	f000 feba 	bl	8001d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fcc:	f001 f94a 	bl	8002264 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fd0:	f001 f8f4 	bl	80021bc <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000fd4:	f001 f8ce 	bl	8002174 <MX_TIM14_Init>
  MX_TIM2_Init();
 8000fd8:	f000 ff20 	bl	8001e1c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fdc:	f000 ff72 	bl	8001ec4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fe0:	f000 fff2 	bl	8001fc8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000fe4:	f001 f844 	bl	8002070 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8000fe8:	f001 f912 	bl	8002210 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim14); // Start the sampling timer
 8000fec:	4876      	ldr	r0, [pc, #472]	@ (80011c8 <main+0x210>)
 8000fee:	f003 fccb 	bl	8004988 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL); // Start the encoder timer
 8000ff2:	213c      	movs	r1, #60	@ 0x3c
 8000ff4:	4875      	ldr	r0, [pc, #468]	@ (80011cc <main+0x214>)
 8000ff6:	f003 feff 	bl	8004df8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL); // Start the encoder timer
 8000ffa:	213c      	movs	r1, #60	@ 0x3c
 8000ffc:	4874      	ldr	r0, [pc, #464]	@ (80011d0 <main+0x218>)
 8000ffe:	f003 fefb 	bl	8004df8 <HAL_TIM_Encoder_Start_IT>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,SET);
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001008:	4872      	ldr	r0, [pc, #456]	@ (80011d4 <main+0x21c>)
 800100a:	f002 fe6b 	bl	8003ce4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2102      	movs	r1, #2
 8001012:	4871      	ldr	r0, [pc, #452]	@ (80011d8 <main+0x220>)
 8001014:	f002 fe66 	bl	8003ce4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001018:	2100      	movs	r1, #0
 800101a:	4870      	ldr	r0, [pc, #448]	@ (80011dc <main+0x224>)
 800101c:	f003 fd7e 	bl	8004b1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001020:	2104      	movs	r1, #4
 8001022:	486e      	ldr	r0, [pc, #440]	@ (80011dc <main+0x224>)
 8001024:	f003 fd7a 	bl	8004b1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001028:	2100      	movs	r1, #0
 800102a:	486d      	ldr	r0, [pc, #436]	@ (80011e0 <main+0x228>)
 800102c:	f003 fd76 	bl	8004b1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001030:	2104      	movs	r1, #4
 8001032:	486b      	ldr	r0, [pc, #428]	@ (80011e0 <main+0x228>)
 8001034:	f003 fd72 	bl	8004b1c <HAL_TIM_PWM_Start>

	RobotKinematics_Init(&cacarro, 0.05,0.315);
 8001038:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 80011e4 <main+0x22c>
 800103c:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 80011e8 <main+0x230>
 8001040:	486a      	ldr	r0, [pc, #424]	@ (80011ec <main+0x234>)
 8001042:	f001 fb9d 	bl	8002780 <RobotKinematics_Init>
//	HAL_Delay(2000);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	t = 0;
 8001046:	4b6a      	ldr	r3, [pc, #424]	@ (80011f0 <main+0x238>)
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
	while (1)
	{

		while(Sampling)
 800104e:	f000 be63 	b.w	8001d18 <main+0xd60>
		{
			Sampling = 0;
 8001052:	4b68      	ldr	r3, [pc, #416]	@ (80011f4 <main+0x23c>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
//				Xd = alphas[0][0] + alphas[0][1]*t + alphas[0][2]*powf(t,2) + alphas[0][3]*powf(t,3) + alphas[0][4]*powf(t,4) + alphas[0][5]*powf(t,5);
//				Yd = betas[0][0] + betas[0][1]*t + betas[0][2]*powf(t,2) + betas[0][3]*powf(t,3) + betas[0][4]*powf(t,4) + betas[0][5]*powf(t,5);
//				band = 1;
//			}
			// GIRO Y CUADRADO
			if(band_giro){
 8001058:	4b67      	ldr	r3, [pc, #412]	@ (80011f8 <main+0x240>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	f000 80d9 	beq.w	8001214 <main+0x25c>
				if(t<=2){
 8001062:	4b63      	ldr	r3, [pc, #396]	@ (80011f0 <main+0x238>)
 8001064:	edd3 7a00 	vldr	s15, [r3]
 8001068:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800106c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001074:	f200 8292 	bhi.w	800159c <main+0x5e4>
					Xd = 1 * (1 - cos((2*3.1416/8) * t));
 8001078:	4b5d      	ldr	r3, [pc, #372]	@ (80011f0 <main+0x238>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa83 	bl	8000588 <__aeabi_f2d>
 8001082:	a34f      	add	r3, pc, #316	@ (adr r3, 80011c0 <main+0x208>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff fad6 	bl	8000638 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	ec43 2b17 	vmov	d7, r2, r3
 8001094:	eeb0 0a47 	vmov.f32	s0, s14
 8001098:	eef0 0a67 	vmov.f32	s1, s15
 800109c:	f008 fbf4 	bl	8009888 <cos>
 80010a0:	ec53 2b10 	vmov	r2, r3, d0
 80010a4:	f04f 0000 	mov.w	r0, #0
 80010a8:	4954      	ldr	r1, [pc, #336]	@ (80011fc <main+0x244>)
 80010aa:	f7ff f90d 	bl	80002c8 <__aeabi_dsub>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	f7ff fd97 	bl	8000be8 <__aeabi_d2f>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a50      	ldr	r2, [pc, #320]	@ (8001200 <main+0x248>)
 80010be:	6013      	str	r3, [r2, #0]
					Yd = 1 * sin((2*3.1416/8) * t);
 80010c0:	4b4b      	ldr	r3, [pc, #300]	@ (80011f0 <main+0x238>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fa5f 	bl	8000588 <__aeabi_f2d>
 80010ca:	a33d      	add	r3, pc, #244	@ (adr r3, 80011c0 <main+0x208>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff fab2 	bl	8000638 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	ec43 2b17 	vmov	d7, r2, r3
 80010dc:	eeb0 0a47 	vmov.f32	s0, s14
 80010e0:	eef0 0a67 	vmov.f32	s1, s15
 80010e4:	f008 fc24 	bl	8009930 <sin>
 80010e8:	ec53 2b10 	vmov	r2, r3, d0
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	f7ff fd7a 	bl	8000be8 <__aeabi_d2f>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4a43      	ldr	r2, [pc, #268]	@ (8001204 <main+0x24c>)
 80010f8:	6013      	str	r3, [r2, #0]
					Xd = alphas[(coor+1)%4][0] + cos(t);
 80010fa:	4b43      	ldr	r3, [pc, #268]	@ (8001208 <main+0x250>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	4259      	negs	r1, r3
 8001102:	f003 0203 	and.w	r2, r3, #3
 8001106:	f001 0303 	and.w	r3, r1, #3
 800110a:	bf58      	it	pl
 800110c:	425a      	negpl	r2, r3
 800110e:	493f      	ldr	r1, [pc, #252]	@ (800120c <main+0x254>)
 8001110:	4613      	mov	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fa33 	bl	8000588 <__aeabi_f2d>
 8001122:	4604      	mov	r4, r0
 8001124:	460d      	mov	r5, r1
 8001126:	4b32      	ldr	r3, [pc, #200]	@ (80011f0 <main+0x238>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa2c 	bl	8000588 <__aeabi_f2d>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	ec43 2b10 	vmov	d0, r2, r3
 8001138:	f008 fba6 	bl	8009888 <cos>
 800113c:	ec53 2b10 	vmov	r2, r3, d0
 8001140:	4620      	mov	r0, r4
 8001142:	4629      	mov	r1, r5
 8001144:	f7ff f8c2 	bl	80002cc <__adddf3>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fd4a 	bl	8000be8 <__aeabi_d2f>
 8001154:	4603      	mov	r3, r0
 8001156:	4a2a      	ldr	r2, [pc, #168]	@ (8001200 <main+0x248>)
 8001158:	6013      	str	r3, [r2, #0]
					Yd = betas[(coor+1)%4][0] + sin(t);
 800115a:	4b2b      	ldr	r3, [pc, #172]	@ (8001208 <main+0x250>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	4259      	negs	r1, r3
 8001162:	f003 0203 	and.w	r2, r3, #3
 8001166:	f001 0303 	and.w	r3, r1, #3
 800116a:	bf58      	it	pl
 800116c:	425a      	negpl	r2, r3
 800116e:	4928      	ldr	r1, [pc, #160]	@ (8001210 <main+0x258>)
 8001170:	4613      	mov	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fa03 	bl	8000588 <__aeabi_f2d>
 8001182:	4604      	mov	r4, r0
 8001184:	460d      	mov	r5, r1
 8001186:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <main+0x238>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9fc 	bl	8000588 <__aeabi_f2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	ec43 2b10 	vmov	d0, r2, r3
 8001198:	f008 fbca 	bl	8009930 <sin>
 800119c:	ec53 2b10 	vmov	r2, r3, d0
 80011a0:	4620      	mov	r0, r4
 80011a2:	4629      	mov	r1, r5
 80011a4:	f7ff f892 	bl	80002cc <__adddf3>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fd1a 	bl	8000be8 <__aeabi_d2f>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a13      	ldr	r2, [pc, #76]	@ (8001204 <main+0x24c>)
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e1ef      	b.n	800159c <main+0x5e4>
 80011bc:	f3af 8000 	nop.w
 80011c0:	2e48e8a7 	.word	0x2e48e8a7
 80011c4:	3fe921ff 	.word	0x3fe921ff
 80011c8:	20000628 	.word	0x20000628
 80011cc:	20000508 	.word	0x20000508
 80011d0:	20000598 	.word	0x20000598
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020800 	.word	0x40020800
 80011dc:	20000550 	.word	0x20000550
 80011e0:	200005e0 	.word	0x200005e0
 80011e4:	3ea147ae 	.word	0x3ea147ae
 80011e8:	3d4ccccd 	.word	0x3d4ccccd
 80011ec:	20000824 	.word	0x20000824
 80011f0:	20000790 	.word	0x20000790
 80011f4:	20000700 	.word	0x20000700
 80011f8:	20000798 	.word	0x20000798
 80011fc:	3ff00000 	.word	0x3ff00000
 8001200:	20000734 	.word	0x20000734
 8001204:	20000738 	.word	0x20000738
 8001208:	20000794 	.word	0x20000794
 800120c:	20000000 	.word	0x20000000
 8001210:	20000120 	.word	0x20000120
				}
			}
			else{
				if(t<=4){
 8001214:	4bd8      	ldr	r3, [pc, #864]	@ (8001578 <main+0x5c0>)
 8001216:	edd3 7a00 	vldr	s15, [r3]
 800121a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800121e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001226:	f200 81b9 	bhi.w	800159c <main+0x5e4>
					Xd = alphas[coor][0] + alphas[coor][1]*t + alphas[coor][2]*powf(t,2) + alphas[coor][3]*powf(t,3) + alphas[coor][4]*powf(t,4) + alphas[coor][5]*powf(t,5) + alphas[coor][6]*powf(t,6) + alphas[coor][7]*powf(t,7) + alphas[coor][8]*powf(t,8);
 800122a:	4bd4      	ldr	r3, [pc, #848]	@ (800157c <main+0x5c4>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	49d4      	ldr	r1, [pc, #848]	@ (8001580 <main+0x5c8>)
 8001230:	4613      	mov	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	ed93 7a00 	vldr	s14, [r3]
 800123e:	4bcf      	ldr	r3, [pc, #828]	@ (800157c <main+0x5c4>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	49cf      	ldr	r1, [pc, #828]	@ (8001580 <main+0x5c8>)
 8001244:	4613      	mov	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	3304      	adds	r3, #4
 8001250:	edd3 6a00 	vldr	s13, [r3]
 8001254:	4bc8      	ldr	r3, [pc, #800]	@ (8001578 <main+0x5c0>)
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800125e:	ee37 8a27 	vadd.f32	s16, s14, s15
 8001262:	4bc6      	ldr	r3, [pc, #792]	@ (800157c <main+0x5c4>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	49c6      	ldr	r1, [pc, #792]	@ (8001580 <main+0x5c8>)
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	3308      	adds	r3, #8
 8001274:	edd3 8a00 	vldr	s17, [r3]
 8001278:	4bbf      	ldr	r3, [pc, #764]	@ (8001578 <main+0x5c0>)
 800127a:	edd3 7a00 	vldr	s15, [r3]
 800127e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001282:	eeb0 0a67 	vmov.f32	s0, s15
 8001286:	f008 fba7 	bl	80099d8 <powf>
 800128a:	eef0 7a40 	vmov.f32	s15, s0
 800128e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001292:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001296:	4bb9      	ldr	r3, [pc, #740]	@ (800157c <main+0x5c4>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	49b9      	ldr	r1, [pc, #740]	@ (8001580 <main+0x5c8>)
 800129c:	4613      	mov	r3, r2
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4413      	add	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	440b      	add	r3, r1
 80012a6:	330c      	adds	r3, #12
 80012a8:	edd3 8a00 	vldr	s17, [r3]
 80012ac:	4bb2      	ldr	r3, [pc, #712]	@ (8001578 <main+0x5c0>)
 80012ae:	edd3 7a00 	vldr	s15, [r3]
 80012b2:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 80012b6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ba:	f008 fb8d 	bl	80099d8 <powf>
 80012be:	eef0 7a40 	vmov.f32	s15, s0
 80012c2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80012c6:	ee38 8a27 	vadd.f32	s16, s16, s15
 80012ca:	4bac      	ldr	r3, [pc, #688]	@ (800157c <main+0x5c4>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	49ac      	ldr	r1, [pc, #688]	@ (8001580 <main+0x5c8>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4413      	add	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	3310      	adds	r3, #16
 80012dc:	edd3 8a00 	vldr	s17, [r3]
 80012e0:	4ba5      	ldr	r3, [pc, #660]	@ (8001578 <main+0x5c0>)
 80012e2:	edd3 7a00 	vldr	s15, [r3]
 80012e6:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 80012ea:	eeb0 0a67 	vmov.f32	s0, s15
 80012ee:	f008 fb73 	bl	80099d8 <powf>
 80012f2:	eef0 7a40 	vmov.f32	s15, s0
 80012f6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80012fa:	ee38 8a27 	vadd.f32	s16, s16, s15
 80012fe:	4b9f      	ldr	r3, [pc, #636]	@ (800157c <main+0x5c4>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	499f      	ldr	r1, [pc, #636]	@ (8001580 <main+0x5c8>)
 8001304:	4613      	mov	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	4413      	add	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	440b      	add	r3, r1
 800130e:	3314      	adds	r3, #20
 8001310:	edd3 8a00 	vldr	s17, [r3]
 8001314:	4b98      	ldr	r3, [pc, #608]	@ (8001578 <main+0x5c0>)
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 800131e:	eeb0 0a67 	vmov.f32	s0, s15
 8001322:	f008 fb59 	bl	80099d8 <powf>
 8001326:	eef0 7a40 	vmov.f32	s15, s0
 800132a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800132e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001332:	4b92      	ldr	r3, [pc, #584]	@ (800157c <main+0x5c4>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4992      	ldr	r1, [pc, #584]	@ (8001580 <main+0x5c8>)
 8001338:	4613      	mov	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	3318      	adds	r3, #24
 8001344:	edd3 8a00 	vldr	s17, [r3]
 8001348:	4b8b      	ldr	r3, [pc, #556]	@ (8001578 <main+0x5c0>)
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 8001352:	eeb0 0a67 	vmov.f32	s0, s15
 8001356:	f008 fb3f 	bl	80099d8 <powf>
 800135a:	eef0 7a40 	vmov.f32	s15, s0
 800135e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001362:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001366:	4b85      	ldr	r3, [pc, #532]	@ (800157c <main+0x5c4>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4985      	ldr	r1, [pc, #532]	@ (8001580 <main+0x5c8>)
 800136c:	4613      	mov	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4413      	add	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	331c      	adds	r3, #28
 8001378:	edd3 8a00 	vldr	s17, [r3]
 800137c:	4b7e      	ldr	r3, [pc, #504]	@ (8001578 <main+0x5c0>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8001386:	eeb0 0a67 	vmov.f32	s0, s15
 800138a:	f008 fb25 	bl	80099d8 <powf>
 800138e:	eef0 7a40 	vmov.f32	s15, s0
 8001392:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001396:	ee38 8a27 	vadd.f32	s16, s16, s15
 800139a:	4b78      	ldr	r3, [pc, #480]	@ (800157c <main+0x5c4>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4978      	ldr	r1, [pc, #480]	@ (8001580 <main+0x5c8>)
 80013a0:	4613      	mov	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	3320      	adds	r3, #32
 80013ac:	edd3 8a00 	vldr	s17, [r3]
 80013b0:	4b71      	ldr	r3, [pc, #452]	@ (8001578 <main+0x5c0>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 80013ba:	eeb0 0a67 	vmov.f32	s0, s15
 80013be:	f008 fb0b 	bl	80099d8 <powf>
 80013c2:	eef0 7a40 	vmov.f32	s15, s0
 80013c6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80013ca:	ee78 7a27 	vadd.f32	s15, s16, s15
 80013ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001584 <main+0x5cc>)
 80013d0:	edc3 7a00 	vstr	s15, [r3]
					Yd = betas[coor][0] + betas[coor][1]*t + betas[coor][2]*powf(t,2) + betas[coor][3]*powf(t,3) + betas[coor][4]*powf(t,4) + betas[coor][5]*powf(t,5) + betas[coor][6]*powf(t,6) + betas[coor][7]*powf(t,7) + betas[coor][8]*powf(t,8);
 80013d4:	4b69      	ldr	r3, [pc, #420]	@ (800157c <main+0x5c4>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	496b      	ldr	r1, [pc, #428]	@ (8001588 <main+0x5d0>)
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4413      	add	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	ed93 7a00 	vldr	s14, [r3]
 80013e8:	4b64      	ldr	r3, [pc, #400]	@ (800157c <main+0x5c4>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4966      	ldr	r1, [pc, #408]	@ (8001588 <main+0x5d0>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	3304      	adds	r3, #4
 80013fa:	edd3 6a00 	vldr	s13, [r3]
 80013fe:	4b5e      	ldr	r3, [pc, #376]	@ (8001578 <main+0x5c0>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001408:	ee37 8a27 	vadd.f32	s16, s14, s15
 800140c:	4b5b      	ldr	r3, [pc, #364]	@ (800157c <main+0x5c4>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	495d      	ldr	r1, [pc, #372]	@ (8001588 <main+0x5d0>)
 8001412:	4613      	mov	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	3308      	adds	r3, #8
 800141e:	edd3 8a00 	vldr	s17, [r3]
 8001422:	4b55      	ldr	r3, [pc, #340]	@ (8001578 <main+0x5c0>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800142c:	eeb0 0a67 	vmov.f32	s0, s15
 8001430:	f008 fad2 	bl	80099d8 <powf>
 8001434:	eef0 7a40 	vmov.f32	s15, s0
 8001438:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800143c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001440:	4b4e      	ldr	r3, [pc, #312]	@ (800157c <main+0x5c4>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4950      	ldr	r1, [pc, #320]	@ (8001588 <main+0x5d0>)
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	330c      	adds	r3, #12
 8001452:	edd3 8a00 	vldr	s17, [r3]
 8001456:	4b48      	ldr	r3, [pc, #288]	@ (8001578 <main+0x5c0>)
 8001458:	edd3 7a00 	vldr	s15, [r3]
 800145c:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 8001460:	eeb0 0a67 	vmov.f32	s0, s15
 8001464:	f008 fab8 	bl	80099d8 <powf>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001470:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001474:	4b41      	ldr	r3, [pc, #260]	@ (800157c <main+0x5c4>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4943      	ldr	r1, [pc, #268]	@ (8001588 <main+0x5d0>)
 800147a:	4613      	mov	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	3310      	adds	r3, #16
 8001486:	edd3 8a00 	vldr	s17, [r3]
 800148a:	4b3b      	ldr	r3, [pc, #236]	@ (8001578 <main+0x5c0>)
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 8001494:	eeb0 0a67 	vmov.f32	s0, s15
 8001498:	f008 fa9e 	bl	80099d8 <powf>
 800149c:	eef0 7a40 	vmov.f32	s15, s0
 80014a0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80014a4:	ee38 8a27 	vadd.f32	s16, s16, s15
 80014a8:	4b34      	ldr	r3, [pc, #208]	@ (800157c <main+0x5c4>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4936      	ldr	r1, [pc, #216]	@ (8001588 <main+0x5d0>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	3314      	adds	r3, #20
 80014ba:	edd3 8a00 	vldr	s17, [r3]
 80014be:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <main+0x5c0>)
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 80014c8:	eeb0 0a67 	vmov.f32	s0, s15
 80014cc:	f008 fa84 	bl	80099d8 <powf>
 80014d0:	eef0 7a40 	vmov.f32	s15, s0
 80014d4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80014d8:	ee38 8a27 	vadd.f32	s16, s16, s15
 80014dc:	4b27      	ldr	r3, [pc, #156]	@ (800157c <main+0x5c4>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4929      	ldr	r1, [pc, #164]	@ (8001588 <main+0x5d0>)
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	3318      	adds	r3, #24
 80014ee:	edd3 8a00 	vldr	s17, [r3]
 80014f2:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <main+0x5c0>)
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 80014fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001500:	f008 fa6a 	bl	80099d8 <powf>
 8001504:	eef0 7a40 	vmov.f32	s15, s0
 8001508:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800150c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <main+0x5c4>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	491c      	ldr	r1, [pc, #112]	@ (8001588 <main+0x5d0>)
 8001516:	4613      	mov	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	331c      	adds	r3, #28
 8001522:	edd3 8a00 	vldr	s17, [r3]
 8001526:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <main+0x5c0>)
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8001530:	eeb0 0a67 	vmov.f32	s0, s15
 8001534:	f008 fa50 	bl	80099d8 <powf>
 8001538:	eef0 7a40 	vmov.f32	s15, s0
 800153c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001540:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001544:	4b0d      	ldr	r3, [pc, #52]	@ (800157c <main+0x5c4>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	490f      	ldr	r1, [pc, #60]	@ (8001588 <main+0x5d0>)
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3320      	adds	r3, #32
 8001556:	edd3 8a00 	vldr	s17, [r3]
 800155a:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <main+0x5c0>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 8001564:	eeb0 0a67 	vmov.f32	s0, s15
 8001568:	f008 fa36 	bl	80099d8 <powf>
 800156c:	eef0 7a40 	vmov.f32	s15, s0
 8001570:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001574:	e00a      	b.n	800158c <main+0x5d4>
 8001576:	bf00      	nop
 8001578:	20000790 	.word	0x20000790
 800157c:	20000794 	.word	0x20000794
 8001580:	20000000 	.word	0x20000000
 8001584:	20000734 	.word	0x20000734
 8001588:	20000120 	.word	0x20000120
 800158c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001590:	4bc7      	ldr	r3, [pc, #796]	@ (80018b0 <main+0x8f8>)
 8001592:	edc3 7a00 	vstr	s15, [r3]
					band = 1;
 8001596:	4bc7      	ldr	r3, [pc, #796]	@ (80018b4 <main+0x8fc>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]
//				}
//			}


			//IZQUIERDO
			Aspeed = (Aangle - Apast_angle)/0.001;
 800159c:	4bc6      	ldr	r3, [pc, #792]	@ (80018b8 <main+0x900>)
 800159e:	ed93 7a00 	vldr	s14, [r3]
 80015a2:	4bc6      	ldr	r3, [pc, #792]	@ (80018bc <main+0x904>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ac:	ee17 0a90 	vmov	r0, s15
 80015b0:	f7fe ffea 	bl	8000588 <__aeabi_f2d>
 80015b4:	a3bc      	add	r3, pc, #752	@ (adr r3, 80018a8 <main+0x8f0>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7ff f967 	bl	800088c <__aeabi_ddiv>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff fb0f 	bl	8000be8 <__aeabi_d2f>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4abc      	ldr	r2, [pc, #752]	@ (80018c0 <main+0x908>)
 80015ce:	6013      	str	r3, [r2, #0]
			Apast_angle = Aangle;
 80015d0:	4bb9      	ldr	r3, [pc, #740]	@ (80018b8 <main+0x900>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4ab9      	ldr	r2, [pc, #740]	@ (80018bc <main+0x904>)
 80015d6:	6013      	str	r3, [r2, #0]
			y_k = Aangle;
 80015d8:	4bb7      	ldr	r3, [pc, #732]	@ (80018b8 <main+0x900>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4ab9      	ldr	r2, [pc, #740]	@ (80018c4 <main+0x90c>)
 80015de:	6013      	str	r3, [r2, #0]

			//DERECHO
			Bspeed = (Bangle - Bpast_angle)/0.001;
 80015e0:	4bb9      	ldr	r3, [pc, #740]	@ (80018c8 <main+0x910>)
 80015e2:	ed93 7a00 	vldr	s14, [r3]
 80015e6:	4bb9      	ldr	r3, [pc, #740]	@ (80018cc <main+0x914>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f0:	ee17 0a90 	vmov	r0, s15
 80015f4:	f7fe ffc8 	bl	8000588 <__aeabi_f2d>
 80015f8:	a3ab      	add	r3, pc, #684	@ (adr r3, 80018a8 <main+0x8f0>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7ff f945 	bl	800088c <__aeabi_ddiv>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f7ff faed 	bl	8000be8 <__aeabi_d2f>
 800160e:	4603      	mov	r3, r0
 8001610:	4aaf      	ldr	r2, [pc, #700]	@ (80018d0 <main+0x918>)
 8001612:	6013      	str	r3, [r2, #0]
			Bpast_angle = Bangle;
 8001614:	4bac      	ldr	r3, [pc, #688]	@ (80018c8 <main+0x910>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4aac      	ldr	r2, [pc, #688]	@ (80018cc <main+0x914>)
 800161a:	6013      	str	r3, [r2, #0]
			By_k = Bangle;
 800161c:	4baa      	ldr	r3, [pc, #680]	@ (80018c8 <main+0x910>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4aac      	ldr	r2, [pc, #688]	@ (80018d4 <main+0x91c>)
 8001622:	6013      	str	r3, [r2, #0]

			RobotKinematics_Update(&cacarro, Aangle, Bangle, 0.001);
 8001624:	4ba4      	ldr	r3, [pc, #656]	@ (80018b8 <main+0x900>)
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	4ba7      	ldr	r3, [pc, #668]	@ (80018c8 <main+0x910>)
 800162c:	ed93 7a00 	vldr	s14, [r3]
 8001630:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 80018d8 <main+0x920>
 8001634:	eef0 0a47 	vmov.f32	s1, s14
 8001638:	eeb0 0a67 	vmov.f32	s0, s15
 800163c:	48a7      	ldr	r0, [pc, #668]	@ (80018dc <main+0x924>)
 800163e:	f001 f917 	bl	8002870 <RobotKinematics_Update>

			phi_d = W_Control_Law(&cacarro, Xd, Yd);
 8001642:	4ba7      	ldr	r3, [pc, #668]	@ (80018e0 <main+0x928>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	4b99      	ldr	r3, [pc, #612]	@ (80018b0 <main+0x8f8>)
 800164a:	ed93 7a00 	vldr	s14, [r3]
 800164e:	eef0 0a47 	vmov.f32	s1, s14
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	48a1      	ldr	r0, [pc, #644]	@ (80018dc <main+0x924>)
 8001658:	f001 fa02 	bl	8002a60 <W_Control_Law>
 800165c:	eef0 7a40 	vmov.f32	s15, s0
 8001660:	4ba0      	ldr	r3, [pc, #640]	@ (80018e4 <main+0x92c>)
 8001662:	edc3 7a00 	vstr	s15, [r3]
			VL_Control_Law(&cacarro, Xd, Yd);
 8001666:	4b9e      	ldr	r3, [pc, #632]	@ (80018e0 <main+0x928>)
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	4b90      	ldr	r3, [pc, #576]	@ (80018b0 <main+0x8f8>)
 800166e:	ed93 7a00 	vldr	s14, [r3]
 8001672:	eef0 0a47 	vmov.f32	s1, s14
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	4898      	ldr	r0, [pc, #608]	@ (80018dc <main+0x924>)
 800167c:	f001 faf0 	bl	8002c60 <VL_Control_Law>
			Angular_Vel(&cacarro);
 8001680:	4896      	ldr	r0, [pc, #600]	@ (80018dc <main+0x924>)
 8001682:	f001 fbbb 	bl	8002dfc <Angular_Vel>

			r = cacarro.W_L_d;
 8001686:	4b95      	ldr	r3, [pc, #596]	@ (80018dc <main+0x924>)
 8001688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800168a:	4a97      	ldr	r2, [pc, #604]	@ (80018e8 <main+0x930>)
 800168c:	6013      	str	r3, [r2, #0]
			Br = cacarro.W_R_d;
 800168e:	4b93      	ldr	r3, [pc, #588]	@ (80018dc <main+0x924>)
 8001690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001692:	4a96      	ldr	r2, [pc, #600]	@ (80018ec <main+0x934>)
 8001694:	6013      	str	r3, [r2, #0]

			//MOTOR A : IZQUIERDO
			x1_k_1 = AR[0][0]*x1_k + AR[0][1]*x2_k + AR[0][2]*x3_k + AR[0][3]*x4_k + BR[0][0]*r + BR[0][1]*y_k;
 8001696:	4b96      	ldr	r3, [pc, #600]	@ (80018f0 <main+0x938>)
 8001698:	ed93 7a00 	vldr	s14, [r3]
 800169c:	4b95      	ldr	r3, [pc, #596]	@ (80018f4 <main+0x93c>)
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016a6:	4b92      	ldr	r3, [pc, #584]	@ (80018f0 <main+0x938>)
 80016a8:	edd3 6a01 	vldr	s13, [r3, #4]
 80016ac:	4b92      	ldr	r3, [pc, #584]	@ (80018f8 <main+0x940>)
 80016ae:	edd3 7a00 	vldr	s15, [r3]
 80016b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ba:	4b8d      	ldr	r3, [pc, #564]	@ (80018f0 <main+0x938>)
 80016bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80016c0:	4b8e      	ldr	r3, [pc, #568]	@ (80018fc <main+0x944>)
 80016c2:	edd3 7a00 	vldr	s15, [r3]
 80016c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ce:	4b88      	ldr	r3, [pc, #544]	@ (80018f0 <main+0x938>)
 80016d0:	edd3 6a03 	vldr	s13, [r3, #12]
 80016d4:	4b8a      	ldr	r3, [pc, #552]	@ (8001900 <main+0x948>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016e2:	4b88      	ldr	r3, [pc, #544]	@ (8001904 <main+0x94c>)
 80016e4:	edd3 6a00 	vldr	s13, [r3]
 80016e8:	4b7f      	ldr	r3, [pc, #508]	@ (80018e8 <main+0x930>)
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016f6:	4b83      	ldr	r3, [pc, #524]	@ (8001904 <main+0x94c>)
 80016f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80016fc:	4b71      	ldr	r3, [pc, #452]	@ (80018c4 <main+0x90c>)
 80016fe:	edd3 7a00 	vldr	s15, [r3]
 8001702:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170a:	4b7f      	ldr	r3, [pc, #508]	@ (8001908 <main+0x950>)
 800170c:	edc3 7a00 	vstr	s15, [r3]
			x2_k_1 = AR[1][0]*x1_k + AR[1][1]*x2_k + AR[1][2]*x3_k + AR[1][3]*x4_k + BR[1][0]*r + BR[1][1]*y_k;
 8001710:	4b77      	ldr	r3, [pc, #476]	@ (80018f0 <main+0x938>)
 8001712:	ed93 7a04 	vldr	s14, [r3, #16]
 8001716:	4b77      	ldr	r3, [pc, #476]	@ (80018f4 <main+0x93c>)
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001720:	4b73      	ldr	r3, [pc, #460]	@ (80018f0 <main+0x938>)
 8001722:	edd3 6a05 	vldr	s13, [r3, #20]
 8001726:	4b74      	ldr	r3, [pc, #464]	@ (80018f8 <main+0x940>)
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001730:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001734:	4b6e      	ldr	r3, [pc, #440]	@ (80018f0 <main+0x938>)
 8001736:	edd3 6a06 	vldr	s13, [r3, #24]
 800173a:	4b70      	ldr	r3, [pc, #448]	@ (80018fc <main+0x944>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001748:	4b69      	ldr	r3, [pc, #420]	@ (80018f0 <main+0x938>)
 800174a:	edd3 6a07 	vldr	s13, [r3, #28]
 800174e:	4b6c      	ldr	r3, [pc, #432]	@ (8001900 <main+0x948>)
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001758:	ee37 7a27 	vadd.f32	s14, s14, s15
 800175c:	4b69      	ldr	r3, [pc, #420]	@ (8001904 <main+0x94c>)
 800175e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001762:	4b61      	ldr	r3, [pc, #388]	@ (80018e8 <main+0x930>)
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001770:	4b64      	ldr	r3, [pc, #400]	@ (8001904 <main+0x94c>)
 8001772:	edd3 6a03 	vldr	s13, [r3, #12]
 8001776:	4b53      	ldr	r3, [pc, #332]	@ (80018c4 <main+0x90c>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001784:	4b61      	ldr	r3, [pc, #388]	@ (800190c <main+0x954>)
 8001786:	edc3 7a00 	vstr	s15, [r3]
			x3_k_1 = AR[2][0]*x1_k + AR[2][1]*x2_k + AR[2][2]*x3_k + AR[2][3]*x4_k + BR[2][0]*r + BR[2][1]*y_k;
 800178a:	4b59      	ldr	r3, [pc, #356]	@ (80018f0 <main+0x938>)
 800178c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001790:	4b58      	ldr	r3, [pc, #352]	@ (80018f4 <main+0x93c>)
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	ee27 7a27 	vmul.f32	s14, s14, s15
 800179a:	4b55      	ldr	r3, [pc, #340]	@ (80018f0 <main+0x938>)
 800179c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80017a0:	4b55      	ldr	r3, [pc, #340]	@ (80018f8 <main+0x940>)
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ae:	4b50      	ldr	r3, [pc, #320]	@ (80018f0 <main+0x938>)
 80017b0:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80017b4:	4b51      	ldr	r3, [pc, #324]	@ (80018fc <main+0x944>)
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017c2:	4b4b      	ldr	r3, [pc, #300]	@ (80018f0 <main+0x938>)
 80017c4:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80017c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001900 <main+0x948>)
 80017ca:	edd3 7a00 	vldr	s15, [r3]
 80017ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001904 <main+0x94c>)
 80017d8:	edd3 6a04 	vldr	s13, [r3, #16]
 80017dc:	4b42      	ldr	r3, [pc, #264]	@ (80018e8 <main+0x930>)
 80017de:	edd3 7a00 	vldr	s15, [r3]
 80017e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ea:	4b46      	ldr	r3, [pc, #280]	@ (8001904 <main+0x94c>)
 80017ec:	edd3 6a05 	vldr	s13, [r3, #20]
 80017f0:	4b34      	ldr	r3, [pc, #208]	@ (80018c4 <main+0x90c>)
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fe:	4b44      	ldr	r3, [pc, #272]	@ (8001910 <main+0x958>)
 8001800:	edc3 7a00 	vstr	s15, [r3]
			x4_k_1 = AR[3][0]*x1_k + AR[3][1]*x2_k + AR[3][2]*x3_k + AR[3][3]*x4_k + BR[3][0]*r + BR[3][1]*y_k;
 8001804:	4b3a      	ldr	r3, [pc, #232]	@ (80018f0 <main+0x938>)
 8001806:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800180a:	4b3a      	ldr	r3, [pc, #232]	@ (80018f4 <main+0x93c>)
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001814:	4b36      	ldr	r3, [pc, #216]	@ (80018f0 <main+0x938>)
 8001816:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800181a:	4b37      	ldr	r3, [pc, #220]	@ (80018f8 <main+0x940>)
 800181c:	edd3 7a00 	vldr	s15, [r3]
 8001820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001824:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001828:	4b31      	ldr	r3, [pc, #196]	@ (80018f0 <main+0x938>)
 800182a:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800182e:	4b33      	ldr	r3, [pc, #204]	@ (80018fc <main+0x944>)
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001838:	ee37 7a27 	vadd.f32	s14, s14, s15
 800183c:	4b2c      	ldr	r3, [pc, #176]	@ (80018f0 <main+0x938>)
 800183e:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8001842:	4b2f      	ldr	r3, [pc, #188]	@ (8001900 <main+0x948>)
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800184c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001850:	4b2c      	ldr	r3, [pc, #176]	@ (8001904 <main+0x94c>)
 8001852:	edd3 6a06 	vldr	s13, [r3, #24]
 8001856:	4b24      	ldr	r3, [pc, #144]	@ (80018e8 <main+0x930>)
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001860:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001864:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <main+0x94c>)
 8001866:	edd3 6a07 	vldr	s13, [r3, #28]
 800186a:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <main+0x90c>)
 800186c:	edd3 7a00 	vldr	s15, [r3]
 8001870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001878:	4b26      	ldr	r3, [pc, #152]	@ (8001914 <main+0x95c>)
 800187a:	edc3 7a00 	vstr	s15, [r3]

			u_k = c11*x1_k + c12*x2_k +c13*x3_k + c14*x4_k + d11*r;
 800187e:	4b26      	ldr	r3, [pc, #152]	@ (8001918 <main+0x960>)
 8001880:	ed93 7a00 	vldr	s14, [r3]
 8001884:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <main+0x93c>)
 8001886:	edd3 7a00 	vldr	s15, [r3]
 800188a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800188e:	4b23      	ldr	r3, [pc, #140]	@ (800191c <main+0x964>)
 8001890:	edd3 6a00 	vldr	s13, [r3]
 8001894:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <main+0x940>)
 8001896:	edd3 7a00 	vldr	s15, [r3]
 800189a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800189e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018a2:	e03d      	b.n	8001920 <main+0x968>
 80018a4:	f3af 8000 	nop.w
 80018a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80018ac:	3f50624d 	.word	0x3f50624d
 80018b0:	20000738 	.word	0x20000738
 80018b4:	20000310 	.word	0x20000310
 80018b8:	20000704 	.word	0x20000704
 80018bc:	2000070c 	.word	0x2000070c
 80018c0:	20000710 	.word	0x20000710
 80018c4:	2000071c 	.word	0x2000071c
 80018c8:	20000708 	.word	0x20000708
 80018cc:	20000714 	.word	0x20000714
 80018d0:	20000718 	.word	0x20000718
 80018d4:	20000720 	.word	0x20000720
 80018d8:	3a83126f 	.word	0x3a83126f
 80018dc:	20000824 	.word	0x20000824
 80018e0:	20000734 	.word	0x20000734
 80018e4:	20000788 	.word	0x20000788
 80018e8:	20000724 	.word	0x20000724
 80018ec:	20000728 	.word	0x20000728
 80018f0:	20000240 	.word	0x20000240
 80018f4:	20000750 	.word	0x20000750
 80018f8:	20000754 	.word	0x20000754
 80018fc:	20000758 	.word	0x20000758
 8001900:	2000075c 	.word	0x2000075c
 8001904:	200002c0 	.word	0x200002c0
 8001908:	20000740 	.word	0x20000740
 800190c:	20000744 	.word	0x20000744
 8001910:	20000748 	.word	0x20000748
 8001914:	2000074c 	.word	0x2000074c
 8001918:	2000073c 	.word	0x2000073c
 800191c:	20000300 	.word	0x20000300
 8001920:	4bc2      	ldr	r3, [pc, #776]	@ (8001c2c <main+0xc74>)
 8001922:	edd3 6a00 	vldr	s13, [r3]
 8001926:	4bc2      	ldr	r3, [pc, #776]	@ (8001c30 <main+0xc78>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001934:	4bbf      	ldr	r3, [pc, #764]	@ (8001c34 <main+0xc7c>)
 8001936:	edd3 6a00 	vldr	s13, [r3]
 800193a:	4bbf      	ldr	r3, [pc, #764]	@ (8001c38 <main+0xc80>)
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001948:	4bbc      	ldr	r3, [pc, #752]	@ (8001c3c <main+0xc84>)
 800194a:	edd3 6a00 	vldr	s13, [r3]
 800194e:	4bbc      	ldr	r3, [pc, #752]	@ (8001c40 <main+0xc88>)
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195c:	4bb9      	ldr	r3, [pc, #740]	@ (8001c44 <main+0xc8c>)
 800195e:	edc3 7a00 	vstr	s15, [r3]
			control(u_k, &htim3);
 8001962:	4bb8      	ldr	r3, [pc, #736]	@ (8001c44 <main+0xc8c>)
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	48b7      	ldr	r0, [pc, #732]	@ (8001c48 <main+0xc90>)
 800196a:	eeb0 0a67 	vmov.f32	s0, s15
 800196e:	f000 fde7 	bl	8002540 <control>
			x1_k = x1_k_1;
 8001972:	4bb6      	ldr	r3, [pc, #728]	@ (8001c4c <main+0xc94>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4ab6      	ldr	r2, [pc, #728]	@ (8001c50 <main+0xc98>)
 8001978:	6013      	str	r3, [r2, #0]
			x2_k = x2_k_1;
 800197a:	4bb6      	ldr	r3, [pc, #728]	@ (8001c54 <main+0xc9c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4ab6      	ldr	r2, [pc, #728]	@ (8001c58 <main+0xca0>)
 8001980:	6013      	str	r3, [r2, #0]
			x3_k = x3_k_1;
 8001982:	4bb6      	ldr	r3, [pc, #728]	@ (8001c5c <main+0xca4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4aaa      	ldr	r2, [pc, #680]	@ (8001c30 <main+0xc78>)
 8001988:	6013      	str	r3, [r2, #0]
			x4_k = x4_k_1;
 800198a:	4bb5      	ldr	r3, [pc, #724]	@ (8001c60 <main+0xca8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4aaa      	ldr	r2, [pc, #680]	@ (8001c38 <main+0xc80>)
 8001990:	6013      	str	r3, [r2, #0]

			//MOTOR B : DERECHO

			Bx1_k_1 = AL[0][0]*Bx1_k + AL[0][1]*Bx2_k + AL[0][2]*Bx3_k + AL[0][3]*Bx4_k + BL[0][0]*Br + BL[0][1]*By_k;
 8001992:	4bb4      	ldr	r3, [pc, #720]	@ (8001c64 <main+0xcac>)
 8001994:	ed93 7a00 	vldr	s14, [r3]
 8001998:	4bb3      	ldr	r3, [pc, #716]	@ (8001c68 <main+0xcb0>)
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a2:	4bb0      	ldr	r3, [pc, #704]	@ (8001c64 <main+0xcac>)
 80019a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80019a8:	4bb0      	ldr	r3, [pc, #704]	@ (8001c6c <main+0xcb4>)
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019b6:	4bab      	ldr	r3, [pc, #684]	@ (8001c64 <main+0xcac>)
 80019b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80019bc:	4bac      	ldr	r3, [pc, #688]	@ (8001c70 <main+0xcb8>)
 80019be:	edd3 7a00 	vldr	s15, [r3]
 80019c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ca:	4ba6      	ldr	r3, [pc, #664]	@ (8001c64 <main+0xcac>)
 80019cc:	edd3 6a03 	vldr	s13, [r3, #12]
 80019d0:	4ba8      	ldr	r3, [pc, #672]	@ (8001c74 <main+0xcbc>)
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019de:	4ba6      	ldr	r3, [pc, #664]	@ (8001c78 <main+0xcc0>)
 80019e0:	edd3 6a00 	vldr	s13, [r3]
 80019e4:	4ba5      	ldr	r3, [pc, #660]	@ (8001c7c <main+0xcc4>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019f2:	4ba1      	ldr	r3, [pc, #644]	@ (8001c78 <main+0xcc0>)
 80019f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80019f8:	4ba1      	ldr	r3, [pc, #644]	@ (8001c80 <main+0xcc8>)
 80019fa:	edd3 7a00 	vldr	s15, [r3]
 80019fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a06:	4b9f      	ldr	r3, [pc, #636]	@ (8001c84 <main+0xccc>)
 8001a08:	edc3 7a00 	vstr	s15, [r3]
			Bx2_k_1 = AL[1][0]*Bx1_k + AL[1][1]*Bx2_k + AL[1][2]*Bx3_k + AL[1][3]*Bx4_k + BL[1][0]*Br + BL[1][1]*By_k;
 8001a0c:	4b95      	ldr	r3, [pc, #596]	@ (8001c64 <main+0xcac>)
 8001a0e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a12:	4b95      	ldr	r3, [pc, #596]	@ (8001c68 <main+0xcb0>)
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a1c:	4b91      	ldr	r3, [pc, #580]	@ (8001c64 <main+0xcac>)
 8001a1e:	edd3 6a05 	vldr	s13, [r3, #20]
 8001a22:	4b92      	ldr	r3, [pc, #584]	@ (8001c6c <main+0xcb4>)
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a30:	4b8c      	ldr	r3, [pc, #560]	@ (8001c64 <main+0xcac>)
 8001a32:	edd3 6a06 	vldr	s13, [r3, #24]
 8001a36:	4b8e      	ldr	r3, [pc, #568]	@ (8001c70 <main+0xcb8>)
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a44:	4b87      	ldr	r3, [pc, #540]	@ (8001c64 <main+0xcac>)
 8001a46:	edd3 6a07 	vldr	s13, [r3, #28]
 8001a4a:	4b8a      	ldr	r3, [pc, #552]	@ (8001c74 <main+0xcbc>)
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a58:	4b87      	ldr	r3, [pc, #540]	@ (8001c78 <main+0xcc0>)
 8001a5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a5e:	4b87      	ldr	r3, [pc, #540]	@ (8001c7c <main+0xcc4>)
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a6c:	4b82      	ldr	r3, [pc, #520]	@ (8001c78 <main+0xcc0>)
 8001a6e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a72:	4b83      	ldr	r3, [pc, #524]	@ (8001c80 <main+0xcc8>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a80:	4b81      	ldr	r3, [pc, #516]	@ (8001c88 <main+0xcd0>)
 8001a82:	edc3 7a00 	vstr	s15, [r3]
			Bx3_k_1 = AL[2][0]*Bx1_k + AL[2][1]*Bx2_k + AL[2][2]*Bx3_k + AL[2][3]*Bx4_k + BL[2][0]*Br + BL[2][1]*By_k;
 8001a86:	4b77      	ldr	r3, [pc, #476]	@ (8001c64 <main+0xcac>)
 8001a88:	ed93 7a08 	vldr	s14, [r3, #32]
 8001a8c:	4b76      	ldr	r3, [pc, #472]	@ (8001c68 <main+0xcb0>)
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a96:	4b73      	ldr	r3, [pc, #460]	@ (8001c64 <main+0xcac>)
 8001a98:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8001a9c:	4b73      	ldr	r3, [pc, #460]	@ (8001c6c <main+0xcb4>)
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aaa:	4b6e      	ldr	r3, [pc, #440]	@ (8001c64 <main+0xcac>)
 8001aac:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001ab0:	4b6f      	ldr	r3, [pc, #444]	@ (8001c70 <main+0xcb8>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001abe:	4b69      	ldr	r3, [pc, #420]	@ (8001c64 <main+0xcac>)
 8001ac0:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8001ac4:	4b6b      	ldr	r3, [pc, #428]	@ (8001c74 <main+0xcbc>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ace:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad2:	4b69      	ldr	r3, [pc, #420]	@ (8001c78 <main+0xcc0>)
 8001ad4:	edd3 6a04 	vldr	s13, [r3, #16]
 8001ad8:	4b68      	ldr	r3, [pc, #416]	@ (8001c7c <main+0xcc4>)
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ae6:	4b64      	ldr	r3, [pc, #400]	@ (8001c78 <main+0xcc0>)
 8001ae8:	edd3 6a05 	vldr	s13, [r3, #20]
 8001aec:	4b64      	ldr	r3, [pc, #400]	@ (8001c80 <main+0xcc8>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001afa:	4b64      	ldr	r3, [pc, #400]	@ (8001c8c <main+0xcd4>)
 8001afc:	edc3 7a00 	vstr	s15, [r3]
			Bx4_k_1 = AL[3][0]*Bx1_k + AL[3][1]*Bx2_k + AL[3][2]*Bx3_k + AL[3][3]*Bx4_k + BL[3][0]*Br + BL[3][1]*By_k;
 8001b00:	4b58      	ldr	r3, [pc, #352]	@ (8001c64 <main+0xcac>)
 8001b02:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001b06:	4b58      	ldr	r3, [pc, #352]	@ (8001c68 <main+0xcb0>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b10:	4b54      	ldr	r3, [pc, #336]	@ (8001c64 <main+0xcac>)
 8001b12:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001b16:	4b55      	ldr	r3, [pc, #340]	@ (8001c6c <main+0xcb4>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b24:	4b4f      	ldr	r3, [pc, #316]	@ (8001c64 <main+0xcac>)
 8001b26:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8001b2a:	4b51      	ldr	r3, [pc, #324]	@ (8001c70 <main+0xcb8>)
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b38:	4b4a      	ldr	r3, [pc, #296]	@ (8001c64 <main+0xcac>)
 8001b3a:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8001b3e:	4b4d      	ldr	r3, [pc, #308]	@ (8001c74 <main+0xcbc>)
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001c78 <main+0xcc0>)
 8001b4e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001b52:	4b4a      	ldr	r3, [pc, #296]	@ (8001c7c <main+0xcc4>)
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b60:	4b45      	ldr	r3, [pc, #276]	@ (8001c78 <main+0xcc0>)
 8001b62:	edd3 6a07 	vldr	s13, [r3, #28]
 8001b66:	4b46      	ldr	r3, [pc, #280]	@ (8001c80 <main+0xcc8>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b74:	4b46      	ldr	r3, [pc, #280]	@ (8001c90 <main+0xcd8>)
 8001b76:	edc3 7a00 	vstr	s15, [r3]

			Bu_k = c11*Bx1_k + c12*Bx2_k +c13*Bx3_k + c14*Bx4_k + d11*Br;
 8001b7a:	4b46      	ldr	r3, [pc, #280]	@ (8001c94 <main+0xcdc>)
 8001b7c:	ed93 7a00 	vldr	s14, [r3]
 8001b80:	4b39      	ldr	r3, [pc, #228]	@ (8001c68 <main+0xcb0>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b8a:	4b43      	ldr	r3, [pc, #268]	@ (8001c98 <main+0xce0>)
 8001b8c:	edd3 6a00 	vldr	s13, [r3]
 8001b90:	4b36      	ldr	r3, [pc, #216]	@ (8001c6c <main+0xcb4>)
 8001b92:	edd3 7a00 	vldr	s15, [r3]
 8001b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b9e:	4b23      	ldr	r3, [pc, #140]	@ (8001c2c <main+0xc74>)
 8001ba0:	edd3 6a00 	vldr	s13, [r3]
 8001ba4:	4b32      	ldr	r3, [pc, #200]	@ (8001c70 <main+0xcb8>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bb2:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <main+0xc7c>)
 8001bb4:	edd3 6a00 	vldr	s13, [r3]
 8001bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <main+0xcbc>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <main+0xc84>)
 8001bc8:	edd3 6a00 	vldr	s13, [r3]
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c7c <main+0xcc4>)
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bda:	4b30      	ldr	r3, [pc, #192]	@ (8001c9c <main+0xce4>)
 8001bdc:	edc3 7a00 	vstr	s15, [r3]
			control(Bu_k, &htim5);
 8001be0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c9c <main+0xce4>)
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	482e      	ldr	r0, [pc, #184]	@ (8001ca0 <main+0xce8>)
 8001be8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bec:	f000 fca8 	bl	8002540 <control>
			Bx1_k = Bx1_k_1;
 8001bf0:	4b24      	ldr	r3, [pc, #144]	@ (8001c84 <main+0xccc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c68 <main+0xcb0>)
 8001bf6:	6013      	str	r3, [r2, #0]
			Bx2_k = Bx2_k_1;
 8001bf8:	4b23      	ldr	r3, [pc, #140]	@ (8001c88 <main+0xcd0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8001c6c <main+0xcb4>)
 8001bfe:	6013      	str	r3, [r2, #0]
			Bx3_k = Bx3_k_1;
 8001c00:	4b22      	ldr	r3, [pc, #136]	@ (8001c8c <main+0xcd4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1a      	ldr	r2, [pc, #104]	@ (8001c70 <main+0xcb8>)
 8001c06:	6013      	str	r3, [r2, #0]
			Bx4_k = Bx4_k_1;
 8001c08:	4b21      	ldr	r3, [pc, #132]	@ (8001c90 <main+0xcd8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a19      	ldr	r2, [pc, #100]	@ (8001c74 <main+0xcbc>)
 8001c0e:	6013      	str	r3, [r2, #0]

			 if (++telem_cnt >= telem_div && !uart3_busy) {
 8001c10:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <main+0xcec>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	3301      	adds	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	4b22      	ldr	r3, [pc, #136]	@ (8001ca4 <main+0xcec>)
 8001c1a:	801a      	strh	r2, [r3, #0]
 8001c1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <main+0xcec>)
 8001c1e:	881a      	ldrh	r2, [r3, #0]
 8001c20:	4b21      	ldr	r3, [pc, #132]	@ (8001ca8 <main+0xcf0>)
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d377      	bcc.n	8001d18 <main+0xd60>
 8001c28:	e040      	b.n	8001cac <main+0xcf4>
 8001c2a:	bf00      	nop
 8001c2c:	20000304 	.word	0x20000304
 8001c30:	20000758 	.word	0x20000758
 8001c34:	20000308 	.word	0x20000308
 8001c38:	2000075c 	.word	0x2000075c
 8001c3c:	2000030c 	.word	0x2000030c
 8001c40:	20000724 	.word	0x20000724
 8001c44:	2000072c 	.word	0x2000072c
 8001c48:	20000550 	.word	0x20000550
 8001c4c:	20000740 	.word	0x20000740
 8001c50:	20000750 	.word	0x20000750
 8001c54:	20000744 	.word	0x20000744
 8001c58:	20000754 	.word	0x20000754
 8001c5c:	20000748 	.word	0x20000748
 8001c60:	2000074c 	.word	0x2000074c
 8001c64:	20000280 	.word	0x20000280
 8001c68:	20000770 	.word	0x20000770
 8001c6c:	20000774 	.word	0x20000774
 8001c70:	20000778 	.word	0x20000778
 8001c74:	2000077c 	.word	0x2000077c
 8001c78:	200002e0 	.word	0x200002e0
 8001c7c:	20000728 	.word	0x20000728
 8001c80:	20000720 	.word	0x20000720
 8001c84:	20000760 	.word	0x20000760
 8001c88:	20000764 	.word	0x20000764
 8001c8c:	20000768 	.word	0x20000768
 8001c90:	2000076c 	.word	0x2000076c
 8001c94:	2000073c 	.word	0x2000073c
 8001c98:	20000300 	.word	0x20000300
 8001c9c:	20000730 	.word	0x20000730
 8001ca0:	200005e0 	.word	0x200005e0
 8001ca4:	20000820 	.word	0x20000820
 8001ca8:	20000314 	.word	0x20000314
 8001cac:	4b1d      	ldr	r3, [pc, #116]	@ (8001d24 <main+0xd6c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d130      	bne.n	8001d18 <main+0xd60>
				  int n = snprintf(telem_buf, sizeof(telem_buf),
								   "%.3f,%.3f,%.3f\r\n",
									cacarro.x, cacarro.y, cacarro.theta);
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d28 <main+0xd70>)
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
				  int n = snprintf(telem_buf, sizeof(telem_buf),
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fc64 	bl	8000588 <__aeabi_f2d>
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	460d      	mov	r5, r1
									cacarro.x, cacarro.y, cacarro.theta);
 8001cc4:	4b18      	ldr	r3, [pc, #96]	@ (8001d28 <main+0xd70>)
 8001cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
				  int n = snprintf(telem_buf, sizeof(telem_buf),
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fc5d 	bl	8000588 <__aeabi_f2d>
 8001cce:	4680      	mov	r8, r0
 8001cd0:	4689      	mov	r9, r1
									cacarro.x, cacarro.y, cacarro.theta);
 8001cd2:	4b15      	ldr	r3, [pc, #84]	@ (8001d28 <main+0xd70>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
				  int n = snprintf(telem_buf, sizeof(telem_buf),
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc56 	bl	8000588 <__aeabi_f2d>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ce4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ce8:	e9cd 4500 	strd	r4, r5, [sp]
 8001cec:	4a0f      	ldr	r2, [pc, #60]	@ (8001d2c <main+0xd74>)
 8001cee:	2180      	movs	r1, #128	@ 0x80
 8001cf0:	480f      	ldr	r0, [pc, #60]	@ (8001d30 <main+0xd78>)
 8001cf2:	f005 fbe3 	bl	80074bc <sniprintf>
 8001cf6:	6378      	str	r0, [r7, #52]	@ 0x34
				  if (n > 0) {
 8001cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	dd09      	ble.n	8001d12 <main+0xd5a>
					  uart3_busy = 1; // marcar ocupada hasta que termine
 8001cfe:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <main+0xd6c>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
					  HAL_UART_Transmit_IT(&huart3, (uint8_t*)telem_buf, (uint16_t)n);
 8001d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4909      	ldr	r1, [pc, #36]	@ (8001d30 <main+0xd78>)
 8001d0c:	4809      	ldr	r0, [pc, #36]	@ (8001d34 <main+0xd7c>)
 8001d0e:	f003 ffaf 	bl	8005c70 <HAL_UART_Transmit_IT>
				  }
				  telem_cnt = 0;
 8001d12:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <main+0xd80>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	801a      	strh	r2, [r3, #0]
		while(Sampling)
 8001d18:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <main+0xd84>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f47f a998 	bne.w	8001052 <main+0x9a>
 8001d22:	e7f9      	b.n	8001d18 <main+0xd60>
 8001d24:	2000079c 	.word	0x2000079c
 8001d28:	20000824 	.word	0x20000824
 8001d2c:	0800ccc8 	.word	0x0800ccc8
 8001d30:	200007a0 	.word	0x200007a0
 8001d34:	200006b8 	.word	0x200006b8
 8001d38:	20000820 	.word	0x20000820
 8001d3c:	20000700 	.word	0x20000700

08001d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b094      	sub	sp, #80	@ 0x50
 8001d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	2234      	movs	r2, #52	@ 0x34
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f005 fc2d 	bl	80075ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d54:	f107 0308 	add.w	r3, r7, #8
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d64:	2300      	movs	r3, #0
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	4b2a      	ldr	r3, [pc, #168]	@ (8001e14 <SystemClock_Config+0xd4>)
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6c:	4a29      	ldr	r2, [pc, #164]	@ (8001e14 <SystemClock_Config+0xd4>)
 8001d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d74:	4b27      	ldr	r3, [pc, #156]	@ (8001e14 <SystemClock_Config+0xd4>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d80:	2300      	movs	r3, #0
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	4b24      	ldr	r3, [pc, #144]	@ (8001e18 <SystemClock_Config+0xd8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d8c:	4a22      	ldr	r2, [pc, #136]	@ (8001e18 <SystemClock_Config+0xd8>)
 8001d8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <SystemClock_Config+0xd8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001da0:	2302      	movs	r3, #2
 8001da2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001da4:	2301      	movs	r3, #1
 8001da6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001da8:	2310      	movs	r3, #16
 8001daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dac:	2302      	movs	r3, #2
 8001dae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001db0:	2300      	movs	r3, #0
 8001db2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001db4:	2310      	movs	r3, #16
 8001db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001db8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001dbc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dca:	f107 031c 	add.w	r3, r7, #28
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f002 faec 	bl	80043ac <HAL_RCC_OscConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001dda:	f000 fccb 	bl	8002774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dde:	230f      	movs	r3, #15
 8001de0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de2:	2302      	movs	r3, #2
 8001de4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001df4:	f107 0308 	add.w	r3, r7, #8
 8001df8:	2102      	movs	r1, #2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f001 ff8c 	bl	8003d18 <HAL_RCC_ClockConfig>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001e06:	f000 fcb5 	bl	8002774 <Error_Handler>
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	3750      	adds	r7, #80	@ 0x50
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40007000 	.word	0x40007000

08001e1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08c      	sub	sp, #48	@ 0x30
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	2224      	movs	r2, #36	@ 0x24
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f005 fbbf 	bl	80075ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e38:	4b21      	ldr	r3, [pc, #132]	@ (8001ec0 <MX_TIM2_Init+0xa4>)
 8001e3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e40:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec0 <MX_TIM2_Init+0xa4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec0 <MX_TIM2_Init+0xa4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec0 <MX_TIM2_Init+0xa4>)
 8001e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e54:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec0 <MX_TIM2_Init+0xa4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5a:	4b19      	ldr	r3, [pc, #100]	@ (8001ec0 <MX_TIM2_Init+0xa4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e60:	2303      	movs	r3, #3
 8001e62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e74:	2300      	movs	r3, #0
 8001e76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	4619      	mov	r1, r3
 8001e8a:	480d      	ldr	r0, [pc, #52]	@ (8001ec0 <MX_TIM2_Init+0xa4>)
 8001e8c:	f002 ff0e 	bl	8004cac <HAL_TIM_Encoder_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001e96:	f000 fc6d 	bl	8002774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4806      	ldr	r0, [pc, #24]	@ (8001ec0 <MX_TIM2_Init+0xa4>)
 8001ea8:	f003 fe02 	bl	8005ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001eb2:	f000 fc5f 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	3730      	adds	r7, #48	@ 0x30
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000508 	.word	0x20000508

08001ec4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08e      	sub	sp, #56	@ 0x38
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed8:	f107 0320 	add.w	r3, r7, #32
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
 8001ef0:	615a      	str	r2, [r3, #20]
 8001ef2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ef4:	4b32      	ldr	r3, [pc, #200]	@ (8001fc0 <MX_TIM3_Init+0xfc>)
 8001ef6:	4a33      	ldr	r2, [pc, #204]	@ (8001fc4 <MX_TIM3_Init+0x100>)
 8001ef8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8001efa:	4b31      	ldr	r3, [pc, #196]	@ (8001fc0 <MX_TIM3_Init+0xfc>)
 8001efc:	2203      	movs	r2, #3
 8001efe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f00:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc0 <MX_TIM3_Init+0xfc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001f06:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc0 <MX_TIM3_Init+0xfc>)
 8001f08:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc0 <MX_TIM3_Init+0xfc>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f14:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc0 <MX_TIM3_Init+0xfc>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f1a:	4829      	ldr	r0, [pc, #164]	@ (8001fc0 <MX_TIM3_Init+0xfc>)
 8001f1c:	f002 fce4 	bl	80048e8 <HAL_TIM_Base_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001f26:	f000 fc25 	bl	8002774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f34:	4619      	mov	r1, r3
 8001f36:	4822      	ldr	r0, [pc, #136]	@ (8001fc0 <MX_TIM3_Init+0xfc>)
 8001f38:	f003 f9be 	bl	80052b8 <HAL_TIM_ConfigClockSource>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001f42:	f000 fc17 	bl	8002774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f46:	481e      	ldr	r0, [pc, #120]	@ (8001fc0 <MX_TIM3_Init+0xfc>)
 8001f48:	f002 fd8e 	bl	8004a68 <HAL_TIM_PWM_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001f52:	f000 fc0f 	bl	8002774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f5e:	f107 0320 	add.w	r3, r7, #32
 8001f62:	4619      	mov	r1, r3
 8001f64:	4816      	ldr	r0, [pc, #88]	@ (8001fc0 <MX_TIM3_Init+0xfc>)
 8001f66:	f003 fda3 	bl	8005ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001f70:	f000 fc00 	bl	8002774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f74:	2360      	movs	r3, #96	@ 0x60
 8001f76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2200      	movs	r2, #0
 8001f88:	4619      	mov	r1, r3
 8001f8a:	480d      	ldr	r0, [pc, #52]	@ (8001fc0 <MX_TIM3_Init+0xfc>)
 8001f8c:	f003 f8d2 	bl	8005134 <HAL_TIM_PWM_ConfigChannel>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001f96:	f000 fbed 	bl	8002774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4807      	ldr	r0, [pc, #28]	@ (8001fc0 <MX_TIM3_Init+0xfc>)
 8001fa2:	f003 f8c7 	bl	8005134 <HAL_TIM_PWM_ConfigChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001fac:	f000 fbe2 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fb0:	4803      	ldr	r0, [pc, #12]	@ (8001fc0 <MX_TIM3_Init+0xfc>)
 8001fb2:	f001 f897 	bl	80030e4 <HAL_TIM_MspPostInit>

}
 8001fb6:	bf00      	nop
 8001fb8:	3738      	adds	r7, #56	@ 0x38
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000550 	.word	0x20000550
 8001fc4:	40000400 	.word	0x40000400

08001fc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	@ 0x30
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fce:	f107 030c 	add.w	r3, r7, #12
 8001fd2:	2224      	movs	r2, #36	@ 0x24
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f005 fae9 	bl	80075ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fe4:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <MX_TIM4_Init+0xa0>)
 8001fe6:	4a21      	ldr	r2, [pc, #132]	@ (800206c <MX_TIM4_Init+0xa4>)
 8001fe8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001fea:	4b1f      	ldr	r3, [pc, #124]	@ (8002068 <MX_TIM4_Init+0xa0>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8002068 <MX_TIM4_Init+0xa0>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8002068 <MX_TIM4_Init+0xa0>)
 8001ff8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ffc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <MX_TIM4_Init+0xa0>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002004:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <MX_TIM4_Init+0xa0>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800200a:	2303      	movs	r3, #3
 800200c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002012:	2301      	movs	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002022:	2301      	movs	r3, #1
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002026:	2300      	movs	r3, #0
 8002028:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	4619      	mov	r1, r3
 8002034:	480c      	ldr	r0, [pc, #48]	@ (8002068 <MX_TIM4_Init+0xa0>)
 8002036:	f002 fe39 	bl	8004cac <HAL_TIM_Encoder_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002040:	f000 fb98 	bl	8002774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002044:	2300      	movs	r3, #0
 8002046:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	4619      	mov	r1, r3
 8002050:	4805      	ldr	r0, [pc, #20]	@ (8002068 <MX_TIM4_Init+0xa0>)
 8002052:	f003 fd2d 	bl	8005ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800205c:	f000 fb8a 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	3730      	adds	r7, #48	@ 0x30
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000598 	.word	0x20000598
 800206c:	40000800 	.word	0x40000800

08002070 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08e      	sub	sp, #56	@ 0x38
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002076:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002084:	f107 0320 	add.w	r3, r7, #32
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
 800209c:	615a      	str	r2, [r3, #20]
 800209e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020a0:	4b32      	ldr	r3, [pc, #200]	@ (800216c <MX_TIM5_Init+0xfc>)
 80020a2:	4a33      	ldr	r2, [pc, #204]	@ (8002170 <MX_TIM5_Init+0x100>)
 80020a4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4-1;
 80020a6:	4b31      	ldr	r3, [pc, #196]	@ (800216c <MX_TIM5_Init+0xfc>)
 80020a8:	2203      	movs	r2, #3
 80020aa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b2f      	ldr	r3, [pc, #188]	@ (800216c <MX_TIM5_Init+0xfc>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80020b2:	4b2e      	ldr	r3, [pc, #184]	@ (800216c <MX_TIM5_Init+0xfc>)
 80020b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020b8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ba:	4b2c      	ldr	r3, [pc, #176]	@ (800216c <MX_TIM5_Init+0xfc>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c0:	4b2a      	ldr	r3, [pc, #168]	@ (800216c <MX_TIM5_Init+0xfc>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020c6:	4829      	ldr	r0, [pc, #164]	@ (800216c <MX_TIM5_Init+0xfc>)
 80020c8:	f002 fc0e 	bl	80048e8 <HAL_TIM_Base_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80020d2:	f000 fb4f 	bl	8002774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020da:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020e0:	4619      	mov	r1, r3
 80020e2:	4822      	ldr	r0, [pc, #136]	@ (800216c <MX_TIM5_Init+0xfc>)
 80020e4:	f003 f8e8 	bl	80052b8 <HAL_TIM_ConfigClockSource>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80020ee:	f000 fb41 	bl	8002774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80020f2:	481e      	ldr	r0, [pc, #120]	@ (800216c <MX_TIM5_Init+0xfc>)
 80020f4:	f002 fcb8 	bl	8004a68 <HAL_TIM_PWM_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80020fe:	f000 fb39 	bl	8002774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800210a:	f107 0320 	add.w	r3, r7, #32
 800210e:	4619      	mov	r1, r3
 8002110:	4816      	ldr	r0, [pc, #88]	@ (800216c <MX_TIM5_Init+0xfc>)
 8002112:	f003 fccd 	bl	8005ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800211c:	f000 fb2a 	bl	8002774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002120:	2360      	movs	r3, #96	@ 0x60
 8002122:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	2200      	movs	r2, #0
 8002134:	4619      	mov	r1, r3
 8002136:	480d      	ldr	r0, [pc, #52]	@ (800216c <MX_TIM5_Init+0xfc>)
 8002138:	f002 fffc 	bl	8005134 <HAL_TIM_PWM_ConfigChannel>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002142:	f000 fb17 	bl	8002774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	2204      	movs	r2, #4
 800214a:	4619      	mov	r1, r3
 800214c:	4807      	ldr	r0, [pc, #28]	@ (800216c <MX_TIM5_Init+0xfc>)
 800214e:	f002 fff1 	bl	8005134 <HAL_TIM_PWM_ConfigChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8002158:	f000 fb0c 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800215c:	4803      	ldr	r0, [pc, #12]	@ (800216c <MX_TIM5_Init+0xfc>)
 800215e:	f000 ffc1 	bl	80030e4 <HAL_TIM_MspPostInit>

}
 8002162:	bf00      	nop
 8002164:	3738      	adds	r7, #56	@ 0x38
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200005e0 	.word	0x200005e0
 8002170:	40000c00 	.word	0x40000c00

08002174 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002178:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <MX_TIM14_Init+0x40>)
 800217a:	4a0f      	ldr	r2, [pc, #60]	@ (80021b8 <MX_TIM14_Init+0x44>)
 800217c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 800217e:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <MX_TIM14_Init+0x40>)
 8002180:	f240 3247 	movw	r2, #839	@ 0x347
 8002184:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002186:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <MX_TIM14_Init+0x40>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 800218c:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <MX_TIM14_Init+0x40>)
 800218e:	2263      	movs	r2, #99	@ 0x63
 8002190:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002192:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <MX_TIM14_Init+0x40>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002198:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <MX_TIM14_Init+0x40>)
 800219a:	2200      	movs	r2, #0
 800219c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800219e:	4805      	ldr	r0, [pc, #20]	@ (80021b4 <MX_TIM14_Init+0x40>)
 80021a0:	f002 fba2 	bl	80048e8 <HAL_TIM_Base_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80021aa:	f000 fae3 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000628 	.word	0x20000628
 80021b8:	40002000 	.word	0x40002000

080021bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021c0:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <MX_USART2_UART_Init+0x4c>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	@ (800220c <MX_USART2_UART_Init+0x50>)
 80021c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <MX_USART2_UART_Init+0x4c>)
 80021c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <MX_USART2_UART_Init+0x4c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <MX_USART2_UART_Init+0x4c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021da:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <MX_USART2_UART_Init+0x4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021e0:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <MX_USART2_UART_Init+0x4c>)
 80021e2:	220c      	movs	r2, #12
 80021e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e6:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <MX_USART2_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <MX_USART2_UART_Init+0x4c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021f2:	4805      	ldr	r0, [pc, #20]	@ (8002208 <MX_USART2_UART_Init+0x4c>)
 80021f4:	f003 fcec 	bl	8005bd0 <HAL_UART_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021fe:	f000 fab9 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000670 	.word	0x20000670
 800220c:	40004400 	.word	0x40004400

08002210 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002214:	4b11      	ldr	r3, [pc, #68]	@ (800225c <MX_USART3_UART_Init+0x4c>)
 8002216:	4a12      	ldr	r2, [pc, #72]	@ (8002260 <MX_USART3_UART_Init+0x50>)
 8002218:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800221a:	4b10      	ldr	r3, [pc, #64]	@ (800225c <MX_USART3_UART_Init+0x4c>)
 800221c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002220:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002222:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <MX_USART3_UART_Init+0x4c>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002228:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <MX_USART3_UART_Init+0x4c>)
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800222e:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <MX_USART3_UART_Init+0x4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002234:	4b09      	ldr	r3, [pc, #36]	@ (800225c <MX_USART3_UART_Init+0x4c>)
 8002236:	220c      	movs	r2, #12
 8002238:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223a:	4b08      	ldr	r3, [pc, #32]	@ (800225c <MX_USART3_UART_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <MX_USART3_UART_Init+0x4c>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002246:	4805      	ldr	r0, [pc, #20]	@ (800225c <MX_USART3_UART_Init+0x4c>)
 8002248:	f003 fcc2 	bl	8005bd0 <HAL_UART_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002252:	f000 fa8f 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200006b8 	.word	0x200006b8
 8002260:	40004800 	.word	0x40004800

08002264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	@ 0x28
 8002268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	4b38      	ldr	r3, [pc, #224]	@ (8002360 <MX_GPIO_Init+0xfc>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	4a37      	ldr	r2, [pc, #220]	@ (8002360 <MX_GPIO_Init+0xfc>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6313      	str	r3, [r2, #48]	@ 0x30
 800228a:	4b35      	ldr	r3, [pc, #212]	@ (8002360 <MX_GPIO_Init+0xfc>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b31      	ldr	r3, [pc, #196]	@ (8002360 <MX_GPIO_Init+0xfc>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	4a30      	ldr	r2, [pc, #192]	@ (8002360 <MX_GPIO_Init+0xfc>)
 80022a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002360 <MX_GPIO_Init+0xfc>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002360 <MX_GPIO_Init+0xfc>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	4a29      	ldr	r2, [pc, #164]	@ (8002360 <MX_GPIO_Init+0xfc>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c2:	4b27      	ldr	r3, [pc, #156]	@ (8002360 <MX_GPIO_Init+0xfc>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	4b23      	ldr	r3, [pc, #140]	@ (8002360 <MX_GPIO_Init+0xfc>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	4a22      	ldr	r2, [pc, #136]	@ (8002360 <MX_GPIO_Init+0xfc>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022de:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <MX_GPIO_Init+0xfc>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2102      	movs	r1, #2
 80022ee:	481d      	ldr	r0, [pc, #116]	@ (8002364 <MX_GPIO_Init+0x100>)
 80022f0:	f001 fcf8 	bl	8003ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80022fa:	481b      	ldr	r0, [pc, #108]	@ (8002368 <MX_GPIO_Init+0x104>)
 80022fc:	f001 fcf2 	bl	8003ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002306:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800230a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4619      	mov	r1, r3
 8002316:	4813      	ldr	r0, [pc, #76]	@ (8002364 <MX_GPIO_Init+0x100>)
 8002318:	f001 fb50 	bl	80039bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800231c:	2302      	movs	r3, #2
 800231e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002320:	2301      	movs	r3, #1
 8002322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2300      	movs	r3, #0
 800232a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	4619      	mov	r1, r3
 8002332:	480c      	ldr	r0, [pc, #48]	@ (8002364 <MX_GPIO_Init+0x100>)
 8002334:	f001 fb42 	bl	80039bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8002338:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800233c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233e:	2301      	movs	r3, #1
 8002340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	4619      	mov	r1, r3
 8002350:	4805      	ldr	r0, [pc, #20]	@ (8002368 <MX_GPIO_Init+0x104>)
 8002352:	f001 fb33 	bl	80039bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002356:	bf00      	nop
 8002358:	3728      	adds	r7, #40	@ 0x28
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	40020800 	.word	0x40020800
 8002368:	40020000 	.word	0x40020000
 800236c:	00000000 	.word	0x00000000

08002370 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a27      	ldr	r2, [pc, #156]	@ (8002418 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d141      	bne.n	8002404 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		Sampling = 1;
 8002380:	4b26      	ldr	r3, [pc, #152]	@ (800241c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]
		if(T_esp <= ESPERA)
 8002386:	4b26      	ldr	r3, [pc, #152]	@ (8002420 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002424 <HAL_TIM_PeriodElapsedCallback+0xb4>
 8002390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002398:	d809      	bhi.n	80023ae <HAL_TIM_PeriodElapsedCallback+0x3e>
		{
			T_esp += 1;
 800239a:	4b21      	ldr	r3, [pc, #132]	@ (8002420 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002420 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80023aa:	edc3 7a00 	vstr	s15, [r3]
		}
		if(t <= 6){//SEPARAR TIEMPOS DE ESPERA, VAR GLOBAL
 80023ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002428 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80023b0:	edd3 7a00 	vldr	s15, [r3]
 80023b4:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80023b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c0:	d813      	bhi.n	80023ea <HAL_TIM_PeriodElapsedCallback+0x7a>
			t += 0.001;
 80023c2:	4b19      	ldr	r3, [pc, #100]	@ (8002428 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe f8de 	bl	8000588 <__aeabi_f2d>
 80023cc:	a310      	add	r3, pc, #64	@ (adr r3, 8002410 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f7fd ff7b 	bl	80002cc <__adddf3>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	f7fe fc03 	bl	8000be8 <__aeabi_d2f>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4a10      	ldr	r2, [pc, #64]	@ (8002428 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80023e6:	6013      	str	r3, [r2, #0]
//			else{
//				band_giro=1;
//			}
		}
	}
}
 80023e8:	e00c      	b.n	8002404 <HAL_TIM_PeriodElapsedCallback+0x94>
			if(coor<3){
 80023ea:	4b10      	ldr	r3, [pc, #64]	@ (800242c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	dc08      	bgt.n	8002404 <HAL_TIM_PeriodElapsedCallback+0x94>
				coor += 1;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	3301      	adds	r3, #1
 80023f8:	4a0c      	ldr	r2, [pc, #48]	@ (800242c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80023fa:	6013      	str	r3, [r2, #0]
				t = 0;
 80023fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002428 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	f3af 8000 	nop.w
 8002410:	d2f1a9fc 	.word	0xd2f1a9fc
 8002414:	3f50624d 	.word	0x3f50624d
 8002418:	20000628 	.word	0x20000628
 800241c:	20000700 	.word	0x20000700
 8002420:	2000078c 	.word	0x2000078c
 8002424:	466a6000 	.word	0x466a6000
 8002428:	20000790 	.word	0x20000790
 800242c:	20000794 	.word	0x20000794

08002430 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a05      	ldr	r2, [pc, #20]	@ (8002454 <HAL_UART_TxCpltCallback+0x24>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d102      	bne.n	8002448 <HAL_UART_TxCpltCallback+0x18>
        uart3_busy = 0; // liberar para el siguiente envío
 8002442:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <HAL_UART_TxCpltCallback+0x28>)
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
    }
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40004800 	.word	0x40004800
 8002458:	2000079c 	.word	0x2000079c

0800245c <HAL_TIM_IC_CaptureCallback>:
//}



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
   if(htim == &htim2) // Encoder B
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a2b      	ldr	r2, [pc, #172]	@ (8002514 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d124      	bne.n	80024b6 <HAL_TIM_IC_CaptureCallback+0x5a>
    {
        static uint16_t lastB = 0;
        uint16_t nowB = __HAL_TIM_GET_COUNTER(htim);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	81fb      	strh	r3, [r7, #14]
        int16_t deltaB = (int16_t)(nowB - lastB);
 8002474:	4b28      	ldr	r3, [pc, #160]	@ (8002518 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	89fa      	ldrh	r2, [r7, #14]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	b29b      	uxth	r3, r3
 800247e:	81bb      	strh	r3, [r7, #12]
        Bcount_total += deltaB;
 8002480:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002484:	4b25      	ldr	r3, [pc, #148]	@ (800251c <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4413      	add	r3, r2
 800248a:	4a24      	ldr	r2, [pc, #144]	@ (800251c <HAL_TIM_IC_CaptureCallback+0xc0>)
 800248c:	6013      	str	r3, [r2, #0]
        lastB = nowB;
 800248e:	4a22      	ldr	r2, [pc, #136]	@ (8002518 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002490:	89fb      	ldrh	r3, [r7, #14]
 8002492:	8013      	strh	r3, [r2, #0]

        Bangle = 2.0f * 3.1416f * Bcount_total / 383.6f;
 8002494:	4b21      	ldr	r3, [pc, #132]	@ (800251c <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a0:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002520 <HAL_TIM_IC_CaptureCallback+0xc4>
 80024a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024a8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002524 <HAL_TIM_IC_CaptureCallback+0xc8>
 80024ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002528 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80024b2:	edc3 7a00 	vstr	s15, [r3]
    }

    if(htim == &htim4) // Encoder A
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a1c      	ldr	r2, [pc, #112]	@ (800252c <HAL_TIM_IC_CaptureCallback+0xd0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d124      	bne.n	8002508 <HAL_TIM_IC_CaptureCallback+0xac>
    {
        static uint16_t lastA = 0;
        uint16_t nowA = __HAL_TIM_GET_COUNTER(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	817b      	strh	r3, [r7, #10]
        int16_t deltaA = (int16_t)(nowA - lastA);
 80024c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002530 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	897a      	ldrh	r2, [r7, #10]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	813b      	strh	r3, [r7, #8]
        Acount_total += deltaA;
 80024d2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80024d6:	4b17      	ldr	r3, [pc, #92]	@ (8002534 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	4a15      	ldr	r2, [pc, #84]	@ (8002534 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80024de:	6013      	str	r3, [r2, #0]
        lastA = nowA;
 80024e0:	4a13      	ldr	r2, [pc, #76]	@ (8002530 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80024e2:	897b      	ldrh	r3, [r7, #10]
 80024e4:	8013      	strh	r3, [r2, #0]

        Aangle = (-2.0f * 3.1416f * Acount_total) / 383.6f;
 80024e6:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002538 <HAL_TIM_IC_CaptureCallback+0xdc>
 80024f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024fa:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002524 <HAL_TIM_IC_CaptureCallback+0xc8>
 80024fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002502:	4b0e      	ldr	r3, [pc, #56]	@ (800253c <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002504:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	20000508 	.word	0x20000508
 8002518:	20000894 	.word	0x20000894
 800251c:	20000784 	.word	0x20000784
 8002520:	40c90ff9 	.word	0x40c90ff9
 8002524:	43bfcccd 	.word	0x43bfcccd
 8002528:	20000708 	.word	0x20000708
 800252c:	20000598 	.word	0x20000598
 8002530:	20000896 	.word	0x20000896
 8002534:	20000780 	.word	0x20000780
 8002538:	c0c90ff9 	.word	0xc0c90ff9
 800253c:	20000704 	.word	0x20000704

08002540 <control>:

static void control(float u, TIM_HandleTypeDef *htim)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	ed87 0a01 	vstr	s0, [r7, #4]
 800254a:	6038      	str	r0, [r7, #0]
	if(htim == &htim3)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	4a53      	ldr	r2, [pc, #332]	@ (800269c <control+0x15c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d14c      	bne.n	80025ee <control+0xae>
	{
		if(u >= 999){
 8002554:	edd7 7a01 	vldr	s15, [r7, #4]
 8002558:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80026a0 <control+0x160>
 800255c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002564:	db05      	blt.n	8002572 <control+0x32>
			Forward(999, &htim3);
 8002566:	484d      	ldr	r0, [pc, #308]	@ (800269c <control+0x15c>)
 8002568:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 80026a0 <control+0x160>
 800256c:	f000 f89e 	bl	80026ac <Forward>
 8002570:	e03d      	b.n	80025ee <control+0xae>
		}else if(u <= -999){
 8002572:	edd7 7a01 	vldr	s15, [r7, #4]
 8002576:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80026a4 <control+0x164>
 800257a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800257e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002582:	d805      	bhi.n	8002590 <control+0x50>
			Backward(999, &htim3);
 8002584:	4845      	ldr	r0, [pc, #276]	@ (800269c <control+0x15c>)
 8002586:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 80026a0 <control+0x160>
 800258a:	f000 f8c1 	bl	8002710 <Backward>
 800258e:	e02e      	b.n	80025ee <control+0xae>
		}else if(u>=0 && u<999){
 8002590:	edd7 7a01 	vldr	s15, [r7, #4]
 8002594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259c:	db0e      	blt.n	80025bc <control+0x7c>
 800259e:	edd7 7a01 	vldr	s15, [r7, #4]
 80025a2:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80026a0 <control+0x160>
 80025a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ae:	d505      	bpl.n	80025bc <control+0x7c>
			Forward(u, &htim3);
 80025b0:	483a      	ldr	r0, [pc, #232]	@ (800269c <control+0x15c>)
 80025b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80025b6:	f000 f879 	bl	80026ac <Forward>
 80025ba:	e018      	b.n	80025ee <control+0xae>
		}else if(u>-999 && u<0){
 80025bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80025c0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80026a4 <control+0x164>
 80025c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025cc:	dd0f      	ble.n	80025ee <control+0xae>
 80025ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	d508      	bpl.n	80025ee <control+0xae>
			Backward(-u, &htim3);
 80025dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80025e0:	eef1 7a67 	vneg.f32	s15, s15
 80025e4:	482d      	ldr	r0, [pc, #180]	@ (800269c <control+0x15c>)
 80025e6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ea:	f000 f891 	bl	8002710 <Backward>
		}
	}
	if(htim == &htim5)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	4a2d      	ldr	r2, [pc, #180]	@ (80026a8 <control+0x168>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d14e      	bne.n	8002694 <control+0x154>
	{
		if(u >= 999){
 80025f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025fa:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80026a0 <control+0x160>
 80025fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002606:	db05      	blt.n	8002614 <control+0xd4>
			Forward(999, &htim5);
 8002608:	4827      	ldr	r0, [pc, #156]	@ (80026a8 <control+0x168>)
 800260a:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80026a0 <control+0x160>
 800260e:	f000 f84d 	bl	80026ac <Forward>
			Forward(u, &htim5);
		}else if(u>-999 && u<0){
			Backward(-u, &htim5);
		}
	}
}
 8002612:	e03f      	b.n	8002694 <control+0x154>
		}else if(u <= -999){
 8002614:	edd7 7a01 	vldr	s15, [r7, #4]
 8002618:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80026a4 <control+0x164>
 800261c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002624:	d805      	bhi.n	8002632 <control+0xf2>
			Backward(999, &htim5);
 8002626:	4820      	ldr	r0, [pc, #128]	@ (80026a8 <control+0x168>)
 8002628:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 80026a0 <control+0x160>
 800262c:	f000 f870 	bl	8002710 <Backward>
}
 8002630:	e030      	b.n	8002694 <control+0x154>
		}else if(u>=0 && u<999){
 8002632:	edd7 7a01 	vldr	s15, [r7, #4]
 8002636:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263e:	db0e      	blt.n	800265e <control+0x11e>
 8002640:	edd7 7a01 	vldr	s15, [r7, #4]
 8002644:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80026a0 <control+0x160>
 8002648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002650:	d505      	bpl.n	800265e <control+0x11e>
			Forward(u, &htim5);
 8002652:	4815      	ldr	r0, [pc, #84]	@ (80026a8 <control+0x168>)
 8002654:	ed97 0a01 	vldr	s0, [r7, #4]
 8002658:	f000 f828 	bl	80026ac <Forward>
}
 800265c:	e01a      	b.n	8002694 <control+0x154>
		}else if(u>-999 && u<0){
 800265e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002662:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80026a4 <control+0x164>
 8002666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	dc00      	bgt.n	8002672 <control+0x132>
}
 8002670:	e010      	b.n	8002694 <control+0x154>
		}else if(u>-999 && u<0){
 8002672:	edd7 7a01 	vldr	s15, [r7, #4]
 8002676:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267e:	d400      	bmi.n	8002682 <control+0x142>
}
 8002680:	e008      	b.n	8002694 <control+0x154>
			Backward(-u, &htim5);
 8002682:	edd7 7a01 	vldr	s15, [r7, #4]
 8002686:	eef1 7a67 	vneg.f32	s15, s15
 800268a:	4807      	ldr	r0, [pc, #28]	@ (80026a8 <control+0x168>)
 800268c:	eeb0 0a67 	vmov.f32	s0, s15
 8002690:	f000 f83e 	bl	8002710 <Backward>
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000550 	.word	0x20000550
 80026a0:	4479c000 	.word	0x4479c000
 80026a4:	c479c000 	.word	0xc479c000
 80026a8:	200005e0 	.word	0x200005e0

080026ac <Forward>:

static void Forward(float Duty, TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80026b6:	6038      	str	r0, [r7, #0]
	if(htim == &htim3)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	4a13      	ldr	r2, [pc, #76]	@ (8002708 <Forward+0x5c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d10c      	bne.n	80026da <Forward+0x2e>
	{
		htim3.Instance->CCR2 = 0;
 80026c0:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <Forward+0x5c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2200      	movs	r2, #0
 80026c6:	639a      	str	r2, [r3, #56]	@ 0x38
		htim3.Instance->CCR1 = Duty;		//Motor A
 80026c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002708 <Forward+0x5c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80026d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d4:	ee17 2a90 	vmov	r2, s15
 80026d8:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	if(htim == &htim5)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	4a0b      	ldr	r2, [pc, #44]	@ (800270c <Forward+0x60>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d10c      	bne.n	80026fc <Forward+0x50>
	{
		htim5.Instance->CCR1 = 0;
 80026e2:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <Forward+0x60>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2200      	movs	r2, #0
 80026e8:	635a      	str	r2, [r3, #52]	@ 0x34
		htim5.Instance->CCR2 = Duty;		//Motor B
 80026ea:	4b08      	ldr	r3, [pc, #32]	@ (800270c <Forward+0x60>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80026f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026f6:	ee17 2a90 	vmov	r2, s15
 80026fa:	639a      	str	r2, [r3, #56]	@ 0x38
	}
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	20000550 	.word	0x20000550
 800270c:	200005e0 	.word	0x200005e0

08002710 <Backward>:

static void Backward(float Duty, TIM_HandleTypeDef *htim)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	ed87 0a01 	vstr	s0, [r7, #4]
 800271a:	6038      	str	r0, [r7, #0]
	if(htim == &htim3)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4a13      	ldr	r2, [pc, #76]	@ (800276c <Backward+0x5c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d10c      	bne.n	800273e <Backward+0x2e>
	{
		htim3.Instance->CCR1 = 0;
 8002724:	4b11      	ldr	r3, [pc, #68]	@ (800276c <Backward+0x5c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2200      	movs	r2, #0
 800272a:	635a      	str	r2, [r3, #52]	@ 0x34
		htim3.Instance->CCR2 = Duty;
 800272c:	4b0f      	ldr	r3, [pc, #60]	@ (800276c <Backward+0x5c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	edd7 7a01 	vldr	s15, [r7, #4]
 8002734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002738:	ee17 2a90 	vmov	r2, s15
 800273c:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	if(htim == &htim5)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	4a0b      	ldr	r2, [pc, #44]	@ (8002770 <Backward+0x60>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d10c      	bne.n	8002760 <Backward+0x50>
	{
		htim5.Instance->CCR2 = 0;
 8002746:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <Backward+0x60>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2200      	movs	r2, #0
 800274c:	639a      	str	r2, [r3, #56]	@ 0x38
		htim5.Instance->CCR1 = Duty;
 800274e:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <Backward+0x60>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	edd7 7a01 	vldr	s15, [r7, #4]
 8002756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800275a:	ee17 2a90 	vmov	r2, s15
 800275e:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	20000550 	.word	0x20000550
 8002770:	200005e0 	.word	0x200005e0

08002774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002778:	b672      	cpsid	i
}
 800277a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <Error_Handler+0x8>

08002780 <RobotKinematics_Init>:
#include "robot_kinematics.h"

void RobotKinematics_Init(RobotKinematics *robot, float wheel_radius, float wheel_base)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	ed87 0a02 	vstr	s0, [r7, #8]
 800278c:	edc7 0a01 	vstr	s1, [r7, #4]
    // Inicializa todos los campos a 0
    robot->left.angle = 0.0f;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
    robot->left.distance = 0.0f;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	605a      	str	r2, [r3, #4]
    robot->left.velocity = 0.0f;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]

    robot->right.angle = 0.0f;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	60da      	str	r2, [r3, #12]
    robot->right.distance = 0.0f;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	611a      	str	r2, [r3, #16]
    robot->right.velocity = 0.0f;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	615a      	str	r2, [r3, #20]

    robot->center_distance = 0.0f;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
    robot->center_velocity = 0.0f;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	61da      	str	r2, [r3, #28]

    robot->theta = 0.0f;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	621a      	str	r2, [r3, #32]
    robot->theta_prev = 0.0f;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	625a      	str	r2, [r3, #36]	@ 0x24

    robot->x = 0.0f;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	629a      	str	r2, [r3, #40]	@ 0x28
    robot->y = 0.0f;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    robot->x_prev = 0.0f;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	631a      	str	r2, [r3, #48]	@ 0x30
    robot->y_prev = 0.0f;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	635a      	str	r2, [r3, #52]	@ 0x34

    robot->theta_L = 0.0f;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	639a      	str	r2, [r3, #56]	@ 0x38
    robot->theta_R = 0.0f;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Inicializa parámetros físicos
    robot->wheel_radius = wheel_radius;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	641a      	str	r2, [r3, #64]	@ 0x40
    robot->wheel_base = wheel_base;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	645a      	str	r2, [r3, #68]	@ 0x44


    //Velocidades
    robot->Wc = 0.0f;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	649a      	str	r2, [r3, #72]	@ 0x48
    robot->Wc_e = 0.0f;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	669a      	str	r2, [r3, #104]	@ 0x68
    robot->Wc_ek_1 = 0.0f;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	66da      	str	r2, [r3, #108]	@ 0x6c
	robot->Wc_k_1 = 0.0f;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	665a      	str	r2, [r3, #100]	@ 0x64

    robot-> Vc = 0.0f;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	64da      	str	r2, [r3, #76]	@ 0x4c
    robot-> W_L_d = 0.0f;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	651a      	str	r2, [r3, #80]	@ 0x50
    robot-> W_R_d = 0.0f;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	655a      	str	r2, [r3, #84]	@ 0x54

    robot->Vc_ek_1 = 0.0f;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	661a      	str	r2, [r3, #96]	@ 0x60
    robot->Vc_k_1 = 0.0f;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <RobotKinematics_Update>:

void RobotKinematics_Update(RobotKinematics *robot, float LAngle, float RAngle, float dt)
{
 8002870:	b5b0      	push	{r4, r5, r7, lr}
 8002872:	ed2d 8b02 	vpush	{d8}
 8002876:	b08a      	sub	sp, #40	@ 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002880:	edc7 0a01 	vstr	s1, [r7, #4]
 8002884:	ed87 1a00 	vstr	s2, [r7]
    // Guardar estados anteriores
    robot->x_prev = robot->x;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
    robot->y_prev = robot->y;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	635a      	str	r2, [r3, #52]	@ 0x34
    robot->theta_prev = robot->theta;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a1a      	ldr	r2, [r3, #32]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	625a      	str	r2, [r3, #36]	@ 0x24

    // Δθ de ruedas
    float dThetaL = LAngle - robot->theta_L;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80028a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80028aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float dThetaR = RAngle - robot->theta_R;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80028b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80028bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c0:	edc7 7a08 	vstr	s15, [r7, #32]

    // Actualizar ángulos
    robot->theta_L = LAngle;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	639a      	str	r2, [r3, #56]	@ 0x38
    robot->theta_R = RAngle;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Distancias por rueda
    float dSL = dThetaL * robot->wheel_radius;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80028d6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80028da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028de:	edc7 7a07 	vstr	s15, [r7, #28]
    float dSR = dThetaR * robot->wheel_radius;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80028e8:	ed97 7a08 	vldr	s14, [r7, #32]
 80028ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f0:	edc7 7a06 	vstr	s15, [r7, #24]

    float dCenter = 0.5f * (dSL + dSR);
 80028f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80028f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80028fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002900:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002908:	edc7 7a05 	vstr	s15, [r7, #20]
    float dTheta = (dSR - dSL) / robot->wheel_base;
 800290c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002910:	edd7 7a07 	vldr	s15, [r7, #28]
 8002914:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800291e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002922:	edc7 7a04 	vstr	s15, [r7, #16]

    // Actualización de orientación
//    robot->theta = robot->theta_prev + dTheta;
    robot->theta = atan2(sinf(robot->theta_prev + dTheta),cosf(robot->theta_prev + dTheta));
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800292c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002934:	eeb0 0a67 	vmov.f32	s0, s15
 8002938:	f007 f8ea 	bl	8009b10 <sinf>
 800293c:	ee10 3a10 	vmov	r3, s0
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fe21 	bl	8000588 <__aeabi_f2d>
 8002946:	4604      	mov	r4, r0
 8002948:	460d      	mov	r5, r1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002950:	edd7 7a04 	vldr	s15, [r7, #16]
 8002954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002958:	eeb0 0a67 	vmov.f32	s0, s15
 800295c:	f007 f894 	bl	8009a88 <cosf>
 8002960:	ee10 3a10 	vmov	r3, s0
 8002964:	4618      	mov	r0, r3
 8002966:	f7fd fe0f 	bl	8000588 <__aeabi_f2d>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	ec43 2b11 	vmov	d1, r2, r3
 8002972:	ec45 4b10 	vmov	d0, r4, r5
 8002976:	f006 fee7 	bl	8009748 <atan2>
 800297a:	ec53 2b10 	vmov	r2, r3, d0
 800297e:	4610      	mov	r0, r2
 8002980:	4619      	mov	r1, r3
 8002982:	f7fe f931 	bl	8000be8 <__aeabi_d2f>
 8002986:	4602      	mov	r2, r0
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	621a      	str	r2, [r3, #32]

    // Usar theta previa para calcular nueva posición
    robot->x = robot->x_prev + dCenter * cosf(robot->theta_prev);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	ed93 8a0c 	vldr	s16, [r3, #48]	@ 0x30
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002998:	eeb0 0a67 	vmov.f32	s0, s15
 800299c:	f007 f874 	bl	8009a88 <cosf>
 80029a0:	eeb0 7a40 	vmov.f32	s14, s0
 80029a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80029a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ac:	ee78 7a27 	vadd.f32	s15, s16, s15
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    robot->y = robot->y_prev + dCenter * sinf(robot->theta_prev);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	ed93 8a0d 	vldr	s16, [r3, #52]	@ 0x34
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80029c2:	eeb0 0a67 	vmov.f32	s0, s15
 80029c6:	f007 f8a3 	bl	8009b10 <sinf>
 80029ca:	eeb0 7a40 	vmov.f32	s14, s0
 80029ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80029d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Velocidades
    robot->left.velocity = dSL / dt;
 80029e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80029e4:	ed97 7a00 	vldr	s14, [r7]
 80029e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	edc3 7a02 	vstr	s15, [r3, #8]
    robot->right.velocity = dSR / dt;
 80029f2:	edd7 6a06 	vldr	s13, [r7, #24]
 80029f6:	ed97 7a00 	vldr	s14, [r7]
 80029fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	edc3 7a05 	vstr	s15, [r3, #20]
    robot->center_velocity = dCenter / dt;
 8002a04:	edd7 6a05 	vldr	s13, [r7, #20]
 8002a08:	ed97 7a00 	vldr	s14, [r7]
 8002a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	edc3 7a07 	vstr	s15, [r3, #28]

    // Acumulados
    robot->left.distance += dSL;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	edc3 7a01 	vstr	s15, [r3, #4]
    robot->right.distance += dSR;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002a30:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	edc3 7a04 	vstr	s15, [r3, #16]
    robot->center_distance += dCenter;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	ed93 7a06 	vldr	s14, [r3, #24]
 8002a44:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8002a52:	bf00      	nop
 8002a54:	3728      	adds	r7, #40	@ 0x28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	ecbd 8b02 	vpop	{d8}
 8002a5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002a60 <W_Control_Law>:


float W_Control_Law(RobotKinematics *robot, float Xd, float Yd){
 8002a60:	b5b0      	push	{r4, r5, r7, lr}
 8002a62:	ed2d 8b02 	vpush	{d8}
 8002a66:	b08c      	sub	sp, #48	@ 0x30
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a70:	edc7 0a01 	vstr	s1, [r7, #4]

	float phi_d = atan2((Yd-robot->y),(Xd-robot->x));
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002a7a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a82:	ee17 0a90 	vmov	r0, s15
 8002a86:	f7fd fd7f 	bl	8000588 <__aeabi_f2d>
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	460d      	mov	r5, r1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002a94:	ed97 7a02 	vldr	s14, [r7, #8]
 8002a98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a9c:	ee17 0a90 	vmov	r0, s15
 8002aa0:	f7fd fd72 	bl	8000588 <__aeabi_f2d>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	ec43 2b11 	vmov	d1, r2, r3
 8002aac:	ec45 4b10 	vmov	d0, r4, r5
 8002ab0:	f006 fe4a 	bl	8009748 <atan2>
 8002ab4:	ec53 2b10 	vmov	r2, r3, d0
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7fe f894 	bl	8000be8 <__aeabi_d2f>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
	float e_aux = phi_d - robot->theta;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	edd3 7a08 	vldr	s15, [r3, #32]
 8002aca:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float e_k = atan2(sin(e_aux), cos(e_aux));
 8002ad6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ad8:	f7fd fd56 	bl	8000588 <__aeabi_f2d>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	ec43 2b10 	vmov	d0, r2, r3
 8002ae4:	f006 ff24 	bl	8009930 <sin>
 8002ae8:	eeb0 8a40 	vmov.f32	s16, s0
 8002aec:	eef0 8a60 	vmov.f32	s17, s1
 8002af0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002af2:	f7fd fd49 	bl	8000588 <__aeabi_f2d>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	ec43 2b10 	vmov	d0, r2, r3
 8002afe:	f006 fec3 	bl	8009888 <cos>
 8002b02:	eeb0 7a40 	vmov.f32	s14, s0
 8002b06:	eef0 7a60 	vmov.f32	s15, s1
 8002b0a:	eeb0 1a47 	vmov.f32	s2, s14
 8002b0e:	eef0 1a67 	vmov.f32	s3, s15
 8002b12:	eeb0 0a48 	vmov.f32	s0, s16
 8002b16:	eef0 0a68 	vmov.f32	s1, s17
 8002b1a:	f006 fe15 	bl	8009748 <atan2>
 8002b1e:	ec53 2b10 	vmov	r2, r3, d0
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	f7fe f85f 	bl	8000be8 <__aeabi_d2f>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
//	float min_e = 0.125;
	float min_e = 0.25;
 8002b2e:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 8002b32:	623b      	str	r3, [r7, #32]
	//float Kp = 0.499, Ki = 0.001, T = 0.001;
//	float Kp = 0.31, Ki = 0.005, T = 0.001;
	float Kp = 0.31, Ki = 0.005, T = 0.001;
 8002b34:	4b46      	ldr	r3, [pc, #280]	@ (8002c50 <W_Control_Law+0x1f0>)
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	4b46      	ldr	r3, [pc, #280]	@ (8002c54 <W_Control_Law+0x1f4>)
 8002b3a:	61bb      	str	r3, [r7, #24]
 8002b3c:	4b46      	ldr	r3, [pc, #280]	@ (8002c58 <W_Control_Law+0x1f8>)
 8002b3e:	617b      	str	r3, [r7, #20]

	if(sqrt(pow(e_k,2)) <= min_e || robot->Vc == 0 ){
 8002b40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b42:	f7fd fd21 	bl	8000588 <__aeabi_f2d>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	ed9f 1b3f 	vldr	d1, [pc, #252]	@ 8002c48 <W_Control_Law+0x1e8>
 8002b4e:	ec43 2b10 	vmov	d0, r2, r3
 8002b52:	f006 fdfb 	bl	800974c <pow>
 8002b56:	eeb0 7a40 	vmov.f32	s14, s0
 8002b5a:	eef0 7a60 	vmov.f32	s15, s1
 8002b5e:	eeb0 0a47 	vmov.f32	s0, s14
 8002b62:	eef0 0a67 	vmov.f32	s1, s15
 8002b66:	f006 fe61 	bl	800982c <sqrt>
 8002b6a:	ec55 4b10 	vmov	r4, r5, d0
 8002b6e:	6a38      	ldr	r0, [r7, #32]
 8002b70:	f7fd fd0a 	bl	8000588 <__aeabi_f2d>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4620      	mov	r0, r4
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	f7fd ffd8 	bl	8000b30 <__aeabi_dcmple>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d107      	bne.n	8002b96 <W_Control_Law+0x136>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002b8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b94:	d107      	bne.n	8002ba6 <W_Control_Law+0x146>
		robot->Wc = 0;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	649a      	str	r2, [r3, #72]	@ 0x48
//		robot->Wc_e = 0;
//		robot->Wc_ek_1 = 0;
//		robot->Wc_k_1 = 0;
		e_k = 0;
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ba4:	e046      	b.n	8002c34 <W_Control_Law+0x1d4>
	}else{

//	robot->Wc = Kp*e_k;
	robot->Wc_e = e_k;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002baa:	669a      	str	r2, [r3, #104]	@ 0x68
	robot->Wc = (2*robot->Wc_k_1 + 2*Kp*robot->Wc_e - 2*Kp*robot->Wc_ek_1 + T*Ki*robot->Wc_e + T*Ki*robot->Wc_ek_1)/2;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002bb2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002bb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8002bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bcc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bd0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8002bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002be2:	edd7 6a05 	vldr	s13, [r7, #20]
 8002be6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8002bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bfc:	edd7 6a05 	vldr	s13, [r7, #20]
 8002c00:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8002c0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c16:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002c1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

	robot->Wc_ek_1 = robot->Wc_e;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	66da      	str	r2, [r3, #108]	@ 0x6c
	robot->Wc_k_1 = robot->Wc;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	665a      	str	r2, [r3, #100]	@ 0x64
	}

	return e_k;
 8002c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c36:	ee07 3a90 	vmov	s15, r3
}
 8002c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c3e:	3730      	adds	r7, #48	@ 0x30
 8002c40:	46bd      	mov	sp, r7
 8002c42:	ecbd 8b02 	vpop	{d8}
 8002c46:	bdb0      	pop	{r4, r5, r7, pc}
 8002c48:	00000000 	.word	0x00000000
 8002c4c:	40000000 	.word	0x40000000
 8002c50:	3e9eb852 	.word	0x3e9eb852
 8002c54:	3ba3d70a 	.word	0x3ba3d70a
 8002c58:	3a83126f 	.word	0x3a83126f
 8002c5c:	00000000 	.word	0x00000000

08002c60 <VL_Control_Law>:

void VL_Control_Law(RobotKinematics *robot, float Xd, float Yd){
 8002c60:	b5b0      	push	{r4, r5, r7, lr}
 8002c62:	b08c      	sub	sp, #48	@ 0x30
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c6c:	edc7 0a01 	vstr	s1, [r7, #4]

	double d = sqrt(pow((Yd-robot->y), 2) + pow((Xd-robot->x),2));
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002c76:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c7e:	ee17 0a90 	vmov	r0, s15
 8002c82:	f7fd fc81 	bl	8000588 <__aeabi_f2d>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	ed9f 1b55 	vldr	d1, [pc, #340]	@ 8002de0 <VL_Control_Law+0x180>
 8002c8e:	ec43 2b10 	vmov	d0, r2, r3
 8002c92:	f006 fd5b 	bl	800974c <pow>
 8002c96:	ec55 4b10 	vmov	r4, r5, d0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002ca0:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca8:	ee17 0a90 	vmov	r0, s15
 8002cac:	f7fd fc6c 	bl	8000588 <__aeabi_f2d>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	ed9f 1b4a 	vldr	d1, [pc, #296]	@ 8002de0 <VL_Control_Law+0x180>
 8002cb8:	ec43 2b10 	vmov	d0, r2, r3
 8002cbc:	f006 fd46 	bl	800974c <pow>
 8002cc0:	ec53 2b10 	vmov	r2, r3, d0
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	f7fd fb00 	bl	80002cc <__adddf3>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	ec43 2b17 	vmov	d7, r2, r3
 8002cd4:	eeb0 0a47 	vmov.f32	s0, s14
 8002cd8:	eef0 0a67 	vmov.f32	s1, s15
 8002cdc:	f006 fda6 	bl	800982c <sqrt>
 8002ce0:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	float min_e = 0.05;
 8002ce4:	4b40      	ldr	r3, [pc, #256]	@ (8002de8 <VL_Control_Law+0x188>)
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24
	float alpha_p = 0.1;
 8002ce8:	4b40      	ldr	r3, [pc, #256]	@ (8002dec <VL_Control_Law+0x18c>)
 8002cea:	623b      	str	r3, [r7, #32]
	//float Kp = 0.065, Ki = 0.0028, T = 0.001;
//	float Kp = 0.075, Ki = 0.0028, T = 0.001;
	float Kp = 0.08, Ki = 0.0028, T = 0.001;
 8002cec:	4b40      	ldr	r3, [pc, #256]	@ (8002df0 <VL_Control_Law+0x190>)
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	4b40      	ldr	r3, [pc, #256]	@ (8002df4 <VL_Control_Law+0x194>)
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	4b40      	ldr	r3, [pc, #256]	@ (8002df8 <VL_Control_Law+0x198>)
 8002cf6:	617b      	str	r3, [r7, #20]
	//robot->Vc = alpha_p*d;

	if(d <= min_e ){
 8002cf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002cfa:	f7fd fc45 	bl	8000588 <__aeabi_f2d>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d06:	f7fd ff13 	bl	8000b30 <__aeabi_dcmple>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d015      	beq.n	8002d3c <VL_Control_Law+0xdc>
		robot->Vc = 0;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	64da      	str	r2, [r3, #76]	@ 0x4c
		robot->Vc_e = 0;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	65da      	str	r2, [r3, #92]	@ 0x5c
		robot->Vc_ek_1 = 0;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	661a      	str	r2, [r3, #96]	@ 0x60
		robot->Vc_k_1 = 0;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	659a      	str	r2, [r3, #88]	@ 0x58
		d=0;
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	}

	robot->Vc_e = d;
 8002d3c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d40:	f7fd ff52 	bl	8000be8 <__aeabi_d2f>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	65da      	str	r2, [r3, #92]	@ 0x5c
	robot->Vc = (2*robot->Vc_k_1 + 2*Kp*robot->Vc_e - 2*Kp*robot->Vc_ek_1 + T*Ki*robot->Vc_e + T*Ki*robot->Vc_ek_1)/2;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002d50:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d54:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d58:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8002d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d6e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8002d78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d80:	edd7 6a05 	vldr	s13, [r7, #20]
 8002d84:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8002d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d9a:	edd7 6a05 	vldr	s13, [r7, #20]
 8002d9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002da2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8002dac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002db0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002db8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	//robot->Vc = robot->Vc_k_1 + 0.001*robot->Vc_e - 0.00099*robot->Vc_ek_1;

	robot->Vc_ek_1 = robot->Vc_e;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	661a      	str	r2, [r3, #96]	@ 0x60
	robot->Vc_k_1 = robot->Vc;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	659a      	str	r2, [r3, #88]	@ 0x58


}
 8002dd2:	bf00      	nop
 8002dd4:	3730      	adds	r7, #48	@ 0x30
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	f3af 8000 	nop.w
 8002de0:	00000000 	.word	0x00000000
 8002de4:	40000000 	.word	0x40000000
 8002de8:	3d4ccccd 	.word	0x3d4ccccd
 8002dec:	3dcccccd 	.word	0x3dcccccd
 8002df0:	3da3d70a 	.word	0x3da3d70a
 8002df4:	3b378034 	.word	0x3b378034
 8002df8:	3a83126f 	.word	0x3a83126f

08002dfc <Angular_Vel>:

void Angular_Vel(RobotKinematics *robot){ // Reconsiderar el hecho de pasarlas como argumento o que sea parámetros de la instancia
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]

	//Considerar lo de retornar o atributo
	robot-> W_L_d = ( 2*robot->Vc - robot->wheel_base*robot->Wc)/(2*robot->wheel_radius);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002e0a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e1e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002e28:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	robot-> W_R_d = ( 2*robot->Vc + robot->wheel_base*robot->Wc)/(2*robot->wheel_radius);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002e3c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e50:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002e5a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	607b      	str	r3, [r7, #4]
 8002e7e:	4b10      	ldr	r3, [pc, #64]	@ (8002ec0 <HAL_MspInit+0x4c>)
 8002e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e82:	4a0f      	ldr	r2, [pc, #60]	@ (8002ec0 <HAL_MspInit+0x4c>)
 8002e84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec0 <HAL_MspInit+0x4c>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e92:	607b      	str	r3, [r7, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	4b09      	ldr	r3, [pc, #36]	@ (8002ec0 <HAL_MspInit+0x4c>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	4a08      	ldr	r2, [pc, #32]	@ (8002ec0 <HAL_MspInit+0x4c>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ea6:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <HAL_MspInit+0x4c>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002eb2:	2007      	movs	r0, #7
 8002eb4:	f000 fcae 	bl	8003814 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eb8:	bf00      	nop
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40023800 	.word	0x40023800

08002ec4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08c      	sub	sp, #48	@ 0x30
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ecc:	f107 031c 	add.w	r3, r7, #28
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee4:	d154      	bne.n	8002f90 <HAL_TIM_Encoder_MspInit+0xcc>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	4b48      	ldr	r3, [pc, #288]	@ (800300c <HAL_TIM_Encoder_MspInit+0x148>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	4a47      	ldr	r2, [pc, #284]	@ (800300c <HAL_TIM_Encoder_MspInit+0x148>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ef6:	4b45      	ldr	r3, [pc, #276]	@ (800300c <HAL_TIM_Encoder_MspInit+0x148>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	61bb      	str	r3, [r7, #24]
 8002f00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	4b41      	ldr	r3, [pc, #260]	@ (800300c <HAL_TIM_Encoder_MspInit+0x148>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	4a40      	ldr	r2, [pc, #256]	@ (800300c <HAL_TIM_Encoder_MspInit+0x148>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f12:	4b3e      	ldr	r3, [pc, #248]	@ (800300c <HAL_TIM_Encoder_MspInit+0x148>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	4b3a      	ldr	r3, [pc, #232]	@ (800300c <HAL_TIM_Encoder_MspInit+0x148>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	4a39      	ldr	r2, [pc, #228]	@ (800300c <HAL_TIM_Encoder_MspInit+0x148>)
 8002f28:	f043 0302 	orr.w	r3, r3, #2
 8002f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f2e:	4b37      	ldr	r3, [pc, #220]	@ (800300c <HAL_TIM_Encoder_MspInit+0x148>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f50:	f107 031c 	add.w	r3, r7, #28
 8002f54:	4619      	mov	r1, r3
 8002f56:	482e      	ldr	r0, [pc, #184]	@ (8003010 <HAL_TIM_Encoder_MspInit+0x14c>)
 8002f58:	f000 fd30 	bl	80039bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f62:	2302      	movs	r3, #2
 8002f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f72:	f107 031c 	add.w	r3, r7, #28
 8002f76:	4619      	mov	r1, r3
 8002f78:	4826      	ldr	r0, [pc, #152]	@ (8003014 <HAL_TIM_Encoder_MspInit+0x150>)
 8002f7a:	f000 fd1f 	bl	80039bc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2100      	movs	r1, #0
 8002f82:	201c      	movs	r0, #28
 8002f84:	f000 fc51 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f88:	201c      	movs	r0, #28
 8002f8a:	f000 fc6a 	bl	8003862 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f8e:	e038      	b.n	8003002 <HAL_TIM_Encoder_MspInit+0x13e>
  else if(htim_encoder->Instance==TIM4)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a20      	ldr	r2, [pc, #128]	@ (8003018 <HAL_TIM_Encoder_MspInit+0x154>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d133      	bne.n	8003002 <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800300c <HAL_TIM_Encoder_MspInit+0x148>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800300c <HAL_TIM_Encoder_MspInit+0x148>)
 8002fa4:	f043 0304 	orr.w	r3, r3, #4
 8002fa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002faa:	4b18      	ldr	r3, [pc, #96]	@ (800300c <HAL_TIM_Encoder_MspInit+0x148>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	4b14      	ldr	r3, [pc, #80]	@ (800300c <HAL_TIM_Encoder_MspInit+0x148>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbe:	4a13      	ldr	r2, [pc, #76]	@ (800300c <HAL_TIM_Encoder_MspInit+0x148>)
 8002fc0:	f043 0302 	orr.w	r3, r3, #2
 8002fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fc6:	4b11      	ldr	r3, [pc, #68]	@ (800300c <HAL_TIM_Encoder_MspInit+0x148>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fd2:	23c0      	movs	r3, #192	@ 0xc0
 8002fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe6:	f107 031c 	add.w	r3, r7, #28
 8002fea:	4619      	mov	r1, r3
 8002fec:	4809      	ldr	r0, [pc, #36]	@ (8003014 <HAL_TIM_Encoder_MspInit+0x150>)
 8002fee:	f000 fce5 	bl	80039bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	201e      	movs	r0, #30
 8002ff8:	f000 fc17 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ffc:	201e      	movs	r0, #30
 8002ffe:	f000 fc30 	bl	8003862 <HAL_NVIC_EnableIRQ>
}
 8003002:	bf00      	nop
 8003004:	3730      	adds	r7, #48	@ 0x30
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800
 8003010:	40020000 	.word	0x40020000
 8003014:	40020400 	.word	0x40020400
 8003018:	40000800 	.word	0x40000800

0800301c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a2a      	ldr	r2, [pc, #168]	@ (80030d4 <HAL_TIM_Base_MspInit+0xb8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d116      	bne.n	800305c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	4b29      	ldr	r3, [pc, #164]	@ (80030d8 <HAL_TIM_Base_MspInit+0xbc>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	4a28      	ldr	r2, [pc, #160]	@ (80030d8 <HAL_TIM_Base_MspInit+0xbc>)
 8003038:	f043 0302 	orr.w	r3, r3, #2
 800303c:	6413      	str	r3, [r2, #64]	@ 0x40
 800303e:	4b26      	ldr	r3, [pc, #152]	@ (80030d8 <HAL_TIM_Base_MspInit+0xbc>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800304a:	2200      	movs	r2, #0
 800304c:	2100      	movs	r1, #0
 800304e:	201d      	movs	r0, #29
 8003050:	f000 fbeb 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003054:	201d      	movs	r0, #29
 8003056:	f000 fc04 	bl	8003862 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 800305a:	e036      	b.n	80030ca <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1e      	ldr	r2, [pc, #120]	@ (80030dc <HAL_TIM_Base_MspInit+0xc0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d116      	bne.n	8003094 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	4b1b      	ldr	r3, [pc, #108]	@ (80030d8 <HAL_TIM_Base_MspInit+0xbc>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	4a1a      	ldr	r2, [pc, #104]	@ (80030d8 <HAL_TIM_Base_MspInit+0xbc>)
 8003070:	f043 0308 	orr.w	r3, r3, #8
 8003074:	6413      	str	r3, [r2, #64]	@ 0x40
 8003076:	4b18      	ldr	r3, [pc, #96]	@ (80030d8 <HAL_TIM_Base_MspInit+0xbc>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003082:	2200      	movs	r2, #0
 8003084:	2100      	movs	r1, #0
 8003086:	2032      	movs	r0, #50	@ 0x32
 8003088:	f000 fbcf 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800308c:	2032      	movs	r0, #50	@ 0x32
 800308e:	f000 fbe8 	bl	8003862 <HAL_NVIC_EnableIRQ>
}
 8003092:	e01a      	b.n	80030ca <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM14)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a11      	ldr	r2, [pc, #68]	@ (80030e0 <HAL_TIM_Base_MspInit+0xc4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d115      	bne.n	80030ca <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	4b0d      	ldr	r3, [pc, #52]	@ (80030d8 <HAL_TIM_Base_MspInit+0xbc>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	4a0c      	ldr	r2, [pc, #48]	@ (80030d8 <HAL_TIM_Base_MspInit+0xbc>)
 80030a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ae:	4b0a      	ldr	r3, [pc, #40]	@ (80030d8 <HAL_TIM_Base_MspInit+0xbc>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80030ba:	2200      	movs	r2, #0
 80030bc:	2100      	movs	r1, #0
 80030be:	202d      	movs	r0, #45	@ 0x2d
 80030c0:	f000 fbb3 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80030c4:	202d      	movs	r0, #45	@ 0x2d
 80030c6:	f000 fbcc 	bl	8003862 <HAL_NVIC_EnableIRQ>
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40000400 	.word	0x40000400
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40000c00 	.word	0x40000c00
 80030e0:	40002000 	.word	0x40002000

080030e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08a      	sub	sp, #40	@ 0x28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ec:	f107 0314 	add.w	r3, r7, #20
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a24      	ldr	r2, [pc, #144]	@ (8003194 <HAL_TIM_MspPostInit+0xb0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d11e      	bne.n	8003144 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	4b23      	ldr	r3, [pc, #140]	@ (8003198 <HAL_TIM_MspPostInit+0xb4>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	4a22      	ldr	r2, [pc, #136]	@ (8003198 <HAL_TIM_MspPostInit+0xb4>)
 8003110:	f043 0302 	orr.w	r3, r3, #2
 8003114:	6313      	str	r3, [r2, #48]	@ 0x30
 8003116:	4b20      	ldr	r3, [pc, #128]	@ (8003198 <HAL_TIM_MspPostInit+0xb4>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003122:	2330      	movs	r3, #48	@ 0x30
 8003124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003126:	2302      	movs	r3, #2
 8003128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312e:	2300      	movs	r3, #0
 8003130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003132:	2302      	movs	r3, #2
 8003134:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003136:	f107 0314 	add.w	r3, r7, #20
 800313a:	4619      	mov	r1, r3
 800313c:	4817      	ldr	r0, [pc, #92]	@ (800319c <HAL_TIM_MspPostInit+0xb8>)
 800313e:	f000 fc3d 	bl	80039bc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003142:	e022      	b.n	800318a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a15      	ldr	r2, [pc, #84]	@ (80031a0 <HAL_TIM_MspPostInit+0xbc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d11d      	bne.n	800318a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <HAL_TIM_MspPostInit+0xb4>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	4a10      	ldr	r2, [pc, #64]	@ (8003198 <HAL_TIM_MspPostInit+0xb4>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6313      	str	r3, [r2, #48]	@ 0x30
 800315e:	4b0e      	ldr	r3, [pc, #56]	@ (8003198 <HAL_TIM_MspPostInit+0xb4>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800316a:	2303      	movs	r3, #3
 800316c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316e:	2302      	movs	r3, #2
 8003170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003176:	2300      	movs	r3, #0
 8003178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800317a:	2302      	movs	r3, #2
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317e:	f107 0314 	add.w	r3, r7, #20
 8003182:	4619      	mov	r1, r3
 8003184:	4807      	ldr	r0, [pc, #28]	@ (80031a4 <HAL_TIM_MspPostInit+0xc0>)
 8003186:	f000 fc19 	bl	80039bc <HAL_GPIO_Init>
}
 800318a:	bf00      	nop
 800318c:	3728      	adds	r7, #40	@ 0x28
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40000400 	.word	0x40000400
 8003198:	40023800 	.word	0x40023800
 800319c:	40020400 	.word	0x40020400
 80031a0:	40000c00 	.word	0x40000c00
 80031a4:	40020000 	.word	0x40020000

080031a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08c      	sub	sp, #48	@ 0x30
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b0:	f107 031c 	add.w	r3, r7, #28
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a36      	ldr	r2, [pc, #216]	@ (80032a0 <HAL_UART_MspInit+0xf8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d12c      	bne.n	8003224 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	4b35      	ldr	r3, [pc, #212]	@ (80032a4 <HAL_UART_MspInit+0xfc>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	4a34      	ldr	r2, [pc, #208]	@ (80032a4 <HAL_UART_MspInit+0xfc>)
 80031d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80031da:	4b32      	ldr	r3, [pc, #200]	@ (80032a4 <HAL_UART_MspInit+0xfc>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	4b2e      	ldr	r3, [pc, #184]	@ (80032a4 <HAL_UART_MspInit+0xfc>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	4a2d      	ldr	r2, [pc, #180]	@ (80032a4 <HAL_UART_MspInit+0xfc>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f6:	4b2b      	ldr	r3, [pc, #172]	@ (80032a4 <HAL_UART_MspInit+0xfc>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003202:	230c      	movs	r3, #12
 8003204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003206:	2302      	movs	r3, #2
 8003208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320e:	2303      	movs	r3, #3
 8003210:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003212:	2307      	movs	r3, #7
 8003214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003216:	f107 031c 	add.w	r3, r7, #28
 800321a:	4619      	mov	r1, r3
 800321c:	4822      	ldr	r0, [pc, #136]	@ (80032a8 <HAL_UART_MspInit+0x100>)
 800321e:	f000 fbcd 	bl	80039bc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8003222:	e039      	b.n	8003298 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a20      	ldr	r2, [pc, #128]	@ (80032ac <HAL_UART_MspInit+0x104>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d134      	bne.n	8003298 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	4b1c      	ldr	r3, [pc, #112]	@ (80032a4 <HAL_UART_MspInit+0xfc>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	4a1b      	ldr	r2, [pc, #108]	@ (80032a4 <HAL_UART_MspInit+0xfc>)
 8003238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800323c:	6413      	str	r3, [r2, #64]	@ 0x40
 800323e:	4b19      	ldr	r3, [pc, #100]	@ (80032a4 <HAL_UART_MspInit+0xfc>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	4b15      	ldr	r3, [pc, #84]	@ (80032a4 <HAL_UART_MspInit+0xfc>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003252:	4a14      	ldr	r2, [pc, #80]	@ (80032a4 <HAL_UART_MspInit+0xfc>)
 8003254:	f043 0304 	orr.w	r3, r3, #4
 8003258:	6313      	str	r3, [r2, #48]	@ 0x30
 800325a:	4b12      	ldr	r3, [pc, #72]	@ (80032a4 <HAL_UART_MspInit+0xfc>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003266:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800326a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326c:	2302      	movs	r3, #2
 800326e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003270:	2300      	movs	r3, #0
 8003272:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003274:	2303      	movs	r3, #3
 8003276:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003278:	2307      	movs	r3, #7
 800327a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800327c:	f107 031c 	add.w	r3, r7, #28
 8003280:	4619      	mov	r1, r3
 8003282:	480b      	ldr	r0, [pc, #44]	@ (80032b0 <HAL_UART_MspInit+0x108>)
 8003284:	f000 fb9a 	bl	80039bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003288:	2200      	movs	r2, #0
 800328a:	2100      	movs	r1, #0
 800328c:	2027      	movs	r0, #39	@ 0x27
 800328e:	f000 facc 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003292:	2027      	movs	r0, #39	@ 0x27
 8003294:	f000 fae5 	bl	8003862 <HAL_NVIC_EnableIRQ>
}
 8003298:	bf00      	nop
 800329a:	3730      	adds	r7, #48	@ 0x30
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40004400 	.word	0x40004400
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40020000 	.word	0x40020000
 80032ac:	40004800 	.word	0x40004800
 80032b0:	40020800 	.word	0x40020800

080032b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032b8:	bf00      	nop
 80032ba:	e7fd      	b.n	80032b8 <NMI_Handler+0x4>

080032bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032c0:	bf00      	nop
 80032c2:	e7fd      	b.n	80032c0 <HardFault_Handler+0x4>

080032c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032c8:	bf00      	nop
 80032ca:	e7fd      	b.n	80032c8 <MemManage_Handler+0x4>

080032cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032d0:	bf00      	nop
 80032d2:	e7fd      	b.n	80032d0 <BusFault_Handler+0x4>

080032d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032d8:	bf00      	nop
 80032da:	e7fd      	b.n	80032d8 <UsageFault_Handler+0x4>

080032dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032ea:	b480      	push	{r7}
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800330a:	f000 f993 	bl	8003634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003318:	4802      	ldr	r0, [pc, #8]	@ (8003324 <TIM2_IRQHandler+0x10>)
 800331a:	f001 fe1b 	bl	8004f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000508 	.word	0x20000508

08003328 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800332c:	4802      	ldr	r0, [pc, #8]	@ (8003338 <TIM3_IRQHandler+0x10>)
 800332e:	f001 fe11 	bl	8004f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000550 	.word	0x20000550

0800333c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003340:	4802      	ldr	r0, [pc, #8]	@ (800334c <TIM4_IRQHandler+0x10>)
 8003342:	f001 fe07 	bl	8004f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000598 	.word	0x20000598

08003350 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003354:	4802      	ldr	r0, [pc, #8]	@ (8003360 <USART3_IRQHandler+0x10>)
 8003356:	f002 fcc1 	bl	8005cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	200006b8 	.word	0x200006b8

08003364 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003368:	4802      	ldr	r0, [pc, #8]	@ (8003374 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800336a:	f001 fdf3 	bl	8004f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000628 	.word	0x20000628

08003378 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800337c:	4802      	ldr	r0, [pc, #8]	@ (8003388 <TIM5_IRQHandler+0x10>)
 800337e:	f001 fde9 	bl	8004f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	200005e0 	.word	0x200005e0

0800338c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
	return 1;
 8003390:	2301      	movs	r3, #1
}
 8003392:	4618      	mov	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <_kill>:

int _kill(int pid, int sig)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80033a6:	f004 f955 	bl	8007654 <__errno>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2216      	movs	r2, #22
 80033ae:	601a      	str	r2, [r3, #0]
	return -1;
 80033b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <_exit>:

void _exit (int status)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80033c4:	f04f 31ff 	mov.w	r1, #4294967295
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff ffe7 	bl	800339c <_kill>
	while (1) {}		/* Make sure we hang here */
 80033ce:	bf00      	nop
 80033d0:	e7fd      	b.n	80033ce <_exit+0x12>

080033d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b086      	sub	sp, #24
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	e00a      	b.n	80033fa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033e4:	f3af 8000 	nop.w
 80033e8:	4601      	mov	r1, r0
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	60ba      	str	r2, [r7, #8]
 80033f0:	b2ca      	uxtb	r2, r1
 80033f2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	3301      	adds	r3, #1
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	429a      	cmp	r2, r3
 8003400:	dbf0      	blt.n	80033e4 <_read+0x12>
	}

return len;
 8003402:	687b      	ldr	r3, [r7, #4]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	e009      	b.n	8003432 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	60ba      	str	r2, [r7, #8]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	3301      	adds	r3, #1
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	429a      	cmp	r2, r3
 8003438:	dbf1      	blt.n	800341e <_write+0x12>
	}
	return len;
 800343a:	687b      	ldr	r3, [r7, #4]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <_close>:

int _close(int file)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	return -1;
 800344c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800346c:	605a      	str	r2, [r3, #4]
	return 0;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <_isatty>:

int _isatty(int file)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	return 1;
 8003484:	2301      	movs	r3, #1
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003492:	b480      	push	{r7}
 8003494:	b085      	sub	sp, #20
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
	return 0;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034b4:	4a14      	ldr	r2, [pc, #80]	@ (8003508 <_sbrk+0x5c>)
 80034b6:	4b15      	ldr	r3, [pc, #84]	@ (800350c <_sbrk+0x60>)
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034c0:	4b13      	ldr	r3, [pc, #76]	@ (8003510 <_sbrk+0x64>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034c8:	4b11      	ldr	r3, [pc, #68]	@ (8003510 <_sbrk+0x64>)
 80034ca:	4a12      	ldr	r2, [pc, #72]	@ (8003514 <_sbrk+0x68>)
 80034cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034ce:	4b10      	ldr	r3, [pc, #64]	@ (8003510 <_sbrk+0x64>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d207      	bcs.n	80034ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034dc:	f004 f8ba 	bl	8007654 <__errno>
 80034e0:	4603      	mov	r3, r0
 80034e2:	220c      	movs	r2, #12
 80034e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034e6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ea:	e009      	b.n	8003500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034ec:	4b08      	ldr	r3, [pc, #32]	@ (8003510 <_sbrk+0x64>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034f2:	4b07      	ldr	r3, [pc, #28]	@ (8003510 <_sbrk+0x64>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	4a05      	ldr	r2, [pc, #20]	@ (8003510 <_sbrk+0x64>)
 80034fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034fe:	68fb      	ldr	r3, [r7, #12]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20020000 	.word	0x20020000
 800350c:	00000400 	.word	0x00000400
 8003510:	20000898 	.word	0x20000898
 8003514:	200009f0 	.word	0x200009f0

08003518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800351c:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <SystemInit+0x20>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003522:	4a05      	ldr	r2, [pc, #20]	@ (8003538 <SystemInit+0x20>)
 8003524:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003528:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800353c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003574 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003540:	480d      	ldr	r0, [pc, #52]	@ (8003578 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003542:	490e      	ldr	r1, [pc, #56]	@ (800357c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003544:	4a0e      	ldr	r2, [pc, #56]	@ (8003580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003548:	e002      	b.n	8003550 <LoopCopyDataInit>

0800354a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800354a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800354c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800354e:	3304      	adds	r3, #4

08003550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003554:	d3f9      	bcc.n	800354a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003556:	4a0b      	ldr	r2, [pc, #44]	@ (8003584 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003558:	4c0b      	ldr	r4, [pc, #44]	@ (8003588 <LoopFillZerobss+0x26>)
  movs r3, #0
 800355a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800355c:	e001      	b.n	8003562 <LoopFillZerobss>

0800355e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800355e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003560:	3204      	adds	r2, #4

08003562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003564:	d3fb      	bcc.n	800355e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003566:	f7ff ffd7 	bl	8003518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800356a:	f004 f879 	bl	8007660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800356e:	f7fd fd23 	bl	8000fb8 <main>
  bx  lr    
 8003572:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003574:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800357c:	200004ec 	.word	0x200004ec
  ldr r2, =_sidata
 8003580:	0800d6f0 	.word	0x0800d6f0
  ldr r2, =_sbss
 8003584:	200004ec 	.word	0x200004ec
  ldr r4, =_ebss
 8003588:	200009ec 	.word	0x200009ec

0800358c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800358c:	e7fe      	b.n	800358c <ADC_IRQHandler>
	...

08003590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003594:	4b0e      	ldr	r3, [pc, #56]	@ (80035d0 <HAL_Init+0x40>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a0d      	ldr	r2, [pc, #52]	@ (80035d0 <HAL_Init+0x40>)
 800359a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800359e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035a0:	4b0b      	ldr	r3, [pc, #44]	@ (80035d0 <HAL_Init+0x40>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a0a      	ldr	r2, [pc, #40]	@ (80035d0 <HAL_Init+0x40>)
 80035a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035ac:	4b08      	ldr	r3, [pc, #32]	@ (80035d0 <HAL_Init+0x40>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a07      	ldr	r2, [pc, #28]	@ (80035d0 <HAL_Init+0x40>)
 80035b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035b8:	2003      	movs	r0, #3
 80035ba:	f000 f92b 	bl	8003814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035be:	2000      	movs	r0, #0
 80035c0:	f000 f808 	bl	80035d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035c4:	f7ff fc56 	bl	8002e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40023c00 	.word	0x40023c00

080035d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035dc:	4b12      	ldr	r3, [pc, #72]	@ (8003628 <HAL_InitTick+0x54>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b12      	ldr	r3, [pc, #72]	@ (800362c <HAL_InitTick+0x58>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	4619      	mov	r1, r3
 80035e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 f943 	bl	800387e <HAL_SYSTICK_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e00e      	b.n	8003620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b0f      	cmp	r3, #15
 8003606:	d80a      	bhi.n	800361e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003608:	2200      	movs	r2, #0
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	f04f 30ff 	mov.w	r0, #4294967295
 8003610:	f000 f90b 	bl	800382a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003614:	4a06      	ldr	r2, [pc, #24]	@ (8003630 <HAL_InitTick+0x5c>)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	e000      	b.n	8003620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20000318 	.word	0x20000318
 800362c:	20000320 	.word	0x20000320
 8003630:	2000031c 	.word	0x2000031c

08003634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003638:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <HAL_IncTick+0x20>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <HAL_IncTick+0x24>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4413      	add	r3, r2
 8003644:	4a04      	ldr	r2, [pc, #16]	@ (8003658 <HAL_IncTick+0x24>)
 8003646:	6013      	str	r3, [r2, #0]
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000320 	.word	0x20000320
 8003658:	2000089c 	.word	0x2000089c

0800365c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return uwTick;
 8003660:	4b03      	ldr	r3, [pc, #12]	@ (8003670 <HAL_GetTick+0x14>)
 8003662:	681b      	ldr	r3, [r3, #0]
}
 8003664:	4618      	mov	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	2000089c 	.word	0x2000089c

08003674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003684:	4b0c      	ldr	r3, [pc, #48]	@ (80036b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003690:	4013      	ands	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800369c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036a6:	4a04      	ldr	r2, [pc, #16]	@ (80036b8 <__NVIC_SetPriorityGrouping+0x44>)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	60d3      	str	r3, [r2, #12]
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036c0:	4b04      	ldr	r3, [pc, #16]	@ (80036d4 <__NVIC_GetPriorityGrouping+0x18>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	0a1b      	lsrs	r3, r3, #8
 80036c6:	f003 0307 	and.w	r3, r3, #7
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	db0b      	blt.n	8003702 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	f003 021f 	and.w	r2, r3, #31
 80036f0:	4907      	ldr	r1, [pc, #28]	@ (8003710 <__NVIC_EnableIRQ+0x38>)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	2001      	movs	r0, #1
 80036fa:	fa00 f202 	lsl.w	r2, r0, r2
 80036fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	e000e100 	.word	0xe000e100

08003714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	6039      	str	r1, [r7, #0]
 800371e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	2b00      	cmp	r3, #0
 8003726:	db0a      	blt.n	800373e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	b2da      	uxtb	r2, r3
 800372c:	490c      	ldr	r1, [pc, #48]	@ (8003760 <__NVIC_SetPriority+0x4c>)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	0112      	lsls	r2, r2, #4
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	440b      	add	r3, r1
 8003738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800373c:	e00a      	b.n	8003754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	4908      	ldr	r1, [pc, #32]	@ (8003764 <__NVIC_SetPriority+0x50>)
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	3b04      	subs	r3, #4
 800374c:	0112      	lsls	r2, r2, #4
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	440b      	add	r3, r1
 8003752:	761a      	strb	r2, [r3, #24]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	e000e100 	.word	0xe000e100
 8003764:	e000ed00 	.word	0xe000ed00

08003768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003768:	b480      	push	{r7}
 800376a:	b089      	sub	sp, #36	@ 0x24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f1c3 0307 	rsb	r3, r3, #7
 8003782:	2b04      	cmp	r3, #4
 8003784:	bf28      	it	cs
 8003786:	2304      	movcs	r3, #4
 8003788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3304      	adds	r3, #4
 800378e:	2b06      	cmp	r3, #6
 8003790:	d902      	bls.n	8003798 <NVIC_EncodePriority+0x30>
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3b03      	subs	r3, #3
 8003796:	e000      	b.n	800379a <NVIC_EncodePriority+0x32>
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800379c:	f04f 32ff 	mov.w	r2, #4294967295
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43da      	mvns	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	401a      	ands	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b0:	f04f 31ff 	mov.w	r1, #4294967295
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ba:	43d9      	mvns	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c0:	4313      	orrs	r3, r2
         );
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3724      	adds	r7, #36	@ 0x24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3b01      	subs	r3, #1
 80037dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037e0:	d301      	bcc.n	80037e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037e2:	2301      	movs	r3, #1
 80037e4:	e00f      	b.n	8003806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003810 <SysTick_Config+0x40>)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ee:	210f      	movs	r1, #15
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295
 80037f4:	f7ff ff8e 	bl	8003714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f8:	4b05      	ldr	r3, [pc, #20]	@ (8003810 <SysTick_Config+0x40>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037fe:	4b04      	ldr	r3, [pc, #16]	@ (8003810 <SysTick_Config+0x40>)
 8003800:	2207      	movs	r2, #7
 8003802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	e000e010 	.word	0xe000e010

08003814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ff29 	bl	8003674 <__NVIC_SetPriorityGrouping>
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800382a:	b580      	push	{r7, lr}
 800382c:	b086      	sub	sp, #24
 800382e:	af00      	add	r7, sp, #0
 8003830:	4603      	mov	r3, r0
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800383c:	f7ff ff3e 	bl	80036bc <__NVIC_GetPriorityGrouping>
 8003840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	6978      	ldr	r0, [r7, #20]
 8003848:	f7ff ff8e 	bl	8003768 <NVIC_EncodePriority>
 800384c:	4602      	mov	r2, r0
 800384e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003852:	4611      	mov	r1, r2
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff ff5d 	bl	8003714 <__NVIC_SetPriority>
}
 800385a:	bf00      	nop
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	4603      	mov	r3, r0
 800386a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff ff31 	bl	80036d8 <__NVIC_EnableIRQ>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ffa2 	bl	80037d0 <SysTick_Config>
 800388c:	4603      	mov	r3, r0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038a4:	f7ff feda 	bl	800365c <HAL_GetTick>
 80038a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d008      	beq.n	80038c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2280      	movs	r2, #128	@ 0x80
 80038ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e052      	b.n	800396e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0216 	bic.w	r2, r2, #22
 80038d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d103      	bne.n	80038f8 <HAL_DMA_Abort+0x62>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0208 	bic.w	r2, r2, #8
 8003906:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0201 	bic.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003918:	e013      	b.n	8003942 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800391a:	f7ff fe9f 	bl	800365c <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b05      	cmp	r3, #5
 8003926:	d90c      	bls.n	8003942 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2203      	movs	r2, #3
 8003932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e015      	b.n	800396e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e4      	bne.n	800391a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003954:	223f      	movs	r2, #63	@ 0x3f
 8003956:	409a      	lsls	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d004      	beq.n	8003994 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2280      	movs	r2, #128	@ 0x80
 800398e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e00c      	b.n	80039ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2205      	movs	r2, #5
 8003998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
	...

080039bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039bc:	b480      	push	{r7}
 80039be:	b089      	sub	sp, #36	@ 0x24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	e165      	b.n	8003ca4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039d8:	2201      	movs	r2, #1
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4013      	ands	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	f040 8154 	bne.w	8003c9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d005      	beq.n	8003a0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d130      	bne.n	8003a70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	2203      	movs	r2, #3
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4013      	ands	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a44:	2201      	movs	r2, #1
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f003 0201 	and.w	r2, r3, #1
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d017      	beq.n	8003aac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	2203      	movs	r2, #3
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4013      	ands	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d123      	bne.n	8003b00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	08da      	lsrs	r2, r3, #3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3208      	adds	r2, #8
 8003ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	220f      	movs	r2, #15
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	08da      	lsrs	r2, r3, #3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3208      	adds	r2, #8
 8003afa:	69b9      	ldr	r1, [r7, #24]
 8003afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	2203      	movs	r2, #3
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0203 	and.w	r2, r3, #3
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 80ae 	beq.w	8003c9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	4b5d      	ldr	r3, [pc, #372]	@ (8003cbc <HAL_GPIO_Init+0x300>)
 8003b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4a:	4a5c      	ldr	r2, [pc, #368]	@ (8003cbc <HAL_GPIO_Init+0x300>)
 8003b4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b52:	4b5a      	ldr	r3, [pc, #360]	@ (8003cbc <HAL_GPIO_Init+0x300>)
 8003b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b5e:	4a58      	ldr	r2, [pc, #352]	@ (8003cc0 <HAL_GPIO_Init+0x304>)
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	089b      	lsrs	r3, r3, #2
 8003b64:	3302      	adds	r3, #2
 8003b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	220f      	movs	r2, #15
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a4f      	ldr	r2, [pc, #316]	@ (8003cc4 <HAL_GPIO_Init+0x308>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d025      	beq.n	8003bd6 <HAL_GPIO_Init+0x21a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4e      	ldr	r2, [pc, #312]	@ (8003cc8 <HAL_GPIO_Init+0x30c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d01f      	beq.n	8003bd2 <HAL_GPIO_Init+0x216>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a4d      	ldr	r2, [pc, #308]	@ (8003ccc <HAL_GPIO_Init+0x310>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d019      	beq.n	8003bce <HAL_GPIO_Init+0x212>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a4c      	ldr	r2, [pc, #304]	@ (8003cd0 <HAL_GPIO_Init+0x314>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_GPIO_Init+0x20e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a4b      	ldr	r2, [pc, #300]	@ (8003cd4 <HAL_GPIO_Init+0x318>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00d      	beq.n	8003bc6 <HAL_GPIO_Init+0x20a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a4a      	ldr	r2, [pc, #296]	@ (8003cd8 <HAL_GPIO_Init+0x31c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d007      	beq.n	8003bc2 <HAL_GPIO_Init+0x206>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a49      	ldr	r2, [pc, #292]	@ (8003cdc <HAL_GPIO_Init+0x320>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d101      	bne.n	8003bbe <HAL_GPIO_Init+0x202>
 8003bba:	2306      	movs	r3, #6
 8003bbc:	e00c      	b.n	8003bd8 <HAL_GPIO_Init+0x21c>
 8003bbe:	2307      	movs	r3, #7
 8003bc0:	e00a      	b.n	8003bd8 <HAL_GPIO_Init+0x21c>
 8003bc2:	2305      	movs	r3, #5
 8003bc4:	e008      	b.n	8003bd8 <HAL_GPIO_Init+0x21c>
 8003bc6:	2304      	movs	r3, #4
 8003bc8:	e006      	b.n	8003bd8 <HAL_GPIO_Init+0x21c>
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e004      	b.n	8003bd8 <HAL_GPIO_Init+0x21c>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e002      	b.n	8003bd8 <HAL_GPIO_Init+0x21c>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <HAL_GPIO_Init+0x21c>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	f002 0203 	and.w	r2, r2, #3
 8003bde:	0092      	lsls	r2, r2, #2
 8003be0:	4093      	lsls	r3, r2
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003be8:	4935      	ldr	r1, [pc, #212]	@ (8003cc0 <HAL_GPIO_Init+0x304>)
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	089b      	lsrs	r3, r3, #2
 8003bee:	3302      	adds	r3, #2
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ce0 <HAL_GPIO_Init+0x324>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4013      	ands	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c1a:	4a31      	ldr	r2, [pc, #196]	@ (8003ce0 <HAL_GPIO_Init+0x324>)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c20:	4b2f      	ldr	r3, [pc, #188]	@ (8003ce0 <HAL_GPIO_Init+0x324>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c44:	4a26      	ldr	r2, [pc, #152]	@ (8003ce0 <HAL_GPIO_Init+0x324>)
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c4a:	4b25      	ldr	r3, [pc, #148]	@ (8003ce0 <HAL_GPIO_Init+0x324>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	43db      	mvns	r3, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4013      	ands	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce0 <HAL_GPIO_Init+0x324>)
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c74:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce0 <HAL_GPIO_Init+0x324>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4013      	ands	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c98:	4a11      	ldr	r2, [pc, #68]	@ (8003ce0 <HAL_GPIO_Init+0x324>)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	61fb      	str	r3, [r7, #28]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	2b0f      	cmp	r3, #15
 8003ca8:	f67f ae96 	bls.w	80039d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cac:	bf00      	nop
 8003cae:	bf00      	nop
 8003cb0:	3724      	adds	r7, #36	@ 0x24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	40013800 	.word	0x40013800
 8003cc4:	40020000 	.word	0x40020000
 8003cc8:	40020400 	.word	0x40020400
 8003ccc:	40020800 	.word	0x40020800
 8003cd0:	40020c00 	.word	0x40020c00
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40021400 	.word	0x40021400
 8003cdc:	40021800 	.word	0x40021800
 8003ce0:	40013c00 	.word	0x40013c00

08003ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	807b      	strh	r3, [r7, #2]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cf4:	787b      	ldrb	r3, [r7, #1]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cfa:	887a      	ldrh	r2, [r7, #2]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d00:	e003      	b.n	8003d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d02:	887b      	ldrh	r3, [r7, #2]
 8003d04:	041a      	lsls	r2, r3, #16
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	619a      	str	r2, [r3, #24]
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0cc      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b68      	ldr	r3, [pc, #416]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d90c      	bls.n	8003d54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b65      	ldr	r3, [pc, #404]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d42:	4b63      	ldr	r3, [pc, #396]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0b8      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d020      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d6c:	4b59      	ldr	r3, [pc, #356]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4a58      	ldr	r2, [pc, #352]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d84:	4b53      	ldr	r3, [pc, #332]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a52      	ldr	r2, [pc, #328]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d90:	4b50      	ldr	r3, [pc, #320]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	494d      	ldr	r1, [pc, #308]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d044      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d107      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db6:	4b47      	ldr	r3, [pc, #284]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d119      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e07f      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e06f      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e067      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df6:	4b37      	ldr	r3, [pc, #220]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f023 0203 	bic.w	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4934      	ldr	r1, [pc, #208]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e08:	f7ff fc28 	bl	800365c <HAL_GetTick>
 8003e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e10:	f7ff fc24 	bl	800365c <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e04f      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 020c 	and.w	r2, r3, #12
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d1eb      	bne.n	8003e10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e38:	4b25      	ldr	r3, [pc, #148]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d20c      	bcs.n	8003e60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b22      	ldr	r3, [pc, #136]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b20      	ldr	r3, [pc, #128]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e032      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e6c:	4b19      	ldr	r3, [pc, #100]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4916      	ldr	r1, [pc, #88]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e8a:	4b12      	ldr	r3, [pc, #72]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	490e      	ldr	r1, [pc, #56]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e9e:	f000 f855 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	490a      	ldr	r1, [pc, #40]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb0:	5ccb      	ldrb	r3, [r1, r3]
 8003eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb6:	4a09      	ldr	r2, [pc, #36]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003eba:	4b09      	ldr	r3, [pc, #36]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fb88 	bl	80035d4 <HAL_InitTick>

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40023c00 	.word	0x40023c00
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	0800ccdc 	.word	0x0800ccdc
 8003edc:	20000318 	.word	0x20000318
 8003ee0:	2000031c 	.word	0x2000031c

08003ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee8:	4b03      	ldr	r3, [pc, #12]	@ (8003ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eea:	681b      	ldr	r3, [r3, #0]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	20000318 	.word	0x20000318

08003efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f00:	f7ff fff0 	bl	8003ee4 <HAL_RCC_GetHCLKFreq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b05      	ldr	r3, [pc, #20]	@ (8003f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	0a9b      	lsrs	r3, r3, #10
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	4903      	ldr	r1, [pc, #12]	@ (8003f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f12:	5ccb      	ldrb	r3, [r1, r3]
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	0800ccec 	.word	0x0800ccec

08003f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f28:	f7ff ffdc 	bl	8003ee4 <HAL_RCC_GetHCLKFreq>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b05      	ldr	r3, [pc, #20]	@ (8003f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	0b5b      	lsrs	r3, r3, #13
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	4903      	ldr	r1, [pc, #12]	@ (8003f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f3a:	5ccb      	ldrb	r3, [r1, r3]
 8003f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40023800 	.word	0x40023800
 8003f48:	0800ccec 	.word	0x0800ccec

08003f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f50:	b0ae      	sub	sp, #184	@ 0xb8
 8003f52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f72:	4bcb      	ldr	r3, [pc, #812]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b0c      	cmp	r3, #12
 8003f7c:	f200 8206 	bhi.w	800438c <HAL_RCC_GetSysClockFreq+0x440>
 8003f80:	a201      	add	r2, pc, #4	@ (adr r2, 8003f88 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003fbd 	.word	0x08003fbd
 8003f8c:	0800438d 	.word	0x0800438d
 8003f90:	0800438d 	.word	0x0800438d
 8003f94:	0800438d 	.word	0x0800438d
 8003f98:	08003fc5 	.word	0x08003fc5
 8003f9c:	0800438d 	.word	0x0800438d
 8003fa0:	0800438d 	.word	0x0800438d
 8003fa4:	0800438d 	.word	0x0800438d
 8003fa8:	08003fcd 	.word	0x08003fcd
 8003fac:	0800438d 	.word	0x0800438d
 8003fb0:	0800438d 	.word	0x0800438d
 8003fb4:	0800438d 	.word	0x0800438d
 8003fb8:	080041bd 	.word	0x080041bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fbc:	4bb9      	ldr	r3, [pc, #740]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fc2:	e1e7      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fc4:	4bb8      	ldr	r3, [pc, #736]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fca:	e1e3      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fcc:	4bb4      	ldr	r3, [pc, #720]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fd8:	4bb1      	ldr	r3, [pc, #708]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d071      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe4:	4bae      	ldr	r3, [pc, #696]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	099b      	lsrs	r3, r3, #6
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ff0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ffc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004000:	2300      	movs	r3, #0
 8004002:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004006:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800400a:	4622      	mov	r2, r4
 800400c:	462b      	mov	r3, r5
 800400e:	f04f 0000 	mov.w	r0, #0
 8004012:	f04f 0100 	mov.w	r1, #0
 8004016:	0159      	lsls	r1, r3, #5
 8004018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800401c:	0150      	lsls	r0, r2, #5
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4621      	mov	r1, r4
 8004024:	1a51      	subs	r1, r2, r1
 8004026:	6439      	str	r1, [r7, #64]	@ 0x40
 8004028:	4629      	mov	r1, r5
 800402a:	eb63 0301 	sbc.w	r3, r3, r1
 800402e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800403c:	4649      	mov	r1, r9
 800403e:	018b      	lsls	r3, r1, #6
 8004040:	4641      	mov	r1, r8
 8004042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004046:	4641      	mov	r1, r8
 8004048:	018a      	lsls	r2, r1, #6
 800404a:	4641      	mov	r1, r8
 800404c:	1a51      	subs	r1, r2, r1
 800404e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004050:	4649      	mov	r1, r9
 8004052:	eb63 0301 	sbc.w	r3, r3, r1
 8004056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004064:	4649      	mov	r1, r9
 8004066:	00cb      	lsls	r3, r1, #3
 8004068:	4641      	mov	r1, r8
 800406a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800406e:	4641      	mov	r1, r8
 8004070:	00ca      	lsls	r2, r1, #3
 8004072:	4610      	mov	r0, r2
 8004074:	4619      	mov	r1, r3
 8004076:	4603      	mov	r3, r0
 8004078:	4622      	mov	r2, r4
 800407a:	189b      	adds	r3, r3, r2
 800407c:	633b      	str	r3, [r7, #48]	@ 0x30
 800407e:	462b      	mov	r3, r5
 8004080:	460a      	mov	r2, r1
 8004082:	eb42 0303 	adc.w	r3, r2, r3
 8004086:	637b      	str	r3, [r7, #52]	@ 0x34
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004094:	4629      	mov	r1, r5
 8004096:	024b      	lsls	r3, r1, #9
 8004098:	4621      	mov	r1, r4
 800409a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800409e:	4621      	mov	r1, r4
 80040a0:	024a      	lsls	r2, r1, #9
 80040a2:	4610      	mov	r0, r2
 80040a4:	4619      	mov	r1, r3
 80040a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80040b8:	f7fc fde6 	bl	8000c88 <__aeabi_uldivmod>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4613      	mov	r3, r2
 80040c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040c6:	e067      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c8:	4b75      	ldr	r3, [pc, #468]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040d4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80040d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040e2:	2300      	movs	r3, #0
 80040e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80040ea:	4622      	mov	r2, r4
 80040ec:	462b      	mov	r3, r5
 80040ee:	f04f 0000 	mov.w	r0, #0
 80040f2:	f04f 0100 	mov.w	r1, #0
 80040f6:	0159      	lsls	r1, r3, #5
 80040f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040fc:	0150      	lsls	r0, r2, #5
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4621      	mov	r1, r4
 8004104:	1a51      	subs	r1, r2, r1
 8004106:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004108:	4629      	mov	r1, r5
 800410a:	eb63 0301 	sbc.w	r3, r3, r1
 800410e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800411c:	4649      	mov	r1, r9
 800411e:	018b      	lsls	r3, r1, #6
 8004120:	4641      	mov	r1, r8
 8004122:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004126:	4641      	mov	r1, r8
 8004128:	018a      	lsls	r2, r1, #6
 800412a:	4641      	mov	r1, r8
 800412c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004130:	4649      	mov	r1, r9
 8004132:	eb63 0b01 	sbc.w	fp, r3, r1
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004142:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004146:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800414a:	4692      	mov	sl, r2
 800414c:	469b      	mov	fp, r3
 800414e:	4623      	mov	r3, r4
 8004150:	eb1a 0303 	adds.w	r3, sl, r3
 8004154:	623b      	str	r3, [r7, #32]
 8004156:	462b      	mov	r3, r5
 8004158:	eb4b 0303 	adc.w	r3, fp, r3
 800415c:	627b      	str	r3, [r7, #36]	@ 0x24
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800416a:	4629      	mov	r1, r5
 800416c:	028b      	lsls	r3, r1, #10
 800416e:	4621      	mov	r1, r4
 8004170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004174:	4621      	mov	r1, r4
 8004176:	028a      	lsls	r2, r1, #10
 8004178:	4610      	mov	r0, r2
 800417a:	4619      	mov	r1, r3
 800417c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004180:	2200      	movs	r2, #0
 8004182:	673b      	str	r3, [r7, #112]	@ 0x70
 8004184:	677a      	str	r2, [r7, #116]	@ 0x74
 8004186:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800418a:	f7fc fd7d 	bl	8000c88 <__aeabi_uldivmod>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4613      	mov	r3, r2
 8004194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004198:	4b41      	ldr	r3, [pc, #260]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	0c1b      	lsrs	r3, r3, #16
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	3301      	adds	r3, #1
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80041aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80041ba:	e0eb      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041bc:	4b38      	ldr	r3, [pc, #224]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041c8:	4b35      	ldr	r3, [pc, #212]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d06b      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d4:	4b32      	ldr	r3, [pc, #200]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	099b      	lsrs	r3, r3, #6
 80041da:	2200      	movs	r2, #0
 80041dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80041e8:	2300      	movs	r3, #0
 80041ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80041ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80041f0:	4622      	mov	r2, r4
 80041f2:	462b      	mov	r3, r5
 80041f4:	f04f 0000 	mov.w	r0, #0
 80041f8:	f04f 0100 	mov.w	r1, #0
 80041fc:	0159      	lsls	r1, r3, #5
 80041fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004202:	0150      	lsls	r0, r2, #5
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4621      	mov	r1, r4
 800420a:	1a51      	subs	r1, r2, r1
 800420c:	61b9      	str	r1, [r7, #24]
 800420e:	4629      	mov	r1, r5
 8004210:	eb63 0301 	sbc.w	r3, r3, r1
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004222:	4659      	mov	r1, fp
 8004224:	018b      	lsls	r3, r1, #6
 8004226:	4651      	mov	r1, sl
 8004228:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800422c:	4651      	mov	r1, sl
 800422e:	018a      	lsls	r2, r1, #6
 8004230:	4651      	mov	r1, sl
 8004232:	ebb2 0801 	subs.w	r8, r2, r1
 8004236:	4659      	mov	r1, fp
 8004238:	eb63 0901 	sbc.w	r9, r3, r1
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004248:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800424c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004250:	4690      	mov	r8, r2
 8004252:	4699      	mov	r9, r3
 8004254:	4623      	mov	r3, r4
 8004256:	eb18 0303 	adds.w	r3, r8, r3
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	462b      	mov	r3, r5
 800425e:	eb49 0303 	adc.w	r3, r9, r3
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004270:	4629      	mov	r1, r5
 8004272:	024b      	lsls	r3, r1, #9
 8004274:	4621      	mov	r1, r4
 8004276:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800427a:	4621      	mov	r1, r4
 800427c:	024a      	lsls	r2, r1, #9
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004286:	2200      	movs	r2, #0
 8004288:	65bb      	str	r3, [r7, #88]	@ 0x58
 800428a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800428c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004290:	f7fc fcfa 	bl	8000c88 <__aeabi_uldivmod>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4613      	mov	r3, r2
 800429a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800429e:	e065      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x420>
 80042a0:	40023800 	.word	0x40023800
 80042a4:	00f42400 	.word	0x00f42400
 80042a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ac:	4b3d      	ldr	r3, [pc, #244]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	099b      	lsrs	r3, r3, #6
 80042b2:	2200      	movs	r2, #0
 80042b4:	4618      	mov	r0, r3
 80042b6:	4611      	mov	r1, r2
 80042b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80042be:	2300      	movs	r3, #0
 80042c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80042c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80042c6:	4642      	mov	r2, r8
 80042c8:	464b      	mov	r3, r9
 80042ca:	f04f 0000 	mov.w	r0, #0
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	0159      	lsls	r1, r3, #5
 80042d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042d8:	0150      	lsls	r0, r2, #5
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4641      	mov	r1, r8
 80042e0:	1a51      	subs	r1, r2, r1
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	4649      	mov	r1, r9
 80042e6:	eb63 0301 	sbc.w	r3, r3, r1
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80042f8:	4659      	mov	r1, fp
 80042fa:	018b      	lsls	r3, r1, #6
 80042fc:	4651      	mov	r1, sl
 80042fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004302:	4651      	mov	r1, sl
 8004304:	018a      	lsls	r2, r1, #6
 8004306:	4651      	mov	r1, sl
 8004308:	1a54      	subs	r4, r2, r1
 800430a:	4659      	mov	r1, fp
 800430c:	eb63 0501 	sbc.w	r5, r3, r1
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	00eb      	lsls	r3, r5, #3
 800431a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800431e:	00e2      	lsls	r2, r4, #3
 8004320:	4614      	mov	r4, r2
 8004322:	461d      	mov	r5, r3
 8004324:	4643      	mov	r3, r8
 8004326:	18e3      	adds	r3, r4, r3
 8004328:	603b      	str	r3, [r7, #0]
 800432a:	464b      	mov	r3, r9
 800432c:	eb45 0303 	adc.w	r3, r5, r3
 8004330:	607b      	str	r3, [r7, #4]
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800433e:	4629      	mov	r1, r5
 8004340:	028b      	lsls	r3, r1, #10
 8004342:	4621      	mov	r1, r4
 8004344:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004348:	4621      	mov	r1, r4
 800434a:	028a      	lsls	r2, r1, #10
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004354:	2200      	movs	r2, #0
 8004356:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004358:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800435a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800435e:	f7fc fc93 	bl	8000c88 <__aeabi_uldivmod>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4613      	mov	r3, r2
 8004368:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800436c:	4b0d      	ldr	r3, [pc, #52]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	0f1b      	lsrs	r3, r3, #28
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800437a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800437e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800438a:	e003      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800438c:	4b06      	ldr	r3, [pc, #24]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800438e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004392:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004394:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004398:	4618      	mov	r0, r3
 800439a:	37b8      	adds	r7, #184	@ 0xb8
 800439c:	46bd      	mov	sp, r7
 800439e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800
 80043a8:	00f42400 	.word	0x00f42400

080043ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e28d      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 8083 	beq.w	80044d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80043cc:	4b94      	ldr	r3, [pc, #592]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 030c 	and.w	r3, r3, #12
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d019      	beq.n	800440c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80043d8:	4b91      	ldr	r3, [pc, #580]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 030c 	and.w	r3, r3, #12
        || \
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d106      	bne.n	80043f2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80043e4:	4b8e      	ldr	r3, [pc, #568]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043f0:	d00c      	beq.n	800440c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043f2:	4b8b      	ldr	r3, [pc, #556]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80043fa:	2b0c      	cmp	r3, #12
 80043fc:	d112      	bne.n	8004424 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043fe:	4b88      	ldr	r3, [pc, #544]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004406:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800440a:	d10b      	bne.n	8004424 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800440c:	4b84      	ldr	r3, [pc, #528]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d05b      	beq.n	80044d0 <HAL_RCC_OscConfig+0x124>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d157      	bne.n	80044d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e25a      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800442c:	d106      	bne.n	800443c <HAL_RCC_OscConfig+0x90>
 800442e:	4b7c      	ldr	r3, [pc, #496]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a7b      	ldr	r2, [pc, #492]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e01d      	b.n	8004478 <HAL_RCC_OscConfig+0xcc>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004444:	d10c      	bne.n	8004460 <HAL_RCC_OscConfig+0xb4>
 8004446:	4b76      	ldr	r3, [pc, #472]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a75      	ldr	r2, [pc, #468]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 800444c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	4b73      	ldr	r3, [pc, #460]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a72      	ldr	r2, [pc, #456]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	e00b      	b.n	8004478 <HAL_RCC_OscConfig+0xcc>
 8004460:	4b6f      	ldr	r3, [pc, #444]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a6e      	ldr	r2, [pc, #440]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	4b6c      	ldr	r3, [pc, #432]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a6b      	ldr	r2, [pc, #428]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004472:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d013      	beq.n	80044a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7ff f8ec 	bl	800365c <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004488:	f7ff f8e8 	bl	800365c <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	@ 0x64
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e21f      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449a:	4b61      	ldr	r3, [pc, #388]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0xdc>
 80044a6:	e014      	b.n	80044d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7ff f8d8 	bl	800365c <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044b0:	f7ff f8d4 	bl	800365c <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	@ 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e20b      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c2:	4b57      	ldr	r3, [pc, #348]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x104>
 80044ce:	e000      	b.n	80044d2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d06f      	beq.n	80045be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80044de:	4b50      	ldr	r3, [pc, #320]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d017      	beq.n	800451a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80044ea:	4b4d      	ldr	r3, [pc, #308]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
        || \
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d105      	bne.n	8004502 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80044f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00b      	beq.n	800451a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004502:	4b47      	ldr	r3, [pc, #284]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800450a:	2b0c      	cmp	r3, #12
 800450c:	d11c      	bne.n	8004548 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800450e:	4b44      	ldr	r3, [pc, #272]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d116      	bne.n	8004548 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451a:	4b41      	ldr	r3, [pc, #260]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_RCC_OscConfig+0x186>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d001      	beq.n	8004532 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e1d3      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004532:	4b3b      	ldr	r3, [pc, #236]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4937      	ldr	r1, [pc, #220]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004542:	4313      	orrs	r3, r2
 8004544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004546:	e03a      	b.n	80045be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d020      	beq.n	8004592 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004550:	4b34      	ldr	r3, [pc, #208]	@ (8004624 <HAL_RCC_OscConfig+0x278>)
 8004552:	2201      	movs	r2, #1
 8004554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004556:	f7ff f881 	bl	800365c <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455e:	f7ff f87d 	bl	800365c <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e1b4      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004570:	4b2b      	ldr	r3, [pc, #172]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457c:	4b28      	ldr	r3, [pc, #160]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4925      	ldr	r1, [pc, #148]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]
 8004590:	e015      	b.n	80045be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004592:	4b24      	ldr	r3, [pc, #144]	@ (8004624 <HAL_RCC_OscConfig+0x278>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7ff f860 	bl	800365c <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a0:	f7ff f85c 	bl	800365c <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e193      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d036      	beq.n	8004638 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d016      	beq.n	8004600 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d2:	4b15      	ldr	r3, [pc, #84]	@ (8004628 <HAL_RCC_OscConfig+0x27c>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d8:	f7ff f840 	bl	800365c <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e0:	f7ff f83c 	bl	800365c <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e173      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80045f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x234>
 80045fe:	e01b      	b.n	8004638 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004600:	4b09      	ldr	r3, [pc, #36]	@ (8004628 <HAL_RCC_OscConfig+0x27c>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004606:	f7ff f829 	bl	800365c <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800460c:	e00e      	b.n	800462c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800460e:	f7ff f825 	bl	800365c <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d907      	bls.n	800462c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e15c      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
 8004620:	40023800 	.word	0x40023800
 8004624:	42470000 	.word	0x42470000
 8004628:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800462c:	4b8a      	ldr	r3, [pc, #552]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 800462e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1ea      	bne.n	800460e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8097 	beq.w	8004774 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004646:	2300      	movs	r3, #0
 8004648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464a:	4b83      	ldr	r3, [pc, #524]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 800464c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10f      	bne.n	8004676 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	4b7f      	ldr	r3, [pc, #508]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465e:	4a7e      	ldr	r2, [pc, #504]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 8004660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004664:	6413      	str	r3, [r2, #64]	@ 0x40
 8004666:	4b7c      	ldr	r3, [pc, #496]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004672:	2301      	movs	r3, #1
 8004674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004676:	4b79      	ldr	r3, [pc, #484]	@ (800485c <HAL_RCC_OscConfig+0x4b0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d118      	bne.n	80046b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004682:	4b76      	ldr	r3, [pc, #472]	@ (800485c <HAL_RCC_OscConfig+0x4b0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a75      	ldr	r2, [pc, #468]	@ (800485c <HAL_RCC_OscConfig+0x4b0>)
 8004688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800468c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468e:	f7fe ffe5 	bl	800365c <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004696:	f7fe ffe1 	bl	800365c <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e118      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a8:	4b6c      	ldr	r3, [pc, #432]	@ (800485c <HAL_RCC_OscConfig+0x4b0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d106      	bne.n	80046ca <HAL_RCC_OscConfig+0x31e>
 80046bc:	4b66      	ldr	r3, [pc, #408]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c0:	4a65      	ldr	r2, [pc, #404]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046c8:	e01c      	b.n	8004704 <HAL_RCC_OscConfig+0x358>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b05      	cmp	r3, #5
 80046d0:	d10c      	bne.n	80046ec <HAL_RCC_OscConfig+0x340>
 80046d2:	4b61      	ldr	r3, [pc, #388]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d6:	4a60      	ldr	r2, [pc, #384]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046d8:	f043 0304 	orr.w	r3, r3, #4
 80046dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80046de:	4b5e      	ldr	r3, [pc, #376]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e2:	4a5d      	ldr	r2, [pc, #372]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046ea:	e00b      	b.n	8004704 <HAL_RCC_OscConfig+0x358>
 80046ec:	4b5a      	ldr	r3, [pc, #360]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f0:	4a59      	ldr	r2, [pc, #356]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046f2:	f023 0301 	bic.w	r3, r3, #1
 80046f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046f8:	4b57      	ldr	r3, [pc, #348]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fc:	4a56      	ldr	r2, [pc, #344]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046fe:	f023 0304 	bic.w	r3, r3, #4
 8004702:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d015      	beq.n	8004738 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470c:	f7fe ffa6 	bl	800365c <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004712:	e00a      	b.n	800472a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004714:	f7fe ffa2 	bl	800365c <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e0d7      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472a:	4b4b      	ldr	r3, [pc, #300]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 800472c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0ee      	beq.n	8004714 <HAL_RCC_OscConfig+0x368>
 8004736:	e014      	b.n	8004762 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004738:	f7fe ff90 	bl	800365c <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800473e:	e00a      	b.n	8004756 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004740:	f7fe ff8c 	bl	800365c <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e0c1      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004756:	4b40      	ldr	r3, [pc, #256]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1ee      	bne.n	8004740 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004762:	7dfb      	ldrb	r3, [r7, #23]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d105      	bne.n	8004774 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004768:	4b3b      	ldr	r3, [pc, #236]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	4a3a      	ldr	r2, [pc, #232]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 800476e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004772:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80ad 	beq.w	80048d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800477e:	4b36      	ldr	r3, [pc, #216]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 030c 	and.w	r3, r3, #12
 8004786:	2b08      	cmp	r3, #8
 8004788:	d060      	beq.n	800484c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d145      	bne.n	800481e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004792:	4b33      	ldr	r3, [pc, #204]	@ (8004860 <HAL_RCC_OscConfig+0x4b4>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7fe ff60 	bl	800365c <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fe ff5c 	bl	800365c <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e093      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	4b29      	ldr	r3, [pc, #164]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69da      	ldr	r2, [r3, #28]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047cc:	019b      	lsls	r3, r3, #6
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	3b01      	subs	r3, #1
 80047d8:	041b      	lsls	r3, r3, #16
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	061b      	lsls	r3, r3, #24
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e8:	071b      	lsls	r3, r3, #28
 80047ea:	491b      	ldr	r1, [pc, #108]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004860 <HAL_RCC_OscConfig+0x4b4>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f6:	f7fe ff31 	bl	800365c <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fe:	f7fe ff2d 	bl	800365c <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e064      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004810:	4b11      	ldr	r3, [pc, #68]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0f0      	beq.n	80047fe <HAL_RCC_OscConfig+0x452>
 800481c:	e05c      	b.n	80048d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481e:	4b10      	ldr	r3, [pc, #64]	@ (8004860 <HAL_RCC_OscConfig+0x4b4>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fe ff1a 	bl	800365c <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482c:	f7fe ff16 	bl	800365c <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e04d      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483e:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x480>
 800484a:	e045      	b.n	80048d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d107      	bne.n	8004864 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e040      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
 8004858:	40023800 	.word	0x40023800
 800485c:	40007000 	.word	0x40007000
 8004860:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004864:	4b1f      	ldr	r3, [pc, #124]	@ (80048e4 <HAL_RCC_OscConfig+0x538>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d030      	beq.n	80048d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d129      	bne.n	80048d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488a:	429a      	cmp	r2, r3
 800488c:	d122      	bne.n	80048d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004894:	4013      	ands	r3, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800489a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800489c:	4293      	cmp	r3, r2
 800489e:	d119      	bne.n	80048d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	3b01      	subs	r3, #1
 80048ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d10f      	bne.n	80048d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d107      	bne.n	80048d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d001      	beq.n	80048d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40023800 	.word	0x40023800

080048e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e041      	b.n	800497e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fe fb84 	bl	800301c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3304      	adds	r3, #4
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f000 fdac 	bl	8005484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	d001      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e04e      	b.n	8004a3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a23      	ldr	r2, [pc, #140]	@ (8004a4c <HAL_TIM_Base_Start_IT+0xc4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d022      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ca:	d01d      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004a50 <HAL_TIM_Base_Start_IT+0xc8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d018      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1e      	ldr	r2, [pc, #120]	@ (8004a54 <HAL_TIM_Base_Start_IT+0xcc>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d013      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a58 <HAL_TIM_Base_Start_IT+0xd0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00e      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1b      	ldr	r2, [pc, #108]	@ (8004a5c <HAL_TIM_Base_Start_IT+0xd4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d009      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a19      	ldr	r2, [pc, #100]	@ (8004a60 <HAL_TIM_Base_Start_IT+0xd8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a18      	ldr	r2, [pc, #96]	@ (8004a64 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d111      	bne.n	8004a2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b06      	cmp	r3, #6
 8004a18:	d010      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0201 	orr.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2a:	e007      	b.n	8004a3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40010000 	.word	0x40010000
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40000800 	.word	0x40000800
 8004a58:	40000c00 	.word	0x40000c00
 8004a5c:	40010400 	.word	0x40010400
 8004a60:	40014000 	.word	0x40014000
 8004a64:	40001800 	.word	0x40001800

08004a68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e041      	b.n	8004afe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d106      	bne.n	8004a94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f839 	bl	8004b06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	f000 fcec 	bl	8005484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
	...

08004b1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d109      	bne.n	8004b40 <HAL_TIM_PWM_Start+0x24>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	bf14      	ite	ne
 8004b38:	2301      	movne	r3, #1
 8004b3a:	2300      	moveq	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	e022      	b.n	8004b86 <HAL_TIM_PWM_Start+0x6a>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d109      	bne.n	8004b5a <HAL_TIM_PWM_Start+0x3e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	bf14      	ite	ne
 8004b52:	2301      	movne	r3, #1
 8004b54:	2300      	moveq	r3, #0
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	e015      	b.n	8004b86 <HAL_TIM_PWM_Start+0x6a>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d109      	bne.n	8004b74 <HAL_TIM_PWM_Start+0x58>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	bf14      	ite	ne
 8004b6c:	2301      	movne	r3, #1
 8004b6e:	2300      	moveq	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	e008      	b.n	8004b86 <HAL_TIM_PWM_Start+0x6a>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	bf14      	ite	ne
 8004b80:	2301      	movne	r3, #1
 8004b82:	2300      	moveq	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e07c      	b.n	8004c88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d104      	bne.n	8004b9e <HAL_TIM_PWM_Start+0x82>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b9c:	e013      	b.n	8004bc6 <HAL_TIM_PWM_Start+0xaa>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d104      	bne.n	8004bae <HAL_TIM_PWM_Start+0x92>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bac:	e00b      	b.n	8004bc6 <HAL_TIM_PWM_Start+0xaa>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d104      	bne.n	8004bbe <HAL_TIM_PWM_Start+0xa2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bbc:	e003      	b.n	8004bc6 <HAL_TIM_PWM_Start+0xaa>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	6839      	ldr	r1, [r7, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 ff48 	bl	8005a64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8004c90 <HAL_TIM_PWM_Start+0x174>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d004      	beq.n	8004be8 <HAL_TIM_PWM_Start+0xcc>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c94 <HAL_TIM_PWM_Start+0x178>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d101      	bne.n	8004bec <HAL_TIM_PWM_Start+0xd0>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <HAL_TIM_PWM_Start+0xd2>
 8004bec:	2300      	movs	r3, #0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a22      	ldr	r2, [pc, #136]	@ (8004c90 <HAL_TIM_PWM_Start+0x174>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d022      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x136>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c14:	d01d      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x136>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8004c98 <HAL_TIM_PWM_Start+0x17c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d018      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x136>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1d      	ldr	r2, [pc, #116]	@ (8004c9c <HAL_TIM_PWM_Start+0x180>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d013      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x136>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca0 <HAL_TIM_PWM_Start+0x184>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x136>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a16      	ldr	r2, [pc, #88]	@ (8004c94 <HAL_TIM_PWM_Start+0x178>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x136>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a18      	ldr	r2, [pc, #96]	@ (8004ca4 <HAL_TIM_PWM_Start+0x188>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x136>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a16      	ldr	r2, [pc, #88]	@ (8004ca8 <HAL_TIM_PWM_Start+0x18c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d111      	bne.n	8004c76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b06      	cmp	r3, #6
 8004c62:	d010      	beq.n	8004c86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c74:	e007      	b.n	8004c86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0201 	orr.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40010400 	.word	0x40010400
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800
 8004ca0:	40000c00 	.word	0x40000c00
 8004ca4:	40014000 	.word	0x40014000
 8004ca8:	40001800 	.word	0x40001800

08004cac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e097      	b.n	8004df0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7fe f8f5 	bl	8002ec4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6812      	ldr	r2, [r2, #0]
 8004cec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cf0:	f023 0307 	bic.w	r3, r3, #7
 8004cf4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f000 fbbf 	bl	8005484 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d2e:	f023 0303 	bic.w	r3, r3, #3
 8004d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	021b      	lsls	r3, r3, #8
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004d4c:	f023 030c 	bic.w	r3, r3, #12
 8004d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	021b      	lsls	r3, r3, #8
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	011a      	lsls	r2, r3, #4
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	031b      	lsls	r3, r3, #12
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004d8a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004d92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d110      	bne.n	8004e4a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d102      	bne.n	8004e34 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e2e:	7b7b      	ldrb	r3, [r7, #13]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d001      	beq.n	8004e38 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e089      	b.n	8004f4c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e48:	e031      	b.n	8004eae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d110      	bne.n	8004e72 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e50:	7bbb      	ldrb	r3, [r7, #14]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d102      	bne.n	8004e5c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e56:	7b3b      	ldrb	r3, [r7, #12]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d001      	beq.n	8004e60 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e075      	b.n	8004f4c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e70:	e01d      	b.n	8004eae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d108      	bne.n	8004e8a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e78:	7bbb      	ldrb	r3, [r7, #14]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d105      	bne.n	8004e8a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e7e:	7b7b      	ldrb	r3, [r7, #13]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d102      	bne.n	8004e8a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e84:	7b3b      	ldrb	r3, [r7, #12]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d001      	beq.n	8004e8e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e05e      	b.n	8004f4c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2202      	movs	r2, #2
 8004e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_TIM_Encoder_Start_IT+0xc4>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d010      	beq.n	8004edc <HAL_TIM_Encoder_Start_IT+0xe4>
 8004eba:	e01f      	b.n	8004efc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fdcd 	bl	8005a64 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f042 0202 	orr.w	r2, r2, #2
 8004ed8:	60da      	str	r2, [r3, #12]
      break;
 8004eda:	e02e      	b.n	8004f3a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	2104      	movs	r1, #4
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fdbd 	bl	8005a64 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 0204 	orr.w	r2, r2, #4
 8004ef8:	60da      	str	r2, [r3, #12]
      break;
 8004efa:	e01e      	b.n	8004f3a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2201      	movs	r2, #1
 8004f02:	2100      	movs	r1, #0
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fdad 	bl	8005a64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	2104      	movs	r1, #4
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fda6 	bl	8005a64 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0202 	orr.w	r2, r2, #2
 8004f26:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0204 	orr.w	r2, r2, #4
 8004f36:	60da      	str	r2, [r3, #12]
      break;
 8004f38:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0201 	orr.w	r2, r2, #1
 8004f48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d020      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01b      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0202 	mvn.w	r2, #2
 8004f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fd fa5c 	bl	800245c <HAL_TIM_IC_CaptureCallback>
 8004fa4:	e005      	b.n	8004fb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fa4d 	bl	8005446 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fa54 	bl	800545a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d020      	beq.n	8005004 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01b      	beq.n	8005004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0204 	mvn.w	r2, #4
 8004fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fd fa36 	bl	800245c <HAL_TIM_IC_CaptureCallback>
 8004ff0:	e005      	b.n	8004ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fa27 	bl	8005446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fa2e 	bl	800545a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d020      	beq.n	8005050 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01b      	beq.n	8005050 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0208 	mvn.w	r2, #8
 8005020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2204      	movs	r2, #4
 8005026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fd fa10 	bl	800245c <HAL_TIM_IC_CaptureCallback>
 800503c:	e005      	b.n	800504a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fa01 	bl	8005446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 fa08 	bl	800545a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2b00      	cmp	r3, #0
 8005058:	d020      	beq.n	800509c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01b      	beq.n	800509c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0210 	mvn.w	r2, #16
 800506c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2208      	movs	r2, #8
 8005072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fd f9ea 	bl	800245c <HAL_TIM_IC_CaptureCallback>
 8005088:	e005      	b.n	8005096 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f9db 	bl	8005446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f9e2 	bl	800545a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00c      	beq.n	80050c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d007      	beq.n	80050c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0201 	mvn.w	r2, #1
 80050b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fd f958 	bl	8002370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00c      	beq.n	80050e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80050dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fd6c 	bl	8005bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00c      	beq.n	8005108 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d007      	beq.n	8005108 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f9b3 	bl	800546e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00c      	beq.n	800512c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f003 0320 	and.w	r3, r3, #32
 8005118:	2b00      	cmp	r3, #0
 800511a:	d007      	beq.n	800512c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0220 	mvn.w	r2, #32
 8005124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fd3e 	bl	8005ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800512c:	bf00      	nop
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800514e:	2302      	movs	r3, #2
 8005150:	e0ae      	b.n	80052b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b0c      	cmp	r3, #12
 800515e:	f200 809f 	bhi.w	80052a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005162:	a201      	add	r2, pc, #4	@ (adr r2, 8005168 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005168:	0800519d 	.word	0x0800519d
 800516c:	080052a1 	.word	0x080052a1
 8005170:	080052a1 	.word	0x080052a1
 8005174:	080052a1 	.word	0x080052a1
 8005178:	080051dd 	.word	0x080051dd
 800517c:	080052a1 	.word	0x080052a1
 8005180:	080052a1 	.word	0x080052a1
 8005184:	080052a1 	.word	0x080052a1
 8005188:	0800521f 	.word	0x0800521f
 800518c:	080052a1 	.word	0x080052a1
 8005190:	080052a1 	.word	0x080052a1
 8005194:	080052a1 	.word	0x080052a1
 8005198:	0800525f 	.word	0x0800525f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68b9      	ldr	r1, [r7, #8]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fa14 	bl	80055d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0208 	orr.w	r2, r2, #8
 80051b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0204 	bic.w	r2, r2, #4
 80051c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6999      	ldr	r1, [r3, #24]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	619a      	str	r2, [r3, #24]
      break;
 80051da:	e064      	b.n	80052a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fa64 	bl	80056b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699a      	ldr	r2, [r3, #24]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6999      	ldr	r1, [r3, #24]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	021a      	lsls	r2, r3, #8
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	619a      	str	r2, [r3, #24]
      break;
 800521c:	e043      	b.n	80052a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	4618      	mov	r0, r3
 8005226:	f000 fab9 	bl	800579c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0208 	orr.w	r2, r2, #8
 8005238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69da      	ldr	r2, [r3, #28]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0204 	bic.w	r2, r2, #4
 8005248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69d9      	ldr	r1, [r3, #28]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	691a      	ldr	r2, [r3, #16]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	61da      	str	r2, [r3, #28]
      break;
 800525c:	e023      	b.n	80052a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68b9      	ldr	r1, [r7, #8]
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fb0d 	bl	8005884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69da      	ldr	r2, [r3, #28]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69d9      	ldr	r1, [r3, #28]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	021a      	lsls	r2, r3, #8
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	61da      	str	r2, [r3, #28]
      break;
 800529e:	e002      	b.n	80052a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	75fb      	strb	r3, [r7, #23]
      break;
 80052a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_TIM_ConfigClockSource+0x1c>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e0b4      	b.n	800543e <HAL_TIM_ConfigClockSource+0x186>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800530c:	d03e      	beq.n	800538c <HAL_TIM_ConfigClockSource+0xd4>
 800530e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005312:	f200 8087 	bhi.w	8005424 <HAL_TIM_ConfigClockSource+0x16c>
 8005316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800531a:	f000 8086 	beq.w	800542a <HAL_TIM_ConfigClockSource+0x172>
 800531e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005322:	d87f      	bhi.n	8005424 <HAL_TIM_ConfigClockSource+0x16c>
 8005324:	2b70      	cmp	r3, #112	@ 0x70
 8005326:	d01a      	beq.n	800535e <HAL_TIM_ConfigClockSource+0xa6>
 8005328:	2b70      	cmp	r3, #112	@ 0x70
 800532a:	d87b      	bhi.n	8005424 <HAL_TIM_ConfigClockSource+0x16c>
 800532c:	2b60      	cmp	r3, #96	@ 0x60
 800532e:	d050      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x11a>
 8005330:	2b60      	cmp	r3, #96	@ 0x60
 8005332:	d877      	bhi.n	8005424 <HAL_TIM_ConfigClockSource+0x16c>
 8005334:	2b50      	cmp	r3, #80	@ 0x50
 8005336:	d03c      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0xfa>
 8005338:	2b50      	cmp	r3, #80	@ 0x50
 800533a:	d873      	bhi.n	8005424 <HAL_TIM_ConfigClockSource+0x16c>
 800533c:	2b40      	cmp	r3, #64	@ 0x40
 800533e:	d058      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0x13a>
 8005340:	2b40      	cmp	r3, #64	@ 0x40
 8005342:	d86f      	bhi.n	8005424 <HAL_TIM_ConfigClockSource+0x16c>
 8005344:	2b30      	cmp	r3, #48	@ 0x30
 8005346:	d064      	beq.n	8005412 <HAL_TIM_ConfigClockSource+0x15a>
 8005348:	2b30      	cmp	r3, #48	@ 0x30
 800534a:	d86b      	bhi.n	8005424 <HAL_TIM_ConfigClockSource+0x16c>
 800534c:	2b20      	cmp	r3, #32
 800534e:	d060      	beq.n	8005412 <HAL_TIM_ConfigClockSource+0x15a>
 8005350:	2b20      	cmp	r3, #32
 8005352:	d867      	bhi.n	8005424 <HAL_TIM_ConfigClockSource+0x16c>
 8005354:	2b00      	cmp	r3, #0
 8005356:	d05c      	beq.n	8005412 <HAL_TIM_ConfigClockSource+0x15a>
 8005358:	2b10      	cmp	r3, #16
 800535a:	d05a      	beq.n	8005412 <HAL_TIM_ConfigClockSource+0x15a>
 800535c:	e062      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800536e:	f000 fb59 	bl	8005a24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005380:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	609a      	str	r2, [r3, #8]
      break;
 800538a:	e04f      	b.n	800542c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800539c:	f000 fb42 	bl	8005a24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053ae:	609a      	str	r2, [r3, #8]
      break;
 80053b0:	e03c      	b.n	800542c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053be:	461a      	mov	r2, r3
 80053c0:	f000 fab6 	bl	8005930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2150      	movs	r1, #80	@ 0x50
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fb0f 	bl	80059ee <TIM_ITRx_SetConfig>
      break;
 80053d0:	e02c      	b.n	800542c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053de:	461a      	mov	r2, r3
 80053e0:	f000 fad5 	bl	800598e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2160      	movs	r1, #96	@ 0x60
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 faff 	bl	80059ee <TIM_ITRx_SetConfig>
      break;
 80053f0:	e01c      	b.n	800542c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053fe:	461a      	mov	r2, r3
 8005400:	f000 fa96 	bl	8005930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2140      	movs	r1, #64	@ 0x40
 800540a:	4618      	mov	r0, r3
 800540c:	f000 faef 	bl	80059ee <TIM_ITRx_SetConfig>
      break;
 8005410:	e00c      	b.n	800542c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4619      	mov	r1, r3
 800541c:	4610      	mov	r0, r2
 800541e:	f000 fae6 	bl	80059ee <TIM_ITRx_SetConfig>
      break;
 8005422:	e003      	b.n	800542c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	73fb      	strb	r3, [r7, #15]
      break;
 8005428:	e000      	b.n	800542c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800542a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800543c:	7bfb      	ldrb	r3, [r7, #15]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
	...

08005484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a43      	ldr	r2, [pc, #268]	@ (80055a4 <TIM_Base_SetConfig+0x120>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d013      	beq.n	80054c4 <TIM_Base_SetConfig+0x40>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a2:	d00f      	beq.n	80054c4 <TIM_Base_SetConfig+0x40>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a40      	ldr	r2, [pc, #256]	@ (80055a8 <TIM_Base_SetConfig+0x124>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00b      	beq.n	80054c4 <TIM_Base_SetConfig+0x40>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a3f      	ldr	r2, [pc, #252]	@ (80055ac <TIM_Base_SetConfig+0x128>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d007      	beq.n	80054c4 <TIM_Base_SetConfig+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a3e      	ldr	r2, [pc, #248]	@ (80055b0 <TIM_Base_SetConfig+0x12c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d003      	beq.n	80054c4 <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a3d      	ldr	r2, [pc, #244]	@ (80055b4 <TIM_Base_SetConfig+0x130>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d108      	bne.n	80054d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a32      	ldr	r2, [pc, #200]	@ (80055a4 <TIM_Base_SetConfig+0x120>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d02b      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e4:	d027      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a2f      	ldr	r2, [pc, #188]	@ (80055a8 <TIM_Base_SetConfig+0x124>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d023      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a2e      	ldr	r2, [pc, #184]	@ (80055ac <TIM_Base_SetConfig+0x128>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d01f      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a2d      	ldr	r2, [pc, #180]	@ (80055b0 <TIM_Base_SetConfig+0x12c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d01b      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2c      	ldr	r2, [pc, #176]	@ (80055b4 <TIM_Base_SetConfig+0x130>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d017      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2b      	ldr	r2, [pc, #172]	@ (80055b8 <TIM_Base_SetConfig+0x134>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a2a      	ldr	r2, [pc, #168]	@ (80055bc <TIM_Base_SetConfig+0x138>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00f      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a29      	ldr	r2, [pc, #164]	@ (80055c0 <TIM_Base_SetConfig+0x13c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00b      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a28      	ldr	r2, [pc, #160]	@ (80055c4 <TIM_Base_SetConfig+0x140>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d007      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a27      	ldr	r2, [pc, #156]	@ (80055c8 <TIM_Base_SetConfig+0x144>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d003      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a26      	ldr	r2, [pc, #152]	@ (80055cc <TIM_Base_SetConfig+0x148>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d108      	bne.n	8005548 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800553c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a0e      	ldr	r2, [pc, #56]	@ (80055a4 <TIM_Base_SetConfig+0x120>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d003      	beq.n	8005576 <TIM_Base_SetConfig+0xf2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a10      	ldr	r2, [pc, #64]	@ (80055b4 <TIM_Base_SetConfig+0x130>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d103      	bne.n	800557e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	691a      	ldr	r2, [r3, #16]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f043 0204 	orr.w	r2, r3, #4
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	601a      	str	r2, [r3, #0]
}
 8005596:	bf00      	nop
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40010000 	.word	0x40010000
 80055a8:	40000400 	.word	0x40000400
 80055ac:	40000800 	.word	0x40000800
 80055b0:	40000c00 	.word	0x40000c00
 80055b4:	40010400 	.word	0x40010400
 80055b8:	40014000 	.word	0x40014000
 80055bc:	40014400 	.word	0x40014400
 80055c0:	40014800 	.word	0x40014800
 80055c4:	40001800 	.word	0x40001800
 80055c8:	40001c00 	.word	0x40001c00
 80055cc:	40002000 	.word	0x40002000

080055d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	f023 0201 	bic.w	r2, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0303 	bic.w	r3, r3, #3
 8005606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f023 0302 	bic.w	r3, r3, #2
 8005618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a20      	ldr	r2, [pc, #128]	@ (80056a8 <TIM_OC1_SetConfig+0xd8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d003      	beq.n	8005634 <TIM_OC1_SetConfig+0x64>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a1f      	ldr	r2, [pc, #124]	@ (80056ac <TIM_OC1_SetConfig+0xdc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d10c      	bne.n	800564e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f023 0308 	bic.w	r3, r3, #8
 800563a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	4313      	orrs	r3, r2
 8005644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f023 0304 	bic.w	r3, r3, #4
 800564c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a15      	ldr	r2, [pc, #84]	@ (80056a8 <TIM_OC1_SetConfig+0xd8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d003      	beq.n	800565e <TIM_OC1_SetConfig+0x8e>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a14      	ldr	r2, [pc, #80]	@ (80056ac <TIM_OC1_SetConfig+0xdc>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d111      	bne.n	8005682 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800566c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	621a      	str	r2, [r3, #32]
}
 800569c:	bf00      	nop
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	40010000 	.word	0x40010000
 80056ac:	40010400 	.word	0x40010400

080056b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	f023 0210 	bic.w	r2, r3, #16
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	021b      	lsls	r3, r3, #8
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f023 0320 	bic.w	r3, r3, #32
 80056fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a22      	ldr	r2, [pc, #136]	@ (8005794 <TIM_OC2_SetConfig+0xe4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d003      	beq.n	8005718 <TIM_OC2_SetConfig+0x68>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a21      	ldr	r2, [pc, #132]	@ (8005798 <TIM_OC2_SetConfig+0xe8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d10d      	bne.n	8005734 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800571e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005732:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a17      	ldr	r2, [pc, #92]	@ (8005794 <TIM_OC2_SetConfig+0xe4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_OC2_SetConfig+0x94>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a16      	ldr	r2, [pc, #88]	@ (8005798 <TIM_OC2_SetConfig+0xe8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d113      	bne.n	800576c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800574a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005752:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	621a      	str	r2, [r3, #32]
}
 8005786:	bf00      	nop
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40010000 	.word	0x40010000
 8005798:	40010400 	.word	0x40010400

0800579c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 0303 	bic.w	r3, r3, #3
 80057d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a21      	ldr	r2, [pc, #132]	@ (800587c <TIM_OC3_SetConfig+0xe0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d003      	beq.n	8005802 <TIM_OC3_SetConfig+0x66>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a20      	ldr	r2, [pc, #128]	@ (8005880 <TIM_OC3_SetConfig+0xe4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d10d      	bne.n	800581e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	021b      	lsls	r3, r3, #8
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800581c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a16      	ldr	r2, [pc, #88]	@ (800587c <TIM_OC3_SetConfig+0xe0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d003      	beq.n	800582e <TIM_OC3_SetConfig+0x92>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a15      	ldr	r2, [pc, #84]	@ (8005880 <TIM_OC3_SetConfig+0xe4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d113      	bne.n	8005856 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800583c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	621a      	str	r2, [r3, #32]
}
 8005870:	bf00      	nop
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	40010000 	.word	0x40010000
 8005880:	40010400 	.word	0x40010400

08005884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	031b      	lsls	r3, r3, #12
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a12      	ldr	r2, [pc, #72]	@ (8005928 <TIM_OC4_SetConfig+0xa4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_OC4_SetConfig+0x68>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a11      	ldr	r2, [pc, #68]	@ (800592c <TIM_OC4_SetConfig+0xa8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d109      	bne.n	8005900 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	019b      	lsls	r3, r3, #6
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	621a      	str	r2, [r3, #32]
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40010000 	.word	0x40010000
 800592c:	40010400 	.word	0x40010400

08005930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	f023 0201 	bic.w	r2, r3, #1
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800595a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f023 030a 	bic.w	r3, r3, #10
 800596c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	621a      	str	r2, [r3, #32]
}
 8005982:	bf00      	nop
 8005984:	371c      	adds	r7, #28
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800598e:	b480      	push	{r7}
 8005990:	b087      	sub	sp, #28
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f023 0210 	bic.w	r2, r3, #16
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	031b      	lsls	r3, r3, #12
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80059ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	621a      	str	r2, [r3, #32]
}
 80059e2:	bf00      	nop
 80059e4:	371c      	adds	r7, #28
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b085      	sub	sp, #20
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f043 0307 	orr.w	r3, r3, #7
 8005a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	609a      	str	r2, [r3, #8]
}
 8005a18:	bf00      	nop
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b087      	sub	sp, #28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	021a      	lsls	r2, r3, #8
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	609a      	str	r2, [r3, #8]
}
 8005a58:	bf00      	nop
 8005a5a:	371c      	adds	r7, #28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f003 031f 	and.w	r3, r3, #31
 8005a76:	2201      	movs	r2, #1
 8005a78:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a1a      	ldr	r2, [r3, #32]
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	43db      	mvns	r3, r3
 8005a86:	401a      	ands	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a1a      	ldr	r2, [r3, #32]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	621a      	str	r2, [r3, #32]
}
 8005aa2:	bf00      	nop
 8005aa4:	371c      	adds	r7, #28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
	...

08005ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d101      	bne.n	8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e05a      	b.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a21      	ldr	r2, [pc, #132]	@ (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d022      	beq.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b14:	d01d      	beq.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d018      	beq.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1b      	ldr	r2, [pc, #108]	@ (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00e      	beq.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a18      	ldr	r2, [pc, #96]	@ (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d009      	beq.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a17      	ldr	r2, [pc, #92]	@ (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d004      	beq.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a15      	ldr	r2, [pc, #84]	@ (8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d10c      	bne.n	8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	40010000 	.word	0x40010000
 8005b90:	40000400 	.word	0x40000400
 8005b94:	40000800 	.word	0x40000800
 8005b98:	40000c00 	.word	0x40000c00
 8005b9c:	40010400 	.word	0x40010400
 8005ba0:	40014000 	.word	0x40014000
 8005ba4:	40001800 	.word	0x40001800

08005ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e042      	b.n	8005c68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fd fad6 	bl	80031a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2224      	movs	r2, #36	@ 0x24
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fcc5 	bl	80065a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695a      	ldr	r2, [r3, #20]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b20      	cmp	r3, #32
 8005c88:	d121      	bne.n	8005cce <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <HAL_UART_Transmit_IT+0x26>
 8005c90:	88fb      	ldrh	r3, [r7, #6]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e01a      	b.n	8005cd0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	88fa      	ldrh	r2, [r7, #6]
 8005ca4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	88fa      	ldrh	r2, [r7, #6]
 8005caa:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2221      	movs	r2, #33	@ 0x21
 8005cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005cc8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e000      	b.n	8005cd0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005cce:	2302      	movs	r3, #2
  }
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b0ba      	sub	sp, #232	@ 0xe8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10f      	bne.n	8005d42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d009      	beq.n	8005d42 <HAL_UART_IRQHandler+0x66>
 8005d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fb74 	bl	8006428 <UART_Receive_IT>
      return;
 8005d40:	e273      	b.n	800622a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 80de 	beq.w	8005f08 <HAL_UART_IRQHandler+0x22c>
 8005d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d106      	bne.n	8005d66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d5c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 80d1 	beq.w	8005f08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <HAL_UART_IRQHandler+0xae>
 8005d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d82:	f043 0201 	orr.w	r2, r3, #1
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d8e:	f003 0304 	and.w	r3, r3, #4
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00b      	beq.n	8005dae <HAL_UART_IRQHandler+0xd2>
 8005d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da6:	f043 0202 	orr.w	r2, r3, #2
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00b      	beq.n	8005dd2 <HAL_UART_IRQHandler+0xf6>
 8005dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dca:	f043 0204 	orr.w	r2, r3, #4
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dd6:	f003 0308 	and.w	r3, r3, #8
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d011      	beq.n	8005e02 <HAL_UART_IRQHandler+0x126>
 8005dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d105      	bne.n	8005df6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dfa:	f043 0208 	orr.w	r2, r3, #8
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 820a 	beq.w	8006220 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d008      	beq.n	8005e2a <HAL_UART_IRQHandler+0x14e>
 8005e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 faff 	bl	8006428 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e34:	2b40      	cmp	r3, #64	@ 0x40
 8005e36:	bf0c      	ite	eq
 8005e38:	2301      	moveq	r3, #1
 8005e3a:	2300      	movne	r3, #0
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d103      	bne.n	8005e56 <HAL_UART_IRQHandler+0x17a>
 8005e4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d04f      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fa0a 	bl	8006270 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e66:	2b40      	cmp	r3, #64	@ 0x40
 8005e68:	d141      	bne.n	8005eee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3314      	adds	r3, #20
 8005e70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3314      	adds	r3, #20
 8005e92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005e96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005ea2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005eae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1d9      	bne.n	8005e6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d013      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec2:	4a8a      	ldr	r2, [pc, #552]	@ (80060ec <HAL_UART_IRQHandler+0x410>)
 8005ec4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fd fd53 	bl	8003976 <HAL_DMA_Abort_IT>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d016      	beq.n	8005f04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee4:	e00e      	b.n	8005f04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f9ac 	bl	8006244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eec:	e00a      	b.n	8005f04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f9a8 	bl	8006244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef4:	e006      	b.n	8005f04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f9a4 	bl	8006244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005f02:	e18d      	b.n	8006220 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f04:	bf00      	nop
    return;
 8005f06:	e18b      	b.n	8006220 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	f040 8167 	bne.w	80061e0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f16:	f003 0310 	and.w	r3, r3, #16
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 8160 	beq.w	80061e0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 8159 	beq.w	80061e0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60bb      	str	r3, [r7, #8]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60bb      	str	r3, [r7, #8]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	60bb      	str	r3, [r7, #8]
 8005f42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f4e:	2b40      	cmp	r3, #64	@ 0x40
 8005f50:	f040 80ce 	bne.w	80060f0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80a9 	beq.w	80060bc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f72:	429a      	cmp	r2, r3
 8005f74:	f080 80a2 	bcs.w	80060bc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f8a:	f000 8088 	beq.w	800609e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	330c      	adds	r3, #12
 8005f94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	330c      	adds	r3, #12
 8005fb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005fba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005fbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005fc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1d9      	bne.n	8005f8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3314      	adds	r3, #20
 8005fe0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005fea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fec:	f023 0301 	bic.w	r3, r3, #1
 8005ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3314      	adds	r3, #20
 8005ffa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ffe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006002:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006006:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006010:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e1      	bne.n	8005fda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3314      	adds	r3, #20
 800601c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006026:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800602c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3314      	adds	r3, #20
 8006036:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800603a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800603c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006040:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006048:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e3      	bne.n	8006016 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006066:	e853 3f00 	ldrex	r3, [r3]
 800606a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800606c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800606e:	f023 0310 	bic.w	r3, r3, #16
 8006072:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	330c      	adds	r3, #12
 800607c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006080:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006082:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006084:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006086:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800608e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e3      	bne.n	800605c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006098:	4618      	mov	r0, r3
 800609a:	f7fd fbfc 	bl	8003896 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2202      	movs	r2, #2
 80060a2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	4619      	mov	r1, r3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f8cf 	bl	8006258 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80060ba:	e0b3      	b.n	8006224 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060c4:	429a      	cmp	r2, r3
 80060c6:	f040 80ad 	bne.w	8006224 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060d4:	f040 80a6 	bne.w	8006224 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060e2:	4619      	mov	r1, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f8b7 	bl	8006258 <HAL_UARTEx_RxEventCallback>
      return;
 80060ea:	e09b      	b.n	8006224 <HAL_UART_IRQHandler+0x548>
 80060ec:	08006337 	.word	0x08006337
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 808e 	beq.w	8006228 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800610c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8089 	beq.w	8006228 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	330c      	adds	r3, #12
 800611c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006128:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800612c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	330c      	adds	r3, #12
 8006136:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800613a:	647a      	str	r2, [r7, #68]	@ 0x44
 800613c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006140:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e3      	bne.n	8006116 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3314      	adds	r3, #20
 8006154:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	623b      	str	r3, [r7, #32]
   return(result);
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	f023 0301 	bic.w	r3, r3, #1
 8006164:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3314      	adds	r3, #20
 800616e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006172:	633a      	str	r2, [r7, #48]	@ 0x30
 8006174:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e3      	bne.n	800614e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2220      	movs	r2, #32
 800618a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	330c      	adds	r3, #12
 800619a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 0310 	bic.w	r3, r3, #16
 80061aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	330c      	adds	r3, #12
 80061b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80061b8:	61fa      	str	r2, [r7, #28]
 80061ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	69b9      	ldr	r1, [r7, #24]
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	617b      	str	r3, [r7, #20]
   return(result);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e3      	bne.n	8006194 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f83d 	bl	8006258 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061de:	e023      	b.n	8006228 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d009      	beq.n	8006200 <HAL_UART_IRQHandler+0x524>
 80061ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f8ad 	bl	8006358 <UART_Transmit_IT>
    return;
 80061fe:	e014      	b.n	800622a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00e      	beq.n	800622a <HAL_UART_IRQHandler+0x54e>
 800620c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f8ed 	bl	80063f8 <UART_EndTransmit_IT>
    return;
 800621e:	e004      	b.n	800622a <HAL_UART_IRQHandler+0x54e>
    return;
 8006220:	bf00      	nop
 8006222:	e002      	b.n	800622a <HAL_UART_IRQHandler+0x54e>
      return;
 8006224:	bf00      	nop
 8006226:	e000      	b.n	800622a <HAL_UART_IRQHandler+0x54e>
      return;
 8006228:	bf00      	nop
  }
}
 800622a:	37e8      	adds	r7, #232	@ 0xe8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006270:	b480      	push	{r7}
 8006272:	b095      	sub	sp, #84	@ 0x54
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	330c      	adds	r3, #12
 800627e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800628e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	330c      	adds	r3, #12
 8006296:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006298:	643a      	str	r2, [r7, #64]	@ 0x40
 800629a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800629e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e5      	bne.n	8006278 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3314      	adds	r3, #20
 80062b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	f023 0301 	bic.w	r3, r3, #1
 80062c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3314      	adds	r3, #20
 80062ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e5      	bne.n	80062ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d119      	bne.n	800631c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	330c      	adds	r3, #12
 80062ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f023 0310 	bic.w	r3, r3, #16
 80062fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	330c      	adds	r3, #12
 8006306:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006308:	61ba      	str	r2, [r7, #24]
 800630a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	6979      	ldr	r1, [r7, #20]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	613b      	str	r3, [r7, #16]
   return(result);
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e5      	bne.n	80062e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2220      	movs	r2, #32
 8006320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800632a:	bf00      	nop
 800632c:	3754      	adds	r7, #84	@ 0x54
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006342:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f7ff ff7a 	bl	8006244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b21      	cmp	r3, #33	@ 0x21
 800636a:	d13e      	bne.n	80063ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006374:	d114      	bne.n	80063a0 <UART_Transmit_IT+0x48>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d110      	bne.n	80063a0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006392:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	1c9a      	adds	r2, r3, #2
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	621a      	str	r2, [r3, #32]
 800639e:	e008      	b.n	80063b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	1c59      	adds	r1, r3, #1
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6211      	str	r1, [r2, #32]
 80063aa:	781a      	ldrb	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	4619      	mov	r1, r3
 80063c0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10f      	bne.n	80063e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e000      	b.n	80063ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063ea:	2302      	movs	r3, #2
  }
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800640e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7fc f809 	bl	8002430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08c      	sub	sp, #48	@ 0x30
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006430:	2300      	movs	r3, #0
 8006432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006434:	2300      	movs	r3, #0
 8006436:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b22      	cmp	r3, #34	@ 0x22
 8006442:	f040 80aa 	bne.w	800659a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800644e:	d115      	bne.n	800647c <UART_Receive_IT+0x54>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d111      	bne.n	800647c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	b29b      	uxth	r3, r3
 8006466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800646a:	b29a      	uxth	r2, r3
 800646c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006474:	1c9a      	adds	r2, r3, #2
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	629a      	str	r2, [r3, #40]	@ 0x28
 800647a:	e024      	b.n	80064c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006480:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800648a:	d007      	beq.n	800649c <UART_Receive_IT+0x74>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10a      	bne.n	80064aa <UART_Receive_IT+0x82>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d106      	bne.n	80064aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	e008      	b.n	80064bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	4619      	mov	r1, r3
 80064d4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d15d      	bne.n	8006596 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0220 	bic.w	r2, r2, #32
 80064e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	695a      	ldr	r2, [r3, #20]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0201 	bic.w	r2, r2, #1
 8006508:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800651c:	2b01      	cmp	r3, #1
 800651e:	d135      	bne.n	800658c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	330c      	adds	r3, #12
 800652c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	613b      	str	r3, [r7, #16]
   return(result);
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f023 0310 	bic.w	r3, r3, #16
 800653c:	627b      	str	r3, [r7, #36]	@ 0x24
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	330c      	adds	r3, #12
 8006544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006546:	623a      	str	r2, [r7, #32]
 8006548:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	69f9      	ldr	r1, [r7, #28]
 800654c:	6a3a      	ldr	r2, [r7, #32]
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	61bb      	str	r3, [r7, #24]
   return(result);
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e5      	bne.n	8006526 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0310 	and.w	r3, r3, #16
 8006564:	2b10      	cmp	r3, #16
 8006566:	d10a      	bne.n	800657e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006568:	2300      	movs	r3, #0
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006582:	4619      	mov	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7ff fe67 	bl	8006258 <HAL_UARTEx_RxEventCallback>
 800658a:	e002      	b.n	8006592 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff fe4f 	bl	8006230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	e002      	b.n	800659c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	e000      	b.n	800659c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800659a:	2302      	movs	r3, #2
  }
}
 800659c:	4618      	mov	r0, r3
 800659e:	3730      	adds	r7, #48	@ 0x30
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065a8:	b0c0      	sub	sp, #256	@ 0x100
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80065bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c0:	68d9      	ldr	r1, [r3, #12]
 80065c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	ea40 0301 	orr.w	r3, r0, r1
 80065cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	431a      	orrs	r2, r3
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	431a      	orrs	r2, r3
 80065e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80065fc:	f021 010c 	bic.w	r1, r1, #12
 8006600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800660a:	430b      	orrs	r3, r1
 800660c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800660e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800661a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800661e:	6999      	ldr	r1, [r3, #24]
 8006620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	ea40 0301 	orr.w	r3, r0, r1
 800662a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800662c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4b8f      	ldr	r3, [pc, #572]	@ (8006870 <UART_SetConfig+0x2cc>)
 8006634:	429a      	cmp	r2, r3
 8006636:	d005      	beq.n	8006644 <UART_SetConfig+0xa0>
 8006638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	4b8d      	ldr	r3, [pc, #564]	@ (8006874 <UART_SetConfig+0x2d0>)
 8006640:	429a      	cmp	r2, r3
 8006642:	d104      	bne.n	800664e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006644:	f7fd fc6e 	bl	8003f24 <HAL_RCC_GetPCLK2Freq>
 8006648:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800664c:	e003      	b.n	8006656 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800664e:	f7fd fc55 	bl	8003efc <HAL_RCC_GetPCLK1Freq>
 8006652:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006660:	f040 810c 	bne.w	800687c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006668:	2200      	movs	r2, #0
 800666a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800666e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006672:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006676:	4622      	mov	r2, r4
 8006678:	462b      	mov	r3, r5
 800667a:	1891      	adds	r1, r2, r2
 800667c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800667e:	415b      	adcs	r3, r3
 8006680:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006682:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006686:	4621      	mov	r1, r4
 8006688:	eb12 0801 	adds.w	r8, r2, r1
 800668c:	4629      	mov	r1, r5
 800668e:	eb43 0901 	adc.w	r9, r3, r1
 8006692:	f04f 0200 	mov.w	r2, #0
 8006696:	f04f 0300 	mov.w	r3, #0
 800669a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800669e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066a6:	4690      	mov	r8, r2
 80066a8:	4699      	mov	r9, r3
 80066aa:	4623      	mov	r3, r4
 80066ac:	eb18 0303 	adds.w	r3, r8, r3
 80066b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80066b4:	462b      	mov	r3, r5
 80066b6:	eb49 0303 	adc.w	r3, r9, r3
 80066ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80066be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80066ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80066d2:	460b      	mov	r3, r1
 80066d4:	18db      	adds	r3, r3, r3
 80066d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80066d8:	4613      	mov	r3, r2
 80066da:	eb42 0303 	adc.w	r3, r2, r3
 80066de:	657b      	str	r3, [r7, #84]	@ 0x54
 80066e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80066e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80066e8:	f7fa face 	bl	8000c88 <__aeabi_uldivmod>
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4b61      	ldr	r3, [pc, #388]	@ (8006878 <UART_SetConfig+0x2d4>)
 80066f2:	fba3 2302 	umull	r2, r3, r3, r2
 80066f6:	095b      	lsrs	r3, r3, #5
 80066f8:	011c      	lsls	r4, r3, #4
 80066fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006704:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006708:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800670c:	4642      	mov	r2, r8
 800670e:	464b      	mov	r3, r9
 8006710:	1891      	adds	r1, r2, r2
 8006712:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006714:	415b      	adcs	r3, r3
 8006716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006718:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800671c:	4641      	mov	r1, r8
 800671e:	eb12 0a01 	adds.w	sl, r2, r1
 8006722:	4649      	mov	r1, r9
 8006724:	eb43 0b01 	adc.w	fp, r3, r1
 8006728:	f04f 0200 	mov.w	r2, #0
 800672c:	f04f 0300 	mov.w	r3, #0
 8006730:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006734:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800673c:	4692      	mov	sl, r2
 800673e:	469b      	mov	fp, r3
 8006740:	4643      	mov	r3, r8
 8006742:	eb1a 0303 	adds.w	r3, sl, r3
 8006746:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800674a:	464b      	mov	r3, r9
 800674c:	eb4b 0303 	adc.w	r3, fp, r3
 8006750:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006760:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006764:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006768:	460b      	mov	r3, r1
 800676a:	18db      	adds	r3, r3, r3
 800676c:	643b      	str	r3, [r7, #64]	@ 0x40
 800676e:	4613      	mov	r3, r2
 8006770:	eb42 0303 	adc.w	r3, r2, r3
 8006774:	647b      	str	r3, [r7, #68]	@ 0x44
 8006776:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800677a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800677e:	f7fa fa83 	bl	8000c88 <__aeabi_uldivmod>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	4611      	mov	r1, r2
 8006788:	4b3b      	ldr	r3, [pc, #236]	@ (8006878 <UART_SetConfig+0x2d4>)
 800678a:	fba3 2301 	umull	r2, r3, r3, r1
 800678e:	095b      	lsrs	r3, r3, #5
 8006790:	2264      	movs	r2, #100	@ 0x64
 8006792:	fb02 f303 	mul.w	r3, r2, r3
 8006796:	1acb      	subs	r3, r1, r3
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800679e:	4b36      	ldr	r3, [pc, #216]	@ (8006878 <UART_SetConfig+0x2d4>)
 80067a0:	fba3 2302 	umull	r2, r3, r3, r2
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80067ac:	441c      	add	r4, r3
 80067ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80067bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80067c0:	4642      	mov	r2, r8
 80067c2:	464b      	mov	r3, r9
 80067c4:	1891      	adds	r1, r2, r2
 80067c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80067c8:	415b      	adcs	r3, r3
 80067ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80067d0:	4641      	mov	r1, r8
 80067d2:	1851      	adds	r1, r2, r1
 80067d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80067d6:	4649      	mov	r1, r9
 80067d8:	414b      	adcs	r3, r1
 80067da:	637b      	str	r3, [r7, #52]	@ 0x34
 80067dc:	f04f 0200 	mov.w	r2, #0
 80067e0:	f04f 0300 	mov.w	r3, #0
 80067e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80067e8:	4659      	mov	r1, fp
 80067ea:	00cb      	lsls	r3, r1, #3
 80067ec:	4651      	mov	r1, sl
 80067ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067f2:	4651      	mov	r1, sl
 80067f4:	00ca      	lsls	r2, r1, #3
 80067f6:	4610      	mov	r0, r2
 80067f8:	4619      	mov	r1, r3
 80067fa:	4603      	mov	r3, r0
 80067fc:	4642      	mov	r2, r8
 80067fe:	189b      	adds	r3, r3, r2
 8006800:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006804:	464b      	mov	r3, r9
 8006806:	460a      	mov	r2, r1
 8006808:	eb42 0303 	adc.w	r3, r2, r3
 800680c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800681c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006820:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006824:	460b      	mov	r3, r1
 8006826:	18db      	adds	r3, r3, r3
 8006828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800682a:	4613      	mov	r3, r2
 800682c:	eb42 0303 	adc.w	r3, r2, r3
 8006830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006832:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006836:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800683a:	f7fa fa25 	bl	8000c88 <__aeabi_uldivmod>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	4b0d      	ldr	r3, [pc, #52]	@ (8006878 <UART_SetConfig+0x2d4>)
 8006844:	fba3 1302 	umull	r1, r3, r3, r2
 8006848:	095b      	lsrs	r3, r3, #5
 800684a:	2164      	movs	r1, #100	@ 0x64
 800684c:	fb01 f303 	mul.w	r3, r1, r3
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	3332      	adds	r3, #50	@ 0x32
 8006856:	4a08      	ldr	r2, [pc, #32]	@ (8006878 <UART_SetConfig+0x2d4>)
 8006858:	fba2 2303 	umull	r2, r3, r2, r3
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	f003 0207 	and.w	r2, r3, #7
 8006862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4422      	add	r2, r4
 800686a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800686c:	e106      	b.n	8006a7c <UART_SetConfig+0x4d8>
 800686e:	bf00      	nop
 8006870:	40011000 	.word	0x40011000
 8006874:	40011400 	.word	0x40011400
 8006878:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800687c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006880:	2200      	movs	r2, #0
 8006882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006886:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800688a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800688e:	4642      	mov	r2, r8
 8006890:	464b      	mov	r3, r9
 8006892:	1891      	adds	r1, r2, r2
 8006894:	6239      	str	r1, [r7, #32]
 8006896:	415b      	adcs	r3, r3
 8006898:	627b      	str	r3, [r7, #36]	@ 0x24
 800689a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800689e:	4641      	mov	r1, r8
 80068a0:	1854      	adds	r4, r2, r1
 80068a2:	4649      	mov	r1, r9
 80068a4:	eb43 0501 	adc.w	r5, r3, r1
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	00eb      	lsls	r3, r5, #3
 80068b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068b6:	00e2      	lsls	r2, r4, #3
 80068b8:	4614      	mov	r4, r2
 80068ba:	461d      	mov	r5, r3
 80068bc:	4643      	mov	r3, r8
 80068be:	18e3      	adds	r3, r4, r3
 80068c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068c4:	464b      	mov	r3, r9
 80068c6:	eb45 0303 	adc.w	r3, r5, r3
 80068ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80068de:	f04f 0200 	mov.w	r2, #0
 80068e2:	f04f 0300 	mov.w	r3, #0
 80068e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80068ea:	4629      	mov	r1, r5
 80068ec:	008b      	lsls	r3, r1, #2
 80068ee:	4621      	mov	r1, r4
 80068f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068f4:	4621      	mov	r1, r4
 80068f6:	008a      	lsls	r2, r1, #2
 80068f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80068fc:	f7fa f9c4 	bl	8000c88 <__aeabi_uldivmod>
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	4b60      	ldr	r3, [pc, #384]	@ (8006a88 <UART_SetConfig+0x4e4>)
 8006906:	fba3 2302 	umull	r2, r3, r3, r2
 800690a:	095b      	lsrs	r3, r3, #5
 800690c:	011c      	lsls	r4, r3, #4
 800690e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006912:	2200      	movs	r2, #0
 8006914:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006918:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800691c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006920:	4642      	mov	r2, r8
 8006922:	464b      	mov	r3, r9
 8006924:	1891      	adds	r1, r2, r2
 8006926:	61b9      	str	r1, [r7, #24]
 8006928:	415b      	adcs	r3, r3
 800692a:	61fb      	str	r3, [r7, #28]
 800692c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006930:	4641      	mov	r1, r8
 8006932:	1851      	adds	r1, r2, r1
 8006934:	6139      	str	r1, [r7, #16]
 8006936:	4649      	mov	r1, r9
 8006938:	414b      	adcs	r3, r1
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006948:	4659      	mov	r1, fp
 800694a:	00cb      	lsls	r3, r1, #3
 800694c:	4651      	mov	r1, sl
 800694e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006952:	4651      	mov	r1, sl
 8006954:	00ca      	lsls	r2, r1, #3
 8006956:	4610      	mov	r0, r2
 8006958:	4619      	mov	r1, r3
 800695a:	4603      	mov	r3, r0
 800695c:	4642      	mov	r2, r8
 800695e:	189b      	adds	r3, r3, r2
 8006960:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006964:	464b      	mov	r3, r9
 8006966:	460a      	mov	r2, r1
 8006968:	eb42 0303 	adc.w	r3, r2, r3
 800696c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	67bb      	str	r3, [r7, #120]	@ 0x78
 800697a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006988:	4649      	mov	r1, r9
 800698a:	008b      	lsls	r3, r1, #2
 800698c:	4641      	mov	r1, r8
 800698e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006992:	4641      	mov	r1, r8
 8006994:	008a      	lsls	r2, r1, #2
 8006996:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800699a:	f7fa f975 	bl	8000c88 <__aeabi_uldivmod>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4611      	mov	r1, r2
 80069a4:	4b38      	ldr	r3, [pc, #224]	@ (8006a88 <UART_SetConfig+0x4e4>)
 80069a6:	fba3 2301 	umull	r2, r3, r3, r1
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	2264      	movs	r2, #100	@ 0x64
 80069ae:	fb02 f303 	mul.w	r3, r2, r3
 80069b2:	1acb      	subs	r3, r1, r3
 80069b4:	011b      	lsls	r3, r3, #4
 80069b6:	3332      	adds	r3, #50	@ 0x32
 80069b8:	4a33      	ldr	r2, [pc, #204]	@ (8006a88 <UART_SetConfig+0x4e4>)
 80069ba:	fba2 2303 	umull	r2, r3, r2, r3
 80069be:	095b      	lsrs	r3, r3, #5
 80069c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069c4:	441c      	add	r4, r3
 80069c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ca:	2200      	movs	r2, #0
 80069cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80069ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80069d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80069d4:	4642      	mov	r2, r8
 80069d6:	464b      	mov	r3, r9
 80069d8:	1891      	adds	r1, r2, r2
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	415b      	adcs	r3, r3
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069e4:	4641      	mov	r1, r8
 80069e6:	1851      	adds	r1, r2, r1
 80069e8:	6039      	str	r1, [r7, #0]
 80069ea:	4649      	mov	r1, r9
 80069ec:	414b      	adcs	r3, r1
 80069ee:	607b      	str	r3, [r7, #4]
 80069f0:	f04f 0200 	mov.w	r2, #0
 80069f4:	f04f 0300 	mov.w	r3, #0
 80069f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069fc:	4659      	mov	r1, fp
 80069fe:	00cb      	lsls	r3, r1, #3
 8006a00:	4651      	mov	r1, sl
 8006a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a06:	4651      	mov	r1, sl
 8006a08:	00ca      	lsls	r2, r1, #3
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4603      	mov	r3, r0
 8006a10:	4642      	mov	r2, r8
 8006a12:	189b      	adds	r3, r3, r2
 8006a14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a16:	464b      	mov	r3, r9
 8006a18:	460a      	mov	r2, r1
 8006a1a:	eb42 0303 	adc.w	r3, r2, r3
 8006a1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006a38:	4649      	mov	r1, r9
 8006a3a:	008b      	lsls	r3, r1, #2
 8006a3c:	4641      	mov	r1, r8
 8006a3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a42:	4641      	mov	r1, r8
 8006a44:	008a      	lsls	r2, r1, #2
 8006a46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006a4a:	f7fa f91d 	bl	8000c88 <__aeabi_uldivmod>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4b0d      	ldr	r3, [pc, #52]	@ (8006a88 <UART_SetConfig+0x4e4>)
 8006a54:	fba3 1302 	umull	r1, r3, r3, r2
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	2164      	movs	r1, #100	@ 0x64
 8006a5c:	fb01 f303 	mul.w	r3, r1, r3
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	3332      	adds	r3, #50	@ 0x32
 8006a66:	4a08      	ldr	r2, [pc, #32]	@ (8006a88 <UART_SetConfig+0x4e4>)
 8006a68:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6c:	095b      	lsrs	r3, r3, #5
 8006a6e:	f003 020f 	and.w	r2, r3, #15
 8006a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4422      	add	r2, r4
 8006a7a:	609a      	str	r2, [r3, #8]
}
 8006a7c:	bf00      	nop
 8006a7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006a82:	46bd      	mov	sp, r7
 8006a84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a88:	51eb851f 	.word	0x51eb851f

08006a8c <__cvt>:
 8006a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a90:	ec57 6b10 	vmov	r6, r7, d0
 8006a94:	2f00      	cmp	r7, #0
 8006a96:	460c      	mov	r4, r1
 8006a98:	4619      	mov	r1, r3
 8006a9a:	463b      	mov	r3, r7
 8006a9c:	bfbb      	ittet	lt
 8006a9e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006aa2:	461f      	movlt	r7, r3
 8006aa4:	2300      	movge	r3, #0
 8006aa6:	232d      	movlt	r3, #45	@ 0x2d
 8006aa8:	700b      	strb	r3, [r1, #0]
 8006aaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006aac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006ab0:	4691      	mov	r9, r2
 8006ab2:	f023 0820 	bic.w	r8, r3, #32
 8006ab6:	bfbc      	itt	lt
 8006ab8:	4632      	movlt	r2, r6
 8006aba:	4616      	movlt	r6, r2
 8006abc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ac0:	d005      	beq.n	8006ace <__cvt+0x42>
 8006ac2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006ac6:	d100      	bne.n	8006aca <__cvt+0x3e>
 8006ac8:	3401      	adds	r4, #1
 8006aca:	2102      	movs	r1, #2
 8006acc:	e000      	b.n	8006ad0 <__cvt+0x44>
 8006ace:	2103      	movs	r1, #3
 8006ad0:	ab03      	add	r3, sp, #12
 8006ad2:	9301      	str	r3, [sp, #4]
 8006ad4:	ab02      	add	r3, sp, #8
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	ec47 6b10 	vmov	d0, r6, r7
 8006adc:	4653      	mov	r3, sl
 8006ade:	4622      	mov	r2, r4
 8006ae0:	f000 fe6e 	bl	80077c0 <_dtoa_r>
 8006ae4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006ae8:	4605      	mov	r5, r0
 8006aea:	d119      	bne.n	8006b20 <__cvt+0x94>
 8006aec:	f019 0f01 	tst.w	r9, #1
 8006af0:	d00e      	beq.n	8006b10 <__cvt+0x84>
 8006af2:	eb00 0904 	add.w	r9, r0, r4
 8006af6:	2200      	movs	r2, #0
 8006af8:	2300      	movs	r3, #0
 8006afa:	4630      	mov	r0, r6
 8006afc:	4639      	mov	r1, r7
 8006afe:	f7fa f803 	bl	8000b08 <__aeabi_dcmpeq>
 8006b02:	b108      	cbz	r0, 8006b08 <__cvt+0x7c>
 8006b04:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b08:	2230      	movs	r2, #48	@ 0x30
 8006b0a:	9b03      	ldr	r3, [sp, #12]
 8006b0c:	454b      	cmp	r3, r9
 8006b0e:	d31e      	bcc.n	8006b4e <__cvt+0xc2>
 8006b10:	9b03      	ldr	r3, [sp, #12]
 8006b12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b14:	1b5b      	subs	r3, r3, r5
 8006b16:	4628      	mov	r0, r5
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	b004      	add	sp, #16
 8006b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b24:	eb00 0904 	add.w	r9, r0, r4
 8006b28:	d1e5      	bne.n	8006af6 <__cvt+0x6a>
 8006b2a:	7803      	ldrb	r3, [r0, #0]
 8006b2c:	2b30      	cmp	r3, #48	@ 0x30
 8006b2e:	d10a      	bne.n	8006b46 <__cvt+0xba>
 8006b30:	2200      	movs	r2, #0
 8006b32:	2300      	movs	r3, #0
 8006b34:	4630      	mov	r0, r6
 8006b36:	4639      	mov	r1, r7
 8006b38:	f7f9 ffe6 	bl	8000b08 <__aeabi_dcmpeq>
 8006b3c:	b918      	cbnz	r0, 8006b46 <__cvt+0xba>
 8006b3e:	f1c4 0401 	rsb	r4, r4, #1
 8006b42:	f8ca 4000 	str.w	r4, [sl]
 8006b46:	f8da 3000 	ldr.w	r3, [sl]
 8006b4a:	4499      	add	r9, r3
 8006b4c:	e7d3      	b.n	8006af6 <__cvt+0x6a>
 8006b4e:	1c59      	adds	r1, r3, #1
 8006b50:	9103      	str	r1, [sp, #12]
 8006b52:	701a      	strb	r2, [r3, #0]
 8006b54:	e7d9      	b.n	8006b0a <__cvt+0x7e>

08006b56 <__exponent>:
 8006b56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b58:	2900      	cmp	r1, #0
 8006b5a:	bfba      	itte	lt
 8006b5c:	4249      	neglt	r1, r1
 8006b5e:	232d      	movlt	r3, #45	@ 0x2d
 8006b60:	232b      	movge	r3, #43	@ 0x2b
 8006b62:	2909      	cmp	r1, #9
 8006b64:	7002      	strb	r2, [r0, #0]
 8006b66:	7043      	strb	r3, [r0, #1]
 8006b68:	dd29      	ble.n	8006bbe <__exponent+0x68>
 8006b6a:	f10d 0307 	add.w	r3, sp, #7
 8006b6e:	461d      	mov	r5, r3
 8006b70:	270a      	movs	r7, #10
 8006b72:	461a      	mov	r2, r3
 8006b74:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b78:	fb07 1416 	mls	r4, r7, r6, r1
 8006b7c:	3430      	adds	r4, #48	@ 0x30
 8006b7e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b82:	460c      	mov	r4, r1
 8006b84:	2c63      	cmp	r4, #99	@ 0x63
 8006b86:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b8a:	4631      	mov	r1, r6
 8006b8c:	dcf1      	bgt.n	8006b72 <__exponent+0x1c>
 8006b8e:	3130      	adds	r1, #48	@ 0x30
 8006b90:	1e94      	subs	r4, r2, #2
 8006b92:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b96:	1c41      	adds	r1, r0, #1
 8006b98:	4623      	mov	r3, r4
 8006b9a:	42ab      	cmp	r3, r5
 8006b9c:	d30a      	bcc.n	8006bb4 <__exponent+0x5e>
 8006b9e:	f10d 0309 	add.w	r3, sp, #9
 8006ba2:	1a9b      	subs	r3, r3, r2
 8006ba4:	42ac      	cmp	r4, r5
 8006ba6:	bf88      	it	hi
 8006ba8:	2300      	movhi	r3, #0
 8006baa:	3302      	adds	r3, #2
 8006bac:	4403      	add	r3, r0
 8006bae:	1a18      	subs	r0, r3, r0
 8006bb0:	b003      	add	sp, #12
 8006bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bb4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006bb8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006bbc:	e7ed      	b.n	8006b9a <__exponent+0x44>
 8006bbe:	2330      	movs	r3, #48	@ 0x30
 8006bc0:	3130      	adds	r1, #48	@ 0x30
 8006bc2:	7083      	strb	r3, [r0, #2]
 8006bc4:	70c1      	strb	r1, [r0, #3]
 8006bc6:	1d03      	adds	r3, r0, #4
 8006bc8:	e7f1      	b.n	8006bae <__exponent+0x58>
	...

08006bcc <_printf_float>:
 8006bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd0:	b08d      	sub	sp, #52	@ 0x34
 8006bd2:	460c      	mov	r4, r1
 8006bd4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006bd8:	4616      	mov	r6, r2
 8006bda:	461f      	mov	r7, r3
 8006bdc:	4605      	mov	r5, r0
 8006bde:	f000 fcef 	bl	80075c0 <_localeconv_r>
 8006be2:	6803      	ldr	r3, [r0, #0]
 8006be4:	9304      	str	r3, [sp, #16]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7f9 fb62 	bl	80002b0 <strlen>
 8006bec:	2300      	movs	r3, #0
 8006bee:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bf0:	f8d8 3000 	ldr.w	r3, [r8]
 8006bf4:	9005      	str	r0, [sp, #20]
 8006bf6:	3307      	adds	r3, #7
 8006bf8:	f023 0307 	bic.w	r3, r3, #7
 8006bfc:	f103 0208 	add.w	r2, r3, #8
 8006c00:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c04:	f8d4 b000 	ldr.w	fp, [r4]
 8006c08:	f8c8 2000 	str.w	r2, [r8]
 8006c0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c10:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006c14:	9307      	str	r3, [sp, #28]
 8006c16:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c1a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006c1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c22:	4b9c      	ldr	r3, [pc, #624]	@ (8006e94 <_printf_float+0x2c8>)
 8006c24:	f04f 32ff 	mov.w	r2, #4294967295
 8006c28:	f7f9 ffa0 	bl	8000b6c <__aeabi_dcmpun>
 8006c2c:	bb70      	cbnz	r0, 8006c8c <_printf_float+0xc0>
 8006c2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c32:	4b98      	ldr	r3, [pc, #608]	@ (8006e94 <_printf_float+0x2c8>)
 8006c34:	f04f 32ff 	mov.w	r2, #4294967295
 8006c38:	f7f9 ff7a 	bl	8000b30 <__aeabi_dcmple>
 8006c3c:	bb30      	cbnz	r0, 8006c8c <_printf_float+0xc0>
 8006c3e:	2200      	movs	r2, #0
 8006c40:	2300      	movs	r3, #0
 8006c42:	4640      	mov	r0, r8
 8006c44:	4649      	mov	r1, r9
 8006c46:	f7f9 ff69 	bl	8000b1c <__aeabi_dcmplt>
 8006c4a:	b110      	cbz	r0, 8006c52 <_printf_float+0x86>
 8006c4c:	232d      	movs	r3, #45	@ 0x2d
 8006c4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c52:	4a91      	ldr	r2, [pc, #580]	@ (8006e98 <_printf_float+0x2cc>)
 8006c54:	4b91      	ldr	r3, [pc, #580]	@ (8006e9c <_printf_float+0x2d0>)
 8006c56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c5a:	bf8c      	ite	hi
 8006c5c:	4690      	movhi	r8, r2
 8006c5e:	4698      	movls	r8, r3
 8006c60:	2303      	movs	r3, #3
 8006c62:	6123      	str	r3, [r4, #16]
 8006c64:	f02b 0304 	bic.w	r3, fp, #4
 8006c68:	6023      	str	r3, [r4, #0]
 8006c6a:	f04f 0900 	mov.w	r9, #0
 8006c6e:	9700      	str	r7, [sp, #0]
 8006c70:	4633      	mov	r3, r6
 8006c72:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c74:	4621      	mov	r1, r4
 8006c76:	4628      	mov	r0, r5
 8006c78:	f000 f9d2 	bl	8007020 <_printf_common>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	f040 808d 	bne.w	8006d9c <_printf_float+0x1d0>
 8006c82:	f04f 30ff 	mov.w	r0, #4294967295
 8006c86:	b00d      	add	sp, #52	@ 0x34
 8006c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8c:	4642      	mov	r2, r8
 8006c8e:	464b      	mov	r3, r9
 8006c90:	4640      	mov	r0, r8
 8006c92:	4649      	mov	r1, r9
 8006c94:	f7f9 ff6a 	bl	8000b6c <__aeabi_dcmpun>
 8006c98:	b140      	cbz	r0, 8006cac <_printf_float+0xe0>
 8006c9a:	464b      	mov	r3, r9
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	bfbc      	itt	lt
 8006ca0:	232d      	movlt	r3, #45	@ 0x2d
 8006ca2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006ca6:	4a7e      	ldr	r2, [pc, #504]	@ (8006ea0 <_printf_float+0x2d4>)
 8006ca8:	4b7e      	ldr	r3, [pc, #504]	@ (8006ea4 <_printf_float+0x2d8>)
 8006caa:	e7d4      	b.n	8006c56 <_printf_float+0x8a>
 8006cac:	6863      	ldr	r3, [r4, #4]
 8006cae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006cb2:	9206      	str	r2, [sp, #24]
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	d13b      	bne.n	8006d30 <_printf_float+0x164>
 8006cb8:	2306      	movs	r3, #6
 8006cba:	6063      	str	r3, [r4, #4]
 8006cbc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	6022      	str	r2, [r4, #0]
 8006cc4:	9303      	str	r3, [sp, #12]
 8006cc6:	ab0a      	add	r3, sp, #40	@ 0x28
 8006cc8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006ccc:	ab09      	add	r3, sp, #36	@ 0x24
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	6861      	ldr	r1, [r4, #4]
 8006cd2:	ec49 8b10 	vmov	d0, r8, r9
 8006cd6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006cda:	4628      	mov	r0, r5
 8006cdc:	f7ff fed6 	bl	8006a8c <__cvt>
 8006ce0:	9b06      	ldr	r3, [sp, #24]
 8006ce2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ce4:	2b47      	cmp	r3, #71	@ 0x47
 8006ce6:	4680      	mov	r8, r0
 8006ce8:	d129      	bne.n	8006d3e <_printf_float+0x172>
 8006cea:	1cc8      	adds	r0, r1, #3
 8006cec:	db02      	blt.n	8006cf4 <_printf_float+0x128>
 8006cee:	6863      	ldr	r3, [r4, #4]
 8006cf0:	4299      	cmp	r1, r3
 8006cf2:	dd41      	ble.n	8006d78 <_printf_float+0x1ac>
 8006cf4:	f1aa 0a02 	sub.w	sl, sl, #2
 8006cf8:	fa5f fa8a 	uxtb.w	sl, sl
 8006cfc:	3901      	subs	r1, #1
 8006cfe:	4652      	mov	r2, sl
 8006d00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006d04:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d06:	f7ff ff26 	bl	8006b56 <__exponent>
 8006d0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d0c:	1813      	adds	r3, r2, r0
 8006d0e:	2a01      	cmp	r2, #1
 8006d10:	4681      	mov	r9, r0
 8006d12:	6123      	str	r3, [r4, #16]
 8006d14:	dc02      	bgt.n	8006d1c <_printf_float+0x150>
 8006d16:	6822      	ldr	r2, [r4, #0]
 8006d18:	07d2      	lsls	r2, r2, #31
 8006d1a:	d501      	bpl.n	8006d20 <_printf_float+0x154>
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	6123      	str	r3, [r4, #16]
 8006d20:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0a2      	beq.n	8006c6e <_printf_float+0xa2>
 8006d28:	232d      	movs	r3, #45	@ 0x2d
 8006d2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d2e:	e79e      	b.n	8006c6e <_printf_float+0xa2>
 8006d30:	9a06      	ldr	r2, [sp, #24]
 8006d32:	2a47      	cmp	r2, #71	@ 0x47
 8006d34:	d1c2      	bne.n	8006cbc <_printf_float+0xf0>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1c0      	bne.n	8006cbc <_printf_float+0xf0>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e7bd      	b.n	8006cba <_printf_float+0xee>
 8006d3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d42:	d9db      	bls.n	8006cfc <_printf_float+0x130>
 8006d44:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d48:	d118      	bne.n	8006d7c <_printf_float+0x1b0>
 8006d4a:	2900      	cmp	r1, #0
 8006d4c:	6863      	ldr	r3, [r4, #4]
 8006d4e:	dd0b      	ble.n	8006d68 <_printf_float+0x19c>
 8006d50:	6121      	str	r1, [r4, #16]
 8006d52:	b913      	cbnz	r3, 8006d5a <_printf_float+0x18e>
 8006d54:	6822      	ldr	r2, [r4, #0]
 8006d56:	07d0      	lsls	r0, r2, #31
 8006d58:	d502      	bpl.n	8006d60 <_printf_float+0x194>
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	440b      	add	r3, r1
 8006d5e:	6123      	str	r3, [r4, #16]
 8006d60:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d62:	f04f 0900 	mov.w	r9, #0
 8006d66:	e7db      	b.n	8006d20 <_printf_float+0x154>
 8006d68:	b913      	cbnz	r3, 8006d70 <_printf_float+0x1a4>
 8006d6a:	6822      	ldr	r2, [r4, #0]
 8006d6c:	07d2      	lsls	r2, r2, #31
 8006d6e:	d501      	bpl.n	8006d74 <_printf_float+0x1a8>
 8006d70:	3302      	adds	r3, #2
 8006d72:	e7f4      	b.n	8006d5e <_printf_float+0x192>
 8006d74:	2301      	movs	r3, #1
 8006d76:	e7f2      	b.n	8006d5e <_printf_float+0x192>
 8006d78:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d7e:	4299      	cmp	r1, r3
 8006d80:	db05      	blt.n	8006d8e <_printf_float+0x1c2>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	6121      	str	r1, [r4, #16]
 8006d86:	07d8      	lsls	r0, r3, #31
 8006d88:	d5ea      	bpl.n	8006d60 <_printf_float+0x194>
 8006d8a:	1c4b      	adds	r3, r1, #1
 8006d8c:	e7e7      	b.n	8006d5e <_printf_float+0x192>
 8006d8e:	2900      	cmp	r1, #0
 8006d90:	bfd4      	ite	le
 8006d92:	f1c1 0202 	rsble	r2, r1, #2
 8006d96:	2201      	movgt	r2, #1
 8006d98:	4413      	add	r3, r2
 8006d9a:	e7e0      	b.n	8006d5e <_printf_float+0x192>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	055a      	lsls	r2, r3, #21
 8006da0:	d407      	bmi.n	8006db2 <_printf_float+0x1e6>
 8006da2:	6923      	ldr	r3, [r4, #16]
 8006da4:	4642      	mov	r2, r8
 8006da6:	4631      	mov	r1, r6
 8006da8:	4628      	mov	r0, r5
 8006daa:	47b8      	blx	r7
 8006dac:	3001      	adds	r0, #1
 8006dae:	d12b      	bne.n	8006e08 <_printf_float+0x23c>
 8006db0:	e767      	b.n	8006c82 <_printf_float+0xb6>
 8006db2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006db6:	f240 80dd 	bls.w	8006f74 <_printf_float+0x3a8>
 8006dba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f7f9 fea1 	bl	8000b08 <__aeabi_dcmpeq>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d033      	beq.n	8006e32 <_printf_float+0x266>
 8006dca:	4a37      	ldr	r2, [pc, #220]	@ (8006ea8 <_printf_float+0x2dc>)
 8006dcc:	2301      	movs	r3, #1
 8006dce:	4631      	mov	r1, r6
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	47b8      	blx	r7
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	f43f af54 	beq.w	8006c82 <_printf_float+0xb6>
 8006dda:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006dde:	4543      	cmp	r3, r8
 8006de0:	db02      	blt.n	8006de8 <_printf_float+0x21c>
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	07d8      	lsls	r0, r3, #31
 8006de6:	d50f      	bpl.n	8006e08 <_printf_float+0x23c>
 8006de8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dec:	4631      	mov	r1, r6
 8006dee:	4628      	mov	r0, r5
 8006df0:	47b8      	blx	r7
 8006df2:	3001      	adds	r0, #1
 8006df4:	f43f af45 	beq.w	8006c82 <_printf_float+0xb6>
 8006df8:	f04f 0900 	mov.w	r9, #0
 8006dfc:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e00:	f104 0a1a 	add.w	sl, r4, #26
 8006e04:	45c8      	cmp	r8, r9
 8006e06:	dc09      	bgt.n	8006e1c <_printf_float+0x250>
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	079b      	lsls	r3, r3, #30
 8006e0c:	f100 8103 	bmi.w	8007016 <_printf_float+0x44a>
 8006e10:	68e0      	ldr	r0, [r4, #12]
 8006e12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e14:	4298      	cmp	r0, r3
 8006e16:	bfb8      	it	lt
 8006e18:	4618      	movlt	r0, r3
 8006e1a:	e734      	b.n	8006c86 <_printf_float+0xba>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	4652      	mov	r2, sl
 8006e20:	4631      	mov	r1, r6
 8006e22:	4628      	mov	r0, r5
 8006e24:	47b8      	blx	r7
 8006e26:	3001      	adds	r0, #1
 8006e28:	f43f af2b 	beq.w	8006c82 <_printf_float+0xb6>
 8006e2c:	f109 0901 	add.w	r9, r9, #1
 8006e30:	e7e8      	b.n	8006e04 <_printf_float+0x238>
 8006e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	dc39      	bgt.n	8006eac <_printf_float+0x2e0>
 8006e38:	4a1b      	ldr	r2, [pc, #108]	@ (8006ea8 <_printf_float+0x2dc>)
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b8      	blx	r7
 8006e42:	3001      	adds	r0, #1
 8006e44:	f43f af1d 	beq.w	8006c82 <_printf_float+0xb6>
 8006e48:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e4c:	ea59 0303 	orrs.w	r3, r9, r3
 8006e50:	d102      	bne.n	8006e58 <_printf_float+0x28c>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	07d9      	lsls	r1, r3, #31
 8006e56:	d5d7      	bpl.n	8006e08 <_printf_float+0x23c>
 8006e58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4628      	mov	r0, r5
 8006e60:	47b8      	blx	r7
 8006e62:	3001      	adds	r0, #1
 8006e64:	f43f af0d 	beq.w	8006c82 <_printf_float+0xb6>
 8006e68:	f04f 0a00 	mov.w	sl, #0
 8006e6c:	f104 0b1a 	add.w	fp, r4, #26
 8006e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e72:	425b      	negs	r3, r3
 8006e74:	4553      	cmp	r3, sl
 8006e76:	dc01      	bgt.n	8006e7c <_printf_float+0x2b0>
 8006e78:	464b      	mov	r3, r9
 8006e7a:	e793      	b.n	8006da4 <_printf_float+0x1d8>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	465a      	mov	r2, fp
 8006e80:	4631      	mov	r1, r6
 8006e82:	4628      	mov	r0, r5
 8006e84:	47b8      	blx	r7
 8006e86:	3001      	adds	r0, #1
 8006e88:	f43f aefb 	beq.w	8006c82 <_printf_float+0xb6>
 8006e8c:	f10a 0a01 	add.w	sl, sl, #1
 8006e90:	e7ee      	b.n	8006e70 <_printf_float+0x2a4>
 8006e92:	bf00      	nop
 8006e94:	7fefffff 	.word	0x7fefffff
 8006e98:	0800ccf8 	.word	0x0800ccf8
 8006e9c:	0800ccf4 	.word	0x0800ccf4
 8006ea0:	0800cd00 	.word	0x0800cd00
 8006ea4:	0800ccfc 	.word	0x0800ccfc
 8006ea8:	0800cd04 	.word	0x0800cd04
 8006eac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006eae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006eb2:	4553      	cmp	r3, sl
 8006eb4:	bfa8      	it	ge
 8006eb6:	4653      	movge	r3, sl
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	4699      	mov	r9, r3
 8006ebc:	dc36      	bgt.n	8006f2c <_printf_float+0x360>
 8006ebe:	f04f 0b00 	mov.w	fp, #0
 8006ec2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ec6:	f104 021a 	add.w	r2, r4, #26
 8006eca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ecc:	9306      	str	r3, [sp, #24]
 8006ece:	eba3 0309 	sub.w	r3, r3, r9
 8006ed2:	455b      	cmp	r3, fp
 8006ed4:	dc31      	bgt.n	8006f3a <_printf_float+0x36e>
 8006ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed8:	459a      	cmp	sl, r3
 8006eda:	dc3a      	bgt.n	8006f52 <_printf_float+0x386>
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	07da      	lsls	r2, r3, #31
 8006ee0:	d437      	bmi.n	8006f52 <_printf_float+0x386>
 8006ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee4:	ebaa 0903 	sub.w	r9, sl, r3
 8006ee8:	9b06      	ldr	r3, [sp, #24]
 8006eea:	ebaa 0303 	sub.w	r3, sl, r3
 8006eee:	4599      	cmp	r9, r3
 8006ef0:	bfa8      	it	ge
 8006ef2:	4699      	movge	r9, r3
 8006ef4:	f1b9 0f00 	cmp.w	r9, #0
 8006ef8:	dc33      	bgt.n	8006f62 <_printf_float+0x396>
 8006efa:	f04f 0800 	mov.w	r8, #0
 8006efe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f02:	f104 0b1a 	add.w	fp, r4, #26
 8006f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f08:	ebaa 0303 	sub.w	r3, sl, r3
 8006f0c:	eba3 0309 	sub.w	r3, r3, r9
 8006f10:	4543      	cmp	r3, r8
 8006f12:	f77f af79 	ble.w	8006e08 <_printf_float+0x23c>
 8006f16:	2301      	movs	r3, #1
 8006f18:	465a      	mov	r2, fp
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	47b8      	blx	r7
 8006f20:	3001      	adds	r0, #1
 8006f22:	f43f aeae 	beq.w	8006c82 <_printf_float+0xb6>
 8006f26:	f108 0801 	add.w	r8, r8, #1
 8006f2a:	e7ec      	b.n	8006f06 <_printf_float+0x33a>
 8006f2c:	4642      	mov	r2, r8
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4628      	mov	r0, r5
 8006f32:	47b8      	blx	r7
 8006f34:	3001      	adds	r0, #1
 8006f36:	d1c2      	bne.n	8006ebe <_printf_float+0x2f2>
 8006f38:	e6a3      	b.n	8006c82 <_printf_float+0xb6>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	4628      	mov	r0, r5
 8006f40:	9206      	str	r2, [sp, #24]
 8006f42:	47b8      	blx	r7
 8006f44:	3001      	adds	r0, #1
 8006f46:	f43f ae9c 	beq.w	8006c82 <_printf_float+0xb6>
 8006f4a:	9a06      	ldr	r2, [sp, #24]
 8006f4c:	f10b 0b01 	add.w	fp, fp, #1
 8006f50:	e7bb      	b.n	8006eca <_printf_float+0x2fe>
 8006f52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f56:	4631      	mov	r1, r6
 8006f58:	4628      	mov	r0, r5
 8006f5a:	47b8      	blx	r7
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	d1c0      	bne.n	8006ee2 <_printf_float+0x316>
 8006f60:	e68f      	b.n	8006c82 <_printf_float+0xb6>
 8006f62:	9a06      	ldr	r2, [sp, #24]
 8006f64:	464b      	mov	r3, r9
 8006f66:	4442      	add	r2, r8
 8006f68:	4631      	mov	r1, r6
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	47b8      	blx	r7
 8006f6e:	3001      	adds	r0, #1
 8006f70:	d1c3      	bne.n	8006efa <_printf_float+0x32e>
 8006f72:	e686      	b.n	8006c82 <_printf_float+0xb6>
 8006f74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f78:	f1ba 0f01 	cmp.w	sl, #1
 8006f7c:	dc01      	bgt.n	8006f82 <_printf_float+0x3b6>
 8006f7e:	07db      	lsls	r3, r3, #31
 8006f80:	d536      	bpl.n	8006ff0 <_printf_float+0x424>
 8006f82:	2301      	movs	r3, #1
 8006f84:	4642      	mov	r2, r8
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	f43f ae78 	beq.w	8006c82 <_printf_float+0xb6>
 8006f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f96:	4631      	mov	r1, r6
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b8      	blx	r7
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	f43f ae70 	beq.w	8006c82 <_printf_float+0xb6>
 8006fa2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	2300      	movs	r3, #0
 8006faa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fae:	f7f9 fdab 	bl	8000b08 <__aeabi_dcmpeq>
 8006fb2:	b9c0      	cbnz	r0, 8006fe6 <_printf_float+0x41a>
 8006fb4:	4653      	mov	r3, sl
 8006fb6:	f108 0201 	add.w	r2, r8, #1
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	47b8      	blx	r7
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d10c      	bne.n	8006fde <_printf_float+0x412>
 8006fc4:	e65d      	b.n	8006c82 <_printf_float+0xb6>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	465a      	mov	r2, fp
 8006fca:	4631      	mov	r1, r6
 8006fcc:	4628      	mov	r0, r5
 8006fce:	47b8      	blx	r7
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	f43f ae56 	beq.w	8006c82 <_printf_float+0xb6>
 8006fd6:	f108 0801 	add.w	r8, r8, #1
 8006fda:	45d0      	cmp	r8, sl
 8006fdc:	dbf3      	blt.n	8006fc6 <_printf_float+0x3fa>
 8006fde:	464b      	mov	r3, r9
 8006fe0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006fe4:	e6df      	b.n	8006da6 <_printf_float+0x1da>
 8006fe6:	f04f 0800 	mov.w	r8, #0
 8006fea:	f104 0b1a 	add.w	fp, r4, #26
 8006fee:	e7f4      	b.n	8006fda <_printf_float+0x40e>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	4642      	mov	r2, r8
 8006ff4:	e7e1      	b.n	8006fba <_printf_float+0x3ee>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	464a      	mov	r2, r9
 8006ffa:	4631      	mov	r1, r6
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	47b8      	blx	r7
 8007000:	3001      	adds	r0, #1
 8007002:	f43f ae3e 	beq.w	8006c82 <_printf_float+0xb6>
 8007006:	f108 0801 	add.w	r8, r8, #1
 800700a:	68e3      	ldr	r3, [r4, #12]
 800700c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800700e:	1a5b      	subs	r3, r3, r1
 8007010:	4543      	cmp	r3, r8
 8007012:	dcf0      	bgt.n	8006ff6 <_printf_float+0x42a>
 8007014:	e6fc      	b.n	8006e10 <_printf_float+0x244>
 8007016:	f04f 0800 	mov.w	r8, #0
 800701a:	f104 0919 	add.w	r9, r4, #25
 800701e:	e7f4      	b.n	800700a <_printf_float+0x43e>

08007020 <_printf_common>:
 8007020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007024:	4616      	mov	r6, r2
 8007026:	4698      	mov	r8, r3
 8007028:	688a      	ldr	r2, [r1, #8]
 800702a:	690b      	ldr	r3, [r1, #16]
 800702c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007030:	4293      	cmp	r3, r2
 8007032:	bfb8      	it	lt
 8007034:	4613      	movlt	r3, r2
 8007036:	6033      	str	r3, [r6, #0]
 8007038:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800703c:	4607      	mov	r7, r0
 800703e:	460c      	mov	r4, r1
 8007040:	b10a      	cbz	r2, 8007046 <_printf_common+0x26>
 8007042:	3301      	adds	r3, #1
 8007044:	6033      	str	r3, [r6, #0]
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	0699      	lsls	r1, r3, #26
 800704a:	bf42      	ittt	mi
 800704c:	6833      	ldrmi	r3, [r6, #0]
 800704e:	3302      	addmi	r3, #2
 8007050:	6033      	strmi	r3, [r6, #0]
 8007052:	6825      	ldr	r5, [r4, #0]
 8007054:	f015 0506 	ands.w	r5, r5, #6
 8007058:	d106      	bne.n	8007068 <_printf_common+0x48>
 800705a:	f104 0a19 	add.w	sl, r4, #25
 800705e:	68e3      	ldr	r3, [r4, #12]
 8007060:	6832      	ldr	r2, [r6, #0]
 8007062:	1a9b      	subs	r3, r3, r2
 8007064:	42ab      	cmp	r3, r5
 8007066:	dc26      	bgt.n	80070b6 <_printf_common+0x96>
 8007068:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800706c:	6822      	ldr	r2, [r4, #0]
 800706e:	3b00      	subs	r3, #0
 8007070:	bf18      	it	ne
 8007072:	2301      	movne	r3, #1
 8007074:	0692      	lsls	r2, r2, #26
 8007076:	d42b      	bmi.n	80070d0 <_printf_common+0xb0>
 8007078:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800707c:	4641      	mov	r1, r8
 800707e:	4638      	mov	r0, r7
 8007080:	47c8      	blx	r9
 8007082:	3001      	adds	r0, #1
 8007084:	d01e      	beq.n	80070c4 <_printf_common+0xa4>
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	6922      	ldr	r2, [r4, #16]
 800708a:	f003 0306 	and.w	r3, r3, #6
 800708e:	2b04      	cmp	r3, #4
 8007090:	bf02      	ittt	eq
 8007092:	68e5      	ldreq	r5, [r4, #12]
 8007094:	6833      	ldreq	r3, [r6, #0]
 8007096:	1aed      	subeq	r5, r5, r3
 8007098:	68a3      	ldr	r3, [r4, #8]
 800709a:	bf0c      	ite	eq
 800709c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070a0:	2500      	movne	r5, #0
 80070a2:	4293      	cmp	r3, r2
 80070a4:	bfc4      	itt	gt
 80070a6:	1a9b      	subgt	r3, r3, r2
 80070a8:	18ed      	addgt	r5, r5, r3
 80070aa:	2600      	movs	r6, #0
 80070ac:	341a      	adds	r4, #26
 80070ae:	42b5      	cmp	r5, r6
 80070b0:	d11a      	bne.n	80070e8 <_printf_common+0xc8>
 80070b2:	2000      	movs	r0, #0
 80070b4:	e008      	b.n	80070c8 <_printf_common+0xa8>
 80070b6:	2301      	movs	r3, #1
 80070b8:	4652      	mov	r2, sl
 80070ba:	4641      	mov	r1, r8
 80070bc:	4638      	mov	r0, r7
 80070be:	47c8      	blx	r9
 80070c0:	3001      	adds	r0, #1
 80070c2:	d103      	bne.n	80070cc <_printf_common+0xac>
 80070c4:	f04f 30ff 	mov.w	r0, #4294967295
 80070c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070cc:	3501      	adds	r5, #1
 80070ce:	e7c6      	b.n	800705e <_printf_common+0x3e>
 80070d0:	18e1      	adds	r1, r4, r3
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	2030      	movs	r0, #48	@ 0x30
 80070d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070da:	4422      	add	r2, r4
 80070dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070e4:	3302      	adds	r3, #2
 80070e6:	e7c7      	b.n	8007078 <_printf_common+0x58>
 80070e8:	2301      	movs	r3, #1
 80070ea:	4622      	mov	r2, r4
 80070ec:	4641      	mov	r1, r8
 80070ee:	4638      	mov	r0, r7
 80070f0:	47c8      	blx	r9
 80070f2:	3001      	adds	r0, #1
 80070f4:	d0e6      	beq.n	80070c4 <_printf_common+0xa4>
 80070f6:	3601      	adds	r6, #1
 80070f8:	e7d9      	b.n	80070ae <_printf_common+0x8e>
	...

080070fc <_printf_i>:
 80070fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007100:	7e0f      	ldrb	r7, [r1, #24]
 8007102:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007104:	2f78      	cmp	r7, #120	@ 0x78
 8007106:	4691      	mov	r9, r2
 8007108:	4680      	mov	r8, r0
 800710a:	460c      	mov	r4, r1
 800710c:	469a      	mov	sl, r3
 800710e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007112:	d807      	bhi.n	8007124 <_printf_i+0x28>
 8007114:	2f62      	cmp	r7, #98	@ 0x62
 8007116:	d80a      	bhi.n	800712e <_printf_i+0x32>
 8007118:	2f00      	cmp	r7, #0
 800711a:	f000 80d1 	beq.w	80072c0 <_printf_i+0x1c4>
 800711e:	2f58      	cmp	r7, #88	@ 0x58
 8007120:	f000 80b8 	beq.w	8007294 <_printf_i+0x198>
 8007124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007128:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800712c:	e03a      	b.n	80071a4 <_printf_i+0xa8>
 800712e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007132:	2b15      	cmp	r3, #21
 8007134:	d8f6      	bhi.n	8007124 <_printf_i+0x28>
 8007136:	a101      	add	r1, pc, #4	@ (adr r1, 800713c <_printf_i+0x40>)
 8007138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800713c:	08007195 	.word	0x08007195
 8007140:	080071a9 	.word	0x080071a9
 8007144:	08007125 	.word	0x08007125
 8007148:	08007125 	.word	0x08007125
 800714c:	08007125 	.word	0x08007125
 8007150:	08007125 	.word	0x08007125
 8007154:	080071a9 	.word	0x080071a9
 8007158:	08007125 	.word	0x08007125
 800715c:	08007125 	.word	0x08007125
 8007160:	08007125 	.word	0x08007125
 8007164:	08007125 	.word	0x08007125
 8007168:	080072a7 	.word	0x080072a7
 800716c:	080071d3 	.word	0x080071d3
 8007170:	08007261 	.word	0x08007261
 8007174:	08007125 	.word	0x08007125
 8007178:	08007125 	.word	0x08007125
 800717c:	080072c9 	.word	0x080072c9
 8007180:	08007125 	.word	0x08007125
 8007184:	080071d3 	.word	0x080071d3
 8007188:	08007125 	.word	0x08007125
 800718c:	08007125 	.word	0x08007125
 8007190:	08007269 	.word	0x08007269
 8007194:	6833      	ldr	r3, [r6, #0]
 8007196:	1d1a      	adds	r2, r3, #4
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6032      	str	r2, [r6, #0]
 800719c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071a4:	2301      	movs	r3, #1
 80071a6:	e09c      	b.n	80072e2 <_printf_i+0x1e6>
 80071a8:	6833      	ldr	r3, [r6, #0]
 80071aa:	6820      	ldr	r0, [r4, #0]
 80071ac:	1d19      	adds	r1, r3, #4
 80071ae:	6031      	str	r1, [r6, #0]
 80071b0:	0606      	lsls	r6, r0, #24
 80071b2:	d501      	bpl.n	80071b8 <_printf_i+0xbc>
 80071b4:	681d      	ldr	r5, [r3, #0]
 80071b6:	e003      	b.n	80071c0 <_printf_i+0xc4>
 80071b8:	0645      	lsls	r5, r0, #25
 80071ba:	d5fb      	bpl.n	80071b4 <_printf_i+0xb8>
 80071bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071c0:	2d00      	cmp	r5, #0
 80071c2:	da03      	bge.n	80071cc <_printf_i+0xd0>
 80071c4:	232d      	movs	r3, #45	@ 0x2d
 80071c6:	426d      	negs	r5, r5
 80071c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071cc:	4858      	ldr	r0, [pc, #352]	@ (8007330 <_printf_i+0x234>)
 80071ce:	230a      	movs	r3, #10
 80071d0:	e011      	b.n	80071f6 <_printf_i+0xfa>
 80071d2:	6821      	ldr	r1, [r4, #0]
 80071d4:	6833      	ldr	r3, [r6, #0]
 80071d6:	0608      	lsls	r0, r1, #24
 80071d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80071dc:	d402      	bmi.n	80071e4 <_printf_i+0xe8>
 80071de:	0649      	lsls	r1, r1, #25
 80071e0:	bf48      	it	mi
 80071e2:	b2ad      	uxthmi	r5, r5
 80071e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80071e6:	4852      	ldr	r0, [pc, #328]	@ (8007330 <_printf_i+0x234>)
 80071e8:	6033      	str	r3, [r6, #0]
 80071ea:	bf14      	ite	ne
 80071ec:	230a      	movne	r3, #10
 80071ee:	2308      	moveq	r3, #8
 80071f0:	2100      	movs	r1, #0
 80071f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071f6:	6866      	ldr	r6, [r4, #4]
 80071f8:	60a6      	str	r6, [r4, #8]
 80071fa:	2e00      	cmp	r6, #0
 80071fc:	db05      	blt.n	800720a <_printf_i+0x10e>
 80071fe:	6821      	ldr	r1, [r4, #0]
 8007200:	432e      	orrs	r6, r5
 8007202:	f021 0104 	bic.w	r1, r1, #4
 8007206:	6021      	str	r1, [r4, #0]
 8007208:	d04b      	beq.n	80072a2 <_printf_i+0x1a6>
 800720a:	4616      	mov	r6, r2
 800720c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007210:	fb03 5711 	mls	r7, r3, r1, r5
 8007214:	5dc7      	ldrb	r7, [r0, r7]
 8007216:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800721a:	462f      	mov	r7, r5
 800721c:	42bb      	cmp	r3, r7
 800721e:	460d      	mov	r5, r1
 8007220:	d9f4      	bls.n	800720c <_printf_i+0x110>
 8007222:	2b08      	cmp	r3, #8
 8007224:	d10b      	bne.n	800723e <_printf_i+0x142>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	07df      	lsls	r7, r3, #31
 800722a:	d508      	bpl.n	800723e <_printf_i+0x142>
 800722c:	6923      	ldr	r3, [r4, #16]
 800722e:	6861      	ldr	r1, [r4, #4]
 8007230:	4299      	cmp	r1, r3
 8007232:	bfde      	ittt	le
 8007234:	2330      	movle	r3, #48	@ 0x30
 8007236:	f806 3c01 	strble.w	r3, [r6, #-1]
 800723a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800723e:	1b92      	subs	r2, r2, r6
 8007240:	6122      	str	r2, [r4, #16]
 8007242:	f8cd a000 	str.w	sl, [sp]
 8007246:	464b      	mov	r3, r9
 8007248:	aa03      	add	r2, sp, #12
 800724a:	4621      	mov	r1, r4
 800724c:	4640      	mov	r0, r8
 800724e:	f7ff fee7 	bl	8007020 <_printf_common>
 8007252:	3001      	adds	r0, #1
 8007254:	d14a      	bne.n	80072ec <_printf_i+0x1f0>
 8007256:	f04f 30ff 	mov.w	r0, #4294967295
 800725a:	b004      	add	sp, #16
 800725c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	f043 0320 	orr.w	r3, r3, #32
 8007266:	6023      	str	r3, [r4, #0]
 8007268:	4832      	ldr	r0, [pc, #200]	@ (8007334 <_printf_i+0x238>)
 800726a:	2778      	movs	r7, #120	@ 0x78
 800726c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007270:	6823      	ldr	r3, [r4, #0]
 8007272:	6831      	ldr	r1, [r6, #0]
 8007274:	061f      	lsls	r7, r3, #24
 8007276:	f851 5b04 	ldr.w	r5, [r1], #4
 800727a:	d402      	bmi.n	8007282 <_printf_i+0x186>
 800727c:	065f      	lsls	r7, r3, #25
 800727e:	bf48      	it	mi
 8007280:	b2ad      	uxthmi	r5, r5
 8007282:	6031      	str	r1, [r6, #0]
 8007284:	07d9      	lsls	r1, r3, #31
 8007286:	bf44      	itt	mi
 8007288:	f043 0320 	orrmi.w	r3, r3, #32
 800728c:	6023      	strmi	r3, [r4, #0]
 800728e:	b11d      	cbz	r5, 8007298 <_printf_i+0x19c>
 8007290:	2310      	movs	r3, #16
 8007292:	e7ad      	b.n	80071f0 <_printf_i+0xf4>
 8007294:	4826      	ldr	r0, [pc, #152]	@ (8007330 <_printf_i+0x234>)
 8007296:	e7e9      	b.n	800726c <_printf_i+0x170>
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	f023 0320 	bic.w	r3, r3, #32
 800729e:	6023      	str	r3, [r4, #0]
 80072a0:	e7f6      	b.n	8007290 <_printf_i+0x194>
 80072a2:	4616      	mov	r6, r2
 80072a4:	e7bd      	b.n	8007222 <_printf_i+0x126>
 80072a6:	6833      	ldr	r3, [r6, #0]
 80072a8:	6825      	ldr	r5, [r4, #0]
 80072aa:	6961      	ldr	r1, [r4, #20]
 80072ac:	1d18      	adds	r0, r3, #4
 80072ae:	6030      	str	r0, [r6, #0]
 80072b0:	062e      	lsls	r6, r5, #24
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	d501      	bpl.n	80072ba <_printf_i+0x1be>
 80072b6:	6019      	str	r1, [r3, #0]
 80072b8:	e002      	b.n	80072c0 <_printf_i+0x1c4>
 80072ba:	0668      	lsls	r0, r5, #25
 80072bc:	d5fb      	bpl.n	80072b6 <_printf_i+0x1ba>
 80072be:	8019      	strh	r1, [r3, #0]
 80072c0:	2300      	movs	r3, #0
 80072c2:	6123      	str	r3, [r4, #16]
 80072c4:	4616      	mov	r6, r2
 80072c6:	e7bc      	b.n	8007242 <_printf_i+0x146>
 80072c8:	6833      	ldr	r3, [r6, #0]
 80072ca:	1d1a      	adds	r2, r3, #4
 80072cc:	6032      	str	r2, [r6, #0]
 80072ce:	681e      	ldr	r6, [r3, #0]
 80072d0:	6862      	ldr	r2, [r4, #4]
 80072d2:	2100      	movs	r1, #0
 80072d4:	4630      	mov	r0, r6
 80072d6:	f7f8 ff9b 	bl	8000210 <memchr>
 80072da:	b108      	cbz	r0, 80072e0 <_printf_i+0x1e4>
 80072dc:	1b80      	subs	r0, r0, r6
 80072de:	6060      	str	r0, [r4, #4]
 80072e0:	6863      	ldr	r3, [r4, #4]
 80072e2:	6123      	str	r3, [r4, #16]
 80072e4:	2300      	movs	r3, #0
 80072e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072ea:	e7aa      	b.n	8007242 <_printf_i+0x146>
 80072ec:	6923      	ldr	r3, [r4, #16]
 80072ee:	4632      	mov	r2, r6
 80072f0:	4649      	mov	r1, r9
 80072f2:	4640      	mov	r0, r8
 80072f4:	47d0      	blx	sl
 80072f6:	3001      	adds	r0, #1
 80072f8:	d0ad      	beq.n	8007256 <_printf_i+0x15a>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	079b      	lsls	r3, r3, #30
 80072fe:	d413      	bmi.n	8007328 <_printf_i+0x22c>
 8007300:	68e0      	ldr	r0, [r4, #12]
 8007302:	9b03      	ldr	r3, [sp, #12]
 8007304:	4298      	cmp	r0, r3
 8007306:	bfb8      	it	lt
 8007308:	4618      	movlt	r0, r3
 800730a:	e7a6      	b.n	800725a <_printf_i+0x15e>
 800730c:	2301      	movs	r3, #1
 800730e:	4632      	mov	r2, r6
 8007310:	4649      	mov	r1, r9
 8007312:	4640      	mov	r0, r8
 8007314:	47d0      	blx	sl
 8007316:	3001      	adds	r0, #1
 8007318:	d09d      	beq.n	8007256 <_printf_i+0x15a>
 800731a:	3501      	adds	r5, #1
 800731c:	68e3      	ldr	r3, [r4, #12]
 800731e:	9903      	ldr	r1, [sp, #12]
 8007320:	1a5b      	subs	r3, r3, r1
 8007322:	42ab      	cmp	r3, r5
 8007324:	dcf2      	bgt.n	800730c <_printf_i+0x210>
 8007326:	e7eb      	b.n	8007300 <_printf_i+0x204>
 8007328:	2500      	movs	r5, #0
 800732a:	f104 0619 	add.w	r6, r4, #25
 800732e:	e7f5      	b.n	800731c <_printf_i+0x220>
 8007330:	0800cd06 	.word	0x0800cd06
 8007334:	0800cd17 	.word	0x0800cd17

08007338 <std>:
 8007338:	2300      	movs	r3, #0
 800733a:	b510      	push	{r4, lr}
 800733c:	4604      	mov	r4, r0
 800733e:	e9c0 3300 	strd	r3, r3, [r0]
 8007342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007346:	6083      	str	r3, [r0, #8]
 8007348:	8181      	strh	r1, [r0, #12]
 800734a:	6643      	str	r3, [r0, #100]	@ 0x64
 800734c:	81c2      	strh	r2, [r0, #14]
 800734e:	6183      	str	r3, [r0, #24]
 8007350:	4619      	mov	r1, r3
 8007352:	2208      	movs	r2, #8
 8007354:	305c      	adds	r0, #92	@ 0x5c
 8007356:	f000 f92a 	bl	80075ae <memset>
 800735a:	4b0d      	ldr	r3, [pc, #52]	@ (8007390 <std+0x58>)
 800735c:	6263      	str	r3, [r4, #36]	@ 0x24
 800735e:	4b0d      	ldr	r3, [pc, #52]	@ (8007394 <std+0x5c>)
 8007360:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007362:	4b0d      	ldr	r3, [pc, #52]	@ (8007398 <std+0x60>)
 8007364:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007366:	4b0d      	ldr	r3, [pc, #52]	@ (800739c <std+0x64>)
 8007368:	6323      	str	r3, [r4, #48]	@ 0x30
 800736a:	4b0d      	ldr	r3, [pc, #52]	@ (80073a0 <std+0x68>)
 800736c:	6224      	str	r4, [r4, #32]
 800736e:	429c      	cmp	r4, r3
 8007370:	d006      	beq.n	8007380 <std+0x48>
 8007372:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007376:	4294      	cmp	r4, r2
 8007378:	d002      	beq.n	8007380 <std+0x48>
 800737a:	33d0      	adds	r3, #208	@ 0xd0
 800737c:	429c      	cmp	r4, r3
 800737e:	d105      	bne.n	800738c <std+0x54>
 8007380:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007388:	f000 b98e 	b.w	80076a8 <__retarget_lock_init_recursive>
 800738c:	bd10      	pop	{r4, pc}
 800738e:	bf00      	nop
 8007390:	08007529 	.word	0x08007529
 8007394:	0800754b 	.word	0x0800754b
 8007398:	08007583 	.word	0x08007583
 800739c:	080075a7 	.word	0x080075a7
 80073a0:	200008a0 	.word	0x200008a0

080073a4 <stdio_exit_handler>:
 80073a4:	4a02      	ldr	r2, [pc, #8]	@ (80073b0 <stdio_exit_handler+0xc>)
 80073a6:	4903      	ldr	r1, [pc, #12]	@ (80073b4 <stdio_exit_handler+0x10>)
 80073a8:	4803      	ldr	r0, [pc, #12]	@ (80073b8 <stdio_exit_handler+0x14>)
 80073aa:	f000 b869 	b.w	8007480 <_fwalk_sglue>
 80073ae:	bf00      	nop
 80073b0:	20000324 	.word	0x20000324
 80073b4:	0800900d 	.word	0x0800900d
 80073b8:	20000334 	.word	0x20000334

080073bc <cleanup_stdio>:
 80073bc:	6841      	ldr	r1, [r0, #4]
 80073be:	4b0c      	ldr	r3, [pc, #48]	@ (80073f0 <cleanup_stdio+0x34>)
 80073c0:	4299      	cmp	r1, r3
 80073c2:	b510      	push	{r4, lr}
 80073c4:	4604      	mov	r4, r0
 80073c6:	d001      	beq.n	80073cc <cleanup_stdio+0x10>
 80073c8:	f001 fe20 	bl	800900c <_fflush_r>
 80073cc:	68a1      	ldr	r1, [r4, #8]
 80073ce:	4b09      	ldr	r3, [pc, #36]	@ (80073f4 <cleanup_stdio+0x38>)
 80073d0:	4299      	cmp	r1, r3
 80073d2:	d002      	beq.n	80073da <cleanup_stdio+0x1e>
 80073d4:	4620      	mov	r0, r4
 80073d6:	f001 fe19 	bl	800900c <_fflush_r>
 80073da:	68e1      	ldr	r1, [r4, #12]
 80073dc:	4b06      	ldr	r3, [pc, #24]	@ (80073f8 <cleanup_stdio+0x3c>)
 80073de:	4299      	cmp	r1, r3
 80073e0:	d004      	beq.n	80073ec <cleanup_stdio+0x30>
 80073e2:	4620      	mov	r0, r4
 80073e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073e8:	f001 be10 	b.w	800900c <_fflush_r>
 80073ec:	bd10      	pop	{r4, pc}
 80073ee:	bf00      	nop
 80073f0:	200008a0 	.word	0x200008a0
 80073f4:	20000908 	.word	0x20000908
 80073f8:	20000970 	.word	0x20000970

080073fc <global_stdio_init.part.0>:
 80073fc:	b510      	push	{r4, lr}
 80073fe:	4b0b      	ldr	r3, [pc, #44]	@ (800742c <global_stdio_init.part.0+0x30>)
 8007400:	4c0b      	ldr	r4, [pc, #44]	@ (8007430 <global_stdio_init.part.0+0x34>)
 8007402:	4a0c      	ldr	r2, [pc, #48]	@ (8007434 <global_stdio_init.part.0+0x38>)
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	4620      	mov	r0, r4
 8007408:	2200      	movs	r2, #0
 800740a:	2104      	movs	r1, #4
 800740c:	f7ff ff94 	bl	8007338 <std>
 8007410:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007414:	2201      	movs	r2, #1
 8007416:	2109      	movs	r1, #9
 8007418:	f7ff ff8e 	bl	8007338 <std>
 800741c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007420:	2202      	movs	r2, #2
 8007422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007426:	2112      	movs	r1, #18
 8007428:	f7ff bf86 	b.w	8007338 <std>
 800742c:	200009d8 	.word	0x200009d8
 8007430:	200008a0 	.word	0x200008a0
 8007434:	080073a5 	.word	0x080073a5

08007438 <__sfp_lock_acquire>:
 8007438:	4801      	ldr	r0, [pc, #4]	@ (8007440 <__sfp_lock_acquire+0x8>)
 800743a:	f000 b936 	b.w	80076aa <__retarget_lock_acquire_recursive>
 800743e:	bf00      	nop
 8007440:	200009e1 	.word	0x200009e1

08007444 <__sfp_lock_release>:
 8007444:	4801      	ldr	r0, [pc, #4]	@ (800744c <__sfp_lock_release+0x8>)
 8007446:	f000 b931 	b.w	80076ac <__retarget_lock_release_recursive>
 800744a:	bf00      	nop
 800744c:	200009e1 	.word	0x200009e1

08007450 <__sinit>:
 8007450:	b510      	push	{r4, lr}
 8007452:	4604      	mov	r4, r0
 8007454:	f7ff fff0 	bl	8007438 <__sfp_lock_acquire>
 8007458:	6a23      	ldr	r3, [r4, #32]
 800745a:	b11b      	cbz	r3, 8007464 <__sinit+0x14>
 800745c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007460:	f7ff bff0 	b.w	8007444 <__sfp_lock_release>
 8007464:	4b04      	ldr	r3, [pc, #16]	@ (8007478 <__sinit+0x28>)
 8007466:	6223      	str	r3, [r4, #32]
 8007468:	4b04      	ldr	r3, [pc, #16]	@ (800747c <__sinit+0x2c>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1f5      	bne.n	800745c <__sinit+0xc>
 8007470:	f7ff ffc4 	bl	80073fc <global_stdio_init.part.0>
 8007474:	e7f2      	b.n	800745c <__sinit+0xc>
 8007476:	bf00      	nop
 8007478:	080073bd 	.word	0x080073bd
 800747c:	200009d8 	.word	0x200009d8

08007480 <_fwalk_sglue>:
 8007480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007484:	4607      	mov	r7, r0
 8007486:	4688      	mov	r8, r1
 8007488:	4614      	mov	r4, r2
 800748a:	2600      	movs	r6, #0
 800748c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007490:	f1b9 0901 	subs.w	r9, r9, #1
 8007494:	d505      	bpl.n	80074a2 <_fwalk_sglue+0x22>
 8007496:	6824      	ldr	r4, [r4, #0]
 8007498:	2c00      	cmp	r4, #0
 800749a:	d1f7      	bne.n	800748c <_fwalk_sglue+0xc>
 800749c:	4630      	mov	r0, r6
 800749e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074a2:	89ab      	ldrh	r3, [r5, #12]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d907      	bls.n	80074b8 <_fwalk_sglue+0x38>
 80074a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074ac:	3301      	adds	r3, #1
 80074ae:	d003      	beq.n	80074b8 <_fwalk_sglue+0x38>
 80074b0:	4629      	mov	r1, r5
 80074b2:	4638      	mov	r0, r7
 80074b4:	47c0      	blx	r8
 80074b6:	4306      	orrs	r6, r0
 80074b8:	3568      	adds	r5, #104	@ 0x68
 80074ba:	e7e9      	b.n	8007490 <_fwalk_sglue+0x10>

080074bc <sniprintf>:
 80074bc:	b40c      	push	{r2, r3}
 80074be:	b530      	push	{r4, r5, lr}
 80074c0:	4b18      	ldr	r3, [pc, #96]	@ (8007524 <sniprintf+0x68>)
 80074c2:	1e0c      	subs	r4, r1, #0
 80074c4:	681d      	ldr	r5, [r3, #0]
 80074c6:	b09d      	sub	sp, #116	@ 0x74
 80074c8:	da08      	bge.n	80074dc <sniprintf+0x20>
 80074ca:	238b      	movs	r3, #139	@ 0x8b
 80074cc:	602b      	str	r3, [r5, #0]
 80074ce:	f04f 30ff 	mov.w	r0, #4294967295
 80074d2:	b01d      	add	sp, #116	@ 0x74
 80074d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074d8:	b002      	add	sp, #8
 80074da:	4770      	bx	lr
 80074dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80074e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80074e4:	f04f 0300 	mov.w	r3, #0
 80074e8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80074ea:	bf14      	ite	ne
 80074ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 80074f0:	4623      	moveq	r3, r4
 80074f2:	9304      	str	r3, [sp, #16]
 80074f4:	9307      	str	r3, [sp, #28]
 80074f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80074fa:	9002      	str	r0, [sp, #8]
 80074fc:	9006      	str	r0, [sp, #24]
 80074fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007502:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007504:	ab21      	add	r3, sp, #132	@ 0x84
 8007506:	a902      	add	r1, sp, #8
 8007508:	4628      	mov	r0, r5
 800750a:	9301      	str	r3, [sp, #4]
 800750c:	f001 fbfe 	bl	8008d0c <_svfiprintf_r>
 8007510:	1c43      	adds	r3, r0, #1
 8007512:	bfbc      	itt	lt
 8007514:	238b      	movlt	r3, #139	@ 0x8b
 8007516:	602b      	strlt	r3, [r5, #0]
 8007518:	2c00      	cmp	r4, #0
 800751a:	d0da      	beq.n	80074d2 <sniprintf+0x16>
 800751c:	9b02      	ldr	r3, [sp, #8]
 800751e:	2200      	movs	r2, #0
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	e7d6      	b.n	80074d2 <sniprintf+0x16>
 8007524:	20000330 	.word	0x20000330

08007528 <__sread>:
 8007528:	b510      	push	{r4, lr}
 800752a:	460c      	mov	r4, r1
 800752c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007530:	f000 f86c 	bl	800760c <_read_r>
 8007534:	2800      	cmp	r0, #0
 8007536:	bfab      	itete	ge
 8007538:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800753a:	89a3      	ldrhlt	r3, [r4, #12]
 800753c:	181b      	addge	r3, r3, r0
 800753e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007542:	bfac      	ite	ge
 8007544:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007546:	81a3      	strhlt	r3, [r4, #12]
 8007548:	bd10      	pop	{r4, pc}

0800754a <__swrite>:
 800754a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800754e:	461f      	mov	r7, r3
 8007550:	898b      	ldrh	r3, [r1, #12]
 8007552:	05db      	lsls	r3, r3, #23
 8007554:	4605      	mov	r5, r0
 8007556:	460c      	mov	r4, r1
 8007558:	4616      	mov	r6, r2
 800755a:	d505      	bpl.n	8007568 <__swrite+0x1e>
 800755c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007560:	2302      	movs	r3, #2
 8007562:	2200      	movs	r2, #0
 8007564:	f000 f840 	bl	80075e8 <_lseek_r>
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800756e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007572:	81a3      	strh	r3, [r4, #12]
 8007574:	4632      	mov	r2, r6
 8007576:	463b      	mov	r3, r7
 8007578:	4628      	mov	r0, r5
 800757a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800757e:	f000 b857 	b.w	8007630 <_write_r>

08007582 <__sseek>:
 8007582:	b510      	push	{r4, lr}
 8007584:	460c      	mov	r4, r1
 8007586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800758a:	f000 f82d 	bl	80075e8 <_lseek_r>
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	89a3      	ldrh	r3, [r4, #12]
 8007592:	bf15      	itete	ne
 8007594:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007596:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800759a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800759e:	81a3      	strheq	r3, [r4, #12]
 80075a0:	bf18      	it	ne
 80075a2:	81a3      	strhne	r3, [r4, #12]
 80075a4:	bd10      	pop	{r4, pc}

080075a6 <__sclose>:
 80075a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075aa:	f000 b80d 	b.w	80075c8 <_close_r>

080075ae <memset>:
 80075ae:	4402      	add	r2, r0
 80075b0:	4603      	mov	r3, r0
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d100      	bne.n	80075b8 <memset+0xa>
 80075b6:	4770      	bx	lr
 80075b8:	f803 1b01 	strb.w	r1, [r3], #1
 80075bc:	e7f9      	b.n	80075b2 <memset+0x4>
	...

080075c0 <_localeconv_r>:
 80075c0:	4800      	ldr	r0, [pc, #0]	@ (80075c4 <_localeconv_r+0x4>)
 80075c2:	4770      	bx	lr
 80075c4:	20000470 	.word	0x20000470

080075c8 <_close_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4d06      	ldr	r5, [pc, #24]	@ (80075e4 <_close_r+0x1c>)
 80075cc:	2300      	movs	r3, #0
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	f7fb ff36 	bl	8003444 <_close>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d102      	bne.n	80075e2 <_close_r+0x1a>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	b103      	cbz	r3, 80075e2 <_close_r+0x1a>
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	200009dc 	.word	0x200009dc

080075e8 <_lseek_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4d07      	ldr	r5, [pc, #28]	@ (8007608 <_lseek_r+0x20>)
 80075ec:	4604      	mov	r4, r0
 80075ee:	4608      	mov	r0, r1
 80075f0:	4611      	mov	r1, r2
 80075f2:	2200      	movs	r2, #0
 80075f4:	602a      	str	r2, [r5, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	f7fb ff4b 	bl	8003492 <_lseek>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d102      	bne.n	8007606 <_lseek_r+0x1e>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	b103      	cbz	r3, 8007606 <_lseek_r+0x1e>
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	200009dc 	.word	0x200009dc

0800760c <_read_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d07      	ldr	r5, [pc, #28]	@ (800762c <_read_r+0x20>)
 8007610:	4604      	mov	r4, r0
 8007612:	4608      	mov	r0, r1
 8007614:	4611      	mov	r1, r2
 8007616:	2200      	movs	r2, #0
 8007618:	602a      	str	r2, [r5, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	f7fb fed9 	bl	80033d2 <_read>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d102      	bne.n	800762a <_read_r+0x1e>
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	b103      	cbz	r3, 800762a <_read_r+0x1e>
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	200009dc 	.word	0x200009dc

08007630 <_write_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d07      	ldr	r5, [pc, #28]	@ (8007650 <_write_r+0x20>)
 8007634:	4604      	mov	r4, r0
 8007636:	4608      	mov	r0, r1
 8007638:	4611      	mov	r1, r2
 800763a:	2200      	movs	r2, #0
 800763c:	602a      	str	r2, [r5, #0]
 800763e:	461a      	mov	r2, r3
 8007640:	f7fb fee4 	bl	800340c <_write>
 8007644:	1c43      	adds	r3, r0, #1
 8007646:	d102      	bne.n	800764e <_write_r+0x1e>
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	b103      	cbz	r3, 800764e <_write_r+0x1e>
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	bd38      	pop	{r3, r4, r5, pc}
 8007650:	200009dc 	.word	0x200009dc

08007654 <__errno>:
 8007654:	4b01      	ldr	r3, [pc, #4]	@ (800765c <__errno+0x8>)
 8007656:	6818      	ldr	r0, [r3, #0]
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	20000330 	.word	0x20000330

08007660 <__libc_init_array>:
 8007660:	b570      	push	{r4, r5, r6, lr}
 8007662:	4d0d      	ldr	r5, [pc, #52]	@ (8007698 <__libc_init_array+0x38>)
 8007664:	4c0d      	ldr	r4, [pc, #52]	@ (800769c <__libc_init_array+0x3c>)
 8007666:	1b64      	subs	r4, r4, r5
 8007668:	10a4      	asrs	r4, r4, #2
 800766a:	2600      	movs	r6, #0
 800766c:	42a6      	cmp	r6, r4
 800766e:	d109      	bne.n	8007684 <__libc_init_array+0x24>
 8007670:	4d0b      	ldr	r5, [pc, #44]	@ (80076a0 <__libc_init_array+0x40>)
 8007672:	4c0c      	ldr	r4, [pc, #48]	@ (80076a4 <__libc_init_array+0x44>)
 8007674:	f005 fb1c 	bl	800ccb0 <_init>
 8007678:	1b64      	subs	r4, r4, r5
 800767a:	10a4      	asrs	r4, r4, #2
 800767c:	2600      	movs	r6, #0
 800767e:	42a6      	cmp	r6, r4
 8007680:	d105      	bne.n	800768e <__libc_init_array+0x2e>
 8007682:	bd70      	pop	{r4, r5, r6, pc}
 8007684:	f855 3b04 	ldr.w	r3, [r5], #4
 8007688:	4798      	blx	r3
 800768a:	3601      	adds	r6, #1
 800768c:	e7ee      	b.n	800766c <__libc_init_array+0xc>
 800768e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007692:	4798      	blx	r3
 8007694:	3601      	adds	r6, #1
 8007696:	e7f2      	b.n	800767e <__libc_init_array+0x1e>
 8007698:	0800d6e8 	.word	0x0800d6e8
 800769c:	0800d6e8 	.word	0x0800d6e8
 80076a0:	0800d6e8 	.word	0x0800d6e8
 80076a4:	0800d6ec 	.word	0x0800d6ec

080076a8 <__retarget_lock_init_recursive>:
 80076a8:	4770      	bx	lr

080076aa <__retarget_lock_acquire_recursive>:
 80076aa:	4770      	bx	lr

080076ac <__retarget_lock_release_recursive>:
 80076ac:	4770      	bx	lr

080076ae <quorem>:
 80076ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b2:	6903      	ldr	r3, [r0, #16]
 80076b4:	690c      	ldr	r4, [r1, #16]
 80076b6:	42a3      	cmp	r3, r4
 80076b8:	4607      	mov	r7, r0
 80076ba:	db7e      	blt.n	80077ba <quorem+0x10c>
 80076bc:	3c01      	subs	r4, #1
 80076be:	f101 0814 	add.w	r8, r1, #20
 80076c2:	00a3      	lsls	r3, r4, #2
 80076c4:	f100 0514 	add.w	r5, r0, #20
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ce:	9301      	str	r3, [sp, #4]
 80076d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076d8:	3301      	adds	r3, #1
 80076da:	429a      	cmp	r2, r3
 80076dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80076e4:	d32e      	bcc.n	8007744 <quorem+0x96>
 80076e6:	f04f 0a00 	mov.w	sl, #0
 80076ea:	46c4      	mov	ip, r8
 80076ec:	46ae      	mov	lr, r5
 80076ee:	46d3      	mov	fp, sl
 80076f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80076f4:	b298      	uxth	r0, r3
 80076f6:	fb06 a000 	mla	r0, r6, r0, sl
 80076fa:	0c02      	lsrs	r2, r0, #16
 80076fc:	0c1b      	lsrs	r3, r3, #16
 80076fe:	fb06 2303 	mla	r3, r6, r3, r2
 8007702:	f8de 2000 	ldr.w	r2, [lr]
 8007706:	b280      	uxth	r0, r0
 8007708:	b292      	uxth	r2, r2
 800770a:	1a12      	subs	r2, r2, r0
 800770c:	445a      	add	r2, fp
 800770e:	f8de 0000 	ldr.w	r0, [lr]
 8007712:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007716:	b29b      	uxth	r3, r3
 8007718:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800771c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007720:	b292      	uxth	r2, r2
 8007722:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007726:	45e1      	cmp	r9, ip
 8007728:	f84e 2b04 	str.w	r2, [lr], #4
 800772c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007730:	d2de      	bcs.n	80076f0 <quorem+0x42>
 8007732:	9b00      	ldr	r3, [sp, #0]
 8007734:	58eb      	ldr	r3, [r5, r3]
 8007736:	b92b      	cbnz	r3, 8007744 <quorem+0x96>
 8007738:	9b01      	ldr	r3, [sp, #4]
 800773a:	3b04      	subs	r3, #4
 800773c:	429d      	cmp	r5, r3
 800773e:	461a      	mov	r2, r3
 8007740:	d32f      	bcc.n	80077a2 <quorem+0xf4>
 8007742:	613c      	str	r4, [r7, #16]
 8007744:	4638      	mov	r0, r7
 8007746:	f001 f97d 	bl	8008a44 <__mcmp>
 800774a:	2800      	cmp	r0, #0
 800774c:	db25      	blt.n	800779a <quorem+0xec>
 800774e:	4629      	mov	r1, r5
 8007750:	2000      	movs	r0, #0
 8007752:	f858 2b04 	ldr.w	r2, [r8], #4
 8007756:	f8d1 c000 	ldr.w	ip, [r1]
 800775a:	fa1f fe82 	uxth.w	lr, r2
 800775e:	fa1f f38c 	uxth.w	r3, ip
 8007762:	eba3 030e 	sub.w	r3, r3, lr
 8007766:	4403      	add	r3, r0
 8007768:	0c12      	lsrs	r2, r2, #16
 800776a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800776e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007772:	b29b      	uxth	r3, r3
 8007774:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007778:	45c1      	cmp	r9, r8
 800777a:	f841 3b04 	str.w	r3, [r1], #4
 800777e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007782:	d2e6      	bcs.n	8007752 <quorem+0xa4>
 8007784:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007788:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800778c:	b922      	cbnz	r2, 8007798 <quorem+0xea>
 800778e:	3b04      	subs	r3, #4
 8007790:	429d      	cmp	r5, r3
 8007792:	461a      	mov	r2, r3
 8007794:	d30b      	bcc.n	80077ae <quorem+0x100>
 8007796:	613c      	str	r4, [r7, #16]
 8007798:	3601      	adds	r6, #1
 800779a:	4630      	mov	r0, r6
 800779c:	b003      	add	sp, #12
 800779e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a2:	6812      	ldr	r2, [r2, #0]
 80077a4:	3b04      	subs	r3, #4
 80077a6:	2a00      	cmp	r2, #0
 80077a8:	d1cb      	bne.n	8007742 <quorem+0x94>
 80077aa:	3c01      	subs	r4, #1
 80077ac:	e7c6      	b.n	800773c <quorem+0x8e>
 80077ae:	6812      	ldr	r2, [r2, #0]
 80077b0:	3b04      	subs	r3, #4
 80077b2:	2a00      	cmp	r2, #0
 80077b4:	d1ef      	bne.n	8007796 <quorem+0xe8>
 80077b6:	3c01      	subs	r4, #1
 80077b8:	e7ea      	b.n	8007790 <quorem+0xe2>
 80077ba:	2000      	movs	r0, #0
 80077bc:	e7ee      	b.n	800779c <quorem+0xee>
	...

080077c0 <_dtoa_r>:
 80077c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c4:	69c7      	ldr	r7, [r0, #28]
 80077c6:	b097      	sub	sp, #92	@ 0x5c
 80077c8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80077cc:	ec55 4b10 	vmov	r4, r5, d0
 80077d0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80077d2:	9107      	str	r1, [sp, #28]
 80077d4:	4681      	mov	r9, r0
 80077d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80077d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80077da:	b97f      	cbnz	r7, 80077fc <_dtoa_r+0x3c>
 80077dc:	2010      	movs	r0, #16
 80077de:	f000 fe09 	bl	80083f4 <malloc>
 80077e2:	4602      	mov	r2, r0
 80077e4:	f8c9 001c 	str.w	r0, [r9, #28]
 80077e8:	b920      	cbnz	r0, 80077f4 <_dtoa_r+0x34>
 80077ea:	4ba9      	ldr	r3, [pc, #676]	@ (8007a90 <_dtoa_r+0x2d0>)
 80077ec:	21ef      	movs	r1, #239	@ 0xef
 80077ee:	48a9      	ldr	r0, [pc, #676]	@ (8007a94 <_dtoa_r+0x2d4>)
 80077f0:	f001 fc6c 	bl	80090cc <__assert_func>
 80077f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80077f8:	6007      	str	r7, [r0, #0]
 80077fa:	60c7      	str	r7, [r0, #12]
 80077fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007800:	6819      	ldr	r1, [r3, #0]
 8007802:	b159      	cbz	r1, 800781c <_dtoa_r+0x5c>
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	604a      	str	r2, [r1, #4]
 8007808:	2301      	movs	r3, #1
 800780a:	4093      	lsls	r3, r2
 800780c:	608b      	str	r3, [r1, #8]
 800780e:	4648      	mov	r0, r9
 8007810:	f000 fee6 	bl	80085e0 <_Bfree>
 8007814:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007818:	2200      	movs	r2, #0
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	1e2b      	subs	r3, r5, #0
 800781e:	bfb9      	ittee	lt
 8007820:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007824:	9305      	strlt	r3, [sp, #20]
 8007826:	2300      	movge	r3, #0
 8007828:	6033      	strge	r3, [r6, #0]
 800782a:	9f05      	ldr	r7, [sp, #20]
 800782c:	4b9a      	ldr	r3, [pc, #616]	@ (8007a98 <_dtoa_r+0x2d8>)
 800782e:	bfbc      	itt	lt
 8007830:	2201      	movlt	r2, #1
 8007832:	6032      	strlt	r2, [r6, #0]
 8007834:	43bb      	bics	r3, r7
 8007836:	d112      	bne.n	800785e <_dtoa_r+0x9e>
 8007838:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800783a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007844:	4323      	orrs	r3, r4
 8007846:	f000 855a 	beq.w	80082fe <_dtoa_r+0xb3e>
 800784a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800784c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007aac <_dtoa_r+0x2ec>
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 855c 	beq.w	800830e <_dtoa_r+0xb4e>
 8007856:	f10a 0303 	add.w	r3, sl, #3
 800785a:	f000 bd56 	b.w	800830a <_dtoa_r+0xb4a>
 800785e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007862:	2200      	movs	r2, #0
 8007864:	ec51 0b17 	vmov	r0, r1, d7
 8007868:	2300      	movs	r3, #0
 800786a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800786e:	f7f9 f94b 	bl	8000b08 <__aeabi_dcmpeq>
 8007872:	4680      	mov	r8, r0
 8007874:	b158      	cbz	r0, 800788e <_dtoa_r+0xce>
 8007876:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007878:	2301      	movs	r3, #1
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800787e:	b113      	cbz	r3, 8007886 <_dtoa_r+0xc6>
 8007880:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007882:	4b86      	ldr	r3, [pc, #536]	@ (8007a9c <_dtoa_r+0x2dc>)
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007ab0 <_dtoa_r+0x2f0>
 800788a:	f000 bd40 	b.w	800830e <_dtoa_r+0xb4e>
 800788e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007892:	aa14      	add	r2, sp, #80	@ 0x50
 8007894:	a915      	add	r1, sp, #84	@ 0x54
 8007896:	4648      	mov	r0, r9
 8007898:	f001 f984 	bl	8008ba4 <__d2b>
 800789c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80078a0:	9002      	str	r0, [sp, #8]
 80078a2:	2e00      	cmp	r6, #0
 80078a4:	d078      	beq.n	8007998 <_dtoa_r+0x1d8>
 80078a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078a8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80078ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80078b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80078b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80078bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80078c0:	4619      	mov	r1, r3
 80078c2:	2200      	movs	r2, #0
 80078c4:	4b76      	ldr	r3, [pc, #472]	@ (8007aa0 <_dtoa_r+0x2e0>)
 80078c6:	f7f8 fcff 	bl	80002c8 <__aeabi_dsub>
 80078ca:	a36b      	add	r3, pc, #428	@ (adr r3, 8007a78 <_dtoa_r+0x2b8>)
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	f7f8 feb2 	bl	8000638 <__aeabi_dmul>
 80078d4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007a80 <_dtoa_r+0x2c0>)
 80078d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078da:	f7f8 fcf7 	bl	80002cc <__adddf3>
 80078de:	4604      	mov	r4, r0
 80078e0:	4630      	mov	r0, r6
 80078e2:	460d      	mov	r5, r1
 80078e4:	f7f8 fe3e 	bl	8000564 <__aeabi_i2d>
 80078e8:	a367      	add	r3, pc, #412	@ (adr r3, 8007a88 <_dtoa_r+0x2c8>)
 80078ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ee:	f7f8 fea3 	bl	8000638 <__aeabi_dmul>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	4620      	mov	r0, r4
 80078f8:	4629      	mov	r1, r5
 80078fa:	f7f8 fce7 	bl	80002cc <__adddf3>
 80078fe:	4604      	mov	r4, r0
 8007900:	460d      	mov	r5, r1
 8007902:	f7f9 f949 	bl	8000b98 <__aeabi_d2iz>
 8007906:	2200      	movs	r2, #0
 8007908:	4607      	mov	r7, r0
 800790a:	2300      	movs	r3, #0
 800790c:	4620      	mov	r0, r4
 800790e:	4629      	mov	r1, r5
 8007910:	f7f9 f904 	bl	8000b1c <__aeabi_dcmplt>
 8007914:	b140      	cbz	r0, 8007928 <_dtoa_r+0x168>
 8007916:	4638      	mov	r0, r7
 8007918:	f7f8 fe24 	bl	8000564 <__aeabi_i2d>
 800791c:	4622      	mov	r2, r4
 800791e:	462b      	mov	r3, r5
 8007920:	f7f9 f8f2 	bl	8000b08 <__aeabi_dcmpeq>
 8007924:	b900      	cbnz	r0, 8007928 <_dtoa_r+0x168>
 8007926:	3f01      	subs	r7, #1
 8007928:	2f16      	cmp	r7, #22
 800792a:	d852      	bhi.n	80079d2 <_dtoa_r+0x212>
 800792c:	4b5d      	ldr	r3, [pc, #372]	@ (8007aa4 <_dtoa_r+0x2e4>)
 800792e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800793a:	f7f9 f8ef 	bl	8000b1c <__aeabi_dcmplt>
 800793e:	2800      	cmp	r0, #0
 8007940:	d049      	beq.n	80079d6 <_dtoa_r+0x216>
 8007942:	3f01      	subs	r7, #1
 8007944:	2300      	movs	r3, #0
 8007946:	9310      	str	r3, [sp, #64]	@ 0x40
 8007948:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800794a:	1b9b      	subs	r3, r3, r6
 800794c:	1e5a      	subs	r2, r3, #1
 800794e:	bf45      	ittet	mi
 8007950:	f1c3 0301 	rsbmi	r3, r3, #1
 8007954:	9300      	strmi	r3, [sp, #0]
 8007956:	2300      	movpl	r3, #0
 8007958:	2300      	movmi	r3, #0
 800795a:	9206      	str	r2, [sp, #24]
 800795c:	bf54      	ite	pl
 800795e:	9300      	strpl	r3, [sp, #0]
 8007960:	9306      	strmi	r3, [sp, #24]
 8007962:	2f00      	cmp	r7, #0
 8007964:	db39      	blt.n	80079da <_dtoa_r+0x21a>
 8007966:	9b06      	ldr	r3, [sp, #24]
 8007968:	970d      	str	r7, [sp, #52]	@ 0x34
 800796a:	443b      	add	r3, r7
 800796c:	9306      	str	r3, [sp, #24]
 800796e:	2300      	movs	r3, #0
 8007970:	9308      	str	r3, [sp, #32]
 8007972:	9b07      	ldr	r3, [sp, #28]
 8007974:	2b09      	cmp	r3, #9
 8007976:	d863      	bhi.n	8007a40 <_dtoa_r+0x280>
 8007978:	2b05      	cmp	r3, #5
 800797a:	bfc4      	itt	gt
 800797c:	3b04      	subgt	r3, #4
 800797e:	9307      	strgt	r3, [sp, #28]
 8007980:	9b07      	ldr	r3, [sp, #28]
 8007982:	f1a3 0302 	sub.w	r3, r3, #2
 8007986:	bfcc      	ite	gt
 8007988:	2400      	movgt	r4, #0
 800798a:	2401      	movle	r4, #1
 800798c:	2b03      	cmp	r3, #3
 800798e:	d863      	bhi.n	8007a58 <_dtoa_r+0x298>
 8007990:	e8df f003 	tbb	[pc, r3]
 8007994:	2b375452 	.word	0x2b375452
 8007998:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800799c:	441e      	add	r6, r3
 800799e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80079a2:	2b20      	cmp	r3, #32
 80079a4:	bfc1      	itttt	gt
 80079a6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80079aa:	409f      	lslgt	r7, r3
 80079ac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80079b0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80079b4:	bfd6      	itet	le
 80079b6:	f1c3 0320 	rsble	r3, r3, #32
 80079ba:	ea47 0003 	orrgt.w	r0, r7, r3
 80079be:	fa04 f003 	lslle.w	r0, r4, r3
 80079c2:	f7f8 fdbf 	bl	8000544 <__aeabi_ui2d>
 80079c6:	2201      	movs	r2, #1
 80079c8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80079cc:	3e01      	subs	r6, #1
 80079ce:	9212      	str	r2, [sp, #72]	@ 0x48
 80079d0:	e776      	b.n	80078c0 <_dtoa_r+0x100>
 80079d2:	2301      	movs	r3, #1
 80079d4:	e7b7      	b.n	8007946 <_dtoa_r+0x186>
 80079d6:	9010      	str	r0, [sp, #64]	@ 0x40
 80079d8:	e7b6      	b.n	8007948 <_dtoa_r+0x188>
 80079da:	9b00      	ldr	r3, [sp, #0]
 80079dc:	1bdb      	subs	r3, r3, r7
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	427b      	negs	r3, r7
 80079e2:	9308      	str	r3, [sp, #32]
 80079e4:	2300      	movs	r3, #0
 80079e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80079e8:	e7c3      	b.n	8007972 <_dtoa_r+0x1b2>
 80079ea:	2301      	movs	r3, #1
 80079ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80079f0:	eb07 0b03 	add.w	fp, r7, r3
 80079f4:	f10b 0301 	add.w	r3, fp, #1
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	9303      	str	r3, [sp, #12]
 80079fc:	bfb8      	it	lt
 80079fe:	2301      	movlt	r3, #1
 8007a00:	e006      	b.n	8007a10 <_dtoa_r+0x250>
 8007a02:	2301      	movs	r3, #1
 8007a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	dd28      	ble.n	8007a5e <_dtoa_r+0x29e>
 8007a0c:	469b      	mov	fp, r3
 8007a0e:	9303      	str	r3, [sp, #12]
 8007a10:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007a14:	2100      	movs	r1, #0
 8007a16:	2204      	movs	r2, #4
 8007a18:	f102 0514 	add.w	r5, r2, #20
 8007a1c:	429d      	cmp	r5, r3
 8007a1e:	d926      	bls.n	8007a6e <_dtoa_r+0x2ae>
 8007a20:	6041      	str	r1, [r0, #4]
 8007a22:	4648      	mov	r0, r9
 8007a24:	f000 fd9c 	bl	8008560 <_Balloc>
 8007a28:	4682      	mov	sl, r0
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	d142      	bne.n	8007ab4 <_dtoa_r+0x2f4>
 8007a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007aa8 <_dtoa_r+0x2e8>)
 8007a30:	4602      	mov	r2, r0
 8007a32:	f240 11af 	movw	r1, #431	@ 0x1af
 8007a36:	e6da      	b.n	80077ee <_dtoa_r+0x2e>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	e7e3      	b.n	8007a04 <_dtoa_r+0x244>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	e7d5      	b.n	80079ec <_dtoa_r+0x22c>
 8007a40:	2401      	movs	r4, #1
 8007a42:	2300      	movs	r3, #0
 8007a44:	9307      	str	r3, [sp, #28]
 8007a46:	9409      	str	r4, [sp, #36]	@ 0x24
 8007a48:	f04f 3bff 	mov.w	fp, #4294967295
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007a52:	2312      	movs	r3, #18
 8007a54:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a56:	e7db      	b.n	8007a10 <_dtoa_r+0x250>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a5c:	e7f4      	b.n	8007a48 <_dtoa_r+0x288>
 8007a5e:	f04f 0b01 	mov.w	fp, #1
 8007a62:	f8cd b00c 	str.w	fp, [sp, #12]
 8007a66:	465b      	mov	r3, fp
 8007a68:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007a6c:	e7d0      	b.n	8007a10 <_dtoa_r+0x250>
 8007a6e:	3101      	adds	r1, #1
 8007a70:	0052      	lsls	r2, r2, #1
 8007a72:	e7d1      	b.n	8007a18 <_dtoa_r+0x258>
 8007a74:	f3af 8000 	nop.w
 8007a78:	636f4361 	.word	0x636f4361
 8007a7c:	3fd287a7 	.word	0x3fd287a7
 8007a80:	8b60c8b3 	.word	0x8b60c8b3
 8007a84:	3fc68a28 	.word	0x3fc68a28
 8007a88:	509f79fb 	.word	0x509f79fb
 8007a8c:	3fd34413 	.word	0x3fd34413
 8007a90:	0800cd35 	.word	0x0800cd35
 8007a94:	0800cd4c 	.word	0x0800cd4c
 8007a98:	7ff00000 	.word	0x7ff00000
 8007a9c:	0800cd05 	.word	0x0800cd05
 8007aa0:	3ff80000 	.word	0x3ff80000
 8007aa4:	0800cea0 	.word	0x0800cea0
 8007aa8:	0800cda4 	.word	0x0800cda4
 8007aac:	0800cd31 	.word	0x0800cd31
 8007ab0:	0800cd04 	.word	0x0800cd04
 8007ab4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ab8:	6018      	str	r0, [r3, #0]
 8007aba:	9b03      	ldr	r3, [sp, #12]
 8007abc:	2b0e      	cmp	r3, #14
 8007abe:	f200 80a1 	bhi.w	8007c04 <_dtoa_r+0x444>
 8007ac2:	2c00      	cmp	r4, #0
 8007ac4:	f000 809e 	beq.w	8007c04 <_dtoa_r+0x444>
 8007ac8:	2f00      	cmp	r7, #0
 8007aca:	dd33      	ble.n	8007b34 <_dtoa_r+0x374>
 8007acc:	4b9c      	ldr	r3, [pc, #624]	@ (8007d40 <_dtoa_r+0x580>)
 8007ace:	f007 020f 	and.w	r2, r7, #15
 8007ad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ad6:	ed93 7b00 	vldr	d7, [r3]
 8007ada:	05f8      	lsls	r0, r7, #23
 8007adc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007ae0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007ae4:	d516      	bpl.n	8007b14 <_dtoa_r+0x354>
 8007ae6:	4b97      	ldr	r3, [pc, #604]	@ (8007d44 <_dtoa_r+0x584>)
 8007ae8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007aec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007af0:	f7f8 fecc 	bl	800088c <__aeabi_ddiv>
 8007af4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007af8:	f004 040f 	and.w	r4, r4, #15
 8007afc:	2603      	movs	r6, #3
 8007afe:	4d91      	ldr	r5, [pc, #580]	@ (8007d44 <_dtoa_r+0x584>)
 8007b00:	b954      	cbnz	r4, 8007b18 <_dtoa_r+0x358>
 8007b02:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007b06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b0a:	f7f8 febf 	bl	800088c <__aeabi_ddiv>
 8007b0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b12:	e028      	b.n	8007b66 <_dtoa_r+0x3a6>
 8007b14:	2602      	movs	r6, #2
 8007b16:	e7f2      	b.n	8007afe <_dtoa_r+0x33e>
 8007b18:	07e1      	lsls	r1, r4, #31
 8007b1a:	d508      	bpl.n	8007b2e <_dtoa_r+0x36e>
 8007b1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007b20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b24:	f7f8 fd88 	bl	8000638 <__aeabi_dmul>
 8007b28:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007b2c:	3601      	adds	r6, #1
 8007b2e:	1064      	asrs	r4, r4, #1
 8007b30:	3508      	adds	r5, #8
 8007b32:	e7e5      	b.n	8007b00 <_dtoa_r+0x340>
 8007b34:	f000 80af 	beq.w	8007c96 <_dtoa_r+0x4d6>
 8007b38:	427c      	negs	r4, r7
 8007b3a:	4b81      	ldr	r3, [pc, #516]	@ (8007d40 <_dtoa_r+0x580>)
 8007b3c:	4d81      	ldr	r5, [pc, #516]	@ (8007d44 <_dtoa_r+0x584>)
 8007b3e:	f004 020f 	and.w	r2, r4, #15
 8007b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b4e:	f7f8 fd73 	bl	8000638 <__aeabi_dmul>
 8007b52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b56:	1124      	asrs	r4, r4, #4
 8007b58:	2300      	movs	r3, #0
 8007b5a:	2602      	movs	r6, #2
 8007b5c:	2c00      	cmp	r4, #0
 8007b5e:	f040 808f 	bne.w	8007c80 <_dtoa_r+0x4c0>
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1d3      	bne.n	8007b0e <_dtoa_r+0x34e>
 8007b66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b68:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8094 	beq.w	8007c9a <_dtoa_r+0x4da>
 8007b72:	4b75      	ldr	r3, [pc, #468]	@ (8007d48 <_dtoa_r+0x588>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	4620      	mov	r0, r4
 8007b78:	4629      	mov	r1, r5
 8007b7a:	f7f8 ffcf 	bl	8000b1c <__aeabi_dcmplt>
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	f000 808b 	beq.w	8007c9a <_dtoa_r+0x4da>
 8007b84:	9b03      	ldr	r3, [sp, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 8087 	beq.w	8007c9a <_dtoa_r+0x4da>
 8007b8c:	f1bb 0f00 	cmp.w	fp, #0
 8007b90:	dd34      	ble.n	8007bfc <_dtoa_r+0x43c>
 8007b92:	4620      	mov	r0, r4
 8007b94:	4b6d      	ldr	r3, [pc, #436]	@ (8007d4c <_dtoa_r+0x58c>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	4629      	mov	r1, r5
 8007b9a:	f7f8 fd4d 	bl	8000638 <__aeabi_dmul>
 8007b9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ba2:	f107 38ff 	add.w	r8, r7, #4294967295
 8007ba6:	3601      	adds	r6, #1
 8007ba8:	465c      	mov	r4, fp
 8007baa:	4630      	mov	r0, r6
 8007bac:	f7f8 fcda 	bl	8000564 <__aeabi_i2d>
 8007bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bb4:	f7f8 fd40 	bl	8000638 <__aeabi_dmul>
 8007bb8:	4b65      	ldr	r3, [pc, #404]	@ (8007d50 <_dtoa_r+0x590>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f7f8 fb86 	bl	80002cc <__adddf3>
 8007bc0:	4605      	mov	r5, r0
 8007bc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007bc6:	2c00      	cmp	r4, #0
 8007bc8:	d16a      	bne.n	8007ca0 <_dtoa_r+0x4e0>
 8007bca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bce:	4b61      	ldr	r3, [pc, #388]	@ (8007d54 <_dtoa_r+0x594>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f7f8 fb79 	bl	80002c8 <__aeabi_dsub>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007bde:	462a      	mov	r2, r5
 8007be0:	4633      	mov	r3, r6
 8007be2:	f7f8 ffb9 	bl	8000b58 <__aeabi_dcmpgt>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	f040 8298 	bne.w	800811c <_dtoa_r+0x95c>
 8007bec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bf0:	462a      	mov	r2, r5
 8007bf2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007bf6:	f7f8 ff91 	bl	8000b1c <__aeabi_dcmplt>
 8007bfa:	bb38      	cbnz	r0, 8007c4c <_dtoa_r+0x48c>
 8007bfc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007c00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007c04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f2c0 8157 	blt.w	8007eba <_dtoa_r+0x6fa>
 8007c0c:	2f0e      	cmp	r7, #14
 8007c0e:	f300 8154 	bgt.w	8007eba <_dtoa_r+0x6fa>
 8007c12:	4b4b      	ldr	r3, [pc, #300]	@ (8007d40 <_dtoa_r+0x580>)
 8007c14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c18:	ed93 7b00 	vldr	d7, [r3]
 8007c1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	ed8d 7b00 	vstr	d7, [sp]
 8007c24:	f280 80e5 	bge.w	8007df2 <_dtoa_r+0x632>
 8007c28:	9b03      	ldr	r3, [sp, #12]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f300 80e1 	bgt.w	8007df2 <_dtoa_r+0x632>
 8007c30:	d10c      	bne.n	8007c4c <_dtoa_r+0x48c>
 8007c32:	4b48      	ldr	r3, [pc, #288]	@ (8007d54 <_dtoa_r+0x594>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	ec51 0b17 	vmov	r0, r1, d7
 8007c3a:	f7f8 fcfd 	bl	8000638 <__aeabi_dmul>
 8007c3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c42:	f7f8 ff7f 	bl	8000b44 <__aeabi_dcmpge>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	f000 8266 	beq.w	8008118 <_dtoa_r+0x958>
 8007c4c:	2400      	movs	r4, #0
 8007c4e:	4625      	mov	r5, r4
 8007c50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c52:	4656      	mov	r6, sl
 8007c54:	ea6f 0803 	mvn.w	r8, r3
 8007c58:	2700      	movs	r7, #0
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	4648      	mov	r0, r9
 8007c5e:	f000 fcbf 	bl	80085e0 <_Bfree>
 8007c62:	2d00      	cmp	r5, #0
 8007c64:	f000 80bd 	beq.w	8007de2 <_dtoa_r+0x622>
 8007c68:	b12f      	cbz	r7, 8007c76 <_dtoa_r+0x4b6>
 8007c6a:	42af      	cmp	r7, r5
 8007c6c:	d003      	beq.n	8007c76 <_dtoa_r+0x4b6>
 8007c6e:	4639      	mov	r1, r7
 8007c70:	4648      	mov	r0, r9
 8007c72:	f000 fcb5 	bl	80085e0 <_Bfree>
 8007c76:	4629      	mov	r1, r5
 8007c78:	4648      	mov	r0, r9
 8007c7a:	f000 fcb1 	bl	80085e0 <_Bfree>
 8007c7e:	e0b0      	b.n	8007de2 <_dtoa_r+0x622>
 8007c80:	07e2      	lsls	r2, r4, #31
 8007c82:	d505      	bpl.n	8007c90 <_dtoa_r+0x4d0>
 8007c84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c88:	f7f8 fcd6 	bl	8000638 <__aeabi_dmul>
 8007c8c:	3601      	adds	r6, #1
 8007c8e:	2301      	movs	r3, #1
 8007c90:	1064      	asrs	r4, r4, #1
 8007c92:	3508      	adds	r5, #8
 8007c94:	e762      	b.n	8007b5c <_dtoa_r+0x39c>
 8007c96:	2602      	movs	r6, #2
 8007c98:	e765      	b.n	8007b66 <_dtoa_r+0x3a6>
 8007c9a:	9c03      	ldr	r4, [sp, #12]
 8007c9c:	46b8      	mov	r8, r7
 8007c9e:	e784      	b.n	8007baa <_dtoa_r+0x3ea>
 8007ca0:	4b27      	ldr	r3, [pc, #156]	@ (8007d40 <_dtoa_r+0x580>)
 8007ca2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ca4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ca8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cac:	4454      	add	r4, sl
 8007cae:	2900      	cmp	r1, #0
 8007cb0:	d054      	beq.n	8007d5c <_dtoa_r+0x59c>
 8007cb2:	4929      	ldr	r1, [pc, #164]	@ (8007d58 <_dtoa_r+0x598>)
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	f7f8 fde9 	bl	800088c <__aeabi_ddiv>
 8007cba:	4633      	mov	r3, r6
 8007cbc:	462a      	mov	r2, r5
 8007cbe:	f7f8 fb03 	bl	80002c8 <__aeabi_dsub>
 8007cc2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007cc6:	4656      	mov	r6, sl
 8007cc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ccc:	f7f8 ff64 	bl	8000b98 <__aeabi_d2iz>
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	f7f8 fc47 	bl	8000564 <__aeabi_i2d>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cde:	f7f8 faf3 	bl	80002c8 <__aeabi_dsub>
 8007ce2:	3530      	adds	r5, #48	@ 0x30
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007cec:	f806 5b01 	strb.w	r5, [r6], #1
 8007cf0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007cf4:	f7f8 ff12 	bl	8000b1c <__aeabi_dcmplt>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d172      	bne.n	8007de2 <_dtoa_r+0x622>
 8007cfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d00:	4911      	ldr	r1, [pc, #68]	@ (8007d48 <_dtoa_r+0x588>)
 8007d02:	2000      	movs	r0, #0
 8007d04:	f7f8 fae0 	bl	80002c8 <__aeabi_dsub>
 8007d08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d0c:	f7f8 ff06 	bl	8000b1c <__aeabi_dcmplt>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	f040 80b4 	bne.w	8007e7e <_dtoa_r+0x6be>
 8007d16:	42a6      	cmp	r6, r4
 8007d18:	f43f af70 	beq.w	8007bfc <_dtoa_r+0x43c>
 8007d1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007d20:	4b0a      	ldr	r3, [pc, #40]	@ (8007d4c <_dtoa_r+0x58c>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	f7f8 fc88 	bl	8000638 <__aeabi_dmul>
 8007d28:	4b08      	ldr	r3, [pc, #32]	@ (8007d4c <_dtoa_r+0x58c>)
 8007d2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d2e:	2200      	movs	r2, #0
 8007d30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d34:	f7f8 fc80 	bl	8000638 <__aeabi_dmul>
 8007d38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d3c:	e7c4      	b.n	8007cc8 <_dtoa_r+0x508>
 8007d3e:	bf00      	nop
 8007d40:	0800cea0 	.word	0x0800cea0
 8007d44:	0800ce78 	.word	0x0800ce78
 8007d48:	3ff00000 	.word	0x3ff00000
 8007d4c:	40240000 	.word	0x40240000
 8007d50:	401c0000 	.word	0x401c0000
 8007d54:	40140000 	.word	0x40140000
 8007d58:	3fe00000 	.word	0x3fe00000
 8007d5c:	4631      	mov	r1, r6
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f7f8 fc6a 	bl	8000638 <__aeabi_dmul>
 8007d64:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d68:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007d6a:	4656      	mov	r6, sl
 8007d6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d70:	f7f8 ff12 	bl	8000b98 <__aeabi_d2iz>
 8007d74:	4605      	mov	r5, r0
 8007d76:	f7f8 fbf5 	bl	8000564 <__aeabi_i2d>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d82:	f7f8 faa1 	bl	80002c8 <__aeabi_dsub>
 8007d86:	3530      	adds	r5, #48	@ 0x30
 8007d88:	f806 5b01 	strb.w	r5, [r6], #1
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	42a6      	cmp	r6, r4
 8007d92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d96:	f04f 0200 	mov.w	r2, #0
 8007d9a:	d124      	bne.n	8007de6 <_dtoa_r+0x626>
 8007d9c:	4baf      	ldr	r3, [pc, #700]	@ (800805c <_dtoa_r+0x89c>)
 8007d9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007da2:	f7f8 fa93 	bl	80002cc <__adddf3>
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dae:	f7f8 fed3 	bl	8000b58 <__aeabi_dcmpgt>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d163      	bne.n	8007e7e <_dtoa_r+0x6be>
 8007db6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007dba:	49a8      	ldr	r1, [pc, #672]	@ (800805c <_dtoa_r+0x89c>)
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	f7f8 fa83 	bl	80002c8 <__aeabi_dsub>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dca:	f7f8 fea7 	bl	8000b1c <__aeabi_dcmplt>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	f43f af14 	beq.w	8007bfc <_dtoa_r+0x43c>
 8007dd4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007dd6:	1e73      	subs	r3, r6, #1
 8007dd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007dda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007dde:	2b30      	cmp	r3, #48	@ 0x30
 8007de0:	d0f8      	beq.n	8007dd4 <_dtoa_r+0x614>
 8007de2:	4647      	mov	r7, r8
 8007de4:	e03b      	b.n	8007e5e <_dtoa_r+0x69e>
 8007de6:	4b9e      	ldr	r3, [pc, #632]	@ (8008060 <_dtoa_r+0x8a0>)
 8007de8:	f7f8 fc26 	bl	8000638 <__aeabi_dmul>
 8007dec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007df0:	e7bc      	b.n	8007d6c <_dtoa_r+0x5ac>
 8007df2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007df6:	4656      	mov	r6, sl
 8007df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	4629      	mov	r1, r5
 8007e00:	f7f8 fd44 	bl	800088c <__aeabi_ddiv>
 8007e04:	f7f8 fec8 	bl	8000b98 <__aeabi_d2iz>
 8007e08:	4680      	mov	r8, r0
 8007e0a:	f7f8 fbab 	bl	8000564 <__aeabi_i2d>
 8007e0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e12:	f7f8 fc11 	bl	8000638 <__aeabi_dmul>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007e22:	f7f8 fa51 	bl	80002c8 <__aeabi_dsub>
 8007e26:	f806 4b01 	strb.w	r4, [r6], #1
 8007e2a:	9d03      	ldr	r5, [sp, #12]
 8007e2c:	eba6 040a 	sub.w	r4, r6, sl
 8007e30:	42a5      	cmp	r5, r4
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	d133      	bne.n	8007ea0 <_dtoa_r+0x6e0>
 8007e38:	f7f8 fa48 	bl	80002cc <__adddf3>
 8007e3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e40:	4604      	mov	r4, r0
 8007e42:	460d      	mov	r5, r1
 8007e44:	f7f8 fe88 	bl	8000b58 <__aeabi_dcmpgt>
 8007e48:	b9c0      	cbnz	r0, 8007e7c <_dtoa_r+0x6bc>
 8007e4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e4e:	4620      	mov	r0, r4
 8007e50:	4629      	mov	r1, r5
 8007e52:	f7f8 fe59 	bl	8000b08 <__aeabi_dcmpeq>
 8007e56:	b110      	cbz	r0, 8007e5e <_dtoa_r+0x69e>
 8007e58:	f018 0f01 	tst.w	r8, #1
 8007e5c:	d10e      	bne.n	8007e7c <_dtoa_r+0x6bc>
 8007e5e:	9902      	ldr	r1, [sp, #8]
 8007e60:	4648      	mov	r0, r9
 8007e62:	f000 fbbd 	bl	80085e0 <_Bfree>
 8007e66:	2300      	movs	r3, #0
 8007e68:	7033      	strb	r3, [r6, #0]
 8007e6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007e6c:	3701      	adds	r7, #1
 8007e6e:	601f      	str	r7, [r3, #0]
 8007e70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 824b 	beq.w	800830e <_dtoa_r+0xb4e>
 8007e78:	601e      	str	r6, [r3, #0]
 8007e7a:	e248      	b.n	800830e <_dtoa_r+0xb4e>
 8007e7c:	46b8      	mov	r8, r7
 8007e7e:	4633      	mov	r3, r6
 8007e80:	461e      	mov	r6, r3
 8007e82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e86:	2a39      	cmp	r2, #57	@ 0x39
 8007e88:	d106      	bne.n	8007e98 <_dtoa_r+0x6d8>
 8007e8a:	459a      	cmp	sl, r3
 8007e8c:	d1f8      	bne.n	8007e80 <_dtoa_r+0x6c0>
 8007e8e:	2230      	movs	r2, #48	@ 0x30
 8007e90:	f108 0801 	add.w	r8, r8, #1
 8007e94:	f88a 2000 	strb.w	r2, [sl]
 8007e98:	781a      	ldrb	r2, [r3, #0]
 8007e9a:	3201      	adds	r2, #1
 8007e9c:	701a      	strb	r2, [r3, #0]
 8007e9e:	e7a0      	b.n	8007de2 <_dtoa_r+0x622>
 8007ea0:	4b6f      	ldr	r3, [pc, #444]	@ (8008060 <_dtoa_r+0x8a0>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f7f8 fbc8 	bl	8000638 <__aeabi_dmul>
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2300      	movs	r3, #0
 8007eac:	4604      	mov	r4, r0
 8007eae:	460d      	mov	r5, r1
 8007eb0:	f7f8 fe2a 	bl	8000b08 <__aeabi_dcmpeq>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d09f      	beq.n	8007df8 <_dtoa_r+0x638>
 8007eb8:	e7d1      	b.n	8007e5e <_dtoa_r+0x69e>
 8007eba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ebc:	2a00      	cmp	r2, #0
 8007ebe:	f000 80ea 	beq.w	8008096 <_dtoa_r+0x8d6>
 8007ec2:	9a07      	ldr	r2, [sp, #28]
 8007ec4:	2a01      	cmp	r2, #1
 8007ec6:	f300 80cd 	bgt.w	8008064 <_dtoa_r+0x8a4>
 8007eca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007ecc:	2a00      	cmp	r2, #0
 8007ece:	f000 80c1 	beq.w	8008054 <_dtoa_r+0x894>
 8007ed2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007ed6:	9c08      	ldr	r4, [sp, #32]
 8007ed8:	9e00      	ldr	r6, [sp, #0]
 8007eda:	9a00      	ldr	r2, [sp, #0]
 8007edc:	441a      	add	r2, r3
 8007ede:	9200      	str	r2, [sp, #0]
 8007ee0:	9a06      	ldr	r2, [sp, #24]
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	441a      	add	r2, r3
 8007ee6:	4648      	mov	r0, r9
 8007ee8:	9206      	str	r2, [sp, #24]
 8007eea:	f000 fc2d 	bl	8008748 <__i2b>
 8007eee:	4605      	mov	r5, r0
 8007ef0:	b166      	cbz	r6, 8007f0c <_dtoa_r+0x74c>
 8007ef2:	9b06      	ldr	r3, [sp, #24]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	dd09      	ble.n	8007f0c <_dtoa_r+0x74c>
 8007ef8:	42b3      	cmp	r3, r6
 8007efa:	9a00      	ldr	r2, [sp, #0]
 8007efc:	bfa8      	it	ge
 8007efe:	4633      	movge	r3, r6
 8007f00:	1ad2      	subs	r2, r2, r3
 8007f02:	9200      	str	r2, [sp, #0]
 8007f04:	9a06      	ldr	r2, [sp, #24]
 8007f06:	1af6      	subs	r6, r6, r3
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	9306      	str	r3, [sp, #24]
 8007f0c:	9b08      	ldr	r3, [sp, #32]
 8007f0e:	b30b      	cbz	r3, 8007f54 <_dtoa_r+0x794>
 8007f10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 80c6 	beq.w	80080a4 <_dtoa_r+0x8e4>
 8007f18:	2c00      	cmp	r4, #0
 8007f1a:	f000 80c0 	beq.w	800809e <_dtoa_r+0x8de>
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4622      	mov	r2, r4
 8007f22:	4648      	mov	r0, r9
 8007f24:	f000 fcc8 	bl	80088b8 <__pow5mult>
 8007f28:	9a02      	ldr	r2, [sp, #8]
 8007f2a:	4601      	mov	r1, r0
 8007f2c:	4605      	mov	r5, r0
 8007f2e:	4648      	mov	r0, r9
 8007f30:	f000 fc20 	bl	8008774 <__multiply>
 8007f34:	9902      	ldr	r1, [sp, #8]
 8007f36:	4680      	mov	r8, r0
 8007f38:	4648      	mov	r0, r9
 8007f3a:	f000 fb51 	bl	80085e0 <_Bfree>
 8007f3e:	9b08      	ldr	r3, [sp, #32]
 8007f40:	1b1b      	subs	r3, r3, r4
 8007f42:	9308      	str	r3, [sp, #32]
 8007f44:	f000 80b1 	beq.w	80080aa <_dtoa_r+0x8ea>
 8007f48:	9a08      	ldr	r2, [sp, #32]
 8007f4a:	4641      	mov	r1, r8
 8007f4c:	4648      	mov	r0, r9
 8007f4e:	f000 fcb3 	bl	80088b8 <__pow5mult>
 8007f52:	9002      	str	r0, [sp, #8]
 8007f54:	2101      	movs	r1, #1
 8007f56:	4648      	mov	r0, r9
 8007f58:	f000 fbf6 	bl	8008748 <__i2b>
 8007f5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f5e:	4604      	mov	r4, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 81d8 	beq.w	8008316 <_dtoa_r+0xb56>
 8007f66:	461a      	mov	r2, r3
 8007f68:	4601      	mov	r1, r0
 8007f6a:	4648      	mov	r0, r9
 8007f6c:	f000 fca4 	bl	80088b8 <__pow5mult>
 8007f70:	9b07      	ldr	r3, [sp, #28]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	4604      	mov	r4, r0
 8007f76:	f300 809f 	bgt.w	80080b8 <_dtoa_r+0x8f8>
 8007f7a:	9b04      	ldr	r3, [sp, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f040 8097 	bne.w	80080b0 <_dtoa_r+0x8f0>
 8007f82:	9b05      	ldr	r3, [sp, #20]
 8007f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f040 8093 	bne.w	80080b4 <_dtoa_r+0x8f4>
 8007f8e:	9b05      	ldr	r3, [sp, #20]
 8007f90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f94:	0d1b      	lsrs	r3, r3, #20
 8007f96:	051b      	lsls	r3, r3, #20
 8007f98:	b133      	cbz	r3, 8007fa8 <_dtoa_r+0x7e8>
 8007f9a:	9b00      	ldr	r3, [sp, #0]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	9b06      	ldr	r3, [sp, #24]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	9306      	str	r3, [sp, #24]
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	9308      	str	r3, [sp, #32]
 8007faa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 81b8 	beq.w	8008322 <_dtoa_r+0xb62>
 8007fb2:	6923      	ldr	r3, [r4, #16]
 8007fb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fb8:	6918      	ldr	r0, [r3, #16]
 8007fba:	f000 fb79 	bl	80086b0 <__hi0bits>
 8007fbe:	f1c0 0020 	rsb	r0, r0, #32
 8007fc2:	9b06      	ldr	r3, [sp, #24]
 8007fc4:	4418      	add	r0, r3
 8007fc6:	f010 001f 	ands.w	r0, r0, #31
 8007fca:	f000 8082 	beq.w	80080d2 <_dtoa_r+0x912>
 8007fce:	f1c0 0320 	rsb	r3, r0, #32
 8007fd2:	2b04      	cmp	r3, #4
 8007fd4:	dd73      	ble.n	80080be <_dtoa_r+0x8fe>
 8007fd6:	9b00      	ldr	r3, [sp, #0]
 8007fd8:	f1c0 001c 	rsb	r0, r0, #28
 8007fdc:	4403      	add	r3, r0
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	9b06      	ldr	r3, [sp, #24]
 8007fe2:	4403      	add	r3, r0
 8007fe4:	4406      	add	r6, r0
 8007fe6:	9306      	str	r3, [sp, #24]
 8007fe8:	9b00      	ldr	r3, [sp, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	dd05      	ble.n	8007ffa <_dtoa_r+0x83a>
 8007fee:	9902      	ldr	r1, [sp, #8]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	4648      	mov	r0, r9
 8007ff4:	f000 fcba 	bl	800896c <__lshift>
 8007ff8:	9002      	str	r0, [sp, #8]
 8007ffa:	9b06      	ldr	r3, [sp, #24]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	dd05      	ble.n	800800c <_dtoa_r+0x84c>
 8008000:	4621      	mov	r1, r4
 8008002:	461a      	mov	r2, r3
 8008004:	4648      	mov	r0, r9
 8008006:	f000 fcb1 	bl	800896c <__lshift>
 800800a:	4604      	mov	r4, r0
 800800c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800800e:	2b00      	cmp	r3, #0
 8008010:	d061      	beq.n	80080d6 <_dtoa_r+0x916>
 8008012:	9802      	ldr	r0, [sp, #8]
 8008014:	4621      	mov	r1, r4
 8008016:	f000 fd15 	bl	8008a44 <__mcmp>
 800801a:	2800      	cmp	r0, #0
 800801c:	da5b      	bge.n	80080d6 <_dtoa_r+0x916>
 800801e:	2300      	movs	r3, #0
 8008020:	9902      	ldr	r1, [sp, #8]
 8008022:	220a      	movs	r2, #10
 8008024:	4648      	mov	r0, r9
 8008026:	f000 fafd 	bl	8008624 <__multadd>
 800802a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800802c:	9002      	str	r0, [sp, #8]
 800802e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 8177 	beq.w	8008326 <_dtoa_r+0xb66>
 8008038:	4629      	mov	r1, r5
 800803a:	2300      	movs	r3, #0
 800803c:	220a      	movs	r2, #10
 800803e:	4648      	mov	r0, r9
 8008040:	f000 faf0 	bl	8008624 <__multadd>
 8008044:	f1bb 0f00 	cmp.w	fp, #0
 8008048:	4605      	mov	r5, r0
 800804a:	dc6f      	bgt.n	800812c <_dtoa_r+0x96c>
 800804c:	9b07      	ldr	r3, [sp, #28]
 800804e:	2b02      	cmp	r3, #2
 8008050:	dc49      	bgt.n	80080e6 <_dtoa_r+0x926>
 8008052:	e06b      	b.n	800812c <_dtoa_r+0x96c>
 8008054:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008056:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800805a:	e73c      	b.n	8007ed6 <_dtoa_r+0x716>
 800805c:	3fe00000 	.word	0x3fe00000
 8008060:	40240000 	.word	0x40240000
 8008064:	9b03      	ldr	r3, [sp, #12]
 8008066:	1e5c      	subs	r4, r3, #1
 8008068:	9b08      	ldr	r3, [sp, #32]
 800806a:	42a3      	cmp	r3, r4
 800806c:	db09      	blt.n	8008082 <_dtoa_r+0x8c2>
 800806e:	1b1c      	subs	r4, r3, r4
 8008070:	9b03      	ldr	r3, [sp, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	f6bf af30 	bge.w	8007ed8 <_dtoa_r+0x718>
 8008078:	9b00      	ldr	r3, [sp, #0]
 800807a:	9a03      	ldr	r2, [sp, #12]
 800807c:	1a9e      	subs	r6, r3, r2
 800807e:	2300      	movs	r3, #0
 8008080:	e72b      	b.n	8007eda <_dtoa_r+0x71a>
 8008082:	9b08      	ldr	r3, [sp, #32]
 8008084:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008086:	9408      	str	r4, [sp, #32]
 8008088:	1ae3      	subs	r3, r4, r3
 800808a:	441a      	add	r2, r3
 800808c:	9e00      	ldr	r6, [sp, #0]
 800808e:	9b03      	ldr	r3, [sp, #12]
 8008090:	920d      	str	r2, [sp, #52]	@ 0x34
 8008092:	2400      	movs	r4, #0
 8008094:	e721      	b.n	8007eda <_dtoa_r+0x71a>
 8008096:	9c08      	ldr	r4, [sp, #32]
 8008098:	9e00      	ldr	r6, [sp, #0]
 800809a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800809c:	e728      	b.n	8007ef0 <_dtoa_r+0x730>
 800809e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80080a2:	e751      	b.n	8007f48 <_dtoa_r+0x788>
 80080a4:	9a08      	ldr	r2, [sp, #32]
 80080a6:	9902      	ldr	r1, [sp, #8]
 80080a8:	e750      	b.n	8007f4c <_dtoa_r+0x78c>
 80080aa:	f8cd 8008 	str.w	r8, [sp, #8]
 80080ae:	e751      	b.n	8007f54 <_dtoa_r+0x794>
 80080b0:	2300      	movs	r3, #0
 80080b2:	e779      	b.n	8007fa8 <_dtoa_r+0x7e8>
 80080b4:	9b04      	ldr	r3, [sp, #16]
 80080b6:	e777      	b.n	8007fa8 <_dtoa_r+0x7e8>
 80080b8:	2300      	movs	r3, #0
 80080ba:	9308      	str	r3, [sp, #32]
 80080bc:	e779      	b.n	8007fb2 <_dtoa_r+0x7f2>
 80080be:	d093      	beq.n	8007fe8 <_dtoa_r+0x828>
 80080c0:	9a00      	ldr	r2, [sp, #0]
 80080c2:	331c      	adds	r3, #28
 80080c4:	441a      	add	r2, r3
 80080c6:	9200      	str	r2, [sp, #0]
 80080c8:	9a06      	ldr	r2, [sp, #24]
 80080ca:	441a      	add	r2, r3
 80080cc:	441e      	add	r6, r3
 80080ce:	9206      	str	r2, [sp, #24]
 80080d0:	e78a      	b.n	8007fe8 <_dtoa_r+0x828>
 80080d2:	4603      	mov	r3, r0
 80080d4:	e7f4      	b.n	80080c0 <_dtoa_r+0x900>
 80080d6:	9b03      	ldr	r3, [sp, #12]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	46b8      	mov	r8, r7
 80080dc:	dc20      	bgt.n	8008120 <_dtoa_r+0x960>
 80080de:	469b      	mov	fp, r3
 80080e0:	9b07      	ldr	r3, [sp, #28]
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	dd1e      	ble.n	8008124 <_dtoa_r+0x964>
 80080e6:	f1bb 0f00 	cmp.w	fp, #0
 80080ea:	f47f adb1 	bne.w	8007c50 <_dtoa_r+0x490>
 80080ee:	4621      	mov	r1, r4
 80080f0:	465b      	mov	r3, fp
 80080f2:	2205      	movs	r2, #5
 80080f4:	4648      	mov	r0, r9
 80080f6:	f000 fa95 	bl	8008624 <__multadd>
 80080fa:	4601      	mov	r1, r0
 80080fc:	4604      	mov	r4, r0
 80080fe:	9802      	ldr	r0, [sp, #8]
 8008100:	f000 fca0 	bl	8008a44 <__mcmp>
 8008104:	2800      	cmp	r0, #0
 8008106:	f77f ada3 	ble.w	8007c50 <_dtoa_r+0x490>
 800810a:	4656      	mov	r6, sl
 800810c:	2331      	movs	r3, #49	@ 0x31
 800810e:	f806 3b01 	strb.w	r3, [r6], #1
 8008112:	f108 0801 	add.w	r8, r8, #1
 8008116:	e59f      	b.n	8007c58 <_dtoa_r+0x498>
 8008118:	9c03      	ldr	r4, [sp, #12]
 800811a:	46b8      	mov	r8, r7
 800811c:	4625      	mov	r5, r4
 800811e:	e7f4      	b.n	800810a <_dtoa_r+0x94a>
 8008120:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008126:	2b00      	cmp	r3, #0
 8008128:	f000 8101 	beq.w	800832e <_dtoa_r+0xb6e>
 800812c:	2e00      	cmp	r6, #0
 800812e:	dd05      	ble.n	800813c <_dtoa_r+0x97c>
 8008130:	4629      	mov	r1, r5
 8008132:	4632      	mov	r2, r6
 8008134:	4648      	mov	r0, r9
 8008136:	f000 fc19 	bl	800896c <__lshift>
 800813a:	4605      	mov	r5, r0
 800813c:	9b08      	ldr	r3, [sp, #32]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d05c      	beq.n	80081fc <_dtoa_r+0xa3c>
 8008142:	6869      	ldr	r1, [r5, #4]
 8008144:	4648      	mov	r0, r9
 8008146:	f000 fa0b 	bl	8008560 <_Balloc>
 800814a:	4606      	mov	r6, r0
 800814c:	b928      	cbnz	r0, 800815a <_dtoa_r+0x99a>
 800814e:	4b82      	ldr	r3, [pc, #520]	@ (8008358 <_dtoa_r+0xb98>)
 8008150:	4602      	mov	r2, r0
 8008152:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008156:	f7ff bb4a 	b.w	80077ee <_dtoa_r+0x2e>
 800815a:	692a      	ldr	r2, [r5, #16]
 800815c:	3202      	adds	r2, #2
 800815e:	0092      	lsls	r2, r2, #2
 8008160:	f105 010c 	add.w	r1, r5, #12
 8008164:	300c      	adds	r0, #12
 8008166:	f000 ffa3 	bl	80090b0 <memcpy>
 800816a:	2201      	movs	r2, #1
 800816c:	4631      	mov	r1, r6
 800816e:	4648      	mov	r0, r9
 8008170:	f000 fbfc 	bl	800896c <__lshift>
 8008174:	f10a 0301 	add.w	r3, sl, #1
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	eb0a 030b 	add.w	r3, sl, fp
 800817e:	9308      	str	r3, [sp, #32]
 8008180:	9b04      	ldr	r3, [sp, #16]
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	462f      	mov	r7, r5
 8008188:	9306      	str	r3, [sp, #24]
 800818a:	4605      	mov	r5, r0
 800818c:	9b00      	ldr	r3, [sp, #0]
 800818e:	9802      	ldr	r0, [sp, #8]
 8008190:	4621      	mov	r1, r4
 8008192:	f103 3bff 	add.w	fp, r3, #4294967295
 8008196:	f7ff fa8a 	bl	80076ae <quorem>
 800819a:	4603      	mov	r3, r0
 800819c:	3330      	adds	r3, #48	@ 0x30
 800819e:	9003      	str	r0, [sp, #12]
 80081a0:	4639      	mov	r1, r7
 80081a2:	9802      	ldr	r0, [sp, #8]
 80081a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081a6:	f000 fc4d 	bl	8008a44 <__mcmp>
 80081aa:	462a      	mov	r2, r5
 80081ac:	9004      	str	r0, [sp, #16]
 80081ae:	4621      	mov	r1, r4
 80081b0:	4648      	mov	r0, r9
 80081b2:	f000 fc63 	bl	8008a7c <__mdiff>
 80081b6:	68c2      	ldr	r2, [r0, #12]
 80081b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ba:	4606      	mov	r6, r0
 80081bc:	bb02      	cbnz	r2, 8008200 <_dtoa_r+0xa40>
 80081be:	4601      	mov	r1, r0
 80081c0:	9802      	ldr	r0, [sp, #8]
 80081c2:	f000 fc3f 	bl	8008a44 <__mcmp>
 80081c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c8:	4602      	mov	r2, r0
 80081ca:	4631      	mov	r1, r6
 80081cc:	4648      	mov	r0, r9
 80081ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80081d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80081d2:	f000 fa05 	bl	80085e0 <_Bfree>
 80081d6:	9b07      	ldr	r3, [sp, #28]
 80081d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80081da:	9e00      	ldr	r6, [sp, #0]
 80081dc:	ea42 0103 	orr.w	r1, r2, r3
 80081e0:	9b06      	ldr	r3, [sp, #24]
 80081e2:	4319      	orrs	r1, r3
 80081e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081e6:	d10d      	bne.n	8008204 <_dtoa_r+0xa44>
 80081e8:	2b39      	cmp	r3, #57	@ 0x39
 80081ea:	d027      	beq.n	800823c <_dtoa_r+0xa7c>
 80081ec:	9a04      	ldr	r2, [sp, #16]
 80081ee:	2a00      	cmp	r2, #0
 80081f0:	dd01      	ble.n	80081f6 <_dtoa_r+0xa36>
 80081f2:	9b03      	ldr	r3, [sp, #12]
 80081f4:	3331      	adds	r3, #49	@ 0x31
 80081f6:	f88b 3000 	strb.w	r3, [fp]
 80081fa:	e52e      	b.n	8007c5a <_dtoa_r+0x49a>
 80081fc:	4628      	mov	r0, r5
 80081fe:	e7b9      	b.n	8008174 <_dtoa_r+0x9b4>
 8008200:	2201      	movs	r2, #1
 8008202:	e7e2      	b.n	80081ca <_dtoa_r+0xa0a>
 8008204:	9904      	ldr	r1, [sp, #16]
 8008206:	2900      	cmp	r1, #0
 8008208:	db04      	blt.n	8008214 <_dtoa_r+0xa54>
 800820a:	9807      	ldr	r0, [sp, #28]
 800820c:	4301      	orrs	r1, r0
 800820e:	9806      	ldr	r0, [sp, #24]
 8008210:	4301      	orrs	r1, r0
 8008212:	d120      	bne.n	8008256 <_dtoa_r+0xa96>
 8008214:	2a00      	cmp	r2, #0
 8008216:	ddee      	ble.n	80081f6 <_dtoa_r+0xa36>
 8008218:	9902      	ldr	r1, [sp, #8]
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	2201      	movs	r2, #1
 800821e:	4648      	mov	r0, r9
 8008220:	f000 fba4 	bl	800896c <__lshift>
 8008224:	4621      	mov	r1, r4
 8008226:	9002      	str	r0, [sp, #8]
 8008228:	f000 fc0c 	bl	8008a44 <__mcmp>
 800822c:	2800      	cmp	r0, #0
 800822e:	9b00      	ldr	r3, [sp, #0]
 8008230:	dc02      	bgt.n	8008238 <_dtoa_r+0xa78>
 8008232:	d1e0      	bne.n	80081f6 <_dtoa_r+0xa36>
 8008234:	07da      	lsls	r2, r3, #31
 8008236:	d5de      	bpl.n	80081f6 <_dtoa_r+0xa36>
 8008238:	2b39      	cmp	r3, #57	@ 0x39
 800823a:	d1da      	bne.n	80081f2 <_dtoa_r+0xa32>
 800823c:	2339      	movs	r3, #57	@ 0x39
 800823e:	f88b 3000 	strb.w	r3, [fp]
 8008242:	4633      	mov	r3, r6
 8008244:	461e      	mov	r6, r3
 8008246:	3b01      	subs	r3, #1
 8008248:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800824c:	2a39      	cmp	r2, #57	@ 0x39
 800824e:	d04e      	beq.n	80082ee <_dtoa_r+0xb2e>
 8008250:	3201      	adds	r2, #1
 8008252:	701a      	strb	r2, [r3, #0]
 8008254:	e501      	b.n	8007c5a <_dtoa_r+0x49a>
 8008256:	2a00      	cmp	r2, #0
 8008258:	dd03      	ble.n	8008262 <_dtoa_r+0xaa2>
 800825a:	2b39      	cmp	r3, #57	@ 0x39
 800825c:	d0ee      	beq.n	800823c <_dtoa_r+0xa7c>
 800825e:	3301      	adds	r3, #1
 8008260:	e7c9      	b.n	80081f6 <_dtoa_r+0xa36>
 8008262:	9a00      	ldr	r2, [sp, #0]
 8008264:	9908      	ldr	r1, [sp, #32]
 8008266:	f802 3c01 	strb.w	r3, [r2, #-1]
 800826a:	428a      	cmp	r2, r1
 800826c:	d028      	beq.n	80082c0 <_dtoa_r+0xb00>
 800826e:	9902      	ldr	r1, [sp, #8]
 8008270:	2300      	movs	r3, #0
 8008272:	220a      	movs	r2, #10
 8008274:	4648      	mov	r0, r9
 8008276:	f000 f9d5 	bl	8008624 <__multadd>
 800827a:	42af      	cmp	r7, r5
 800827c:	9002      	str	r0, [sp, #8]
 800827e:	f04f 0300 	mov.w	r3, #0
 8008282:	f04f 020a 	mov.w	r2, #10
 8008286:	4639      	mov	r1, r7
 8008288:	4648      	mov	r0, r9
 800828a:	d107      	bne.n	800829c <_dtoa_r+0xadc>
 800828c:	f000 f9ca 	bl	8008624 <__multadd>
 8008290:	4607      	mov	r7, r0
 8008292:	4605      	mov	r5, r0
 8008294:	9b00      	ldr	r3, [sp, #0]
 8008296:	3301      	adds	r3, #1
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	e777      	b.n	800818c <_dtoa_r+0x9cc>
 800829c:	f000 f9c2 	bl	8008624 <__multadd>
 80082a0:	4629      	mov	r1, r5
 80082a2:	4607      	mov	r7, r0
 80082a4:	2300      	movs	r3, #0
 80082a6:	220a      	movs	r2, #10
 80082a8:	4648      	mov	r0, r9
 80082aa:	f000 f9bb 	bl	8008624 <__multadd>
 80082ae:	4605      	mov	r5, r0
 80082b0:	e7f0      	b.n	8008294 <_dtoa_r+0xad4>
 80082b2:	f1bb 0f00 	cmp.w	fp, #0
 80082b6:	bfcc      	ite	gt
 80082b8:	465e      	movgt	r6, fp
 80082ba:	2601      	movle	r6, #1
 80082bc:	4456      	add	r6, sl
 80082be:	2700      	movs	r7, #0
 80082c0:	9902      	ldr	r1, [sp, #8]
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	2201      	movs	r2, #1
 80082c6:	4648      	mov	r0, r9
 80082c8:	f000 fb50 	bl	800896c <__lshift>
 80082cc:	4621      	mov	r1, r4
 80082ce:	9002      	str	r0, [sp, #8]
 80082d0:	f000 fbb8 	bl	8008a44 <__mcmp>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	dcb4      	bgt.n	8008242 <_dtoa_r+0xa82>
 80082d8:	d102      	bne.n	80082e0 <_dtoa_r+0xb20>
 80082da:	9b00      	ldr	r3, [sp, #0]
 80082dc:	07db      	lsls	r3, r3, #31
 80082de:	d4b0      	bmi.n	8008242 <_dtoa_r+0xa82>
 80082e0:	4633      	mov	r3, r6
 80082e2:	461e      	mov	r6, r3
 80082e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082e8:	2a30      	cmp	r2, #48	@ 0x30
 80082ea:	d0fa      	beq.n	80082e2 <_dtoa_r+0xb22>
 80082ec:	e4b5      	b.n	8007c5a <_dtoa_r+0x49a>
 80082ee:	459a      	cmp	sl, r3
 80082f0:	d1a8      	bne.n	8008244 <_dtoa_r+0xa84>
 80082f2:	2331      	movs	r3, #49	@ 0x31
 80082f4:	f108 0801 	add.w	r8, r8, #1
 80082f8:	f88a 3000 	strb.w	r3, [sl]
 80082fc:	e4ad      	b.n	8007c5a <_dtoa_r+0x49a>
 80082fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008300:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800835c <_dtoa_r+0xb9c>
 8008304:	b11b      	cbz	r3, 800830e <_dtoa_r+0xb4e>
 8008306:	f10a 0308 	add.w	r3, sl, #8
 800830a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	4650      	mov	r0, sl
 8008310:	b017      	add	sp, #92	@ 0x5c
 8008312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008316:	9b07      	ldr	r3, [sp, #28]
 8008318:	2b01      	cmp	r3, #1
 800831a:	f77f ae2e 	ble.w	8007f7a <_dtoa_r+0x7ba>
 800831e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008320:	9308      	str	r3, [sp, #32]
 8008322:	2001      	movs	r0, #1
 8008324:	e64d      	b.n	8007fc2 <_dtoa_r+0x802>
 8008326:	f1bb 0f00 	cmp.w	fp, #0
 800832a:	f77f aed9 	ble.w	80080e0 <_dtoa_r+0x920>
 800832e:	4656      	mov	r6, sl
 8008330:	9802      	ldr	r0, [sp, #8]
 8008332:	4621      	mov	r1, r4
 8008334:	f7ff f9bb 	bl	80076ae <quorem>
 8008338:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800833c:	f806 3b01 	strb.w	r3, [r6], #1
 8008340:	eba6 020a 	sub.w	r2, r6, sl
 8008344:	4593      	cmp	fp, r2
 8008346:	ddb4      	ble.n	80082b2 <_dtoa_r+0xaf2>
 8008348:	9902      	ldr	r1, [sp, #8]
 800834a:	2300      	movs	r3, #0
 800834c:	220a      	movs	r2, #10
 800834e:	4648      	mov	r0, r9
 8008350:	f000 f968 	bl	8008624 <__multadd>
 8008354:	9002      	str	r0, [sp, #8]
 8008356:	e7eb      	b.n	8008330 <_dtoa_r+0xb70>
 8008358:	0800cda4 	.word	0x0800cda4
 800835c:	0800cd28 	.word	0x0800cd28

08008360 <_free_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4605      	mov	r5, r0
 8008364:	2900      	cmp	r1, #0
 8008366:	d041      	beq.n	80083ec <_free_r+0x8c>
 8008368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800836c:	1f0c      	subs	r4, r1, #4
 800836e:	2b00      	cmp	r3, #0
 8008370:	bfb8      	it	lt
 8008372:	18e4      	addlt	r4, r4, r3
 8008374:	f000 f8e8 	bl	8008548 <__malloc_lock>
 8008378:	4a1d      	ldr	r2, [pc, #116]	@ (80083f0 <_free_r+0x90>)
 800837a:	6813      	ldr	r3, [r2, #0]
 800837c:	b933      	cbnz	r3, 800838c <_free_r+0x2c>
 800837e:	6063      	str	r3, [r4, #4]
 8008380:	6014      	str	r4, [r2, #0]
 8008382:	4628      	mov	r0, r5
 8008384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008388:	f000 b8e4 	b.w	8008554 <__malloc_unlock>
 800838c:	42a3      	cmp	r3, r4
 800838e:	d908      	bls.n	80083a2 <_free_r+0x42>
 8008390:	6820      	ldr	r0, [r4, #0]
 8008392:	1821      	adds	r1, r4, r0
 8008394:	428b      	cmp	r3, r1
 8008396:	bf01      	itttt	eq
 8008398:	6819      	ldreq	r1, [r3, #0]
 800839a:	685b      	ldreq	r3, [r3, #4]
 800839c:	1809      	addeq	r1, r1, r0
 800839e:	6021      	streq	r1, [r4, #0]
 80083a0:	e7ed      	b.n	800837e <_free_r+0x1e>
 80083a2:	461a      	mov	r2, r3
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	b10b      	cbz	r3, 80083ac <_free_r+0x4c>
 80083a8:	42a3      	cmp	r3, r4
 80083aa:	d9fa      	bls.n	80083a2 <_free_r+0x42>
 80083ac:	6811      	ldr	r1, [r2, #0]
 80083ae:	1850      	adds	r0, r2, r1
 80083b0:	42a0      	cmp	r0, r4
 80083b2:	d10b      	bne.n	80083cc <_free_r+0x6c>
 80083b4:	6820      	ldr	r0, [r4, #0]
 80083b6:	4401      	add	r1, r0
 80083b8:	1850      	adds	r0, r2, r1
 80083ba:	4283      	cmp	r3, r0
 80083bc:	6011      	str	r1, [r2, #0]
 80083be:	d1e0      	bne.n	8008382 <_free_r+0x22>
 80083c0:	6818      	ldr	r0, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	6053      	str	r3, [r2, #4]
 80083c6:	4408      	add	r0, r1
 80083c8:	6010      	str	r0, [r2, #0]
 80083ca:	e7da      	b.n	8008382 <_free_r+0x22>
 80083cc:	d902      	bls.n	80083d4 <_free_r+0x74>
 80083ce:	230c      	movs	r3, #12
 80083d0:	602b      	str	r3, [r5, #0]
 80083d2:	e7d6      	b.n	8008382 <_free_r+0x22>
 80083d4:	6820      	ldr	r0, [r4, #0]
 80083d6:	1821      	adds	r1, r4, r0
 80083d8:	428b      	cmp	r3, r1
 80083da:	bf04      	itt	eq
 80083dc:	6819      	ldreq	r1, [r3, #0]
 80083de:	685b      	ldreq	r3, [r3, #4]
 80083e0:	6063      	str	r3, [r4, #4]
 80083e2:	bf04      	itt	eq
 80083e4:	1809      	addeq	r1, r1, r0
 80083e6:	6021      	streq	r1, [r4, #0]
 80083e8:	6054      	str	r4, [r2, #4]
 80083ea:	e7ca      	b.n	8008382 <_free_r+0x22>
 80083ec:	bd38      	pop	{r3, r4, r5, pc}
 80083ee:	bf00      	nop
 80083f0:	200009e8 	.word	0x200009e8

080083f4 <malloc>:
 80083f4:	4b02      	ldr	r3, [pc, #8]	@ (8008400 <malloc+0xc>)
 80083f6:	4601      	mov	r1, r0
 80083f8:	6818      	ldr	r0, [r3, #0]
 80083fa:	f000 b825 	b.w	8008448 <_malloc_r>
 80083fe:	bf00      	nop
 8008400:	20000330 	.word	0x20000330

08008404 <sbrk_aligned>:
 8008404:	b570      	push	{r4, r5, r6, lr}
 8008406:	4e0f      	ldr	r6, [pc, #60]	@ (8008444 <sbrk_aligned+0x40>)
 8008408:	460c      	mov	r4, r1
 800840a:	6831      	ldr	r1, [r6, #0]
 800840c:	4605      	mov	r5, r0
 800840e:	b911      	cbnz	r1, 8008416 <sbrk_aligned+0x12>
 8008410:	f000 fe3e 	bl	8009090 <_sbrk_r>
 8008414:	6030      	str	r0, [r6, #0]
 8008416:	4621      	mov	r1, r4
 8008418:	4628      	mov	r0, r5
 800841a:	f000 fe39 	bl	8009090 <_sbrk_r>
 800841e:	1c43      	adds	r3, r0, #1
 8008420:	d103      	bne.n	800842a <sbrk_aligned+0x26>
 8008422:	f04f 34ff 	mov.w	r4, #4294967295
 8008426:	4620      	mov	r0, r4
 8008428:	bd70      	pop	{r4, r5, r6, pc}
 800842a:	1cc4      	adds	r4, r0, #3
 800842c:	f024 0403 	bic.w	r4, r4, #3
 8008430:	42a0      	cmp	r0, r4
 8008432:	d0f8      	beq.n	8008426 <sbrk_aligned+0x22>
 8008434:	1a21      	subs	r1, r4, r0
 8008436:	4628      	mov	r0, r5
 8008438:	f000 fe2a 	bl	8009090 <_sbrk_r>
 800843c:	3001      	adds	r0, #1
 800843e:	d1f2      	bne.n	8008426 <sbrk_aligned+0x22>
 8008440:	e7ef      	b.n	8008422 <sbrk_aligned+0x1e>
 8008442:	bf00      	nop
 8008444:	200009e4 	.word	0x200009e4

08008448 <_malloc_r>:
 8008448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800844c:	1ccd      	adds	r5, r1, #3
 800844e:	f025 0503 	bic.w	r5, r5, #3
 8008452:	3508      	adds	r5, #8
 8008454:	2d0c      	cmp	r5, #12
 8008456:	bf38      	it	cc
 8008458:	250c      	movcc	r5, #12
 800845a:	2d00      	cmp	r5, #0
 800845c:	4606      	mov	r6, r0
 800845e:	db01      	blt.n	8008464 <_malloc_r+0x1c>
 8008460:	42a9      	cmp	r1, r5
 8008462:	d904      	bls.n	800846e <_malloc_r+0x26>
 8008464:	230c      	movs	r3, #12
 8008466:	6033      	str	r3, [r6, #0]
 8008468:	2000      	movs	r0, #0
 800846a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800846e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008544 <_malloc_r+0xfc>
 8008472:	f000 f869 	bl	8008548 <__malloc_lock>
 8008476:	f8d8 3000 	ldr.w	r3, [r8]
 800847a:	461c      	mov	r4, r3
 800847c:	bb44      	cbnz	r4, 80084d0 <_malloc_r+0x88>
 800847e:	4629      	mov	r1, r5
 8008480:	4630      	mov	r0, r6
 8008482:	f7ff ffbf 	bl	8008404 <sbrk_aligned>
 8008486:	1c43      	adds	r3, r0, #1
 8008488:	4604      	mov	r4, r0
 800848a:	d158      	bne.n	800853e <_malloc_r+0xf6>
 800848c:	f8d8 4000 	ldr.w	r4, [r8]
 8008490:	4627      	mov	r7, r4
 8008492:	2f00      	cmp	r7, #0
 8008494:	d143      	bne.n	800851e <_malloc_r+0xd6>
 8008496:	2c00      	cmp	r4, #0
 8008498:	d04b      	beq.n	8008532 <_malloc_r+0xea>
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	4639      	mov	r1, r7
 800849e:	4630      	mov	r0, r6
 80084a0:	eb04 0903 	add.w	r9, r4, r3
 80084a4:	f000 fdf4 	bl	8009090 <_sbrk_r>
 80084a8:	4581      	cmp	r9, r0
 80084aa:	d142      	bne.n	8008532 <_malloc_r+0xea>
 80084ac:	6821      	ldr	r1, [r4, #0]
 80084ae:	1a6d      	subs	r5, r5, r1
 80084b0:	4629      	mov	r1, r5
 80084b2:	4630      	mov	r0, r6
 80084b4:	f7ff ffa6 	bl	8008404 <sbrk_aligned>
 80084b8:	3001      	adds	r0, #1
 80084ba:	d03a      	beq.n	8008532 <_malloc_r+0xea>
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	442b      	add	r3, r5
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	f8d8 3000 	ldr.w	r3, [r8]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	bb62      	cbnz	r2, 8008524 <_malloc_r+0xdc>
 80084ca:	f8c8 7000 	str.w	r7, [r8]
 80084ce:	e00f      	b.n	80084f0 <_malloc_r+0xa8>
 80084d0:	6822      	ldr	r2, [r4, #0]
 80084d2:	1b52      	subs	r2, r2, r5
 80084d4:	d420      	bmi.n	8008518 <_malloc_r+0xd0>
 80084d6:	2a0b      	cmp	r2, #11
 80084d8:	d917      	bls.n	800850a <_malloc_r+0xc2>
 80084da:	1961      	adds	r1, r4, r5
 80084dc:	42a3      	cmp	r3, r4
 80084de:	6025      	str	r5, [r4, #0]
 80084e0:	bf18      	it	ne
 80084e2:	6059      	strne	r1, [r3, #4]
 80084e4:	6863      	ldr	r3, [r4, #4]
 80084e6:	bf08      	it	eq
 80084e8:	f8c8 1000 	streq.w	r1, [r8]
 80084ec:	5162      	str	r2, [r4, r5]
 80084ee:	604b      	str	r3, [r1, #4]
 80084f0:	4630      	mov	r0, r6
 80084f2:	f000 f82f 	bl	8008554 <__malloc_unlock>
 80084f6:	f104 000b 	add.w	r0, r4, #11
 80084fa:	1d23      	adds	r3, r4, #4
 80084fc:	f020 0007 	bic.w	r0, r0, #7
 8008500:	1ac2      	subs	r2, r0, r3
 8008502:	bf1c      	itt	ne
 8008504:	1a1b      	subne	r3, r3, r0
 8008506:	50a3      	strne	r3, [r4, r2]
 8008508:	e7af      	b.n	800846a <_malloc_r+0x22>
 800850a:	6862      	ldr	r2, [r4, #4]
 800850c:	42a3      	cmp	r3, r4
 800850e:	bf0c      	ite	eq
 8008510:	f8c8 2000 	streq.w	r2, [r8]
 8008514:	605a      	strne	r2, [r3, #4]
 8008516:	e7eb      	b.n	80084f0 <_malloc_r+0xa8>
 8008518:	4623      	mov	r3, r4
 800851a:	6864      	ldr	r4, [r4, #4]
 800851c:	e7ae      	b.n	800847c <_malloc_r+0x34>
 800851e:	463c      	mov	r4, r7
 8008520:	687f      	ldr	r7, [r7, #4]
 8008522:	e7b6      	b.n	8008492 <_malloc_r+0x4a>
 8008524:	461a      	mov	r2, r3
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	42a3      	cmp	r3, r4
 800852a:	d1fb      	bne.n	8008524 <_malloc_r+0xdc>
 800852c:	2300      	movs	r3, #0
 800852e:	6053      	str	r3, [r2, #4]
 8008530:	e7de      	b.n	80084f0 <_malloc_r+0xa8>
 8008532:	230c      	movs	r3, #12
 8008534:	6033      	str	r3, [r6, #0]
 8008536:	4630      	mov	r0, r6
 8008538:	f000 f80c 	bl	8008554 <__malloc_unlock>
 800853c:	e794      	b.n	8008468 <_malloc_r+0x20>
 800853e:	6005      	str	r5, [r0, #0]
 8008540:	e7d6      	b.n	80084f0 <_malloc_r+0xa8>
 8008542:	bf00      	nop
 8008544:	200009e8 	.word	0x200009e8

08008548 <__malloc_lock>:
 8008548:	4801      	ldr	r0, [pc, #4]	@ (8008550 <__malloc_lock+0x8>)
 800854a:	f7ff b8ae 	b.w	80076aa <__retarget_lock_acquire_recursive>
 800854e:	bf00      	nop
 8008550:	200009e0 	.word	0x200009e0

08008554 <__malloc_unlock>:
 8008554:	4801      	ldr	r0, [pc, #4]	@ (800855c <__malloc_unlock+0x8>)
 8008556:	f7ff b8a9 	b.w	80076ac <__retarget_lock_release_recursive>
 800855a:	bf00      	nop
 800855c:	200009e0 	.word	0x200009e0

08008560 <_Balloc>:
 8008560:	b570      	push	{r4, r5, r6, lr}
 8008562:	69c6      	ldr	r6, [r0, #28]
 8008564:	4604      	mov	r4, r0
 8008566:	460d      	mov	r5, r1
 8008568:	b976      	cbnz	r6, 8008588 <_Balloc+0x28>
 800856a:	2010      	movs	r0, #16
 800856c:	f7ff ff42 	bl	80083f4 <malloc>
 8008570:	4602      	mov	r2, r0
 8008572:	61e0      	str	r0, [r4, #28]
 8008574:	b920      	cbnz	r0, 8008580 <_Balloc+0x20>
 8008576:	4b18      	ldr	r3, [pc, #96]	@ (80085d8 <_Balloc+0x78>)
 8008578:	4818      	ldr	r0, [pc, #96]	@ (80085dc <_Balloc+0x7c>)
 800857a:	216b      	movs	r1, #107	@ 0x6b
 800857c:	f000 fda6 	bl	80090cc <__assert_func>
 8008580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008584:	6006      	str	r6, [r0, #0]
 8008586:	60c6      	str	r6, [r0, #12]
 8008588:	69e6      	ldr	r6, [r4, #28]
 800858a:	68f3      	ldr	r3, [r6, #12]
 800858c:	b183      	cbz	r3, 80085b0 <_Balloc+0x50>
 800858e:	69e3      	ldr	r3, [r4, #28]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008596:	b9b8      	cbnz	r0, 80085c8 <_Balloc+0x68>
 8008598:	2101      	movs	r1, #1
 800859a:	fa01 f605 	lsl.w	r6, r1, r5
 800859e:	1d72      	adds	r2, r6, #5
 80085a0:	0092      	lsls	r2, r2, #2
 80085a2:	4620      	mov	r0, r4
 80085a4:	f000 fdb0 	bl	8009108 <_calloc_r>
 80085a8:	b160      	cbz	r0, 80085c4 <_Balloc+0x64>
 80085aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085ae:	e00e      	b.n	80085ce <_Balloc+0x6e>
 80085b0:	2221      	movs	r2, #33	@ 0x21
 80085b2:	2104      	movs	r1, #4
 80085b4:	4620      	mov	r0, r4
 80085b6:	f000 fda7 	bl	8009108 <_calloc_r>
 80085ba:	69e3      	ldr	r3, [r4, #28]
 80085bc:	60f0      	str	r0, [r6, #12]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1e4      	bne.n	800858e <_Balloc+0x2e>
 80085c4:	2000      	movs	r0, #0
 80085c6:	bd70      	pop	{r4, r5, r6, pc}
 80085c8:	6802      	ldr	r2, [r0, #0]
 80085ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085ce:	2300      	movs	r3, #0
 80085d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085d4:	e7f7      	b.n	80085c6 <_Balloc+0x66>
 80085d6:	bf00      	nop
 80085d8:	0800cd35 	.word	0x0800cd35
 80085dc:	0800cdb5 	.word	0x0800cdb5

080085e0 <_Bfree>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	69c6      	ldr	r6, [r0, #28]
 80085e4:	4605      	mov	r5, r0
 80085e6:	460c      	mov	r4, r1
 80085e8:	b976      	cbnz	r6, 8008608 <_Bfree+0x28>
 80085ea:	2010      	movs	r0, #16
 80085ec:	f7ff ff02 	bl	80083f4 <malloc>
 80085f0:	4602      	mov	r2, r0
 80085f2:	61e8      	str	r0, [r5, #28]
 80085f4:	b920      	cbnz	r0, 8008600 <_Bfree+0x20>
 80085f6:	4b09      	ldr	r3, [pc, #36]	@ (800861c <_Bfree+0x3c>)
 80085f8:	4809      	ldr	r0, [pc, #36]	@ (8008620 <_Bfree+0x40>)
 80085fa:	218f      	movs	r1, #143	@ 0x8f
 80085fc:	f000 fd66 	bl	80090cc <__assert_func>
 8008600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008604:	6006      	str	r6, [r0, #0]
 8008606:	60c6      	str	r6, [r0, #12]
 8008608:	b13c      	cbz	r4, 800861a <_Bfree+0x3a>
 800860a:	69eb      	ldr	r3, [r5, #28]
 800860c:	6862      	ldr	r2, [r4, #4]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008614:	6021      	str	r1, [r4, #0]
 8008616:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800861a:	bd70      	pop	{r4, r5, r6, pc}
 800861c:	0800cd35 	.word	0x0800cd35
 8008620:	0800cdb5 	.word	0x0800cdb5

08008624 <__multadd>:
 8008624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008628:	690d      	ldr	r5, [r1, #16]
 800862a:	4607      	mov	r7, r0
 800862c:	460c      	mov	r4, r1
 800862e:	461e      	mov	r6, r3
 8008630:	f101 0c14 	add.w	ip, r1, #20
 8008634:	2000      	movs	r0, #0
 8008636:	f8dc 3000 	ldr.w	r3, [ip]
 800863a:	b299      	uxth	r1, r3
 800863c:	fb02 6101 	mla	r1, r2, r1, r6
 8008640:	0c1e      	lsrs	r6, r3, #16
 8008642:	0c0b      	lsrs	r3, r1, #16
 8008644:	fb02 3306 	mla	r3, r2, r6, r3
 8008648:	b289      	uxth	r1, r1
 800864a:	3001      	adds	r0, #1
 800864c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008650:	4285      	cmp	r5, r0
 8008652:	f84c 1b04 	str.w	r1, [ip], #4
 8008656:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800865a:	dcec      	bgt.n	8008636 <__multadd+0x12>
 800865c:	b30e      	cbz	r6, 80086a2 <__multadd+0x7e>
 800865e:	68a3      	ldr	r3, [r4, #8]
 8008660:	42ab      	cmp	r3, r5
 8008662:	dc19      	bgt.n	8008698 <__multadd+0x74>
 8008664:	6861      	ldr	r1, [r4, #4]
 8008666:	4638      	mov	r0, r7
 8008668:	3101      	adds	r1, #1
 800866a:	f7ff ff79 	bl	8008560 <_Balloc>
 800866e:	4680      	mov	r8, r0
 8008670:	b928      	cbnz	r0, 800867e <__multadd+0x5a>
 8008672:	4602      	mov	r2, r0
 8008674:	4b0c      	ldr	r3, [pc, #48]	@ (80086a8 <__multadd+0x84>)
 8008676:	480d      	ldr	r0, [pc, #52]	@ (80086ac <__multadd+0x88>)
 8008678:	21ba      	movs	r1, #186	@ 0xba
 800867a:	f000 fd27 	bl	80090cc <__assert_func>
 800867e:	6922      	ldr	r2, [r4, #16]
 8008680:	3202      	adds	r2, #2
 8008682:	f104 010c 	add.w	r1, r4, #12
 8008686:	0092      	lsls	r2, r2, #2
 8008688:	300c      	adds	r0, #12
 800868a:	f000 fd11 	bl	80090b0 <memcpy>
 800868e:	4621      	mov	r1, r4
 8008690:	4638      	mov	r0, r7
 8008692:	f7ff ffa5 	bl	80085e0 <_Bfree>
 8008696:	4644      	mov	r4, r8
 8008698:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800869c:	3501      	adds	r5, #1
 800869e:	615e      	str	r6, [r3, #20]
 80086a0:	6125      	str	r5, [r4, #16]
 80086a2:	4620      	mov	r0, r4
 80086a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a8:	0800cda4 	.word	0x0800cda4
 80086ac:	0800cdb5 	.word	0x0800cdb5

080086b0 <__hi0bits>:
 80086b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086b4:	4603      	mov	r3, r0
 80086b6:	bf36      	itet	cc
 80086b8:	0403      	lslcc	r3, r0, #16
 80086ba:	2000      	movcs	r0, #0
 80086bc:	2010      	movcc	r0, #16
 80086be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086c2:	bf3c      	itt	cc
 80086c4:	021b      	lslcc	r3, r3, #8
 80086c6:	3008      	addcc	r0, #8
 80086c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086cc:	bf3c      	itt	cc
 80086ce:	011b      	lslcc	r3, r3, #4
 80086d0:	3004      	addcc	r0, #4
 80086d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086d6:	bf3c      	itt	cc
 80086d8:	009b      	lslcc	r3, r3, #2
 80086da:	3002      	addcc	r0, #2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	db05      	blt.n	80086ec <__hi0bits+0x3c>
 80086e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086e4:	f100 0001 	add.w	r0, r0, #1
 80086e8:	bf08      	it	eq
 80086ea:	2020      	moveq	r0, #32
 80086ec:	4770      	bx	lr

080086ee <__lo0bits>:
 80086ee:	6803      	ldr	r3, [r0, #0]
 80086f0:	4602      	mov	r2, r0
 80086f2:	f013 0007 	ands.w	r0, r3, #7
 80086f6:	d00b      	beq.n	8008710 <__lo0bits+0x22>
 80086f8:	07d9      	lsls	r1, r3, #31
 80086fa:	d421      	bmi.n	8008740 <__lo0bits+0x52>
 80086fc:	0798      	lsls	r0, r3, #30
 80086fe:	bf49      	itett	mi
 8008700:	085b      	lsrmi	r3, r3, #1
 8008702:	089b      	lsrpl	r3, r3, #2
 8008704:	2001      	movmi	r0, #1
 8008706:	6013      	strmi	r3, [r2, #0]
 8008708:	bf5c      	itt	pl
 800870a:	6013      	strpl	r3, [r2, #0]
 800870c:	2002      	movpl	r0, #2
 800870e:	4770      	bx	lr
 8008710:	b299      	uxth	r1, r3
 8008712:	b909      	cbnz	r1, 8008718 <__lo0bits+0x2a>
 8008714:	0c1b      	lsrs	r3, r3, #16
 8008716:	2010      	movs	r0, #16
 8008718:	b2d9      	uxtb	r1, r3
 800871a:	b909      	cbnz	r1, 8008720 <__lo0bits+0x32>
 800871c:	3008      	adds	r0, #8
 800871e:	0a1b      	lsrs	r3, r3, #8
 8008720:	0719      	lsls	r1, r3, #28
 8008722:	bf04      	itt	eq
 8008724:	091b      	lsreq	r3, r3, #4
 8008726:	3004      	addeq	r0, #4
 8008728:	0799      	lsls	r1, r3, #30
 800872a:	bf04      	itt	eq
 800872c:	089b      	lsreq	r3, r3, #2
 800872e:	3002      	addeq	r0, #2
 8008730:	07d9      	lsls	r1, r3, #31
 8008732:	d403      	bmi.n	800873c <__lo0bits+0x4e>
 8008734:	085b      	lsrs	r3, r3, #1
 8008736:	f100 0001 	add.w	r0, r0, #1
 800873a:	d003      	beq.n	8008744 <__lo0bits+0x56>
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	4770      	bx	lr
 8008740:	2000      	movs	r0, #0
 8008742:	4770      	bx	lr
 8008744:	2020      	movs	r0, #32
 8008746:	4770      	bx	lr

08008748 <__i2b>:
 8008748:	b510      	push	{r4, lr}
 800874a:	460c      	mov	r4, r1
 800874c:	2101      	movs	r1, #1
 800874e:	f7ff ff07 	bl	8008560 <_Balloc>
 8008752:	4602      	mov	r2, r0
 8008754:	b928      	cbnz	r0, 8008762 <__i2b+0x1a>
 8008756:	4b05      	ldr	r3, [pc, #20]	@ (800876c <__i2b+0x24>)
 8008758:	4805      	ldr	r0, [pc, #20]	@ (8008770 <__i2b+0x28>)
 800875a:	f240 1145 	movw	r1, #325	@ 0x145
 800875e:	f000 fcb5 	bl	80090cc <__assert_func>
 8008762:	2301      	movs	r3, #1
 8008764:	6144      	str	r4, [r0, #20]
 8008766:	6103      	str	r3, [r0, #16]
 8008768:	bd10      	pop	{r4, pc}
 800876a:	bf00      	nop
 800876c:	0800cda4 	.word	0x0800cda4
 8008770:	0800cdb5 	.word	0x0800cdb5

08008774 <__multiply>:
 8008774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008778:	4617      	mov	r7, r2
 800877a:	690a      	ldr	r2, [r1, #16]
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	429a      	cmp	r2, r3
 8008780:	bfa8      	it	ge
 8008782:	463b      	movge	r3, r7
 8008784:	4689      	mov	r9, r1
 8008786:	bfa4      	itt	ge
 8008788:	460f      	movge	r7, r1
 800878a:	4699      	movge	r9, r3
 800878c:	693d      	ldr	r5, [r7, #16]
 800878e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	eb05 060a 	add.w	r6, r5, sl
 800879a:	42b3      	cmp	r3, r6
 800879c:	b085      	sub	sp, #20
 800879e:	bfb8      	it	lt
 80087a0:	3101      	addlt	r1, #1
 80087a2:	f7ff fedd 	bl	8008560 <_Balloc>
 80087a6:	b930      	cbnz	r0, 80087b6 <__multiply+0x42>
 80087a8:	4602      	mov	r2, r0
 80087aa:	4b41      	ldr	r3, [pc, #260]	@ (80088b0 <__multiply+0x13c>)
 80087ac:	4841      	ldr	r0, [pc, #260]	@ (80088b4 <__multiply+0x140>)
 80087ae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087b2:	f000 fc8b 	bl	80090cc <__assert_func>
 80087b6:	f100 0414 	add.w	r4, r0, #20
 80087ba:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80087be:	4623      	mov	r3, r4
 80087c0:	2200      	movs	r2, #0
 80087c2:	4573      	cmp	r3, lr
 80087c4:	d320      	bcc.n	8008808 <__multiply+0x94>
 80087c6:	f107 0814 	add.w	r8, r7, #20
 80087ca:	f109 0114 	add.w	r1, r9, #20
 80087ce:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80087d2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80087d6:	9302      	str	r3, [sp, #8]
 80087d8:	1beb      	subs	r3, r5, r7
 80087da:	3b15      	subs	r3, #21
 80087dc:	f023 0303 	bic.w	r3, r3, #3
 80087e0:	3304      	adds	r3, #4
 80087e2:	3715      	adds	r7, #21
 80087e4:	42bd      	cmp	r5, r7
 80087e6:	bf38      	it	cc
 80087e8:	2304      	movcc	r3, #4
 80087ea:	9301      	str	r3, [sp, #4]
 80087ec:	9b02      	ldr	r3, [sp, #8]
 80087ee:	9103      	str	r1, [sp, #12]
 80087f0:	428b      	cmp	r3, r1
 80087f2:	d80c      	bhi.n	800880e <__multiply+0x9a>
 80087f4:	2e00      	cmp	r6, #0
 80087f6:	dd03      	ble.n	8008800 <__multiply+0x8c>
 80087f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d055      	beq.n	80088ac <__multiply+0x138>
 8008800:	6106      	str	r6, [r0, #16]
 8008802:	b005      	add	sp, #20
 8008804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008808:	f843 2b04 	str.w	r2, [r3], #4
 800880c:	e7d9      	b.n	80087c2 <__multiply+0x4e>
 800880e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008812:	f1ba 0f00 	cmp.w	sl, #0
 8008816:	d01f      	beq.n	8008858 <__multiply+0xe4>
 8008818:	46c4      	mov	ip, r8
 800881a:	46a1      	mov	r9, r4
 800881c:	2700      	movs	r7, #0
 800881e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008822:	f8d9 3000 	ldr.w	r3, [r9]
 8008826:	fa1f fb82 	uxth.w	fp, r2
 800882a:	b29b      	uxth	r3, r3
 800882c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008830:	443b      	add	r3, r7
 8008832:	f8d9 7000 	ldr.w	r7, [r9]
 8008836:	0c12      	lsrs	r2, r2, #16
 8008838:	0c3f      	lsrs	r7, r7, #16
 800883a:	fb0a 7202 	mla	r2, sl, r2, r7
 800883e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008842:	b29b      	uxth	r3, r3
 8008844:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008848:	4565      	cmp	r5, ip
 800884a:	f849 3b04 	str.w	r3, [r9], #4
 800884e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008852:	d8e4      	bhi.n	800881e <__multiply+0xaa>
 8008854:	9b01      	ldr	r3, [sp, #4]
 8008856:	50e7      	str	r7, [r4, r3]
 8008858:	9b03      	ldr	r3, [sp, #12]
 800885a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800885e:	3104      	adds	r1, #4
 8008860:	f1b9 0f00 	cmp.w	r9, #0
 8008864:	d020      	beq.n	80088a8 <__multiply+0x134>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	4647      	mov	r7, r8
 800886a:	46a4      	mov	ip, r4
 800886c:	f04f 0a00 	mov.w	sl, #0
 8008870:	f8b7 b000 	ldrh.w	fp, [r7]
 8008874:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008878:	fb09 220b 	mla	r2, r9, fp, r2
 800887c:	4452      	add	r2, sl
 800887e:	b29b      	uxth	r3, r3
 8008880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008884:	f84c 3b04 	str.w	r3, [ip], #4
 8008888:	f857 3b04 	ldr.w	r3, [r7], #4
 800888c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008890:	f8bc 3000 	ldrh.w	r3, [ip]
 8008894:	fb09 330a 	mla	r3, r9, sl, r3
 8008898:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800889c:	42bd      	cmp	r5, r7
 800889e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088a2:	d8e5      	bhi.n	8008870 <__multiply+0xfc>
 80088a4:	9a01      	ldr	r2, [sp, #4]
 80088a6:	50a3      	str	r3, [r4, r2]
 80088a8:	3404      	adds	r4, #4
 80088aa:	e79f      	b.n	80087ec <__multiply+0x78>
 80088ac:	3e01      	subs	r6, #1
 80088ae:	e7a1      	b.n	80087f4 <__multiply+0x80>
 80088b0:	0800cda4 	.word	0x0800cda4
 80088b4:	0800cdb5 	.word	0x0800cdb5

080088b8 <__pow5mult>:
 80088b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088bc:	4615      	mov	r5, r2
 80088be:	f012 0203 	ands.w	r2, r2, #3
 80088c2:	4607      	mov	r7, r0
 80088c4:	460e      	mov	r6, r1
 80088c6:	d007      	beq.n	80088d8 <__pow5mult+0x20>
 80088c8:	4c25      	ldr	r4, [pc, #148]	@ (8008960 <__pow5mult+0xa8>)
 80088ca:	3a01      	subs	r2, #1
 80088cc:	2300      	movs	r3, #0
 80088ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088d2:	f7ff fea7 	bl	8008624 <__multadd>
 80088d6:	4606      	mov	r6, r0
 80088d8:	10ad      	asrs	r5, r5, #2
 80088da:	d03d      	beq.n	8008958 <__pow5mult+0xa0>
 80088dc:	69fc      	ldr	r4, [r7, #28]
 80088de:	b97c      	cbnz	r4, 8008900 <__pow5mult+0x48>
 80088e0:	2010      	movs	r0, #16
 80088e2:	f7ff fd87 	bl	80083f4 <malloc>
 80088e6:	4602      	mov	r2, r0
 80088e8:	61f8      	str	r0, [r7, #28]
 80088ea:	b928      	cbnz	r0, 80088f8 <__pow5mult+0x40>
 80088ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008964 <__pow5mult+0xac>)
 80088ee:	481e      	ldr	r0, [pc, #120]	@ (8008968 <__pow5mult+0xb0>)
 80088f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80088f4:	f000 fbea 	bl	80090cc <__assert_func>
 80088f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088fc:	6004      	str	r4, [r0, #0]
 80088fe:	60c4      	str	r4, [r0, #12]
 8008900:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008904:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008908:	b94c      	cbnz	r4, 800891e <__pow5mult+0x66>
 800890a:	f240 2171 	movw	r1, #625	@ 0x271
 800890e:	4638      	mov	r0, r7
 8008910:	f7ff ff1a 	bl	8008748 <__i2b>
 8008914:	2300      	movs	r3, #0
 8008916:	f8c8 0008 	str.w	r0, [r8, #8]
 800891a:	4604      	mov	r4, r0
 800891c:	6003      	str	r3, [r0, #0]
 800891e:	f04f 0900 	mov.w	r9, #0
 8008922:	07eb      	lsls	r3, r5, #31
 8008924:	d50a      	bpl.n	800893c <__pow5mult+0x84>
 8008926:	4631      	mov	r1, r6
 8008928:	4622      	mov	r2, r4
 800892a:	4638      	mov	r0, r7
 800892c:	f7ff ff22 	bl	8008774 <__multiply>
 8008930:	4631      	mov	r1, r6
 8008932:	4680      	mov	r8, r0
 8008934:	4638      	mov	r0, r7
 8008936:	f7ff fe53 	bl	80085e0 <_Bfree>
 800893a:	4646      	mov	r6, r8
 800893c:	106d      	asrs	r5, r5, #1
 800893e:	d00b      	beq.n	8008958 <__pow5mult+0xa0>
 8008940:	6820      	ldr	r0, [r4, #0]
 8008942:	b938      	cbnz	r0, 8008954 <__pow5mult+0x9c>
 8008944:	4622      	mov	r2, r4
 8008946:	4621      	mov	r1, r4
 8008948:	4638      	mov	r0, r7
 800894a:	f7ff ff13 	bl	8008774 <__multiply>
 800894e:	6020      	str	r0, [r4, #0]
 8008950:	f8c0 9000 	str.w	r9, [r0]
 8008954:	4604      	mov	r4, r0
 8008956:	e7e4      	b.n	8008922 <__pow5mult+0x6a>
 8008958:	4630      	mov	r0, r6
 800895a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800895e:	bf00      	nop
 8008960:	0800ce68 	.word	0x0800ce68
 8008964:	0800cd35 	.word	0x0800cd35
 8008968:	0800cdb5 	.word	0x0800cdb5

0800896c <__lshift>:
 800896c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008970:	460c      	mov	r4, r1
 8008972:	6849      	ldr	r1, [r1, #4]
 8008974:	6923      	ldr	r3, [r4, #16]
 8008976:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800897a:	68a3      	ldr	r3, [r4, #8]
 800897c:	4607      	mov	r7, r0
 800897e:	4691      	mov	r9, r2
 8008980:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008984:	f108 0601 	add.w	r6, r8, #1
 8008988:	42b3      	cmp	r3, r6
 800898a:	db0b      	blt.n	80089a4 <__lshift+0x38>
 800898c:	4638      	mov	r0, r7
 800898e:	f7ff fde7 	bl	8008560 <_Balloc>
 8008992:	4605      	mov	r5, r0
 8008994:	b948      	cbnz	r0, 80089aa <__lshift+0x3e>
 8008996:	4602      	mov	r2, r0
 8008998:	4b28      	ldr	r3, [pc, #160]	@ (8008a3c <__lshift+0xd0>)
 800899a:	4829      	ldr	r0, [pc, #164]	@ (8008a40 <__lshift+0xd4>)
 800899c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089a0:	f000 fb94 	bl	80090cc <__assert_func>
 80089a4:	3101      	adds	r1, #1
 80089a6:	005b      	lsls	r3, r3, #1
 80089a8:	e7ee      	b.n	8008988 <__lshift+0x1c>
 80089aa:	2300      	movs	r3, #0
 80089ac:	f100 0114 	add.w	r1, r0, #20
 80089b0:	f100 0210 	add.w	r2, r0, #16
 80089b4:	4618      	mov	r0, r3
 80089b6:	4553      	cmp	r3, sl
 80089b8:	db33      	blt.n	8008a22 <__lshift+0xb6>
 80089ba:	6920      	ldr	r0, [r4, #16]
 80089bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089c0:	f104 0314 	add.w	r3, r4, #20
 80089c4:	f019 091f 	ands.w	r9, r9, #31
 80089c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089d0:	d02b      	beq.n	8008a2a <__lshift+0xbe>
 80089d2:	f1c9 0e20 	rsb	lr, r9, #32
 80089d6:	468a      	mov	sl, r1
 80089d8:	2200      	movs	r2, #0
 80089da:	6818      	ldr	r0, [r3, #0]
 80089dc:	fa00 f009 	lsl.w	r0, r0, r9
 80089e0:	4310      	orrs	r0, r2
 80089e2:	f84a 0b04 	str.w	r0, [sl], #4
 80089e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ea:	459c      	cmp	ip, r3
 80089ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80089f0:	d8f3      	bhi.n	80089da <__lshift+0x6e>
 80089f2:	ebac 0304 	sub.w	r3, ip, r4
 80089f6:	3b15      	subs	r3, #21
 80089f8:	f023 0303 	bic.w	r3, r3, #3
 80089fc:	3304      	adds	r3, #4
 80089fe:	f104 0015 	add.w	r0, r4, #21
 8008a02:	4560      	cmp	r0, ip
 8008a04:	bf88      	it	hi
 8008a06:	2304      	movhi	r3, #4
 8008a08:	50ca      	str	r2, [r1, r3]
 8008a0a:	b10a      	cbz	r2, 8008a10 <__lshift+0xa4>
 8008a0c:	f108 0602 	add.w	r6, r8, #2
 8008a10:	3e01      	subs	r6, #1
 8008a12:	4638      	mov	r0, r7
 8008a14:	612e      	str	r6, [r5, #16]
 8008a16:	4621      	mov	r1, r4
 8008a18:	f7ff fde2 	bl	80085e0 <_Bfree>
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a22:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a26:	3301      	adds	r3, #1
 8008a28:	e7c5      	b.n	80089b6 <__lshift+0x4a>
 8008a2a:	3904      	subs	r1, #4
 8008a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a30:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a34:	459c      	cmp	ip, r3
 8008a36:	d8f9      	bhi.n	8008a2c <__lshift+0xc0>
 8008a38:	e7ea      	b.n	8008a10 <__lshift+0xa4>
 8008a3a:	bf00      	nop
 8008a3c:	0800cda4 	.word	0x0800cda4
 8008a40:	0800cdb5 	.word	0x0800cdb5

08008a44 <__mcmp>:
 8008a44:	690a      	ldr	r2, [r1, #16]
 8008a46:	4603      	mov	r3, r0
 8008a48:	6900      	ldr	r0, [r0, #16]
 8008a4a:	1a80      	subs	r0, r0, r2
 8008a4c:	b530      	push	{r4, r5, lr}
 8008a4e:	d10e      	bne.n	8008a6e <__mcmp+0x2a>
 8008a50:	3314      	adds	r3, #20
 8008a52:	3114      	adds	r1, #20
 8008a54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a64:	4295      	cmp	r5, r2
 8008a66:	d003      	beq.n	8008a70 <__mcmp+0x2c>
 8008a68:	d205      	bcs.n	8008a76 <__mcmp+0x32>
 8008a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a6e:	bd30      	pop	{r4, r5, pc}
 8008a70:	42a3      	cmp	r3, r4
 8008a72:	d3f3      	bcc.n	8008a5c <__mcmp+0x18>
 8008a74:	e7fb      	b.n	8008a6e <__mcmp+0x2a>
 8008a76:	2001      	movs	r0, #1
 8008a78:	e7f9      	b.n	8008a6e <__mcmp+0x2a>
	...

08008a7c <__mdiff>:
 8008a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a80:	4689      	mov	r9, r1
 8008a82:	4606      	mov	r6, r0
 8008a84:	4611      	mov	r1, r2
 8008a86:	4648      	mov	r0, r9
 8008a88:	4614      	mov	r4, r2
 8008a8a:	f7ff ffdb 	bl	8008a44 <__mcmp>
 8008a8e:	1e05      	subs	r5, r0, #0
 8008a90:	d112      	bne.n	8008ab8 <__mdiff+0x3c>
 8008a92:	4629      	mov	r1, r5
 8008a94:	4630      	mov	r0, r6
 8008a96:	f7ff fd63 	bl	8008560 <_Balloc>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	b928      	cbnz	r0, 8008aaa <__mdiff+0x2e>
 8008a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8008b9c <__mdiff+0x120>)
 8008aa0:	f240 2137 	movw	r1, #567	@ 0x237
 8008aa4:	483e      	ldr	r0, [pc, #248]	@ (8008ba0 <__mdiff+0x124>)
 8008aa6:	f000 fb11 	bl	80090cc <__assert_func>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	b003      	add	sp, #12
 8008ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab8:	bfbc      	itt	lt
 8008aba:	464b      	movlt	r3, r9
 8008abc:	46a1      	movlt	r9, r4
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ac4:	bfba      	itte	lt
 8008ac6:	461c      	movlt	r4, r3
 8008ac8:	2501      	movlt	r5, #1
 8008aca:	2500      	movge	r5, #0
 8008acc:	f7ff fd48 	bl	8008560 <_Balloc>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	b918      	cbnz	r0, 8008adc <__mdiff+0x60>
 8008ad4:	4b31      	ldr	r3, [pc, #196]	@ (8008b9c <__mdiff+0x120>)
 8008ad6:	f240 2145 	movw	r1, #581	@ 0x245
 8008ada:	e7e3      	b.n	8008aa4 <__mdiff+0x28>
 8008adc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ae0:	6926      	ldr	r6, [r4, #16]
 8008ae2:	60c5      	str	r5, [r0, #12]
 8008ae4:	f109 0310 	add.w	r3, r9, #16
 8008ae8:	f109 0514 	add.w	r5, r9, #20
 8008aec:	f104 0e14 	add.w	lr, r4, #20
 8008af0:	f100 0b14 	add.w	fp, r0, #20
 8008af4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008af8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008afc:	9301      	str	r3, [sp, #4]
 8008afe:	46d9      	mov	r9, fp
 8008b00:	f04f 0c00 	mov.w	ip, #0
 8008b04:	9b01      	ldr	r3, [sp, #4]
 8008b06:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	fa1f f38a 	uxth.w	r3, sl
 8008b14:	4619      	mov	r1, r3
 8008b16:	b283      	uxth	r3, r0
 8008b18:	1acb      	subs	r3, r1, r3
 8008b1a:	0c00      	lsrs	r0, r0, #16
 8008b1c:	4463      	add	r3, ip
 8008b1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b2c:	4576      	cmp	r6, lr
 8008b2e:	f849 3b04 	str.w	r3, [r9], #4
 8008b32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b36:	d8e5      	bhi.n	8008b04 <__mdiff+0x88>
 8008b38:	1b33      	subs	r3, r6, r4
 8008b3a:	3b15      	subs	r3, #21
 8008b3c:	f023 0303 	bic.w	r3, r3, #3
 8008b40:	3415      	adds	r4, #21
 8008b42:	3304      	adds	r3, #4
 8008b44:	42a6      	cmp	r6, r4
 8008b46:	bf38      	it	cc
 8008b48:	2304      	movcc	r3, #4
 8008b4a:	441d      	add	r5, r3
 8008b4c:	445b      	add	r3, fp
 8008b4e:	461e      	mov	r6, r3
 8008b50:	462c      	mov	r4, r5
 8008b52:	4544      	cmp	r4, r8
 8008b54:	d30e      	bcc.n	8008b74 <__mdiff+0xf8>
 8008b56:	f108 0103 	add.w	r1, r8, #3
 8008b5a:	1b49      	subs	r1, r1, r5
 8008b5c:	f021 0103 	bic.w	r1, r1, #3
 8008b60:	3d03      	subs	r5, #3
 8008b62:	45a8      	cmp	r8, r5
 8008b64:	bf38      	it	cc
 8008b66:	2100      	movcc	r1, #0
 8008b68:	440b      	add	r3, r1
 8008b6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b6e:	b191      	cbz	r1, 8008b96 <__mdiff+0x11a>
 8008b70:	6117      	str	r7, [r2, #16]
 8008b72:	e79d      	b.n	8008ab0 <__mdiff+0x34>
 8008b74:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b78:	46e6      	mov	lr, ip
 8008b7a:	0c08      	lsrs	r0, r1, #16
 8008b7c:	fa1c fc81 	uxtah	ip, ip, r1
 8008b80:	4471      	add	r1, lr
 8008b82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b86:	b289      	uxth	r1, r1
 8008b88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b8c:	f846 1b04 	str.w	r1, [r6], #4
 8008b90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b94:	e7dd      	b.n	8008b52 <__mdiff+0xd6>
 8008b96:	3f01      	subs	r7, #1
 8008b98:	e7e7      	b.n	8008b6a <__mdiff+0xee>
 8008b9a:	bf00      	nop
 8008b9c:	0800cda4 	.word	0x0800cda4
 8008ba0:	0800cdb5 	.word	0x0800cdb5

08008ba4 <__d2b>:
 8008ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ba8:	460f      	mov	r7, r1
 8008baa:	2101      	movs	r1, #1
 8008bac:	ec59 8b10 	vmov	r8, r9, d0
 8008bb0:	4616      	mov	r6, r2
 8008bb2:	f7ff fcd5 	bl	8008560 <_Balloc>
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	b930      	cbnz	r0, 8008bc8 <__d2b+0x24>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	4b23      	ldr	r3, [pc, #140]	@ (8008c4c <__d2b+0xa8>)
 8008bbe:	4824      	ldr	r0, [pc, #144]	@ (8008c50 <__d2b+0xac>)
 8008bc0:	f240 310f 	movw	r1, #783	@ 0x30f
 8008bc4:	f000 fa82 	bl	80090cc <__assert_func>
 8008bc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bd0:	b10d      	cbz	r5, 8008bd6 <__d2b+0x32>
 8008bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bd6:	9301      	str	r3, [sp, #4]
 8008bd8:	f1b8 0300 	subs.w	r3, r8, #0
 8008bdc:	d023      	beq.n	8008c26 <__d2b+0x82>
 8008bde:	4668      	mov	r0, sp
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	f7ff fd84 	bl	80086ee <__lo0bits>
 8008be6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008bea:	b1d0      	cbz	r0, 8008c22 <__d2b+0x7e>
 8008bec:	f1c0 0320 	rsb	r3, r0, #32
 8008bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf4:	430b      	orrs	r3, r1
 8008bf6:	40c2      	lsrs	r2, r0
 8008bf8:	6163      	str	r3, [r4, #20]
 8008bfa:	9201      	str	r2, [sp, #4]
 8008bfc:	9b01      	ldr	r3, [sp, #4]
 8008bfe:	61a3      	str	r3, [r4, #24]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	bf0c      	ite	eq
 8008c04:	2201      	moveq	r2, #1
 8008c06:	2202      	movne	r2, #2
 8008c08:	6122      	str	r2, [r4, #16]
 8008c0a:	b1a5      	cbz	r5, 8008c36 <__d2b+0x92>
 8008c0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c10:	4405      	add	r5, r0
 8008c12:	603d      	str	r5, [r7, #0]
 8008c14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c18:	6030      	str	r0, [r6, #0]
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	b003      	add	sp, #12
 8008c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c22:	6161      	str	r1, [r4, #20]
 8008c24:	e7ea      	b.n	8008bfc <__d2b+0x58>
 8008c26:	a801      	add	r0, sp, #4
 8008c28:	f7ff fd61 	bl	80086ee <__lo0bits>
 8008c2c:	9b01      	ldr	r3, [sp, #4]
 8008c2e:	6163      	str	r3, [r4, #20]
 8008c30:	3020      	adds	r0, #32
 8008c32:	2201      	movs	r2, #1
 8008c34:	e7e8      	b.n	8008c08 <__d2b+0x64>
 8008c36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c3e:	6038      	str	r0, [r7, #0]
 8008c40:	6918      	ldr	r0, [r3, #16]
 8008c42:	f7ff fd35 	bl	80086b0 <__hi0bits>
 8008c46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c4a:	e7e5      	b.n	8008c18 <__d2b+0x74>
 8008c4c:	0800cda4 	.word	0x0800cda4
 8008c50:	0800cdb5 	.word	0x0800cdb5

08008c54 <__ssputs_r>:
 8008c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c58:	688e      	ldr	r6, [r1, #8]
 8008c5a:	461f      	mov	r7, r3
 8008c5c:	42be      	cmp	r6, r7
 8008c5e:	680b      	ldr	r3, [r1, #0]
 8008c60:	4682      	mov	sl, r0
 8008c62:	460c      	mov	r4, r1
 8008c64:	4690      	mov	r8, r2
 8008c66:	d82d      	bhi.n	8008cc4 <__ssputs_r+0x70>
 8008c68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c70:	d026      	beq.n	8008cc0 <__ssputs_r+0x6c>
 8008c72:	6965      	ldr	r5, [r4, #20]
 8008c74:	6909      	ldr	r1, [r1, #16]
 8008c76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c7a:	eba3 0901 	sub.w	r9, r3, r1
 8008c7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c82:	1c7b      	adds	r3, r7, #1
 8008c84:	444b      	add	r3, r9
 8008c86:	106d      	asrs	r5, r5, #1
 8008c88:	429d      	cmp	r5, r3
 8008c8a:	bf38      	it	cc
 8008c8c:	461d      	movcc	r5, r3
 8008c8e:	0553      	lsls	r3, r2, #21
 8008c90:	d527      	bpl.n	8008ce2 <__ssputs_r+0x8e>
 8008c92:	4629      	mov	r1, r5
 8008c94:	f7ff fbd8 	bl	8008448 <_malloc_r>
 8008c98:	4606      	mov	r6, r0
 8008c9a:	b360      	cbz	r0, 8008cf6 <__ssputs_r+0xa2>
 8008c9c:	6921      	ldr	r1, [r4, #16]
 8008c9e:	464a      	mov	r2, r9
 8008ca0:	f000 fa06 	bl	80090b0 <memcpy>
 8008ca4:	89a3      	ldrh	r3, [r4, #12]
 8008ca6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cae:	81a3      	strh	r3, [r4, #12]
 8008cb0:	6126      	str	r6, [r4, #16]
 8008cb2:	6165      	str	r5, [r4, #20]
 8008cb4:	444e      	add	r6, r9
 8008cb6:	eba5 0509 	sub.w	r5, r5, r9
 8008cba:	6026      	str	r6, [r4, #0]
 8008cbc:	60a5      	str	r5, [r4, #8]
 8008cbe:	463e      	mov	r6, r7
 8008cc0:	42be      	cmp	r6, r7
 8008cc2:	d900      	bls.n	8008cc6 <__ssputs_r+0x72>
 8008cc4:	463e      	mov	r6, r7
 8008cc6:	6820      	ldr	r0, [r4, #0]
 8008cc8:	4632      	mov	r2, r6
 8008cca:	4641      	mov	r1, r8
 8008ccc:	f000 f9c6 	bl	800905c <memmove>
 8008cd0:	68a3      	ldr	r3, [r4, #8]
 8008cd2:	1b9b      	subs	r3, r3, r6
 8008cd4:	60a3      	str	r3, [r4, #8]
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	4433      	add	r3, r6
 8008cda:	6023      	str	r3, [r4, #0]
 8008cdc:	2000      	movs	r0, #0
 8008cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce2:	462a      	mov	r2, r5
 8008ce4:	f000 fa36 	bl	8009154 <_realloc_r>
 8008ce8:	4606      	mov	r6, r0
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d1e0      	bne.n	8008cb0 <__ssputs_r+0x5c>
 8008cee:	6921      	ldr	r1, [r4, #16]
 8008cf0:	4650      	mov	r0, sl
 8008cf2:	f7ff fb35 	bl	8008360 <_free_r>
 8008cf6:	230c      	movs	r3, #12
 8008cf8:	f8ca 3000 	str.w	r3, [sl]
 8008cfc:	89a3      	ldrh	r3, [r4, #12]
 8008cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d02:	81a3      	strh	r3, [r4, #12]
 8008d04:	f04f 30ff 	mov.w	r0, #4294967295
 8008d08:	e7e9      	b.n	8008cde <__ssputs_r+0x8a>
	...

08008d0c <_svfiprintf_r>:
 8008d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d10:	4698      	mov	r8, r3
 8008d12:	898b      	ldrh	r3, [r1, #12]
 8008d14:	061b      	lsls	r3, r3, #24
 8008d16:	b09d      	sub	sp, #116	@ 0x74
 8008d18:	4607      	mov	r7, r0
 8008d1a:	460d      	mov	r5, r1
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	d510      	bpl.n	8008d42 <_svfiprintf_r+0x36>
 8008d20:	690b      	ldr	r3, [r1, #16]
 8008d22:	b973      	cbnz	r3, 8008d42 <_svfiprintf_r+0x36>
 8008d24:	2140      	movs	r1, #64	@ 0x40
 8008d26:	f7ff fb8f 	bl	8008448 <_malloc_r>
 8008d2a:	6028      	str	r0, [r5, #0]
 8008d2c:	6128      	str	r0, [r5, #16]
 8008d2e:	b930      	cbnz	r0, 8008d3e <_svfiprintf_r+0x32>
 8008d30:	230c      	movs	r3, #12
 8008d32:	603b      	str	r3, [r7, #0]
 8008d34:	f04f 30ff 	mov.w	r0, #4294967295
 8008d38:	b01d      	add	sp, #116	@ 0x74
 8008d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3e:	2340      	movs	r3, #64	@ 0x40
 8008d40:	616b      	str	r3, [r5, #20]
 8008d42:	2300      	movs	r3, #0
 8008d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d46:	2320      	movs	r3, #32
 8008d48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d50:	2330      	movs	r3, #48	@ 0x30
 8008d52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ef0 <_svfiprintf_r+0x1e4>
 8008d56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d5a:	f04f 0901 	mov.w	r9, #1
 8008d5e:	4623      	mov	r3, r4
 8008d60:	469a      	mov	sl, r3
 8008d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d66:	b10a      	cbz	r2, 8008d6c <_svfiprintf_r+0x60>
 8008d68:	2a25      	cmp	r2, #37	@ 0x25
 8008d6a:	d1f9      	bne.n	8008d60 <_svfiprintf_r+0x54>
 8008d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d70:	d00b      	beq.n	8008d8a <_svfiprintf_r+0x7e>
 8008d72:	465b      	mov	r3, fp
 8008d74:	4622      	mov	r2, r4
 8008d76:	4629      	mov	r1, r5
 8008d78:	4638      	mov	r0, r7
 8008d7a:	f7ff ff6b 	bl	8008c54 <__ssputs_r>
 8008d7e:	3001      	adds	r0, #1
 8008d80:	f000 80a7 	beq.w	8008ed2 <_svfiprintf_r+0x1c6>
 8008d84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d86:	445a      	add	r2, fp
 8008d88:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 809f 	beq.w	8008ed2 <_svfiprintf_r+0x1c6>
 8008d94:	2300      	movs	r3, #0
 8008d96:	f04f 32ff 	mov.w	r2, #4294967295
 8008d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d9e:	f10a 0a01 	add.w	sl, sl, #1
 8008da2:	9304      	str	r3, [sp, #16]
 8008da4:	9307      	str	r3, [sp, #28]
 8008da6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008daa:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dac:	4654      	mov	r4, sl
 8008dae:	2205      	movs	r2, #5
 8008db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db4:	484e      	ldr	r0, [pc, #312]	@ (8008ef0 <_svfiprintf_r+0x1e4>)
 8008db6:	f7f7 fa2b 	bl	8000210 <memchr>
 8008dba:	9a04      	ldr	r2, [sp, #16]
 8008dbc:	b9d8      	cbnz	r0, 8008df6 <_svfiprintf_r+0xea>
 8008dbe:	06d0      	lsls	r0, r2, #27
 8008dc0:	bf44      	itt	mi
 8008dc2:	2320      	movmi	r3, #32
 8008dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dc8:	0711      	lsls	r1, r2, #28
 8008dca:	bf44      	itt	mi
 8008dcc:	232b      	movmi	r3, #43	@ 0x2b
 8008dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dd8:	d015      	beq.n	8008e06 <_svfiprintf_r+0xfa>
 8008dda:	9a07      	ldr	r2, [sp, #28]
 8008ddc:	4654      	mov	r4, sl
 8008dde:	2000      	movs	r0, #0
 8008de0:	f04f 0c0a 	mov.w	ip, #10
 8008de4:	4621      	mov	r1, r4
 8008de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dea:	3b30      	subs	r3, #48	@ 0x30
 8008dec:	2b09      	cmp	r3, #9
 8008dee:	d94b      	bls.n	8008e88 <_svfiprintf_r+0x17c>
 8008df0:	b1b0      	cbz	r0, 8008e20 <_svfiprintf_r+0x114>
 8008df2:	9207      	str	r2, [sp, #28]
 8008df4:	e014      	b.n	8008e20 <_svfiprintf_r+0x114>
 8008df6:	eba0 0308 	sub.w	r3, r0, r8
 8008dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	9304      	str	r3, [sp, #16]
 8008e02:	46a2      	mov	sl, r4
 8008e04:	e7d2      	b.n	8008dac <_svfiprintf_r+0xa0>
 8008e06:	9b03      	ldr	r3, [sp, #12]
 8008e08:	1d19      	adds	r1, r3, #4
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	9103      	str	r1, [sp, #12]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	bfbb      	ittet	lt
 8008e12:	425b      	neglt	r3, r3
 8008e14:	f042 0202 	orrlt.w	r2, r2, #2
 8008e18:	9307      	strge	r3, [sp, #28]
 8008e1a:	9307      	strlt	r3, [sp, #28]
 8008e1c:	bfb8      	it	lt
 8008e1e:	9204      	strlt	r2, [sp, #16]
 8008e20:	7823      	ldrb	r3, [r4, #0]
 8008e22:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e24:	d10a      	bne.n	8008e3c <_svfiprintf_r+0x130>
 8008e26:	7863      	ldrb	r3, [r4, #1]
 8008e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e2a:	d132      	bne.n	8008e92 <_svfiprintf_r+0x186>
 8008e2c:	9b03      	ldr	r3, [sp, #12]
 8008e2e:	1d1a      	adds	r2, r3, #4
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	9203      	str	r2, [sp, #12]
 8008e34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e38:	3402      	adds	r4, #2
 8008e3a:	9305      	str	r3, [sp, #20]
 8008e3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f00 <_svfiprintf_r+0x1f4>
 8008e40:	7821      	ldrb	r1, [r4, #0]
 8008e42:	2203      	movs	r2, #3
 8008e44:	4650      	mov	r0, sl
 8008e46:	f7f7 f9e3 	bl	8000210 <memchr>
 8008e4a:	b138      	cbz	r0, 8008e5c <_svfiprintf_r+0x150>
 8008e4c:	9b04      	ldr	r3, [sp, #16]
 8008e4e:	eba0 000a 	sub.w	r0, r0, sl
 8008e52:	2240      	movs	r2, #64	@ 0x40
 8008e54:	4082      	lsls	r2, r0
 8008e56:	4313      	orrs	r3, r2
 8008e58:	3401      	adds	r4, #1
 8008e5a:	9304      	str	r3, [sp, #16]
 8008e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e60:	4824      	ldr	r0, [pc, #144]	@ (8008ef4 <_svfiprintf_r+0x1e8>)
 8008e62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e66:	2206      	movs	r2, #6
 8008e68:	f7f7 f9d2 	bl	8000210 <memchr>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d036      	beq.n	8008ede <_svfiprintf_r+0x1d2>
 8008e70:	4b21      	ldr	r3, [pc, #132]	@ (8008ef8 <_svfiprintf_r+0x1ec>)
 8008e72:	bb1b      	cbnz	r3, 8008ebc <_svfiprintf_r+0x1b0>
 8008e74:	9b03      	ldr	r3, [sp, #12]
 8008e76:	3307      	adds	r3, #7
 8008e78:	f023 0307 	bic.w	r3, r3, #7
 8008e7c:	3308      	adds	r3, #8
 8008e7e:	9303      	str	r3, [sp, #12]
 8008e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e82:	4433      	add	r3, r6
 8008e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e86:	e76a      	b.n	8008d5e <_svfiprintf_r+0x52>
 8008e88:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	2001      	movs	r0, #1
 8008e90:	e7a8      	b.n	8008de4 <_svfiprintf_r+0xd8>
 8008e92:	2300      	movs	r3, #0
 8008e94:	3401      	adds	r4, #1
 8008e96:	9305      	str	r3, [sp, #20]
 8008e98:	4619      	mov	r1, r3
 8008e9a:	f04f 0c0a 	mov.w	ip, #10
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ea4:	3a30      	subs	r2, #48	@ 0x30
 8008ea6:	2a09      	cmp	r2, #9
 8008ea8:	d903      	bls.n	8008eb2 <_svfiprintf_r+0x1a6>
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0c6      	beq.n	8008e3c <_svfiprintf_r+0x130>
 8008eae:	9105      	str	r1, [sp, #20]
 8008eb0:	e7c4      	b.n	8008e3c <_svfiprintf_r+0x130>
 8008eb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e7f0      	b.n	8008e9e <_svfiprintf_r+0x192>
 8008ebc:	ab03      	add	r3, sp, #12
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	462a      	mov	r2, r5
 8008ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8008efc <_svfiprintf_r+0x1f0>)
 8008ec4:	a904      	add	r1, sp, #16
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	f7fd fe80 	bl	8006bcc <_printf_float>
 8008ecc:	1c42      	adds	r2, r0, #1
 8008ece:	4606      	mov	r6, r0
 8008ed0:	d1d6      	bne.n	8008e80 <_svfiprintf_r+0x174>
 8008ed2:	89ab      	ldrh	r3, [r5, #12]
 8008ed4:	065b      	lsls	r3, r3, #25
 8008ed6:	f53f af2d 	bmi.w	8008d34 <_svfiprintf_r+0x28>
 8008eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008edc:	e72c      	b.n	8008d38 <_svfiprintf_r+0x2c>
 8008ede:	ab03      	add	r3, sp, #12
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	462a      	mov	r2, r5
 8008ee4:	4b05      	ldr	r3, [pc, #20]	@ (8008efc <_svfiprintf_r+0x1f0>)
 8008ee6:	a904      	add	r1, sp, #16
 8008ee8:	4638      	mov	r0, r7
 8008eea:	f7fe f907 	bl	80070fc <_printf_i>
 8008eee:	e7ed      	b.n	8008ecc <_svfiprintf_r+0x1c0>
 8008ef0:	0800ce0e 	.word	0x0800ce0e
 8008ef4:	0800ce18 	.word	0x0800ce18
 8008ef8:	08006bcd 	.word	0x08006bcd
 8008efc:	08008c55 	.word	0x08008c55
 8008f00:	0800ce14 	.word	0x0800ce14

08008f04 <__sflush_r>:
 8008f04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0c:	0716      	lsls	r6, r2, #28
 8008f0e:	4605      	mov	r5, r0
 8008f10:	460c      	mov	r4, r1
 8008f12:	d454      	bmi.n	8008fbe <__sflush_r+0xba>
 8008f14:	684b      	ldr	r3, [r1, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	dc02      	bgt.n	8008f20 <__sflush_r+0x1c>
 8008f1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	dd48      	ble.n	8008fb2 <__sflush_r+0xae>
 8008f20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f22:	2e00      	cmp	r6, #0
 8008f24:	d045      	beq.n	8008fb2 <__sflush_r+0xae>
 8008f26:	2300      	movs	r3, #0
 8008f28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f2c:	682f      	ldr	r7, [r5, #0]
 8008f2e:	6a21      	ldr	r1, [r4, #32]
 8008f30:	602b      	str	r3, [r5, #0]
 8008f32:	d030      	beq.n	8008f96 <__sflush_r+0x92>
 8008f34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	0759      	lsls	r1, r3, #29
 8008f3a:	d505      	bpl.n	8008f48 <__sflush_r+0x44>
 8008f3c:	6863      	ldr	r3, [r4, #4]
 8008f3e:	1ad2      	subs	r2, r2, r3
 8008f40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f42:	b10b      	cbz	r3, 8008f48 <__sflush_r+0x44>
 8008f44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f46:	1ad2      	subs	r2, r2, r3
 8008f48:	2300      	movs	r3, #0
 8008f4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f4c:	6a21      	ldr	r1, [r4, #32]
 8008f4e:	4628      	mov	r0, r5
 8008f50:	47b0      	blx	r6
 8008f52:	1c43      	adds	r3, r0, #1
 8008f54:	89a3      	ldrh	r3, [r4, #12]
 8008f56:	d106      	bne.n	8008f66 <__sflush_r+0x62>
 8008f58:	6829      	ldr	r1, [r5, #0]
 8008f5a:	291d      	cmp	r1, #29
 8008f5c:	d82b      	bhi.n	8008fb6 <__sflush_r+0xb2>
 8008f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8009008 <__sflush_r+0x104>)
 8008f60:	40ca      	lsrs	r2, r1
 8008f62:	07d6      	lsls	r6, r2, #31
 8008f64:	d527      	bpl.n	8008fb6 <__sflush_r+0xb2>
 8008f66:	2200      	movs	r2, #0
 8008f68:	6062      	str	r2, [r4, #4]
 8008f6a:	04d9      	lsls	r1, r3, #19
 8008f6c:	6922      	ldr	r2, [r4, #16]
 8008f6e:	6022      	str	r2, [r4, #0]
 8008f70:	d504      	bpl.n	8008f7c <__sflush_r+0x78>
 8008f72:	1c42      	adds	r2, r0, #1
 8008f74:	d101      	bne.n	8008f7a <__sflush_r+0x76>
 8008f76:	682b      	ldr	r3, [r5, #0]
 8008f78:	b903      	cbnz	r3, 8008f7c <__sflush_r+0x78>
 8008f7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f7e:	602f      	str	r7, [r5, #0]
 8008f80:	b1b9      	cbz	r1, 8008fb2 <__sflush_r+0xae>
 8008f82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f86:	4299      	cmp	r1, r3
 8008f88:	d002      	beq.n	8008f90 <__sflush_r+0x8c>
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	f7ff f9e8 	bl	8008360 <_free_r>
 8008f90:	2300      	movs	r3, #0
 8008f92:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f94:	e00d      	b.n	8008fb2 <__sflush_r+0xae>
 8008f96:	2301      	movs	r3, #1
 8008f98:	4628      	mov	r0, r5
 8008f9a:	47b0      	blx	r6
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	1c50      	adds	r0, r2, #1
 8008fa0:	d1c9      	bne.n	8008f36 <__sflush_r+0x32>
 8008fa2:	682b      	ldr	r3, [r5, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0c6      	beq.n	8008f36 <__sflush_r+0x32>
 8008fa8:	2b1d      	cmp	r3, #29
 8008faa:	d001      	beq.n	8008fb0 <__sflush_r+0xac>
 8008fac:	2b16      	cmp	r3, #22
 8008fae:	d11e      	bne.n	8008fee <__sflush_r+0xea>
 8008fb0:	602f      	str	r7, [r5, #0]
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	e022      	b.n	8008ffc <__sflush_r+0xf8>
 8008fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fba:	b21b      	sxth	r3, r3
 8008fbc:	e01b      	b.n	8008ff6 <__sflush_r+0xf2>
 8008fbe:	690f      	ldr	r7, [r1, #16]
 8008fc0:	2f00      	cmp	r7, #0
 8008fc2:	d0f6      	beq.n	8008fb2 <__sflush_r+0xae>
 8008fc4:	0793      	lsls	r3, r2, #30
 8008fc6:	680e      	ldr	r6, [r1, #0]
 8008fc8:	bf08      	it	eq
 8008fca:	694b      	ldreq	r3, [r1, #20]
 8008fcc:	600f      	str	r7, [r1, #0]
 8008fce:	bf18      	it	ne
 8008fd0:	2300      	movne	r3, #0
 8008fd2:	eba6 0807 	sub.w	r8, r6, r7
 8008fd6:	608b      	str	r3, [r1, #8]
 8008fd8:	f1b8 0f00 	cmp.w	r8, #0
 8008fdc:	dde9      	ble.n	8008fb2 <__sflush_r+0xae>
 8008fde:	6a21      	ldr	r1, [r4, #32]
 8008fe0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008fe2:	4643      	mov	r3, r8
 8008fe4:	463a      	mov	r2, r7
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	47b0      	blx	r6
 8008fea:	2800      	cmp	r0, #0
 8008fec:	dc08      	bgt.n	8009000 <__sflush_r+0xfc>
 8008fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ff6:	81a3      	strh	r3, [r4, #12]
 8008ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009000:	4407      	add	r7, r0
 8009002:	eba8 0800 	sub.w	r8, r8, r0
 8009006:	e7e7      	b.n	8008fd8 <__sflush_r+0xd4>
 8009008:	20400001 	.word	0x20400001

0800900c <_fflush_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	690b      	ldr	r3, [r1, #16]
 8009010:	4605      	mov	r5, r0
 8009012:	460c      	mov	r4, r1
 8009014:	b913      	cbnz	r3, 800901c <_fflush_r+0x10>
 8009016:	2500      	movs	r5, #0
 8009018:	4628      	mov	r0, r5
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	b118      	cbz	r0, 8009026 <_fflush_r+0x1a>
 800901e:	6a03      	ldr	r3, [r0, #32]
 8009020:	b90b      	cbnz	r3, 8009026 <_fflush_r+0x1a>
 8009022:	f7fe fa15 	bl	8007450 <__sinit>
 8009026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0f3      	beq.n	8009016 <_fflush_r+0xa>
 800902e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009030:	07d0      	lsls	r0, r2, #31
 8009032:	d404      	bmi.n	800903e <_fflush_r+0x32>
 8009034:	0599      	lsls	r1, r3, #22
 8009036:	d402      	bmi.n	800903e <_fflush_r+0x32>
 8009038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800903a:	f7fe fb36 	bl	80076aa <__retarget_lock_acquire_recursive>
 800903e:	4628      	mov	r0, r5
 8009040:	4621      	mov	r1, r4
 8009042:	f7ff ff5f 	bl	8008f04 <__sflush_r>
 8009046:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009048:	07da      	lsls	r2, r3, #31
 800904a:	4605      	mov	r5, r0
 800904c:	d4e4      	bmi.n	8009018 <_fflush_r+0xc>
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	059b      	lsls	r3, r3, #22
 8009052:	d4e1      	bmi.n	8009018 <_fflush_r+0xc>
 8009054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009056:	f7fe fb29 	bl	80076ac <__retarget_lock_release_recursive>
 800905a:	e7dd      	b.n	8009018 <_fflush_r+0xc>

0800905c <memmove>:
 800905c:	4288      	cmp	r0, r1
 800905e:	b510      	push	{r4, lr}
 8009060:	eb01 0402 	add.w	r4, r1, r2
 8009064:	d902      	bls.n	800906c <memmove+0x10>
 8009066:	4284      	cmp	r4, r0
 8009068:	4623      	mov	r3, r4
 800906a:	d807      	bhi.n	800907c <memmove+0x20>
 800906c:	1e43      	subs	r3, r0, #1
 800906e:	42a1      	cmp	r1, r4
 8009070:	d008      	beq.n	8009084 <memmove+0x28>
 8009072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800907a:	e7f8      	b.n	800906e <memmove+0x12>
 800907c:	4402      	add	r2, r0
 800907e:	4601      	mov	r1, r0
 8009080:	428a      	cmp	r2, r1
 8009082:	d100      	bne.n	8009086 <memmove+0x2a>
 8009084:	bd10      	pop	{r4, pc}
 8009086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800908a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800908e:	e7f7      	b.n	8009080 <memmove+0x24>

08009090 <_sbrk_r>:
 8009090:	b538      	push	{r3, r4, r5, lr}
 8009092:	4d06      	ldr	r5, [pc, #24]	@ (80090ac <_sbrk_r+0x1c>)
 8009094:	2300      	movs	r3, #0
 8009096:	4604      	mov	r4, r0
 8009098:	4608      	mov	r0, r1
 800909a:	602b      	str	r3, [r5, #0]
 800909c:	f7fa fa06 	bl	80034ac <_sbrk>
 80090a0:	1c43      	adds	r3, r0, #1
 80090a2:	d102      	bne.n	80090aa <_sbrk_r+0x1a>
 80090a4:	682b      	ldr	r3, [r5, #0]
 80090a6:	b103      	cbz	r3, 80090aa <_sbrk_r+0x1a>
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	bd38      	pop	{r3, r4, r5, pc}
 80090ac:	200009dc 	.word	0x200009dc

080090b0 <memcpy>:
 80090b0:	440a      	add	r2, r1
 80090b2:	4291      	cmp	r1, r2
 80090b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80090b8:	d100      	bne.n	80090bc <memcpy+0xc>
 80090ba:	4770      	bx	lr
 80090bc:	b510      	push	{r4, lr}
 80090be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090c6:	4291      	cmp	r1, r2
 80090c8:	d1f9      	bne.n	80090be <memcpy+0xe>
 80090ca:	bd10      	pop	{r4, pc}

080090cc <__assert_func>:
 80090cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090ce:	4614      	mov	r4, r2
 80090d0:	461a      	mov	r2, r3
 80090d2:	4b09      	ldr	r3, [pc, #36]	@ (80090f8 <__assert_func+0x2c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4605      	mov	r5, r0
 80090d8:	68d8      	ldr	r0, [r3, #12]
 80090da:	b14c      	cbz	r4, 80090f0 <__assert_func+0x24>
 80090dc:	4b07      	ldr	r3, [pc, #28]	@ (80090fc <__assert_func+0x30>)
 80090de:	9100      	str	r1, [sp, #0]
 80090e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090e4:	4906      	ldr	r1, [pc, #24]	@ (8009100 <__assert_func+0x34>)
 80090e6:	462b      	mov	r3, r5
 80090e8:	f000 f870 	bl	80091cc <fiprintf>
 80090ec:	f000 f880 	bl	80091f0 <abort>
 80090f0:	4b04      	ldr	r3, [pc, #16]	@ (8009104 <__assert_func+0x38>)
 80090f2:	461c      	mov	r4, r3
 80090f4:	e7f3      	b.n	80090de <__assert_func+0x12>
 80090f6:	bf00      	nop
 80090f8:	20000330 	.word	0x20000330
 80090fc:	0800ce29 	.word	0x0800ce29
 8009100:	0800ce36 	.word	0x0800ce36
 8009104:	0800ce64 	.word	0x0800ce64

08009108 <_calloc_r>:
 8009108:	b570      	push	{r4, r5, r6, lr}
 800910a:	fba1 5402 	umull	r5, r4, r1, r2
 800910e:	b934      	cbnz	r4, 800911e <_calloc_r+0x16>
 8009110:	4629      	mov	r1, r5
 8009112:	f7ff f999 	bl	8008448 <_malloc_r>
 8009116:	4606      	mov	r6, r0
 8009118:	b928      	cbnz	r0, 8009126 <_calloc_r+0x1e>
 800911a:	4630      	mov	r0, r6
 800911c:	bd70      	pop	{r4, r5, r6, pc}
 800911e:	220c      	movs	r2, #12
 8009120:	6002      	str	r2, [r0, #0]
 8009122:	2600      	movs	r6, #0
 8009124:	e7f9      	b.n	800911a <_calloc_r+0x12>
 8009126:	462a      	mov	r2, r5
 8009128:	4621      	mov	r1, r4
 800912a:	f7fe fa40 	bl	80075ae <memset>
 800912e:	e7f4      	b.n	800911a <_calloc_r+0x12>

08009130 <__ascii_mbtowc>:
 8009130:	b082      	sub	sp, #8
 8009132:	b901      	cbnz	r1, 8009136 <__ascii_mbtowc+0x6>
 8009134:	a901      	add	r1, sp, #4
 8009136:	b142      	cbz	r2, 800914a <__ascii_mbtowc+0x1a>
 8009138:	b14b      	cbz	r3, 800914e <__ascii_mbtowc+0x1e>
 800913a:	7813      	ldrb	r3, [r2, #0]
 800913c:	600b      	str	r3, [r1, #0]
 800913e:	7812      	ldrb	r2, [r2, #0]
 8009140:	1e10      	subs	r0, r2, #0
 8009142:	bf18      	it	ne
 8009144:	2001      	movne	r0, #1
 8009146:	b002      	add	sp, #8
 8009148:	4770      	bx	lr
 800914a:	4610      	mov	r0, r2
 800914c:	e7fb      	b.n	8009146 <__ascii_mbtowc+0x16>
 800914e:	f06f 0001 	mvn.w	r0, #1
 8009152:	e7f8      	b.n	8009146 <__ascii_mbtowc+0x16>

08009154 <_realloc_r>:
 8009154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009158:	4607      	mov	r7, r0
 800915a:	4614      	mov	r4, r2
 800915c:	460d      	mov	r5, r1
 800915e:	b921      	cbnz	r1, 800916a <_realloc_r+0x16>
 8009160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009164:	4611      	mov	r1, r2
 8009166:	f7ff b96f 	b.w	8008448 <_malloc_r>
 800916a:	b92a      	cbnz	r2, 8009178 <_realloc_r+0x24>
 800916c:	f7ff f8f8 	bl	8008360 <_free_r>
 8009170:	4625      	mov	r5, r4
 8009172:	4628      	mov	r0, r5
 8009174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009178:	f000 f841 	bl	80091fe <_malloc_usable_size_r>
 800917c:	4284      	cmp	r4, r0
 800917e:	4606      	mov	r6, r0
 8009180:	d802      	bhi.n	8009188 <_realloc_r+0x34>
 8009182:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009186:	d8f4      	bhi.n	8009172 <_realloc_r+0x1e>
 8009188:	4621      	mov	r1, r4
 800918a:	4638      	mov	r0, r7
 800918c:	f7ff f95c 	bl	8008448 <_malloc_r>
 8009190:	4680      	mov	r8, r0
 8009192:	b908      	cbnz	r0, 8009198 <_realloc_r+0x44>
 8009194:	4645      	mov	r5, r8
 8009196:	e7ec      	b.n	8009172 <_realloc_r+0x1e>
 8009198:	42b4      	cmp	r4, r6
 800919a:	4622      	mov	r2, r4
 800919c:	4629      	mov	r1, r5
 800919e:	bf28      	it	cs
 80091a0:	4632      	movcs	r2, r6
 80091a2:	f7ff ff85 	bl	80090b0 <memcpy>
 80091a6:	4629      	mov	r1, r5
 80091a8:	4638      	mov	r0, r7
 80091aa:	f7ff f8d9 	bl	8008360 <_free_r>
 80091ae:	e7f1      	b.n	8009194 <_realloc_r+0x40>

080091b0 <__ascii_wctomb>:
 80091b0:	4603      	mov	r3, r0
 80091b2:	4608      	mov	r0, r1
 80091b4:	b141      	cbz	r1, 80091c8 <__ascii_wctomb+0x18>
 80091b6:	2aff      	cmp	r2, #255	@ 0xff
 80091b8:	d904      	bls.n	80091c4 <__ascii_wctomb+0x14>
 80091ba:	228a      	movs	r2, #138	@ 0x8a
 80091bc:	601a      	str	r2, [r3, #0]
 80091be:	f04f 30ff 	mov.w	r0, #4294967295
 80091c2:	4770      	bx	lr
 80091c4:	700a      	strb	r2, [r1, #0]
 80091c6:	2001      	movs	r0, #1
 80091c8:	4770      	bx	lr
	...

080091cc <fiprintf>:
 80091cc:	b40e      	push	{r1, r2, r3}
 80091ce:	b503      	push	{r0, r1, lr}
 80091d0:	4601      	mov	r1, r0
 80091d2:	ab03      	add	r3, sp, #12
 80091d4:	4805      	ldr	r0, [pc, #20]	@ (80091ec <fiprintf+0x20>)
 80091d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80091da:	6800      	ldr	r0, [r0, #0]
 80091dc:	9301      	str	r3, [sp, #4]
 80091de:	f000 f83f 	bl	8009260 <_vfiprintf_r>
 80091e2:	b002      	add	sp, #8
 80091e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091e8:	b003      	add	sp, #12
 80091ea:	4770      	bx	lr
 80091ec:	20000330 	.word	0x20000330

080091f0 <abort>:
 80091f0:	b508      	push	{r3, lr}
 80091f2:	2006      	movs	r0, #6
 80091f4:	f000 fa08 	bl	8009608 <raise>
 80091f8:	2001      	movs	r0, #1
 80091fa:	f7fa f8df 	bl	80033bc <_exit>

080091fe <_malloc_usable_size_r>:
 80091fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009202:	1f18      	subs	r0, r3, #4
 8009204:	2b00      	cmp	r3, #0
 8009206:	bfbc      	itt	lt
 8009208:	580b      	ldrlt	r3, [r1, r0]
 800920a:	18c0      	addlt	r0, r0, r3
 800920c:	4770      	bx	lr

0800920e <__sfputc_r>:
 800920e:	6893      	ldr	r3, [r2, #8]
 8009210:	3b01      	subs	r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	b410      	push	{r4}
 8009216:	6093      	str	r3, [r2, #8]
 8009218:	da08      	bge.n	800922c <__sfputc_r+0x1e>
 800921a:	6994      	ldr	r4, [r2, #24]
 800921c:	42a3      	cmp	r3, r4
 800921e:	db01      	blt.n	8009224 <__sfputc_r+0x16>
 8009220:	290a      	cmp	r1, #10
 8009222:	d103      	bne.n	800922c <__sfputc_r+0x1e>
 8009224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009228:	f000 b932 	b.w	8009490 <__swbuf_r>
 800922c:	6813      	ldr	r3, [r2, #0]
 800922e:	1c58      	adds	r0, r3, #1
 8009230:	6010      	str	r0, [r2, #0]
 8009232:	7019      	strb	r1, [r3, #0]
 8009234:	4608      	mov	r0, r1
 8009236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800923a:	4770      	bx	lr

0800923c <__sfputs_r>:
 800923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923e:	4606      	mov	r6, r0
 8009240:	460f      	mov	r7, r1
 8009242:	4614      	mov	r4, r2
 8009244:	18d5      	adds	r5, r2, r3
 8009246:	42ac      	cmp	r4, r5
 8009248:	d101      	bne.n	800924e <__sfputs_r+0x12>
 800924a:	2000      	movs	r0, #0
 800924c:	e007      	b.n	800925e <__sfputs_r+0x22>
 800924e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009252:	463a      	mov	r2, r7
 8009254:	4630      	mov	r0, r6
 8009256:	f7ff ffda 	bl	800920e <__sfputc_r>
 800925a:	1c43      	adds	r3, r0, #1
 800925c:	d1f3      	bne.n	8009246 <__sfputs_r+0xa>
 800925e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009260 <_vfiprintf_r>:
 8009260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009264:	460d      	mov	r5, r1
 8009266:	b09d      	sub	sp, #116	@ 0x74
 8009268:	4614      	mov	r4, r2
 800926a:	4698      	mov	r8, r3
 800926c:	4606      	mov	r6, r0
 800926e:	b118      	cbz	r0, 8009278 <_vfiprintf_r+0x18>
 8009270:	6a03      	ldr	r3, [r0, #32]
 8009272:	b90b      	cbnz	r3, 8009278 <_vfiprintf_r+0x18>
 8009274:	f7fe f8ec 	bl	8007450 <__sinit>
 8009278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800927a:	07d9      	lsls	r1, r3, #31
 800927c:	d405      	bmi.n	800928a <_vfiprintf_r+0x2a>
 800927e:	89ab      	ldrh	r3, [r5, #12]
 8009280:	059a      	lsls	r2, r3, #22
 8009282:	d402      	bmi.n	800928a <_vfiprintf_r+0x2a>
 8009284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009286:	f7fe fa10 	bl	80076aa <__retarget_lock_acquire_recursive>
 800928a:	89ab      	ldrh	r3, [r5, #12]
 800928c:	071b      	lsls	r3, r3, #28
 800928e:	d501      	bpl.n	8009294 <_vfiprintf_r+0x34>
 8009290:	692b      	ldr	r3, [r5, #16]
 8009292:	b99b      	cbnz	r3, 80092bc <_vfiprintf_r+0x5c>
 8009294:	4629      	mov	r1, r5
 8009296:	4630      	mov	r0, r6
 8009298:	f000 f938 	bl	800950c <__swsetup_r>
 800929c:	b170      	cbz	r0, 80092bc <_vfiprintf_r+0x5c>
 800929e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092a0:	07dc      	lsls	r4, r3, #31
 80092a2:	d504      	bpl.n	80092ae <_vfiprintf_r+0x4e>
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295
 80092a8:	b01d      	add	sp, #116	@ 0x74
 80092aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ae:	89ab      	ldrh	r3, [r5, #12]
 80092b0:	0598      	lsls	r0, r3, #22
 80092b2:	d4f7      	bmi.n	80092a4 <_vfiprintf_r+0x44>
 80092b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092b6:	f7fe f9f9 	bl	80076ac <__retarget_lock_release_recursive>
 80092ba:	e7f3      	b.n	80092a4 <_vfiprintf_r+0x44>
 80092bc:	2300      	movs	r3, #0
 80092be:	9309      	str	r3, [sp, #36]	@ 0x24
 80092c0:	2320      	movs	r3, #32
 80092c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80092ca:	2330      	movs	r3, #48	@ 0x30
 80092cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800947c <_vfiprintf_r+0x21c>
 80092d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092d4:	f04f 0901 	mov.w	r9, #1
 80092d8:	4623      	mov	r3, r4
 80092da:	469a      	mov	sl, r3
 80092dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092e0:	b10a      	cbz	r2, 80092e6 <_vfiprintf_r+0x86>
 80092e2:	2a25      	cmp	r2, #37	@ 0x25
 80092e4:	d1f9      	bne.n	80092da <_vfiprintf_r+0x7a>
 80092e6:	ebba 0b04 	subs.w	fp, sl, r4
 80092ea:	d00b      	beq.n	8009304 <_vfiprintf_r+0xa4>
 80092ec:	465b      	mov	r3, fp
 80092ee:	4622      	mov	r2, r4
 80092f0:	4629      	mov	r1, r5
 80092f2:	4630      	mov	r0, r6
 80092f4:	f7ff ffa2 	bl	800923c <__sfputs_r>
 80092f8:	3001      	adds	r0, #1
 80092fa:	f000 80a7 	beq.w	800944c <_vfiprintf_r+0x1ec>
 80092fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009300:	445a      	add	r2, fp
 8009302:	9209      	str	r2, [sp, #36]	@ 0x24
 8009304:	f89a 3000 	ldrb.w	r3, [sl]
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 809f 	beq.w	800944c <_vfiprintf_r+0x1ec>
 800930e:	2300      	movs	r3, #0
 8009310:	f04f 32ff 	mov.w	r2, #4294967295
 8009314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009318:	f10a 0a01 	add.w	sl, sl, #1
 800931c:	9304      	str	r3, [sp, #16]
 800931e:	9307      	str	r3, [sp, #28]
 8009320:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009324:	931a      	str	r3, [sp, #104]	@ 0x68
 8009326:	4654      	mov	r4, sl
 8009328:	2205      	movs	r2, #5
 800932a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800932e:	4853      	ldr	r0, [pc, #332]	@ (800947c <_vfiprintf_r+0x21c>)
 8009330:	f7f6 ff6e 	bl	8000210 <memchr>
 8009334:	9a04      	ldr	r2, [sp, #16]
 8009336:	b9d8      	cbnz	r0, 8009370 <_vfiprintf_r+0x110>
 8009338:	06d1      	lsls	r1, r2, #27
 800933a:	bf44      	itt	mi
 800933c:	2320      	movmi	r3, #32
 800933e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009342:	0713      	lsls	r3, r2, #28
 8009344:	bf44      	itt	mi
 8009346:	232b      	movmi	r3, #43	@ 0x2b
 8009348:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800934c:	f89a 3000 	ldrb.w	r3, [sl]
 8009350:	2b2a      	cmp	r3, #42	@ 0x2a
 8009352:	d015      	beq.n	8009380 <_vfiprintf_r+0x120>
 8009354:	9a07      	ldr	r2, [sp, #28]
 8009356:	4654      	mov	r4, sl
 8009358:	2000      	movs	r0, #0
 800935a:	f04f 0c0a 	mov.w	ip, #10
 800935e:	4621      	mov	r1, r4
 8009360:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009364:	3b30      	subs	r3, #48	@ 0x30
 8009366:	2b09      	cmp	r3, #9
 8009368:	d94b      	bls.n	8009402 <_vfiprintf_r+0x1a2>
 800936a:	b1b0      	cbz	r0, 800939a <_vfiprintf_r+0x13a>
 800936c:	9207      	str	r2, [sp, #28]
 800936e:	e014      	b.n	800939a <_vfiprintf_r+0x13a>
 8009370:	eba0 0308 	sub.w	r3, r0, r8
 8009374:	fa09 f303 	lsl.w	r3, r9, r3
 8009378:	4313      	orrs	r3, r2
 800937a:	9304      	str	r3, [sp, #16]
 800937c:	46a2      	mov	sl, r4
 800937e:	e7d2      	b.n	8009326 <_vfiprintf_r+0xc6>
 8009380:	9b03      	ldr	r3, [sp, #12]
 8009382:	1d19      	adds	r1, r3, #4
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	9103      	str	r1, [sp, #12]
 8009388:	2b00      	cmp	r3, #0
 800938a:	bfbb      	ittet	lt
 800938c:	425b      	neglt	r3, r3
 800938e:	f042 0202 	orrlt.w	r2, r2, #2
 8009392:	9307      	strge	r3, [sp, #28]
 8009394:	9307      	strlt	r3, [sp, #28]
 8009396:	bfb8      	it	lt
 8009398:	9204      	strlt	r2, [sp, #16]
 800939a:	7823      	ldrb	r3, [r4, #0]
 800939c:	2b2e      	cmp	r3, #46	@ 0x2e
 800939e:	d10a      	bne.n	80093b6 <_vfiprintf_r+0x156>
 80093a0:	7863      	ldrb	r3, [r4, #1]
 80093a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80093a4:	d132      	bne.n	800940c <_vfiprintf_r+0x1ac>
 80093a6:	9b03      	ldr	r3, [sp, #12]
 80093a8:	1d1a      	adds	r2, r3, #4
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	9203      	str	r2, [sp, #12]
 80093ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093b2:	3402      	adds	r4, #2
 80093b4:	9305      	str	r3, [sp, #20]
 80093b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800948c <_vfiprintf_r+0x22c>
 80093ba:	7821      	ldrb	r1, [r4, #0]
 80093bc:	2203      	movs	r2, #3
 80093be:	4650      	mov	r0, sl
 80093c0:	f7f6 ff26 	bl	8000210 <memchr>
 80093c4:	b138      	cbz	r0, 80093d6 <_vfiprintf_r+0x176>
 80093c6:	9b04      	ldr	r3, [sp, #16]
 80093c8:	eba0 000a 	sub.w	r0, r0, sl
 80093cc:	2240      	movs	r2, #64	@ 0x40
 80093ce:	4082      	lsls	r2, r0
 80093d0:	4313      	orrs	r3, r2
 80093d2:	3401      	adds	r4, #1
 80093d4:	9304      	str	r3, [sp, #16]
 80093d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093da:	4829      	ldr	r0, [pc, #164]	@ (8009480 <_vfiprintf_r+0x220>)
 80093dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093e0:	2206      	movs	r2, #6
 80093e2:	f7f6 ff15 	bl	8000210 <memchr>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d03f      	beq.n	800946a <_vfiprintf_r+0x20a>
 80093ea:	4b26      	ldr	r3, [pc, #152]	@ (8009484 <_vfiprintf_r+0x224>)
 80093ec:	bb1b      	cbnz	r3, 8009436 <_vfiprintf_r+0x1d6>
 80093ee:	9b03      	ldr	r3, [sp, #12]
 80093f0:	3307      	adds	r3, #7
 80093f2:	f023 0307 	bic.w	r3, r3, #7
 80093f6:	3308      	adds	r3, #8
 80093f8:	9303      	str	r3, [sp, #12]
 80093fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093fc:	443b      	add	r3, r7
 80093fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009400:	e76a      	b.n	80092d8 <_vfiprintf_r+0x78>
 8009402:	fb0c 3202 	mla	r2, ip, r2, r3
 8009406:	460c      	mov	r4, r1
 8009408:	2001      	movs	r0, #1
 800940a:	e7a8      	b.n	800935e <_vfiprintf_r+0xfe>
 800940c:	2300      	movs	r3, #0
 800940e:	3401      	adds	r4, #1
 8009410:	9305      	str	r3, [sp, #20]
 8009412:	4619      	mov	r1, r3
 8009414:	f04f 0c0a 	mov.w	ip, #10
 8009418:	4620      	mov	r0, r4
 800941a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800941e:	3a30      	subs	r2, #48	@ 0x30
 8009420:	2a09      	cmp	r2, #9
 8009422:	d903      	bls.n	800942c <_vfiprintf_r+0x1cc>
 8009424:	2b00      	cmp	r3, #0
 8009426:	d0c6      	beq.n	80093b6 <_vfiprintf_r+0x156>
 8009428:	9105      	str	r1, [sp, #20]
 800942a:	e7c4      	b.n	80093b6 <_vfiprintf_r+0x156>
 800942c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009430:	4604      	mov	r4, r0
 8009432:	2301      	movs	r3, #1
 8009434:	e7f0      	b.n	8009418 <_vfiprintf_r+0x1b8>
 8009436:	ab03      	add	r3, sp, #12
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	462a      	mov	r2, r5
 800943c:	4b12      	ldr	r3, [pc, #72]	@ (8009488 <_vfiprintf_r+0x228>)
 800943e:	a904      	add	r1, sp, #16
 8009440:	4630      	mov	r0, r6
 8009442:	f7fd fbc3 	bl	8006bcc <_printf_float>
 8009446:	4607      	mov	r7, r0
 8009448:	1c78      	adds	r0, r7, #1
 800944a:	d1d6      	bne.n	80093fa <_vfiprintf_r+0x19a>
 800944c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800944e:	07d9      	lsls	r1, r3, #31
 8009450:	d405      	bmi.n	800945e <_vfiprintf_r+0x1fe>
 8009452:	89ab      	ldrh	r3, [r5, #12]
 8009454:	059a      	lsls	r2, r3, #22
 8009456:	d402      	bmi.n	800945e <_vfiprintf_r+0x1fe>
 8009458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800945a:	f7fe f927 	bl	80076ac <__retarget_lock_release_recursive>
 800945e:	89ab      	ldrh	r3, [r5, #12]
 8009460:	065b      	lsls	r3, r3, #25
 8009462:	f53f af1f 	bmi.w	80092a4 <_vfiprintf_r+0x44>
 8009466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009468:	e71e      	b.n	80092a8 <_vfiprintf_r+0x48>
 800946a:	ab03      	add	r3, sp, #12
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	462a      	mov	r2, r5
 8009470:	4b05      	ldr	r3, [pc, #20]	@ (8009488 <_vfiprintf_r+0x228>)
 8009472:	a904      	add	r1, sp, #16
 8009474:	4630      	mov	r0, r6
 8009476:	f7fd fe41 	bl	80070fc <_printf_i>
 800947a:	e7e4      	b.n	8009446 <_vfiprintf_r+0x1e6>
 800947c:	0800ce0e 	.word	0x0800ce0e
 8009480:	0800ce18 	.word	0x0800ce18
 8009484:	08006bcd 	.word	0x08006bcd
 8009488:	0800923d 	.word	0x0800923d
 800948c:	0800ce14 	.word	0x0800ce14

08009490 <__swbuf_r>:
 8009490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009492:	460e      	mov	r6, r1
 8009494:	4614      	mov	r4, r2
 8009496:	4605      	mov	r5, r0
 8009498:	b118      	cbz	r0, 80094a2 <__swbuf_r+0x12>
 800949a:	6a03      	ldr	r3, [r0, #32]
 800949c:	b90b      	cbnz	r3, 80094a2 <__swbuf_r+0x12>
 800949e:	f7fd ffd7 	bl	8007450 <__sinit>
 80094a2:	69a3      	ldr	r3, [r4, #24]
 80094a4:	60a3      	str	r3, [r4, #8]
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	071a      	lsls	r2, r3, #28
 80094aa:	d501      	bpl.n	80094b0 <__swbuf_r+0x20>
 80094ac:	6923      	ldr	r3, [r4, #16]
 80094ae:	b943      	cbnz	r3, 80094c2 <__swbuf_r+0x32>
 80094b0:	4621      	mov	r1, r4
 80094b2:	4628      	mov	r0, r5
 80094b4:	f000 f82a 	bl	800950c <__swsetup_r>
 80094b8:	b118      	cbz	r0, 80094c2 <__swbuf_r+0x32>
 80094ba:	f04f 37ff 	mov.w	r7, #4294967295
 80094be:	4638      	mov	r0, r7
 80094c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	6922      	ldr	r2, [r4, #16]
 80094c6:	1a98      	subs	r0, r3, r2
 80094c8:	6963      	ldr	r3, [r4, #20]
 80094ca:	b2f6      	uxtb	r6, r6
 80094cc:	4283      	cmp	r3, r0
 80094ce:	4637      	mov	r7, r6
 80094d0:	dc05      	bgt.n	80094de <__swbuf_r+0x4e>
 80094d2:	4621      	mov	r1, r4
 80094d4:	4628      	mov	r0, r5
 80094d6:	f7ff fd99 	bl	800900c <_fflush_r>
 80094da:	2800      	cmp	r0, #0
 80094dc:	d1ed      	bne.n	80094ba <__swbuf_r+0x2a>
 80094de:	68a3      	ldr	r3, [r4, #8]
 80094e0:	3b01      	subs	r3, #1
 80094e2:	60a3      	str	r3, [r4, #8]
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	1c5a      	adds	r2, r3, #1
 80094e8:	6022      	str	r2, [r4, #0]
 80094ea:	701e      	strb	r6, [r3, #0]
 80094ec:	6962      	ldr	r2, [r4, #20]
 80094ee:	1c43      	adds	r3, r0, #1
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d004      	beq.n	80094fe <__swbuf_r+0x6e>
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	07db      	lsls	r3, r3, #31
 80094f8:	d5e1      	bpl.n	80094be <__swbuf_r+0x2e>
 80094fa:	2e0a      	cmp	r6, #10
 80094fc:	d1df      	bne.n	80094be <__swbuf_r+0x2e>
 80094fe:	4621      	mov	r1, r4
 8009500:	4628      	mov	r0, r5
 8009502:	f7ff fd83 	bl	800900c <_fflush_r>
 8009506:	2800      	cmp	r0, #0
 8009508:	d0d9      	beq.n	80094be <__swbuf_r+0x2e>
 800950a:	e7d6      	b.n	80094ba <__swbuf_r+0x2a>

0800950c <__swsetup_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4b29      	ldr	r3, [pc, #164]	@ (80095b4 <__swsetup_r+0xa8>)
 8009510:	4605      	mov	r5, r0
 8009512:	6818      	ldr	r0, [r3, #0]
 8009514:	460c      	mov	r4, r1
 8009516:	b118      	cbz	r0, 8009520 <__swsetup_r+0x14>
 8009518:	6a03      	ldr	r3, [r0, #32]
 800951a:	b90b      	cbnz	r3, 8009520 <__swsetup_r+0x14>
 800951c:	f7fd ff98 	bl	8007450 <__sinit>
 8009520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009524:	0719      	lsls	r1, r3, #28
 8009526:	d422      	bmi.n	800956e <__swsetup_r+0x62>
 8009528:	06da      	lsls	r2, r3, #27
 800952a:	d407      	bmi.n	800953c <__swsetup_r+0x30>
 800952c:	2209      	movs	r2, #9
 800952e:	602a      	str	r2, [r5, #0]
 8009530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009534:	81a3      	strh	r3, [r4, #12]
 8009536:	f04f 30ff 	mov.w	r0, #4294967295
 800953a:	e033      	b.n	80095a4 <__swsetup_r+0x98>
 800953c:	0758      	lsls	r0, r3, #29
 800953e:	d512      	bpl.n	8009566 <__swsetup_r+0x5a>
 8009540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009542:	b141      	cbz	r1, 8009556 <__swsetup_r+0x4a>
 8009544:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009548:	4299      	cmp	r1, r3
 800954a:	d002      	beq.n	8009552 <__swsetup_r+0x46>
 800954c:	4628      	mov	r0, r5
 800954e:	f7fe ff07 	bl	8008360 <_free_r>
 8009552:	2300      	movs	r3, #0
 8009554:	6363      	str	r3, [r4, #52]	@ 0x34
 8009556:	89a3      	ldrh	r3, [r4, #12]
 8009558:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800955c:	81a3      	strh	r3, [r4, #12]
 800955e:	2300      	movs	r3, #0
 8009560:	6063      	str	r3, [r4, #4]
 8009562:	6923      	ldr	r3, [r4, #16]
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	f043 0308 	orr.w	r3, r3, #8
 800956c:	81a3      	strh	r3, [r4, #12]
 800956e:	6923      	ldr	r3, [r4, #16]
 8009570:	b94b      	cbnz	r3, 8009586 <__swsetup_r+0x7a>
 8009572:	89a3      	ldrh	r3, [r4, #12]
 8009574:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800957c:	d003      	beq.n	8009586 <__swsetup_r+0x7a>
 800957e:	4621      	mov	r1, r4
 8009580:	4628      	mov	r0, r5
 8009582:	f000 f883 	bl	800968c <__smakebuf_r>
 8009586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800958a:	f013 0201 	ands.w	r2, r3, #1
 800958e:	d00a      	beq.n	80095a6 <__swsetup_r+0x9a>
 8009590:	2200      	movs	r2, #0
 8009592:	60a2      	str	r2, [r4, #8]
 8009594:	6962      	ldr	r2, [r4, #20]
 8009596:	4252      	negs	r2, r2
 8009598:	61a2      	str	r2, [r4, #24]
 800959a:	6922      	ldr	r2, [r4, #16]
 800959c:	b942      	cbnz	r2, 80095b0 <__swsetup_r+0xa4>
 800959e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095a2:	d1c5      	bne.n	8009530 <__swsetup_r+0x24>
 80095a4:	bd38      	pop	{r3, r4, r5, pc}
 80095a6:	0799      	lsls	r1, r3, #30
 80095a8:	bf58      	it	pl
 80095aa:	6962      	ldrpl	r2, [r4, #20]
 80095ac:	60a2      	str	r2, [r4, #8]
 80095ae:	e7f4      	b.n	800959a <__swsetup_r+0x8e>
 80095b0:	2000      	movs	r0, #0
 80095b2:	e7f7      	b.n	80095a4 <__swsetup_r+0x98>
 80095b4:	20000330 	.word	0x20000330

080095b8 <_raise_r>:
 80095b8:	291f      	cmp	r1, #31
 80095ba:	b538      	push	{r3, r4, r5, lr}
 80095bc:	4605      	mov	r5, r0
 80095be:	460c      	mov	r4, r1
 80095c0:	d904      	bls.n	80095cc <_raise_r+0x14>
 80095c2:	2316      	movs	r3, #22
 80095c4:	6003      	str	r3, [r0, #0]
 80095c6:	f04f 30ff 	mov.w	r0, #4294967295
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80095ce:	b112      	cbz	r2, 80095d6 <_raise_r+0x1e>
 80095d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095d4:	b94b      	cbnz	r3, 80095ea <_raise_r+0x32>
 80095d6:	4628      	mov	r0, r5
 80095d8:	f000 f830 	bl	800963c <_getpid_r>
 80095dc:	4622      	mov	r2, r4
 80095de:	4601      	mov	r1, r0
 80095e0:	4628      	mov	r0, r5
 80095e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095e6:	f000 b817 	b.w	8009618 <_kill_r>
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d00a      	beq.n	8009604 <_raise_r+0x4c>
 80095ee:	1c59      	adds	r1, r3, #1
 80095f0:	d103      	bne.n	80095fa <_raise_r+0x42>
 80095f2:	2316      	movs	r3, #22
 80095f4:	6003      	str	r3, [r0, #0]
 80095f6:	2001      	movs	r0, #1
 80095f8:	e7e7      	b.n	80095ca <_raise_r+0x12>
 80095fa:	2100      	movs	r1, #0
 80095fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009600:	4620      	mov	r0, r4
 8009602:	4798      	blx	r3
 8009604:	2000      	movs	r0, #0
 8009606:	e7e0      	b.n	80095ca <_raise_r+0x12>

08009608 <raise>:
 8009608:	4b02      	ldr	r3, [pc, #8]	@ (8009614 <raise+0xc>)
 800960a:	4601      	mov	r1, r0
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	f7ff bfd3 	b.w	80095b8 <_raise_r>
 8009612:	bf00      	nop
 8009614:	20000330 	.word	0x20000330

08009618 <_kill_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4d07      	ldr	r5, [pc, #28]	@ (8009638 <_kill_r+0x20>)
 800961c:	2300      	movs	r3, #0
 800961e:	4604      	mov	r4, r0
 8009620:	4608      	mov	r0, r1
 8009622:	4611      	mov	r1, r2
 8009624:	602b      	str	r3, [r5, #0]
 8009626:	f7f9 feb9 	bl	800339c <_kill>
 800962a:	1c43      	adds	r3, r0, #1
 800962c:	d102      	bne.n	8009634 <_kill_r+0x1c>
 800962e:	682b      	ldr	r3, [r5, #0]
 8009630:	b103      	cbz	r3, 8009634 <_kill_r+0x1c>
 8009632:	6023      	str	r3, [r4, #0]
 8009634:	bd38      	pop	{r3, r4, r5, pc}
 8009636:	bf00      	nop
 8009638:	200009dc 	.word	0x200009dc

0800963c <_getpid_r>:
 800963c:	f7f9 bea6 	b.w	800338c <_getpid>

08009640 <__swhatbuf_r>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	460c      	mov	r4, r1
 8009644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009648:	2900      	cmp	r1, #0
 800964a:	b096      	sub	sp, #88	@ 0x58
 800964c:	4615      	mov	r5, r2
 800964e:	461e      	mov	r6, r3
 8009650:	da0d      	bge.n	800966e <__swhatbuf_r+0x2e>
 8009652:	89a3      	ldrh	r3, [r4, #12]
 8009654:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009658:	f04f 0100 	mov.w	r1, #0
 800965c:	bf14      	ite	ne
 800965e:	2340      	movne	r3, #64	@ 0x40
 8009660:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009664:	2000      	movs	r0, #0
 8009666:	6031      	str	r1, [r6, #0]
 8009668:	602b      	str	r3, [r5, #0]
 800966a:	b016      	add	sp, #88	@ 0x58
 800966c:	bd70      	pop	{r4, r5, r6, pc}
 800966e:	466a      	mov	r2, sp
 8009670:	f000 f848 	bl	8009704 <_fstat_r>
 8009674:	2800      	cmp	r0, #0
 8009676:	dbec      	blt.n	8009652 <__swhatbuf_r+0x12>
 8009678:	9901      	ldr	r1, [sp, #4]
 800967a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800967e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009682:	4259      	negs	r1, r3
 8009684:	4159      	adcs	r1, r3
 8009686:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800968a:	e7eb      	b.n	8009664 <__swhatbuf_r+0x24>

0800968c <__smakebuf_r>:
 800968c:	898b      	ldrh	r3, [r1, #12]
 800968e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009690:	079d      	lsls	r5, r3, #30
 8009692:	4606      	mov	r6, r0
 8009694:	460c      	mov	r4, r1
 8009696:	d507      	bpl.n	80096a8 <__smakebuf_r+0x1c>
 8009698:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800969c:	6023      	str	r3, [r4, #0]
 800969e:	6123      	str	r3, [r4, #16]
 80096a0:	2301      	movs	r3, #1
 80096a2:	6163      	str	r3, [r4, #20]
 80096a4:	b003      	add	sp, #12
 80096a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096a8:	ab01      	add	r3, sp, #4
 80096aa:	466a      	mov	r2, sp
 80096ac:	f7ff ffc8 	bl	8009640 <__swhatbuf_r>
 80096b0:	9f00      	ldr	r7, [sp, #0]
 80096b2:	4605      	mov	r5, r0
 80096b4:	4639      	mov	r1, r7
 80096b6:	4630      	mov	r0, r6
 80096b8:	f7fe fec6 	bl	8008448 <_malloc_r>
 80096bc:	b948      	cbnz	r0, 80096d2 <__smakebuf_r+0x46>
 80096be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096c2:	059a      	lsls	r2, r3, #22
 80096c4:	d4ee      	bmi.n	80096a4 <__smakebuf_r+0x18>
 80096c6:	f023 0303 	bic.w	r3, r3, #3
 80096ca:	f043 0302 	orr.w	r3, r3, #2
 80096ce:	81a3      	strh	r3, [r4, #12]
 80096d0:	e7e2      	b.n	8009698 <__smakebuf_r+0xc>
 80096d2:	89a3      	ldrh	r3, [r4, #12]
 80096d4:	6020      	str	r0, [r4, #0]
 80096d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096da:	81a3      	strh	r3, [r4, #12]
 80096dc:	9b01      	ldr	r3, [sp, #4]
 80096de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096e2:	b15b      	cbz	r3, 80096fc <__smakebuf_r+0x70>
 80096e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096e8:	4630      	mov	r0, r6
 80096ea:	f000 f81d 	bl	8009728 <_isatty_r>
 80096ee:	b128      	cbz	r0, 80096fc <__smakebuf_r+0x70>
 80096f0:	89a3      	ldrh	r3, [r4, #12]
 80096f2:	f023 0303 	bic.w	r3, r3, #3
 80096f6:	f043 0301 	orr.w	r3, r3, #1
 80096fa:	81a3      	strh	r3, [r4, #12]
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	431d      	orrs	r5, r3
 8009700:	81a5      	strh	r5, [r4, #12]
 8009702:	e7cf      	b.n	80096a4 <__smakebuf_r+0x18>

08009704 <_fstat_r>:
 8009704:	b538      	push	{r3, r4, r5, lr}
 8009706:	4d07      	ldr	r5, [pc, #28]	@ (8009724 <_fstat_r+0x20>)
 8009708:	2300      	movs	r3, #0
 800970a:	4604      	mov	r4, r0
 800970c:	4608      	mov	r0, r1
 800970e:	4611      	mov	r1, r2
 8009710:	602b      	str	r3, [r5, #0]
 8009712:	f7f9 fea3 	bl	800345c <_fstat>
 8009716:	1c43      	adds	r3, r0, #1
 8009718:	d102      	bne.n	8009720 <_fstat_r+0x1c>
 800971a:	682b      	ldr	r3, [r5, #0]
 800971c:	b103      	cbz	r3, 8009720 <_fstat_r+0x1c>
 800971e:	6023      	str	r3, [r4, #0]
 8009720:	bd38      	pop	{r3, r4, r5, pc}
 8009722:	bf00      	nop
 8009724:	200009dc 	.word	0x200009dc

08009728 <_isatty_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4d06      	ldr	r5, [pc, #24]	@ (8009744 <_isatty_r+0x1c>)
 800972c:	2300      	movs	r3, #0
 800972e:	4604      	mov	r4, r0
 8009730:	4608      	mov	r0, r1
 8009732:	602b      	str	r3, [r5, #0]
 8009734:	f7f9 fea2 	bl	800347c <_isatty>
 8009738:	1c43      	adds	r3, r0, #1
 800973a:	d102      	bne.n	8009742 <_isatty_r+0x1a>
 800973c:	682b      	ldr	r3, [r5, #0]
 800973e:	b103      	cbz	r3, 8009742 <_isatty_r+0x1a>
 8009740:	6023      	str	r3, [r4, #0]
 8009742:	bd38      	pop	{r3, r4, r5, pc}
 8009744:	200009dc 	.word	0x200009dc

08009748 <atan2>:
 8009748:	f000 bc9a 	b.w	800a080 <__ieee754_atan2>

0800974c <pow>:
 800974c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974e:	ed2d 8b02 	vpush	{d8}
 8009752:	eeb0 8a40 	vmov.f32	s16, s0
 8009756:	eef0 8a60 	vmov.f32	s17, s1
 800975a:	ec55 4b11 	vmov	r4, r5, d1
 800975e:	f000 fd57 	bl	800a210 <__ieee754_pow>
 8009762:	4622      	mov	r2, r4
 8009764:	462b      	mov	r3, r5
 8009766:	4620      	mov	r0, r4
 8009768:	4629      	mov	r1, r5
 800976a:	ec57 6b10 	vmov	r6, r7, d0
 800976e:	f7f7 f9fd 	bl	8000b6c <__aeabi_dcmpun>
 8009772:	2800      	cmp	r0, #0
 8009774:	d13b      	bne.n	80097ee <pow+0xa2>
 8009776:	ec51 0b18 	vmov	r0, r1, d8
 800977a:	2200      	movs	r2, #0
 800977c:	2300      	movs	r3, #0
 800977e:	f7f7 f9c3 	bl	8000b08 <__aeabi_dcmpeq>
 8009782:	b1b8      	cbz	r0, 80097b4 <pow+0x68>
 8009784:	2200      	movs	r2, #0
 8009786:	2300      	movs	r3, #0
 8009788:	4620      	mov	r0, r4
 800978a:	4629      	mov	r1, r5
 800978c:	f7f7 f9bc 	bl	8000b08 <__aeabi_dcmpeq>
 8009790:	2800      	cmp	r0, #0
 8009792:	d146      	bne.n	8009822 <pow+0xd6>
 8009794:	ec45 4b10 	vmov	d0, r4, r5
 8009798:	f000 fa00 	bl	8009b9c <finite>
 800979c:	b338      	cbz	r0, 80097ee <pow+0xa2>
 800979e:	2200      	movs	r2, #0
 80097a0:	2300      	movs	r3, #0
 80097a2:	4620      	mov	r0, r4
 80097a4:	4629      	mov	r1, r5
 80097a6:	f7f7 f9b9 	bl	8000b1c <__aeabi_dcmplt>
 80097aa:	b300      	cbz	r0, 80097ee <pow+0xa2>
 80097ac:	f7fd ff52 	bl	8007654 <__errno>
 80097b0:	2322      	movs	r3, #34	@ 0x22
 80097b2:	e01b      	b.n	80097ec <pow+0xa0>
 80097b4:	ec47 6b10 	vmov	d0, r6, r7
 80097b8:	f000 f9f0 	bl	8009b9c <finite>
 80097bc:	b9e0      	cbnz	r0, 80097f8 <pow+0xac>
 80097be:	eeb0 0a48 	vmov.f32	s0, s16
 80097c2:	eef0 0a68 	vmov.f32	s1, s17
 80097c6:	f000 f9e9 	bl	8009b9c <finite>
 80097ca:	b1a8      	cbz	r0, 80097f8 <pow+0xac>
 80097cc:	ec45 4b10 	vmov	d0, r4, r5
 80097d0:	f000 f9e4 	bl	8009b9c <finite>
 80097d4:	b180      	cbz	r0, 80097f8 <pow+0xac>
 80097d6:	4632      	mov	r2, r6
 80097d8:	463b      	mov	r3, r7
 80097da:	4630      	mov	r0, r6
 80097dc:	4639      	mov	r1, r7
 80097de:	f7f7 f9c5 	bl	8000b6c <__aeabi_dcmpun>
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d0e2      	beq.n	80097ac <pow+0x60>
 80097e6:	f7fd ff35 	bl	8007654 <__errno>
 80097ea:	2321      	movs	r3, #33	@ 0x21
 80097ec:	6003      	str	r3, [r0, #0]
 80097ee:	ecbd 8b02 	vpop	{d8}
 80097f2:	ec47 6b10 	vmov	d0, r6, r7
 80097f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097f8:	2200      	movs	r2, #0
 80097fa:	2300      	movs	r3, #0
 80097fc:	4630      	mov	r0, r6
 80097fe:	4639      	mov	r1, r7
 8009800:	f7f7 f982 	bl	8000b08 <__aeabi_dcmpeq>
 8009804:	2800      	cmp	r0, #0
 8009806:	d0f2      	beq.n	80097ee <pow+0xa2>
 8009808:	eeb0 0a48 	vmov.f32	s0, s16
 800980c:	eef0 0a68 	vmov.f32	s1, s17
 8009810:	f000 f9c4 	bl	8009b9c <finite>
 8009814:	2800      	cmp	r0, #0
 8009816:	d0ea      	beq.n	80097ee <pow+0xa2>
 8009818:	ec45 4b10 	vmov	d0, r4, r5
 800981c:	f000 f9be 	bl	8009b9c <finite>
 8009820:	e7c3      	b.n	80097aa <pow+0x5e>
 8009822:	4f01      	ldr	r7, [pc, #4]	@ (8009828 <pow+0xdc>)
 8009824:	2600      	movs	r6, #0
 8009826:	e7e2      	b.n	80097ee <pow+0xa2>
 8009828:	3ff00000 	.word	0x3ff00000

0800982c <sqrt>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	ed2d 8b02 	vpush	{d8}
 8009832:	ec55 4b10 	vmov	r4, r5, d0
 8009836:	f000 f9c7 	bl	8009bc8 <__ieee754_sqrt>
 800983a:	4622      	mov	r2, r4
 800983c:	462b      	mov	r3, r5
 800983e:	4620      	mov	r0, r4
 8009840:	4629      	mov	r1, r5
 8009842:	eeb0 8a40 	vmov.f32	s16, s0
 8009846:	eef0 8a60 	vmov.f32	s17, s1
 800984a:	f7f7 f98f 	bl	8000b6c <__aeabi_dcmpun>
 800984e:	b990      	cbnz	r0, 8009876 <sqrt+0x4a>
 8009850:	2200      	movs	r2, #0
 8009852:	2300      	movs	r3, #0
 8009854:	4620      	mov	r0, r4
 8009856:	4629      	mov	r1, r5
 8009858:	f7f7 f960 	bl	8000b1c <__aeabi_dcmplt>
 800985c:	b158      	cbz	r0, 8009876 <sqrt+0x4a>
 800985e:	f7fd fef9 	bl	8007654 <__errno>
 8009862:	2321      	movs	r3, #33	@ 0x21
 8009864:	6003      	str	r3, [r0, #0]
 8009866:	2200      	movs	r2, #0
 8009868:	2300      	movs	r3, #0
 800986a:	4610      	mov	r0, r2
 800986c:	4619      	mov	r1, r3
 800986e:	f7f7 f80d 	bl	800088c <__aeabi_ddiv>
 8009872:	ec41 0b18 	vmov	d8, r0, r1
 8009876:	eeb0 0a48 	vmov.f32	s0, s16
 800987a:	eef0 0a68 	vmov.f32	s1, s17
 800987e:	ecbd 8b02 	vpop	{d8}
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	0000      	movs	r0, r0
	...

08009888 <cos>:
 8009888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800988a:	ec53 2b10 	vmov	r2, r3, d0
 800988e:	4826      	ldr	r0, [pc, #152]	@ (8009928 <cos+0xa0>)
 8009890:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009894:	4281      	cmp	r1, r0
 8009896:	d806      	bhi.n	80098a6 <cos+0x1e>
 8009898:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009920 <cos+0x98>
 800989c:	b005      	add	sp, #20
 800989e:	f85d eb04 	ldr.w	lr, [sp], #4
 80098a2:	f000 ba69 	b.w	8009d78 <__kernel_cos>
 80098a6:	4821      	ldr	r0, [pc, #132]	@ (800992c <cos+0xa4>)
 80098a8:	4281      	cmp	r1, r0
 80098aa:	d908      	bls.n	80098be <cos+0x36>
 80098ac:	4610      	mov	r0, r2
 80098ae:	4619      	mov	r1, r3
 80098b0:	f7f6 fd0a 	bl	80002c8 <__aeabi_dsub>
 80098b4:	ec41 0b10 	vmov	d0, r0, r1
 80098b8:	b005      	add	sp, #20
 80098ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80098be:	4668      	mov	r0, sp
 80098c0:	f001 f9f2 	bl	800aca8 <__ieee754_rem_pio2>
 80098c4:	f000 0003 	and.w	r0, r0, #3
 80098c8:	2801      	cmp	r0, #1
 80098ca:	d00b      	beq.n	80098e4 <cos+0x5c>
 80098cc:	2802      	cmp	r0, #2
 80098ce:	d015      	beq.n	80098fc <cos+0x74>
 80098d0:	b9d8      	cbnz	r0, 800990a <cos+0x82>
 80098d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80098d6:	ed9d 0b00 	vldr	d0, [sp]
 80098da:	f000 fa4d 	bl	8009d78 <__kernel_cos>
 80098de:	ec51 0b10 	vmov	r0, r1, d0
 80098e2:	e7e7      	b.n	80098b4 <cos+0x2c>
 80098e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80098e8:	ed9d 0b00 	vldr	d0, [sp]
 80098ec:	f000 fb0c 	bl	8009f08 <__kernel_sin>
 80098f0:	ec53 2b10 	vmov	r2, r3, d0
 80098f4:	4610      	mov	r0, r2
 80098f6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80098fa:	e7db      	b.n	80098b4 <cos+0x2c>
 80098fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009900:	ed9d 0b00 	vldr	d0, [sp]
 8009904:	f000 fa38 	bl	8009d78 <__kernel_cos>
 8009908:	e7f2      	b.n	80098f0 <cos+0x68>
 800990a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800990e:	ed9d 0b00 	vldr	d0, [sp]
 8009912:	2001      	movs	r0, #1
 8009914:	f000 faf8 	bl	8009f08 <__kernel_sin>
 8009918:	e7e1      	b.n	80098de <cos+0x56>
 800991a:	bf00      	nop
 800991c:	f3af 8000 	nop.w
	...
 8009928:	3fe921fb 	.word	0x3fe921fb
 800992c:	7fefffff 	.word	0x7fefffff

08009930 <sin>:
 8009930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009932:	ec53 2b10 	vmov	r2, r3, d0
 8009936:	4826      	ldr	r0, [pc, #152]	@ (80099d0 <sin+0xa0>)
 8009938:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800993c:	4281      	cmp	r1, r0
 800993e:	d807      	bhi.n	8009950 <sin+0x20>
 8009940:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80099c8 <sin+0x98>
 8009944:	2000      	movs	r0, #0
 8009946:	b005      	add	sp, #20
 8009948:	f85d eb04 	ldr.w	lr, [sp], #4
 800994c:	f000 badc 	b.w	8009f08 <__kernel_sin>
 8009950:	4820      	ldr	r0, [pc, #128]	@ (80099d4 <sin+0xa4>)
 8009952:	4281      	cmp	r1, r0
 8009954:	d908      	bls.n	8009968 <sin+0x38>
 8009956:	4610      	mov	r0, r2
 8009958:	4619      	mov	r1, r3
 800995a:	f7f6 fcb5 	bl	80002c8 <__aeabi_dsub>
 800995e:	ec41 0b10 	vmov	d0, r0, r1
 8009962:	b005      	add	sp, #20
 8009964:	f85d fb04 	ldr.w	pc, [sp], #4
 8009968:	4668      	mov	r0, sp
 800996a:	f001 f99d 	bl	800aca8 <__ieee754_rem_pio2>
 800996e:	f000 0003 	and.w	r0, r0, #3
 8009972:	2801      	cmp	r0, #1
 8009974:	d00c      	beq.n	8009990 <sin+0x60>
 8009976:	2802      	cmp	r0, #2
 8009978:	d011      	beq.n	800999e <sin+0x6e>
 800997a:	b9e8      	cbnz	r0, 80099b8 <sin+0x88>
 800997c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009980:	ed9d 0b00 	vldr	d0, [sp]
 8009984:	2001      	movs	r0, #1
 8009986:	f000 fabf 	bl	8009f08 <__kernel_sin>
 800998a:	ec51 0b10 	vmov	r0, r1, d0
 800998e:	e7e6      	b.n	800995e <sin+0x2e>
 8009990:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009994:	ed9d 0b00 	vldr	d0, [sp]
 8009998:	f000 f9ee 	bl	8009d78 <__kernel_cos>
 800999c:	e7f5      	b.n	800998a <sin+0x5a>
 800999e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80099a2:	ed9d 0b00 	vldr	d0, [sp]
 80099a6:	2001      	movs	r0, #1
 80099a8:	f000 faae 	bl	8009f08 <__kernel_sin>
 80099ac:	ec53 2b10 	vmov	r2, r3, d0
 80099b0:	4610      	mov	r0, r2
 80099b2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80099b6:	e7d2      	b.n	800995e <sin+0x2e>
 80099b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80099bc:	ed9d 0b00 	vldr	d0, [sp]
 80099c0:	f000 f9da 	bl	8009d78 <__kernel_cos>
 80099c4:	e7f2      	b.n	80099ac <sin+0x7c>
 80099c6:	bf00      	nop
	...
 80099d0:	3fe921fb 	.word	0x3fe921fb
 80099d4:	7fefffff 	.word	0x7fefffff

080099d8 <powf>:
 80099d8:	b508      	push	{r3, lr}
 80099da:	ed2d 8b04 	vpush	{d8-d9}
 80099de:	eeb0 8a60 	vmov.f32	s16, s1
 80099e2:	eeb0 9a40 	vmov.f32	s18, s0
 80099e6:	f001 fd9b 	bl	800b520 <__ieee754_powf>
 80099ea:	eeb4 8a48 	vcmp.f32	s16, s16
 80099ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f2:	eef0 8a40 	vmov.f32	s17, s0
 80099f6:	d63e      	bvs.n	8009a76 <powf+0x9e>
 80099f8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80099fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a00:	d112      	bne.n	8009a28 <powf+0x50>
 8009a02:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a0a:	d039      	beq.n	8009a80 <powf+0xa8>
 8009a0c:	eeb0 0a48 	vmov.f32	s0, s16
 8009a10:	f000 f8cf 	bl	8009bb2 <finitef>
 8009a14:	b378      	cbz	r0, 8009a76 <powf+0x9e>
 8009a16:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a1e:	d52a      	bpl.n	8009a76 <powf+0x9e>
 8009a20:	f7fd fe18 	bl	8007654 <__errno>
 8009a24:	2322      	movs	r3, #34	@ 0x22
 8009a26:	e014      	b.n	8009a52 <powf+0x7a>
 8009a28:	f000 f8c3 	bl	8009bb2 <finitef>
 8009a2c:	b998      	cbnz	r0, 8009a56 <powf+0x7e>
 8009a2e:	eeb0 0a49 	vmov.f32	s0, s18
 8009a32:	f000 f8be 	bl	8009bb2 <finitef>
 8009a36:	b170      	cbz	r0, 8009a56 <powf+0x7e>
 8009a38:	eeb0 0a48 	vmov.f32	s0, s16
 8009a3c:	f000 f8b9 	bl	8009bb2 <finitef>
 8009a40:	b148      	cbz	r0, 8009a56 <powf+0x7e>
 8009a42:	eef4 8a68 	vcmp.f32	s17, s17
 8009a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a4a:	d7e9      	bvc.n	8009a20 <powf+0x48>
 8009a4c:	f7fd fe02 	bl	8007654 <__errno>
 8009a50:	2321      	movs	r3, #33	@ 0x21
 8009a52:	6003      	str	r3, [r0, #0]
 8009a54:	e00f      	b.n	8009a76 <powf+0x9e>
 8009a56:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a5e:	d10a      	bne.n	8009a76 <powf+0x9e>
 8009a60:	eeb0 0a49 	vmov.f32	s0, s18
 8009a64:	f000 f8a5 	bl	8009bb2 <finitef>
 8009a68:	b128      	cbz	r0, 8009a76 <powf+0x9e>
 8009a6a:	eeb0 0a48 	vmov.f32	s0, s16
 8009a6e:	f000 f8a0 	bl	8009bb2 <finitef>
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d1d4      	bne.n	8009a20 <powf+0x48>
 8009a76:	eeb0 0a68 	vmov.f32	s0, s17
 8009a7a:	ecbd 8b04 	vpop	{d8-d9}
 8009a7e:	bd08      	pop	{r3, pc}
 8009a80:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8009a84:	e7f7      	b.n	8009a76 <powf+0x9e>
	...

08009a88 <cosf>:
 8009a88:	ee10 3a10 	vmov	r3, s0
 8009a8c:	b507      	push	{r0, r1, r2, lr}
 8009a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8009b08 <cosf+0x80>)
 8009a90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d806      	bhi.n	8009aa6 <cosf+0x1e>
 8009a98:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8009b0c <cosf+0x84>
 8009a9c:	b003      	add	sp, #12
 8009a9e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009aa2:	f001 bc9d 	b.w	800b3e0 <__kernel_cosf>
 8009aa6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009aaa:	d304      	bcc.n	8009ab6 <cosf+0x2e>
 8009aac:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009ab0:	b003      	add	sp, #12
 8009ab2:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ab6:	4668      	mov	r0, sp
 8009ab8:	f002 f800 	bl	800babc <__ieee754_rem_pio2f>
 8009abc:	f000 0003 	and.w	r0, r0, #3
 8009ac0:	2801      	cmp	r0, #1
 8009ac2:	d009      	beq.n	8009ad8 <cosf+0x50>
 8009ac4:	2802      	cmp	r0, #2
 8009ac6:	d010      	beq.n	8009aea <cosf+0x62>
 8009ac8:	b9b0      	cbnz	r0, 8009af8 <cosf+0x70>
 8009aca:	eddd 0a01 	vldr	s1, [sp, #4]
 8009ace:	ed9d 0a00 	vldr	s0, [sp]
 8009ad2:	f001 fc85 	bl	800b3e0 <__kernel_cosf>
 8009ad6:	e7eb      	b.n	8009ab0 <cosf+0x28>
 8009ad8:	eddd 0a01 	vldr	s1, [sp, #4]
 8009adc:	ed9d 0a00 	vldr	s0, [sp]
 8009ae0:	f001 fcd6 	bl	800b490 <__kernel_sinf>
 8009ae4:	eeb1 0a40 	vneg.f32	s0, s0
 8009ae8:	e7e2      	b.n	8009ab0 <cosf+0x28>
 8009aea:	eddd 0a01 	vldr	s1, [sp, #4]
 8009aee:	ed9d 0a00 	vldr	s0, [sp]
 8009af2:	f001 fc75 	bl	800b3e0 <__kernel_cosf>
 8009af6:	e7f5      	b.n	8009ae4 <cosf+0x5c>
 8009af8:	eddd 0a01 	vldr	s1, [sp, #4]
 8009afc:	ed9d 0a00 	vldr	s0, [sp]
 8009b00:	2001      	movs	r0, #1
 8009b02:	f001 fcc5 	bl	800b490 <__kernel_sinf>
 8009b06:	e7d3      	b.n	8009ab0 <cosf+0x28>
 8009b08:	3f490fd8 	.word	0x3f490fd8
 8009b0c:	00000000 	.word	0x00000000

08009b10 <sinf>:
 8009b10:	ee10 3a10 	vmov	r3, s0
 8009b14:	b507      	push	{r0, r1, r2, lr}
 8009b16:	4a1f      	ldr	r2, [pc, #124]	@ (8009b94 <sinf+0x84>)
 8009b18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d807      	bhi.n	8009b30 <sinf+0x20>
 8009b20:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8009b98 <sinf+0x88>
 8009b24:	2000      	movs	r0, #0
 8009b26:	b003      	add	sp, #12
 8009b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b2c:	f001 bcb0 	b.w	800b490 <__kernel_sinf>
 8009b30:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009b34:	d304      	bcc.n	8009b40 <sinf+0x30>
 8009b36:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009b3a:	b003      	add	sp, #12
 8009b3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b40:	4668      	mov	r0, sp
 8009b42:	f001 ffbb 	bl	800babc <__ieee754_rem_pio2f>
 8009b46:	f000 0003 	and.w	r0, r0, #3
 8009b4a:	2801      	cmp	r0, #1
 8009b4c:	d00a      	beq.n	8009b64 <sinf+0x54>
 8009b4e:	2802      	cmp	r0, #2
 8009b50:	d00f      	beq.n	8009b72 <sinf+0x62>
 8009b52:	b9c0      	cbnz	r0, 8009b86 <sinf+0x76>
 8009b54:	eddd 0a01 	vldr	s1, [sp, #4]
 8009b58:	ed9d 0a00 	vldr	s0, [sp]
 8009b5c:	2001      	movs	r0, #1
 8009b5e:	f001 fc97 	bl	800b490 <__kernel_sinf>
 8009b62:	e7ea      	b.n	8009b3a <sinf+0x2a>
 8009b64:	eddd 0a01 	vldr	s1, [sp, #4]
 8009b68:	ed9d 0a00 	vldr	s0, [sp]
 8009b6c:	f001 fc38 	bl	800b3e0 <__kernel_cosf>
 8009b70:	e7e3      	b.n	8009b3a <sinf+0x2a>
 8009b72:	eddd 0a01 	vldr	s1, [sp, #4]
 8009b76:	ed9d 0a00 	vldr	s0, [sp]
 8009b7a:	2001      	movs	r0, #1
 8009b7c:	f001 fc88 	bl	800b490 <__kernel_sinf>
 8009b80:	eeb1 0a40 	vneg.f32	s0, s0
 8009b84:	e7d9      	b.n	8009b3a <sinf+0x2a>
 8009b86:	eddd 0a01 	vldr	s1, [sp, #4]
 8009b8a:	ed9d 0a00 	vldr	s0, [sp]
 8009b8e:	f001 fc27 	bl	800b3e0 <__kernel_cosf>
 8009b92:	e7f5      	b.n	8009b80 <sinf+0x70>
 8009b94:	3f490fd8 	.word	0x3f490fd8
 8009b98:	00000000 	.word	0x00000000

08009b9c <finite>:
 8009b9c:	b082      	sub	sp, #8
 8009b9e:	ed8d 0b00 	vstr	d0, [sp]
 8009ba2:	9801      	ldr	r0, [sp, #4]
 8009ba4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009ba8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009bac:	0fc0      	lsrs	r0, r0, #31
 8009bae:	b002      	add	sp, #8
 8009bb0:	4770      	bx	lr

08009bb2 <finitef>:
 8009bb2:	ee10 3a10 	vmov	r3, s0
 8009bb6:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8009bba:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009bbe:	bfac      	ite	ge
 8009bc0:	2000      	movge	r0, #0
 8009bc2:	2001      	movlt	r0, #1
 8009bc4:	4770      	bx	lr
	...

08009bc8 <__ieee754_sqrt>:
 8009bc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bcc:	4a66      	ldr	r2, [pc, #408]	@ (8009d68 <__ieee754_sqrt+0x1a0>)
 8009bce:	ec55 4b10 	vmov	r4, r5, d0
 8009bd2:	43aa      	bics	r2, r5
 8009bd4:	462b      	mov	r3, r5
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	d110      	bne.n	8009bfc <__ieee754_sqrt+0x34>
 8009bda:	4622      	mov	r2, r4
 8009bdc:	4620      	mov	r0, r4
 8009bde:	4629      	mov	r1, r5
 8009be0:	f7f6 fd2a 	bl	8000638 <__aeabi_dmul>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4620      	mov	r0, r4
 8009bea:	4629      	mov	r1, r5
 8009bec:	f7f6 fb6e 	bl	80002cc <__adddf3>
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	460d      	mov	r5, r1
 8009bf4:	ec45 4b10 	vmov	d0, r4, r5
 8009bf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfc:	2d00      	cmp	r5, #0
 8009bfe:	dc0e      	bgt.n	8009c1e <__ieee754_sqrt+0x56>
 8009c00:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009c04:	4322      	orrs	r2, r4
 8009c06:	d0f5      	beq.n	8009bf4 <__ieee754_sqrt+0x2c>
 8009c08:	b19d      	cbz	r5, 8009c32 <__ieee754_sqrt+0x6a>
 8009c0a:	4622      	mov	r2, r4
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	4629      	mov	r1, r5
 8009c10:	f7f6 fb5a 	bl	80002c8 <__aeabi_dsub>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	f7f6 fe38 	bl	800088c <__aeabi_ddiv>
 8009c1c:	e7e8      	b.n	8009bf0 <__ieee754_sqrt+0x28>
 8009c1e:	152a      	asrs	r2, r5, #20
 8009c20:	d115      	bne.n	8009c4e <__ieee754_sqrt+0x86>
 8009c22:	2000      	movs	r0, #0
 8009c24:	e009      	b.n	8009c3a <__ieee754_sqrt+0x72>
 8009c26:	0acb      	lsrs	r3, r1, #11
 8009c28:	3a15      	subs	r2, #21
 8009c2a:	0549      	lsls	r1, r1, #21
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d0fa      	beq.n	8009c26 <__ieee754_sqrt+0x5e>
 8009c30:	e7f7      	b.n	8009c22 <__ieee754_sqrt+0x5a>
 8009c32:	462a      	mov	r2, r5
 8009c34:	e7fa      	b.n	8009c2c <__ieee754_sqrt+0x64>
 8009c36:	005b      	lsls	r3, r3, #1
 8009c38:	3001      	adds	r0, #1
 8009c3a:	02dc      	lsls	r4, r3, #11
 8009c3c:	d5fb      	bpl.n	8009c36 <__ieee754_sqrt+0x6e>
 8009c3e:	1e44      	subs	r4, r0, #1
 8009c40:	1b12      	subs	r2, r2, r4
 8009c42:	f1c0 0420 	rsb	r4, r0, #32
 8009c46:	fa21 f404 	lsr.w	r4, r1, r4
 8009c4a:	4323      	orrs	r3, r4
 8009c4c:	4081      	lsls	r1, r0
 8009c4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c52:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009c56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c5a:	07d2      	lsls	r2, r2, #31
 8009c5c:	bf5c      	itt	pl
 8009c5e:	005b      	lslpl	r3, r3, #1
 8009c60:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009c68:	bf58      	it	pl
 8009c6a:	0049      	lslpl	r1, r1, #1
 8009c6c:	2600      	movs	r6, #0
 8009c6e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009c72:	107f      	asrs	r7, r7, #1
 8009c74:	0049      	lsls	r1, r1, #1
 8009c76:	2016      	movs	r0, #22
 8009c78:	4632      	mov	r2, r6
 8009c7a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009c7e:	1915      	adds	r5, r2, r4
 8009c80:	429d      	cmp	r5, r3
 8009c82:	bfde      	ittt	le
 8009c84:	192a      	addle	r2, r5, r4
 8009c86:	1b5b      	suble	r3, r3, r5
 8009c88:	1936      	addle	r6, r6, r4
 8009c8a:	0fcd      	lsrs	r5, r1, #31
 8009c8c:	3801      	subs	r0, #1
 8009c8e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009c92:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009c96:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009c9a:	d1f0      	bne.n	8009c7e <__ieee754_sqrt+0xb6>
 8009c9c:	4605      	mov	r5, r0
 8009c9e:	2420      	movs	r4, #32
 8009ca0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	eb0c 0e00 	add.w	lr, ip, r0
 8009caa:	dc02      	bgt.n	8009cb2 <__ieee754_sqrt+0xea>
 8009cac:	d113      	bne.n	8009cd6 <__ieee754_sqrt+0x10e>
 8009cae:	458e      	cmp	lr, r1
 8009cb0:	d811      	bhi.n	8009cd6 <__ieee754_sqrt+0x10e>
 8009cb2:	f1be 0f00 	cmp.w	lr, #0
 8009cb6:	eb0e 000c 	add.w	r0, lr, ip
 8009cba:	da3f      	bge.n	8009d3c <__ieee754_sqrt+0x174>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	db3d      	blt.n	8009d3c <__ieee754_sqrt+0x174>
 8009cc0:	f102 0801 	add.w	r8, r2, #1
 8009cc4:	1a9b      	subs	r3, r3, r2
 8009cc6:	458e      	cmp	lr, r1
 8009cc8:	bf88      	it	hi
 8009cca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009cce:	eba1 010e 	sub.w	r1, r1, lr
 8009cd2:	4465      	add	r5, ip
 8009cd4:	4642      	mov	r2, r8
 8009cd6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009cda:	3c01      	subs	r4, #1
 8009cdc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009ce0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009ce4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009ce8:	d1dc      	bne.n	8009ca4 <__ieee754_sqrt+0xdc>
 8009cea:	4319      	orrs	r1, r3
 8009cec:	d01b      	beq.n	8009d26 <__ieee754_sqrt+0x15e>
 8009cee:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8009d6c <__ieee754_sqrt+0x1a4>
 8009cf2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8009d70 <__ieee754_sqrt+0x1a8>
 8009cf6:	e9da 0100 	ldrd	r0, r1, [sl]
 8009cfa:	e9db 2300 	ldrd	r2, r3, [fp]
 8009cfe:	f7f6 fae3 	bl	80002c8 <__aeabi_dsub>
 8009d02:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d06:	4602      	mov	r2, r0
 8009d08:	460b      	mov	r3, r1
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	4649      	mov	r1, r9
 8009d0e:	f7f6 ff0f 	bl	8000b30 <__aeabi_dcmple>
 8009d12:	b140      	cbz	r0, 8009d26 <__ieee754_sqrt+0x15e>
 8009d14:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009d18:	e9da 0100 	ldrd	r0, r1, [sl]
 8009d1c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009d20:	d10e      	bne.n	8009d40 <__ieee754_sqrt+0x178>
 8009d22:	3601      	adds	r6, #1
 8009d24:	4625      	mov	r5, r4
 8009d26:	1073      	asrs	r3, r6, #1
 8009d28:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8009d2c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8009d30:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8009d34:	086b      	lsrs	r3, r5, #1
 8009d36:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8009d3a:	e759      	b.n	8009bf0 <__ieee754_sqrt+0x28>
 8009d3c:	4690      	mov	r8, r2
 8009d3e:	e7c1      	b.n	8009cc4 <__ieee754_sqrt+0xfc>
 8009d40:	f7f6 fac4 	bl	80002cc <__adddf3>
 8009d44:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4640      	mov	r0, r8
 8009d4e:	4649      	mov	r1, r9
 8009d50:	f7f6 fee4 	bl	8000b1c <__aeabi_dcmplt>
 8009d54:	b120      	cbz	r0, 8009d60 <__ieee754_sqrt+0x198>
 8009d56:	1cab      	adds	r3, r5, #2
 8009d58:	bf08      	it	eq
 8009d5a:	3601      	addeq	r6, #1
 8009d5c:	3502      	adds	r5, #2
 8009d5e:	e7e2      	b.n	8009d26 <__ieee754_sqrt+0x15e>
 8009d60:	1c6b      	adds	r3, r5, #1
 8009d62:	f023 0501 	bic.w	r5, r3, #1
 8009d66:	e7de      	b.n	8009d26 <__ieee754_sqrt+0x15e>
 8009d68:	7ff00000 	.word	0x7ff00000
 8009d6c:	0800d078 	.word	0x0800d078
 8009d70:	0800d070 	.word	0x0800d070
 8009d74:	00000000 	.word	0x00000000

08009d78 <__kernel_cos>:
 8009d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7c:	ec57 6b10 	vmov	r6, r7, d0
 8009d80:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009d84:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8009d88:	ed8d 1b00 	vstr	d1, [sp]
 8009d8c:	d206      	bcs.n	8009d9c <__kernel_cos+0x24>
 8009d8e:	4630      	mov	r0, r6
 8009d90:	4639      	mov	r1, r7
 8009d92:	f7f6 ff01 	bl	8000b98 <__aeabi_d2iz>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	f000 8088 	beq.w	8009eac <__kernel_cos+0x134>
 8009d9c:	4632      	mov	r2, r6
 8009d9e:	463b      	mov	r3, r7
 8009da0:	4630      	mov	r0, r6
 8009da2:	4639      	mov	r1, r7
 8009da4:	f7f6 fc48 	bl	8000638 <__aeabi_dmul>
 8009da8:	4b51      	ldr	r3, [pc, #324]	@ (8009ef0 <__kernel_cos+0x178>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	4604      	mov	r4, r0
 8009dae:	460d      	mov	r5, r1
 8009db0:	f7f6 fc42 	bl	8000638 <__aeabi_dmul>
 8009db4:	a340      	add	r3, pc, #256	@ (adr r3, 8009eb8 <__kernel_cos+0x140>)
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	4682      	mov	sl, r0
 8009dbc:	468b      	mov	fp, r1
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	f7f6 fc39 	bl	8000638 <__aeabi_dmul>
 8009dc6:	a33e      	add	r3, pc, #248	@ (adr r3, 8009ec0 <__kernel_cos+0x148>)
 8009dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dcc:	f7f6 fa7e 	bl	80002cc <__adddf3>
 8009dd0:	4622      	mov	r2, r4
 8009dd2:	462b      	mov	r3, r5
 8009dd4:	f7f6 fc30 	bl	8000638 <__aeabi_dmul>
 8009dd8:	a33b      	add	r3, pc, #236	@ (adr r3, 8009ec8 <__kernel_cos+0x150>)
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	f7f6 fa73 	bl	80002c8 <__aeabi_dsub>
 8009de2:	4622      	mov	r2, r4
 8009de4:	462b      	mov	r3, r5
 8009de6:	f7f6 fc27 	bl	8000638 <__aeabi_dmul>
 8009dea:	a339      	add	r3, pc, #228	@ (adr r3, 8009ed0 <__kernel_cos+0x158>)
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	f7f6 fa6c 	bl	80002cc <__adddf3>
 8009df4:	4622      	mov	r2, r4
 8009df6:	462b      	mov	r3, r5
 8009df8:	f7f6 fc1e 	bl	8000638 <__aeabi_dmul>
 8009dfc:	a336      	add	r3, pc, #216	@ (adr r3, 8009ed8 <__kernel_cos+0x160>)
 8009dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e02:	f7f6 fa61 	bl	80002c8 <__aeabi_dsub>
 8009e06:	4622      	mov	r2, r4
 8009e08:	462b      	mov	r3, r5
 8009e0a:	f7f6 fc15 	bl	8000638 <__aeabi_dmul>
 8009e0e:	a334      	add	r3, pc, #208	@ (adr r3, 8009ee0 <__kernel_cos+0x168>)
 8009e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e14:	f7f6 fa5a 	bl	80002cc <__adddf3>
 8009e18:	4622      	mov	r2, r4
 8009e1a:	462b      	mov	r3, r5
 8009e1c:	f7f6 fc0c 	bl	8000638 <__aeabi_dmul>
 8009e20:	4622      	mov	r2, r4
 8009e22:	462b      	mov	r3, r5
 8009e24:	f7f6 fc08 	bl	8000638 <__aeabi_dmul>
 8009e28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	460d      	mov	r5, r1
 8009e30:	4630      	mov	r0, r6
 8009e32:	4639      	mov	r1, r7
 8009e34:	f7f6 fc00 	bl	8000638 <__aeabi_dmul>
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f7f6 fa42 	bl	80002c8 <__aeabi_dsub>
 8009e44:	4b2b      	ldr	r3, [pc, #172]	@ (8009ef4 <__kernel_cos+0x17c>)
 8009e46:	4598      	cmp	r8, r3
 8009e48:	4606      	mov	r6, r0
 8009e4a:	460f      	mov	r7, r1
 8009e4c:	d810      	bhi.n	8009e70 <__kernel_cos+0xf8>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	4650      	mov	r0, sl
 8009e54:	4659      	mov	r1, fp
 8009e56:	f7f6 fa37 	bl	80002c8 <__aeabi_dsub>
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	4926      	ldr	r1, [pc, #152]	@ (8009ef8 <__kernel_cos+0x180>)
 8009e5e:	4602      	mov	r2, r0
 8009e60:	2000      	movs	r0, #0
 8009e62:	f7f6 fa31 	bl	80002c8 <__aeabi_dsub>
 8009e66:	ec41 0b10 	vmov	d0, r0, r1
 8009e6a:	b003      	add	sp, #12
 8009e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e70:	4b22      	ldr	r3, [pc, #136]	@ (8009efc <__kernel_cos+0x184>)
 8009e72:	4921      	ldr	r1, [pc, #132]	@ (8009ef8 <__kernel_cos+0x180>)
 8009e74:	4598      	cmp	r8, r3
 8009e76:	bf8c      	ite	hi
 8009e78:	4d21      	ldrhi	r5, [pc, #132]	@ (8009f00 <__kernel_cos+0x188>)
 8009e7a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8009e7e:	2400      	movs	r4, #0
 8009e80:	4622      	mov	r2, r4
 8009e82:	462b      	mov	r3, r5
 8009e84:	2000      	movs	r0, #0
 8009e86:	f7f6 fa1f 	bl	80002c8 <__aeabi_dsub>
 8009e8a:	4622      	mov	r2, r4
 8009e8c:	4680      	mov	r8, r0
 8009e8e:	4689      	mov	r9, r1
 8009e90:	462b      	mov	r3, r5
 8009e92:	4650      	mov	r0, sl
 8009e94:	4659      	mov	r1, fp
 8009e96:	f7f6 fa17 	bl	80002c8 <__aeabi_dsub>
 8009e9a:	4632      	mov	r2, r6
 8009e9c:	463b      	mov	r3, r7
 8009e9e:	f7f6 fa13 	bl	80002c8 <__aeabi_dsub>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	4640      	mov	r0, r8
 8009ea8:	4649      	mov	r1, r9
 8009eaa:	e7da      	b.n	8009e62 <__kernel_cos+0xea>
 8009eac:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009ee8 <__kernel_cos+0x170>
 8009eb0:	e7db      	b.n	8009e6a <__kernel_cos+0xf2>
 8009eb2:	bf00      	nop
 8009eb4:	f3af 8000 	nop.w
 8009eb8:	be8838d4 	.word	0xbe8838d4
 8009ebc:	bda8fae9 	.word	0xbda8fae9
 8009ec0:	bdb4b1c4 	.word	0xbdb4b1c4
 8009ec4:	3e21ee9e 	.word	0x3e21ee9e
 8009ec8:	809c52ad 	.word	0x809c52ad
 8009ecc:	3e927e4f 	.word	0x3e927e4f
 8009ed0:	19cb1590 	.word	0x19cb1590
 8009ed4:	3efa01a0 	.word	0x3efa01a0
 8009ed8:	16c15177 	.word	0x16c15177
 8009edc:	3f56c16c 	.word	0x3f56c16c
 8009ee0:	5555554c 	.word	0x5555554c
 8009ee4:	3fa55555 	.word	0x3fa55555
 8009ee8:	00000000 	.word	0x00000000
 8009eec:	3ff00000 	.word	0x3ff00000
 8009ef0:	3fe00000 	.word	0x3fe00000
 8009ef4:	3fd33332 	.word	0x3fd33332
 8009ef8:	3ff00000 	.word	0x3ff00000
 8009efc:	3fe90000 	.word	0x3fe90000
 8009f00:	3fd20000 	.word	0x3fd20000
 8009f04:	00000000 	.word	0x00000000

08009f08 <__kernel_sin>:
 8009f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f0c:	ec55 4b10 	vmov	r4, r5, d0
 8009f10:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009f14:	b085      	sub	sp, #20
 8009f16:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009f1a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009f1e:	4680      	mov	r8, r0
 8009f20:	d205      	bcs.n	8009f2e <__kernel_sin+0x26>
 8009f22:	4620      	mov	r0, r4
 8009f24:	4629      	mov	r1, r5
 8009f26:	f7f6 fe37 	bl	8000b98 <__aeabi_d2iz>
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	d052      	beq.n	8009fd4 <__kernel_sin+0xcc>
 8009f2e:	4622      	mov	r2, r4
 8009f30:	462b      	mov	r3, r5
 8009f32:	4620      	mov	r0, r4
 8009f34:	4629      	mov	r1, r5
 8009f36:	f7f6 fb7f 	bl	8000638 <__aeabi_dmul>
 8009f3a:	4682      	mov	sl, r0
 8009f3c:	468b      	mov	fp, r1
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
 8009f42:	4620      	mov	r0, r4
 8009f44:	4629      	mov	r1, r5
 8009f46:	f7f6 fb77 	bl	8000638 <__aeabi_dmul>
 8009f4a:	a342      	add	r3, pc, #264	@ (adr r3, 800a054 <__kernel_sin+0x14c>)
 8009f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f50:	e9cd 0100 	strd	r0, r1, [sp]
 8009f54:	4650      	mov	r0, sl
 8009f56:	4659      	mov	r1, fp
 8009f58:	f7f6 fb6e 	bl	8000638 <__aeabi_dmul>
 8009f5c:	a33f      	add	r3, pc, #252	@ (adr r3, 800a05c <__kernel_sin+0x154>)
 8009f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f62:	f7f6 f9b1 	bl	80002c8 <__aeabi_dsub>
 8009f66:	4652      	mov	r2, sl
 8009f68:	465b      	mov	r3, fp
 8009f6a:	f7f6 fb65 	bl	8000638 <__aeabi_dmul>
 8009f6e:	a33d      	add	r3, pc, #244	@ (adr r3, 800a064 <__kernel_sin+0x15c>)
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	f7f6 f9aa 	bl	80002cc <__adddf3>
 8009f78:	4652      	mov	r2, sl
 8009f7a:	465b      	mov	r3, fp
 8009f7c:	f7f6 fb5c 	bl	8000638 <__aeabi_dmul>
 8009f80:	a33a      	add	r3, pc, #232	@ (adr r3, 800a06c <__kernel_sin+0x164>)
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	f7f6 f99f 	bl	80002c8 <__aeabi_dsub>
 8009f8a:	4652      	mov	r2, sl
 8009f8c:	465b      	mov	r3, fp
 8009f8e:	f7f6 fb53 	bl	8000638 <__aeabi_dmul>
 8009f92:	a338      	add	r3, pc, #224	@ (adr r3, 800a074 <__kernel_sin+0x16c>)
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	f7f6 f998 	bl	80002cc <__adddf3>
 8009f9c:	4606      	mov	r6, r0
 8009f9e:	460f      	mov	r7, r1
 8009fa0:	f1b8 0f00 	cmp.w	r8, #0
 8009fa4:	d11b      	bne.n	8009fde <__kernel_sin+0xd6>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	4650      	mov	r0, sl
 8009fac:	4659      	mov	r1, fp
 8009fae:	f7f6 fb43 	bl	8000638 <__aeabi_dmul>
 8009fb2:	a325      	add	r3, pc, #148	@ (adr r3, 800a048 <__kernel_sin+0x140>)
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	f7f6 f986 	bl	80002c8 <__aeabi_dsub>
 8009fbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fc0:	f7f6 fb3a 	bl	8000638 <__aeabi_dmul>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	4620      	mov	r0, r4
 8009fca:	4629      	mov	r1, r5
 8009fcc:	f7f6 f97e 	bl	80002cc <__adddf3>
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	460d      	mov	r5, r1
 8009fd4:	ec45 4b10 	vmov	d0, r4, r5
 8009fd8:	b005      	add	sp, #20
 8009fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fe2:	4b1b      	ldr	r3, [pc, #108]	@ (800a050 <__kernel_sin+0x148>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f7f6 fb27 	bl	8000638 <__aeabi_dmul>
 8009fea:	4632      	mov	r2, r6
 8009fec:	4680      	mov	r8, r0
 8009fee:	4689      	mov	r9, r1
 8009ff0:	463b      	mov	r3, r7
 8009ff2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ff6:	f7f6 fb1f 	bl	8000638 <__aeabi_dmul>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	4640      	mov	r0, r8
 800a000:	4649      	mov	r1, r9
 800a002:	f7f6 f961 	bl	80002c8 <__aeabi_dsub>
 800a006:	4652      	mov	r2, sl
 800a008:	465b      	mov	r3, fp
 800a00a:	f7f6 fb15 	bl	8000638 <__aeabi_dmul>
 800a00e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a012:	f7f6 f959 	bl	80002c8 <__aeabi_dsub>
 800a016:	a30c      	add	r3, pc, #48	@ (adr r3, 800a048 <__kernel_sin+0x140>)
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	4606      	mov	r6, r0
 800a01e:	460f      	mov	r7, r1
 800a020:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a024:	f7f6 fb08 	bl	8000638 <__aeabi_dmul>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	4630      	mov	r0, r6
 800a02e:	4639      	mov	r1, r7
 800a030:	f7f6 f94c 	bl	80002cc <__adddf3>
 800a034:	4602      	mov	r2, r0
 800a036:	460b      	mov	r3, r1
 800a038:	4620      	mov	r0, r4
 800a03a:	4629      	mov	r1, r5
 800a03c:	f7f6 f944 	bl	80002c8 <__aeabi_dsub>
 800a040:	e7c6      	b.n	8009fd0 <__kernel_sin+0xc8>
 800a042:	bf00      	nop
 800a044:	f3af 8000 	nop.w
 800a048:	55555549 	.word	0x55555549
 800a04c:	3fc55555 	.word	0x3fc55555
 800a050:	3fe00000 	.word	0x3fe00000
 800a054:	5acfd57c 	.word	0x5acfd57c
 800a058:	3de5d93a 	.word	0x3de5d93a
 800a05c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a060:	3e5ae5e6 	.word	0x3e5ae5e6
 800a064:	57b1fe7d 	.word	0x57b1fe7d
 800a068:	3ec71de3 	.word	0x3ec71de3
 800a06c:	19c161d5 	.word	0x19c161d5
 800a070:	3f2a01a0 	.word	0x3f2a01a0
 800a074:	1110f8a6 	.word	0x1110f8a6
 800a078:	3f811111 	.word	0x3f811111
 800a07c:	00000000 	.word	0x00000000

0800a080 <__ieee754_atan2>:
 800a080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a084:	ec57 6b11 	vmov	r6, r7, d1
 800a088:	4273      	negs	r3, r6
 800a08a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800a208 <__ieee754_atan2+0x188>
 800a08e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800a092:	4333      	orrs	r3, r6
 800a094:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a098:	4543      	cmp	r3, r8
 800a09a:	ec51 0b10 	vmov	r0, r1, d0
 800a09e:	4635      	mov	r5, r6
 800a0a0:	d809      	bhi.n	800a0b6 <__ieee754_atan2+0x36>
 800a0a2:	4244      	negs	r4, r0
 800a0a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a0a8:	4304      	orrs	r4, r0
 800a0aa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a0ae:	4544      	cmp	r4, r8
 800a0b0:	468e      	mov	lr, r1
 800a0b2:	4681      	mov	r9, r0
 800a0b4:	d907      	bls.n	800a0c6 <__ieee754_atan2+0x46>
 800a0b6:	4632      	mov	r2, r6
 800a0b8:	463b      	mov	r3, r7
 800a0ba:	f7f6 f907 	bl	80002cc <__adddf3>
 800a0be:	ec41 0b10 	vmov	d0, r0, r1
 800a0c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0c6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800a0ca:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800a0ce:	4334      	orrs	r4, r6
 800a0d0:	d103      	bne.n	800a0da <__ieee754_atan2+0x5a>
 800a0d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0d6:	f000 bfe3 	b.w	800b0a0 <atan>
 800a0da:	17bc      	asrs	r4, r7, #30
 800a0dc:	f004 0402 	and.w	r4, r4, #2
 800a0e0:	ea53 0909 	orrs.w	r9, r3, r9
 800a0e4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a0e8:	d107      	bne.n	800a0fa <__ieee754_atan2+0x7a>
 800a0ea:	2c02      	cmp	r4, #2
 800a0ec:	d05f      	beq.n	800a1ae <__ieee754_atan2+0x12e>
 800a0ee:	2c03      	cmp	r4, #3
 800a0f0:	d1e5      	bne.n	800a0be <__ieee754_atan2+0x3e>
 800a0f2:	a143      	add	r1, pc, #268	@ (adr r1, 800a200 <__ieee754_atan2+0x180>)
 800a0f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0f8:	e7e1      	b.n	800a0be <__ieee754_atan2+0x3e>
 800a0fa:	4315      	orrs	r5, r2
 800a0fc:	d106      	bne.n	800a10c <__ieee754_atan2+0x8c>
 800a0fe:	f1be 0f00 	cmp.w	lr, #0
 800a102:	db5f      	blt.n	800a1c4 <__ieee754_atan2+0x144>
 800a104:	a136      	add	r1, pc, #216	@ (adr r1, 800a1e0 <__ieee754_atan2+0x160>)
 800a106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a10a:	e7d8      	b.n	800a0be <__ieee754_atan2+0x3e>
 800a10c:	4542      	cmp	r2, r8
 800a10e:	d10f      	bne.n	800a130 <__ieee754_atan2+0xb0>
 800a110:	4293      	cmp	r3, r2
 800a112:	f104 34ff 	add.w	r4, r4, #4294967295
 800a116:	d107      	bne.n	800a128 <__ieee754_atan2+0xa8>
 800a118:	2c02      	cmp	r4, #2
 800a11a:	d84c      	bhi.n	800a1b6 <__ieee754_atan2+0x136>
 800a11c:	4b36      	ldr	r3, [pc, #216]	@ (800a1f8 <__ieee754_atan2+0x178>)
 800a11e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a122:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a126:	e7ca      	b.n	800a0be <__ieee754_atan2+0x3e>
 800a128:	2c02      	cmp	r4, #2
 800a12a:	d848      	bhi.n	800a1be <__ieee754_atan2+0x13e>
 800a12c:	4b33      	ldr	r3, [pc, #204]	@ (800a1fc <__ieee754_atan2+0x17c>)
 800a12e:	e7f6      	b.n	800a11e <__ieee754_atan2+0x9e>
 800a130:	4543      	cmp	r3, r8
 800a132:	d0e4      	beq.n	800a0fe <__ieee754_atan2+0x7e>
 800a134:	1a9b      	subs	r3, r3, r2
 800a136:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800a13a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a13e:	da1e      	bge.n	800a17e <__ieee754_atan2+0xfe>
 800a140:	2f00      	cmp	r7, #0
 800a142:	da01      	bge.n	800a148 <__ieee754_atan2+0xc8>
 800a144:	323c      	adds	r2, #60	@ 0x3c
 800a146:	db1e      	blt.n	800a186 <__ieee754_atan2+0x106>
 800a148:	4632      	mov	r2, r6
 800a14a:	463b      	mov	r3, r7
 800a14c:	f7f6 fb9e 	bl	800088c <__aeabi_ddiv>
 800a150:	ec41 0b10 	vmov	d0, r0, r1
 800a154:	f001 f93c 	bl	800b3d0 <fabs>
 800a158:	f000 ffa2 	bl	800b0a0 <atan>
 800a15c:	ec51 0b10 	vmov	r0, r1, d0
 800a160:	2c01      	cmp	r4, #1
 800a162:	d013      	beq.n	800a18c <__ieee754_atan2+0x10c>
 800a164:	2c02      	cmp	r4, #2
 800a166:	d015      	beq.n	800a194 <__ieee754_atan2+0x114>
 800a168:	2c00      	cmp	r4, #0
 800a16a:	d0a8      	beq.n	800a0be <__ieee754_atan2+0x3e>
 800a16c:	a318      	add	r3, pc, #96	@ (adr r3, 800a1d0 <__ieee754_atan2+0x150>)
 800a16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a172:	f7f6 f8a9 	bl	80002c8 <__aeabi_dsub>
 800a176:	a318      	add	r3, pc, #96	@ (adr r3, 800a1d8 <__ieee754_atan2+0x158>)
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	e014      	b.n	800a1a8 <__ieee754_atan2+0x128>
 800a17e:	a118      	add	r1, pc, #96	@ (adr r1, 800a1e0 <__ieee754_atan2+0x160>)
 800a180:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a184:	e7ec      	b.n	800a160 <__ieee754_atan2+0xe0>
 800a186:	2000      	movs	r0, #0
 800a188:	2100      	movs	r1, #0
 800a18a:	e7e9      	b.n	800a160 <__ieee754_atan2+0xe0>
 800a18c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a190:	4619      	mov	r1, r3
 800a192:	e794      	b.n	800a0be <__ieee754_atan2+0x3e>
 800a194:	a30e      	add	r3, pc, #56	@ (adr r3, 800a1d0 <__ieee754_atan2+0x150>)
 800a196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19a:	f7f6 f895 	bl	80002c8 <__aeabi_dsub>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	a10d      	add	r1, pc, #52	@ (adr r1, 800a1d8 <__ieee754_atan2+0x158>)
 800a1a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1a8:	f7f6 f88e 	bl	80002c8 <__aeabi_dsub>
 800a1ac:	e787      	b.n	800a0be <__ieee754_atan2+0x3e>
 800a1ae:	a10a      	add	r1, pc, #40	@ (adr r1, 800a1d8 <__ieee754_atan2+0x158>)
 800a1b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1b4:	e783      	b.n	800a0be <__ieee754_atan2+0x3e>
 800a1b6:	a10c      	add	r1, pc, #48	@ (adr r1, 800a1e8 <__ieee754_atan2+0x168>)
 800a1b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1bc:	e77f      	b.n	800a0be <__ieee754_atan2+0x3e>
 800a1be:	2000      	movs	r0, #0
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	e77c      	b.n	800a0be <__ieee754_atan2+0x3e>
 800a1c4:	a10a      	add	r1, pc, #40	@ (adr r1, 800a1f0 <__ieee754_atan2+0x170>)
 800a1c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1ca:	e778      	b.n	800a0be <__ieee754_atan2+0x3e>
 800a1cc:	f3af 8000 	nop.w
 800a1d0:	33145c07 	.word	0x33145c07
 800a1d4:	3ca1a626 	.word	0x3ca1a626
 800a1d8:	54442d18 	.word	0x54442d18
 800a1dc:	400921fb 	.word	0x400921fb
 800a1e0:	54442d18 	.word	0x54442d18
 800a1e4:	3ff921fb 	.word	0x3ff921fb
 800a1e8:	54442d18 	.word	0x54442d18
 800a1ec:	3fe921fb 	.word	0x3fe921fb
 800a1f0:	54442d18 	.word	0x54442d18
 800a1f4:	bff921fb 	.word	0xbff921fb
 800a1f8:	0800d098 	.word	0x0800d098
 800a1fc:	0800d080 	.word	0x0800d080
 800a200:	54442d18 	.word	0x54442d18
 800a204:	c00921fb 	.word	0xc00921fb
 800a208:	7ff00000 	.word	0x7ff00000
 800a20c:	00000000 	.word	0x00000000

0800a210 <__ieee754_pow>:
 800a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a214:	b091      	sub	sp, #68	@ 0x44
 800a216:	ed8d 1b00 	vstr	d1, [sp]
 800a21a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800a21e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800a222:	ea5a 0001 	orrs.w	r0, sl, r1
 800a226:	ec57 6b10 	vmov	r6, r7, d0
 800a22a:	d113      	bne.n	800a254 <__ieee754_pow+0x44>
 800a22c:	19b3      	adds	r3, r6, r6
 800a22e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800a232:	4152      	adcs	r2, r2
 800a234:	4298      	cmp	r0, r3
 800a236:	4b9a      	ldr	r3, [pc, #616]	@ (800a4a0 <__ieee754_pow+0x290>)
 800a238:	4193      	sbcs	r3, r2
 800a23a:	f080 84ee 	bcs.w	800ac1a <__ieee754_pow+0xa0a>
 800a23e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a242:	4630      	mov	r0, r6
 800a244:	4639      	mov	r1, r7
 800a246:	f7f6 f841 	bl	80002cc <__adddf3>
 800a24a:	ec41 0b10 	vmov	d0, r0, r1
 800a24e:	b011      	add	sp, #68	@ 0x44
 800a250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a254:	4a93      	ldr	r2, [pc, #588]	@ (800a4a4 <__ieee754_pow+0x294>)
 800a256:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800a25a:	4295      	cmp	r5, r2
 800a25c:	46b8      	mov	r8, r7
 800a25e:	4633      	mov	r3, r6
 800a260:	d80a      	bhi.n	800a278 <__ieee754_pow+0x68>
 800a262:	d104      	bne.n	800a26e <__ieee754_pow+0x5e>
 800a264:	2e00      	cmp	r6, #0
 800a266:	d1ea      	bne.n	800a23e <__ieee754_pow+0x2e>
 800a268:	45aa      	cmp	sl, r5
 800a26a:	d8e8      	bhi.n	800a23e <__ieee754_pow+0x2e>
 800a26c:	e001      	b.n	800a272 <__ieee754_pow+0x62>
 800a26e:	4592      	cmp	sl, r2
 800a270:	d802      	bhi.n	800a278 <__ieee754_pow+0x68>
 800a272:	4592      	cmp	sl, r2
 800a274:	d10f      	bne.n	800a296 <__ieee754_pow+0x86>
 800a276:	b171      	cbz	r1, 800a296 <__ieee754_pow+0x86>
 800a278:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800a27c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800a280:	ea58 0803 	orrs.w	r8, r8, r3
 800a284:	d1db      	bne.n	800a23e <__ieee754_pow+0x2e>
 800a286:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a28a:	18db      	adds	r3, r3, r3
 800a28c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a290:	4152      	adcs	r2, r2
 800a292:	4598      	cmp	r8, r3
 800a294:	e7cf      	b.n	800a236 <__ieee754_pow+0x26>
 800a296:	f1b8 0f00 	cmp.w	r8, #0
 800a29a:	46ab      	mov	fp, r5
 800a29c:	da43      	bge.n	800a326 <__ieee754_pow+0x116>
 800a29e:	4a82      	ldr	r2, [pc, #520]	@ (800a4a8 <__ieee754_pow+0x298>)
 800a2a0:	4592      	cmp	sl, r2
 800a2a2:	d856      	bhi.n	800a352 <__ieee754_pow+0x142>
 800a2a4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a2a8:	4592      	cmp	sl, r2
 800a2aa:	f240 84c5 	bls.w	800ac38 <__ieee754_pow+0xa28>
 800a2ae:	ea4f 522a 	mov.w	r2, sl, asr #20
 800a2b2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a2b6:	2a14      	cmp	r2, #20
 800a2b8:	dd18      	ble.n	800a2ec <__ieee754_pow+0xdc>
 800a2ba:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a2be:	fa21 f402 	lsr.w	r4, r1, r2
 800a2c2:	fa04 f202 	lsl.w	r2, r4, r2
 800a2c6:	428a      	cmp	r2, r1
 800a2c8:	f040 84b6 	bne.w	800ac38 <__ieee754_pow+0xa28>
 800a2cc:	f004 0401 	and.w	r4, r4, #1
 800a2d0:	f1c4 0402 	rsb	r4, r4, #2
 800a2d4:	2900      	cmp	r1, #0
 800a2d6:	d159      	bne.n	800a38c <__ieee754_pow+0x17c>
 800a2d8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800a2dc:	d148      	bne.n	800a370 <__ieee754_pow+0x160>
 800a2de:	4632      	mov	r2, r6
 800a2e0:	463b      	mov	r3, r7
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	4639      	mov	r1, r7
 800a2e6:	f7f6 f9a7 	bl	8000638 <__aeabi_dmul>
 800a2ea:	e7ae      	b.n	800a24a <__ieee754_pow+0x3a>
 800a2ec:	2900      	cmp	r1, #0
 800a2ee:	d14c      	bne.n	800a38a <__ieee754_pow+0x17a>
 800a2f0:	f1c2 0214 	rsb	r2, r2, #20
 800a2f4:	fa4a f402 	asr.w	r4, sl, r2
 800a2f8:	fa04 f202 	lsl.w	r2, r4, r2
 800a2fc:	4552      	cmp	r2, sl
 800a2fe:	f040 8498 	bne.w	800ac32 <__ieee754_pow+0xa22>
 800a302:	f004 0401 	and.w	r4, r4, #1
 800a306:	f1c4 0402 	rsb	r4, r4, #2
 800a30a:	4a68      	ldr	r2, [pc, #416]	@ (800a4ac <__ieee754_pow+0x29c>)
 800a30c:	4592      	cmp	sl, r2
 800a30e:	d1e3      	bne.n	800a2d8 <__ieee754_pow+0xc8>
 800a310:	f1b9 0f00 	cmp.w	r9, #0
 800a314:	f280 8489 	bge.w	800ac2a <__ieee754_pow+0xa1a>
 800a318:	4964      	ldr	r1, [pc, #400]	@ (800a4ac <__ieee754_pow+0x29c>)
 800a31a:	4632      	mov	r2, r6
 800a31c:	463b      	mov	r3, r7
 800a31e:	2000      	movs	r0, #0
 800a320:	f7f6 fab4 	bl	800088c <__aeabi_ddiv>
 800a324:	e791      	b.n	800a24a <__ieee754_pow+0x3a>
 800a326:	2400      	movs	r4, #0
 800a328:	bb81      	cbnz	r1, 800a38c <__ieee754_pow+0x17c>
 800a32a:	4a5e      	ldr	r2, [pc, #376]	@ (800a4a4 <__ieee754_pow+0x294>)
 800a32c:	4592      	cmp	sl, r2
 800a32e:	d1ec      	bne.n	800a30a <__ieee754_pow+0xfa>
 800a330:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800a334:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800a338:	431a      	orrs	r2, r3
 800a33a:	f000 846e 	beq.w	800ac1a <__ieee754_pow+0xa0a>
 800a33e:	4b5c      	ldr	r3, [pc, #368]	@ (800a4b0 <__ieee754_pow+0x2a0>)
 800a340:	429d      	cmp	r5, r3
 800a342:	d908      	bls.n	800a356 <__ieee754_pow+0x146>
 800a344:	f1b9 0f00 	cmp.w	r9, #0
 800a348:	f280 846b 	bge.w	800ac22 <__ieee754_pow+0xa12>
 800a34c:	2000      	movs	r0, #0
 800a34e:	2100      	movs	r1, #0
 800a350:	e77b      	b.n	800a24a <__ieee754_pow+0x3a>
 800a352:	2402      	movs	r4, #2
 800a354:	e7e8      	b.n	800a328 <__ieee754_pow+0x118>
 800a356:	f1b9 0f00 	cmp.w	r9, #0
 800a35a:	f04f 0000 	mov.w	r0, #0
 800a35e:	f04f 0100 	mov.w	r1, #0
 800a362:	f6bf af72 	bge.w	800a24a <__ieee754_pow+0x3a>
 800a366:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a36a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a36e:	e76c      	b.n	800a24a <__ieee754_pow+0x3a>
 800a370:	4a50      	ldr	r2, [pc, #320]	@ (800a4b4 <__ieee754_pow+0x2a4>)
 800a372:	4591      	cmp	r9, r2
 800a374:	d10a      	bne.n	800a38c <__ieee754_pow+0x17c>
 800a376:	f1b8 0f00 	cmp.w	r8, #0
 800a37a:	db07      	blt.n	800a38c <__ieee754_pow+0x17c>
 800a37c:	ec47 6b10 	vmov	d0, r6, r7
 800a380:	b011      	add	sp, #68	@ 0x44
 800a382:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a386:	f7ff bc1f 	b.w	8009bc8 <__ieee754_sqrt>
 800a38a:	2400      	movs	r4, #0
 800a38c:	ec47 6b10 	vmov	d0, r6, r7
 800a390:	9302      	str	r3, [sp, #8]
 800a392:	f001 f81d 	bl	800b3d0 <fabs>
 800a396:	9b02      	ldr	r3, [sp, #8]
 800a398:	ec51 0b10 	vmov	r0, r1, d0
 800a39c:	bb43      	cbnz	r3, 800a3f0 <__ieee754_pow+0x1e0>
 800a39e:	4b43      	ldr	r3, [pc, #268]	@ (800a4ac <__ieee754_pow+0x29c>)
 800a3a0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d000      	beq.n	800a3aa <__ieee754_pow+0x19a>
 800a3a8:	bb15      	cbnz	r5, 800a3f0 <__ieee754_pow+0x1e0>
 800a3aa:	f1b9 0f00 	cmp.w	r9, #0
 800a3ae:	da05      	bge.n	800a3bc <__ieee754_pow+0x1ac>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	493d      	ldr	r1, [pc, #244]	@ (800a4ac <__ieee754_pow+0x29c>)
 800a3b8:	f7f6 fa68 	bl	800088c <__aeabi_ddiv>
 800a3bc:	f1b8 0f00 	cmp.w	r8, #0
 800a3c0:	f6bf af43 	bge.w	800a24a <__ieee754_pow+0x3a>
 800a3c4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a3c8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a3cc:	4325      	orrs	r5, r4
 800a3ce:	d108      	bne.n	800a3e2 <__ieee754_pow+0x1d2>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	f7f5 ff76 	bl	80002c8 <__aeabi_dsub>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	e79e      	b.n	800a320 <__ieee754_pow+0x110>
 800a3e2:	2c01      	cmp	r4, #1
 800a3e4:	f47f af31 	bne.w	800a24a <__ieee754_pow+0x3a>
 800a3e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	e72c      	b.n	800a24a <__ieee754_pow+0x3a>
 800a3f0:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	ea53 0204 	orrs.w	r2, r3, r4
 800a3fa:	d102      	bne.n	800a402 <__ieee754_pow+0x1f2>
 800a3fc:	4632      	mov	r2, r6
 800a3fe:	463b      	mov	r3, r7
 800a400:	e7e8      	b.n	800a3d4 <__ieee754_pow+0x1c4>
 800a402:	3c01      	subs	r4, #1
 800a404:	431c      	orrs	r4, r3
 800a406:	d016      	beq.n	800a436 <__ieee754_pow+0x226>
 800a408:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a490 <__ieee754_pow+0x280>
 800a40c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800a410:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a414:	f240 8110 	bls.w	800a638 <__ieee754_pow+0x428>
 800a418:	4b27      	ldr	r3, [pc, #156]	@ (800a4b8 <__ieee754_pow+0x2a8>)
 800a41a:	459a      	cmp	sl, r3
 800a41c:	4b24      	ldr	r3, [pc, #144]	@ (800a4b0 <__ieee754_pow+0x2a0>)
 800a41e:	d916      	bls.n	800a44e <__ieee754_pow+0x23e>
 800a420:	429d      	cmp	r5, r3
 800a422:	d80b      	bhi.n	800a43c <__ieee754_pow+0x22c>
 800a424:	f1b9 0f00 	cmp.w	r9, #0
 800a428:	da0b      	bge.n	800a442 <__ieee754_pow+0x232>
 800a42a:	2000      	movs	r0, #0
 800a42c:	b011      	add	sp, #68	@ 0x44
 800a42e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a432:	f001 bd2d 	b.w	800be90 <__math_oflow>
 800a436:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800a498 <__ieee754_pow+0x288>
 800a43a:	e7e7      	b.n	800a40c <__ieee754_pow+0x1fc>
 800a43c:	f1b9 0f00 	cmp.w	r9, #0
 800a440:	dcf3      	bgt.n	800a42a <__ieee754_pow+0x21a>
 800a442:	2000      	movs	r0, #0
 800a444:	b011      	add	sp, #68	@ 0x44
 800a446:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44a:	f001 bd19 	b.w	800be80 <__math_uflow>
 800a44e:	429d      	cmp	r5, r3
 800a450:	d20c      	bcs.n	800a46c <__ieee754_pow+0x25c>
 800a452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a456:	2200      	movs	r2, #0
 800a458:	2300      	movs	r3, #0
 800a45a:	f7f6 fb5f 	bl	8000b1c <__aeabi_dcmplt>
 800a45e:	3800      	subs	r0, #0
 800a460:	bf18      	it	ne
 800a462:	2001      	movne	r0, #1
 800a464:	f1b9 0f00 	cmp.w	r9, #0
 800a468:	daec      	bge.n	800a444 <__ieee754_pow+0x234>
 800a46a:	e7df      	b.n	800a42c <__ieee754_pow+0x21c>
 800a46c:	4b0f      	ldr	r3, [pc, #60]	@ (800a4ac <__ieee754_pow+0x29c>)
 800a46e:	429d      	cmp	r5, r3
 800a470:	f04f 0200 	mov.w	r2, #0
 800a474:	d922      	bls.n	800a4bc <__ieee754_pow+0x2ac>
 800a476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a47a:	2300      	movs	r3, #0
 800a47c:	f7f6 fb4e 	bl	8000b1c <__aeabi_dcmplt>
 800a480:	3800      	subs	r0, #0
 800a482:	bf18      	it	ne
 800a484:	2001      	movne	r0, #1
 800a486:	f1b9 0f00 	cmp.w	r9, #0
 800a48a:	dccf      	bgt.n	800a42c <__ieee754_pow+0x21c>
 800a48c:	e7da      	b.n	800a444 <__ieee754_pow+0x234>
 800a48e:	bf00      	nop
 800a490:	00000000 	.word	0x00000000
 800a494:	3ff00000 	.word	0x3ff00000
 800a498:	00000000 	.word	0x00000000
 800a49c:	bff00000 	.word	0xbff00000
 800a4a0:	fff00000 	.word	0xfff00000
 800a4a4:	7ff00000 	.word	0x7ff00000
 800a4a8:	433fffff 	.word	0x433fffff
 800a4ac:	3ff00000 	.word	0x3ff00000
 800a4b0:	3fefffff 	.word	0x3fefffff
 800a4b4:	3fe00000 	.word	0x3fe00000
 800a4b8:	43f00000 	.word	0x43f00000
 800a4bc:	4b5a      	ldr	r3, [pc, #360]	@ (800a628 <__ieee754_pow+0x418>)
 800a4be:	f7f5 ff03 	bl	80002c8 <__aeabi_dsub>
 800a4c2:	a351      	add	r3, pc, #324	@ (adr r3, 800a608 <__ieee754_pow+0x3f8>)
 800a4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	460d      	mov	r5, r1
 800a4cc:	f7f6 f8b4 	bl	8000638 <__aeabi_dmul>
 800a4d0:	a34f      	add	r3, pc, #316	@ (adr r3, 800a610 <__ieee754_pow+0x400>)
 800a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	460f      	mov	r7, r1
 800a4da:	4620      	mov	r0, r4
 800a4dc:	4629      	mov	r1, r5
 800a4de:	f7f6 f8ab 	bl	8000638 <__aeabi_dmul>
 800a4e2:	4b52      	ldr	r3, [pc, #328]	@ (800a62c <__ieee754_pow+0x41c>)
 800a4e4:	4682      	mov	sl, r0
 800a4e6:	468b      	mov	fp, r1
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	f7f6 f8a3 	bl	8000638 <__aeabi_dmul>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	a148      	add	r1, pc, #288	@ (adr r1, 800a618 <__ieee754_pow+0x408>)
 800a4f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4fc:	f7f5 fee4 	bl	80002c8 <__aeabi_dsub>
 800a500:	4622      	mov	r2, r4
 800a502:	462b      	mov	r3, r5
 800a504:	f7f6 f898 	bl	8000638 <__aeabi_dmul>
 800a508:	4602      	mov	r2, r0
 800a50a:	460b      	mov	r3, r1
 800a50c:	2000      	movs	r0, #0
 800a50e:	4948      	ldr	r1, [pc, #288]	@ (800a630 <__ieee754_pow+0x420>)
 800a510:	f7f5 feda 	bl	80002c8 <__aeabi_dsub>
 800a514:	4622      	mov	r2, r4
 800a516:	4680      	mov	r8, r0
 800a518:	4689      	mov	r9, r1
 800a51a:	462b      	mov	r3, r5
 800a51c:	4620      	mov	r0, r4
 800a51e:	4629      	mov	r1, r5
 800a520:	f7f6 f88a 	bl	8000638 <__aeabi_dmul>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	4640      	mov	r0, r8
 800a52a:	4649      	mov	r1, r9
 800a52c:	f7f6 f884 	bl	8000638 <__aeabi_dmul>
 800a530:	a33b      	add	r3, pc, #236	@ (adr r3, 800a620 <__ieee754_pow+0x410>)
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	f7f6 f87f 	bl	8000638 <__aeabi_dmul>
 800a53a:	4602      	mov	r2, r0
 800a53c:	460b      	mov	r3, r1
 800a53e:	4650      	mov	r0, sl
 800a540:	4659      	mov	r1, fp
 800a542:	f7f5 fec1 	bl	80002c8 <__aeabi_dsub>
 800a546:	4602      	mov	r2, r0
 800a548:	460b      	mov	r3, r1
 800a54a:	4680      	mov	r8, r0
 800a54c:	4689      	mov	r9, r1
 800a54e:	4630      	mov	r0, r6
 800a550:	4639      	mov	r1, r7
 800a552:	f7f5 febb 	bl	80002cc <__adddf3>
 800a556:	2400      	movs	r4, #0
 800a558:	4632      	mov	r2, r6
 800a55a:	463b      	mov	r3, r7
 800a55c:	4620      	mov	r0, r4
 800a55e:	460d      	mov	r5, r1
 800a560:	f7f5 feb2 	bl	80002c8 <__aeabi_dsub>
 800a564:	4602      	mov	r2, r0
 800a566:	460b      	mov	r3, r1
 800a568:	4640      	mov	r0, r8
 800a56a:	4649      	mov	r1, r9
 800a56c:	f7f5 feac 	bl	80002c8 <__aeabi_dsub>
 800a570:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a574:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a578:	2300      	movs	r3, #0
 800a57a:	9304      	str	r3, [sp, #16]
 800a57c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a580:	4606      	mov	r6, r0
 800a582:	460f      	mov	r7, r1
 800a584:	465b      	mov	r3, fp
 800a586:	4652      	mov	r2, sl
 800a588:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a58c:	f7f5 fe9c 	bl	80002c8 <__aeabi_dsub>
 800a590:	4622      	mov	r2, r4
 800a592:	462b      	mov	r3, r5
 800a594:	f7f6 f850 	bl	8000638 <__aeabi_dmul>
 800a598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a59c:	4680      	mov	r8, r0
 800a59e:	4689      	mov	r9, r1
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	f7f6 f848 	bl	8000638 <__aeabi_dmul>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4640      	mov	r0, r8
 800a5ae:	4649      	mov	r1, r9
 800a5b0:	f7f5 fe8c 	bl	80002cc <__adddf3>
 800a5b4:	465b      	mov	r3, fp
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	460f      	mov	r7, r1
 800a5ba:	4652      	mov	r2, sl
 800a5bc:	4620      	mov	r0, r4
 800a5be:	4629      	mov	r1, r5
 800a5c0:	f7f6 f83a 	bl	8000638 <__aeabi_dmul>
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	4680      	mov	r8, r0
 800a5ca:	4689      	mov	r9, r1
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	4639      	mov	r1, r7
 800a5d0:	f7f5 fe7c 	bl	80002cc <__adddf3>
 800a5d4:	4b17      	ldr	r3, [pc, #92]	@ (800a634 <__ieee754_pow+0x424>)
 800a5d6:	4299      	cmp	r1, r3
 800a5d8:	4604      	mov	r4, r0
 800a5da:	460d      	mov	r5, r1
 800a5dc:	468b      	mov	fp, r1
 800a5de:	f340 820b 	ble.w	800a9f8 <__ieee754_pow+0x7e8>
 800a5e2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a5e6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a5ea:	4303      	orrs	r3, r0
 800a5ec:	f000 81ea 	beq.w	800a9c4 <__ieee754_pow+0x7b4>
 800a5f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	f7f6 fa90 	bl	8000b1c <__aeabi_dcmplt>
 800a5fc:	3800      	subs	r0, #0
 800a5fe:	bf18      	it	ne
 800a600:	2001      	movne	r0, #1
 800a602:	e713      	b.n	800a42c <__ieee754_pow+0x21c>
 800a604:	f3af 8000 	nop.w
 800a608:	60000000 	.word	0x60000000
 800a60c:	3ff71547 	.word	0x3ff71547
 800a610:	f85ddf44 	.word	0xf85ddf44
 800a614:	3e54ae0b 	.word	0x3e54ae0b
 800a618:	55555555 	.word	0x55555555
 800a61c:	3fd55555 	.word	0x3fd55555
 800a620:	652b82fe 	.word	0x652b82fe
 800a624:	3ff71547 	.word	0x3ff71547
 800a628:	3ff00000 	.word	0x3ff00000
 800a62c:	3fd00000 	.word	0x3fd00000
 800a630:	3fe00000 	.word	0x3fe00000
 800a634:	408fffff 	.word	0x408fffff
 800a638:	4bd5      	ldr	r3, [pc, #852]	@ (800a990 <__ieee754_pow+0x780>)
 800a63a:	ea08 0303 	and.w	r3, r8, r3
 800a63e:	2200      	movs	r2, #0
 800a640:	b92b      	cbnz	r3, 800a64e <__ieee754_pow+0x43e>
 800a642:	4bd4      	ldr	r3, [pc, #848]	@ (800a994 <__ieee754_pow+0x784>)
 800a644:	f7f5 fff8 	bl	8000638 <__aeabi_dmul>
 800a648:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a64c:	468b      	mov	fp, r1
 800a64e:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a652:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a656:	4413      	add	r3, r2
 800a658:	930a      	str	r3, [sp, #40]	@ 0x28
 800a65a:	4bcf      	ldr	r3, [pc, #828]	@ (800a998 <__ieee754_pow+0x788>)
 800a65c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a660:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a664:	459b      	cmp	fp, r3
 800a666:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a66a:	dd08      	ble.n	800a67e <__ieee754_pow+0x46e>
 800a66c:	4bcb      	ldr	r3, [pc, #812]	@ (800a99c <__ieee754_pow+0x78c>)
 800a66e:	459b      	cmp	fp, r3
 800a670:	f340 81a5 	ble.w	800a9be <__ieee754_pow+0x7ae>
 800a674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a676:	3301      	adds	r3, #1
 800a678:	930a      	str	r3, [sp, #40]	@ 0x28
 800a67a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a67e:	f04f 0a00 	mov.w	sl, #0
 800a682:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a686:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a688:	4bc5      	ldr	r3, [pc, #788]	@ (800a9a0 <__ieee754_pow+0x790>)
 800a68a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a68e:	ed93 7b00 	vldr	d7, [r3]
 800a692:	4629      	mov	r1, r5
 800a694:	ec53 2b17 	vmov	r2, r3, d7
 800a698:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a69c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a6a0:	f7f5 fe12 	bl	80002c8 <__aeabi_dsub>
 800a6a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	460f      	mov	r7, r1
 800a6ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6b0:	f7f5 fe0c 	bl	80002cc <__adddf3>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	49ba      	ldr	r1, [pc, #744]	@ (800a9a4 <__ieee754_pow+0x794>)
 800a6bc:	f7f6 f8e6 	bl	800088c <__aeabi_ddiv>
 800a6c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	4639      	mov	r1, r7
 800a6cc:	f7f5 ffb4 	bl	8000638 <__aeabi_dmul>
 800a6d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6d4:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a6d8:	106d      	asrs	r5, r5, #1
 800a6da:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a6de:	f04f 0b00 	mov.w	fp, #0
 800a6e2:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a6e6:	4661      	mov	r1, ip
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a6ee:	4658      	mov	r0, fp
 800a6f0:	46e1      	mov	r9, ip
 800a6f2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a6f6:	4614      	mov	r4, r2
 800a6f8:	461d      	mov	r5, r3
 800a6fa:	f7f5 ff9d 	bl	8000638 <__aeabi_dmul>
 800a6fe:	4602      	mov	r2, r0
 800a700:	460b      	mov	r3, r1
 800a702:	4630      	mov	r0, r6
 800a704:	4639      	mov	r1, r7
 800a706:	f7f5 fddf 	bl	80002c8 <__aeabi_dsub>
 800a70a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a70e:	4606      	mov	r6, r0
 800a710:	460f      	mov	r7, r1
 800a712:	4620      	mov	r0, r4
 800a714:	4629      	mov	r1, r5
 800a716:	f7f5 fdd7 	bl	80002c8 <__aeabi_dsub>
 800a71a:	4602      	mov	r2, r0
 800a71c:	460b      	mov	r3, r1
 800a71e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a722:	f7f5 fdd1 	bl	80002c8 <__aeabi_dsub>
 800a726:	465a      	mov	r2, fp
 800a728:	464b      	mov	r3, r9
 800a72a:	f7f5 ff85 	bl	8000638 <__aeabi_dmul>
 800a72e:	4602      	mov	r2, r0
 800a730:	460b      	mov	r3, r1
 800a732:	4630      	mov	r0, r6
 800a734:	4639      	mov	r1, r7
 800a736:	f7f5 fdc7 	bl	80002c8 <__aeabi_dsub>
 800a73a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a73e:	f7f5 ff7b 	bl	8000638 <__aeabi_dmul>
 800a742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a746:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a74a:	4610      	mov	r0, r2
 800a74c:	4619      	mov	r1, r3
 800a74e:	f7f5 ff73 	bl	8000638 <__aeabi_dmul>
 800a752:	a37d      	add	r3, pc, #500	@ (adr r3, 800a948 <__ieee754_pow+0x738>)
 800a754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a758:	4604      	mov	r4, r0
 800a75a:	460d      	mov	r5, r1
 800a75c:	f7f5 ff6c 	bl	8000638 <__aeabi_dmul>
 800a760:	a37b      	add	r3, pc, #492	@ (adr r3, 800a950 <__ieee754_pow+0x740>)
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	f7f5 fdb1 	bl	80002cc <__adddf3>
 800a76a:	4622      	mov	r2, r4
 800a76c:	462b      	mov	r3, r5
 800a76e:	f7f5 ff63 	bl	8000638 <__aeabi_dmul>
 800a772:	a379      	add	r3, pc, #484	@ (adr r3, 800a958 <__ieee754_pow+0x748>)
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	f7f5 fda8 	bl	80002cc <__adddf3>
 800a77c:	4622      	mov	r2, r4
 800a77e:	462b      	mov	r3, r5
 800a780:	f7f5 ff5a 	bl	8000638 <__aeabi_dmul>
 800a784:	a376      	add	r3, pc, #472	@ (adr r3, 800a960 <__ieee754_pow+0x750>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	f7f5 fd9f 	bl	80002cc <__adddf3>
 800a78e:	4622      	mov	r2, r4
 800a790:	462b      	mov	r3, r5
 800a792:	f7f5 ff51 	bl	8000638 <__aeabi_dmul>
 800a796:	a374      	add	r3, pc, #464	@ (adr r3, 800a968 <__ieee754_pow+0x758>)
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	f7f5 fd96 	bl	80002cc <__adddf3>
 800a7a0:	4622      	mov	r2, r4
 800a7a2:	462b      	mov	r3, r5
 800a7a4:	f7f5 ff48 	bl	8000638 <__aeabi_dmul>
 800a7a8:	a371      	add	r3, pc, #452	@ (adr r3, 800a970 <__ieee754_pow+0x760>)
 800a7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ae:	f7f5 fd8d 	bl	80002cc <__adddf3>
 800a7b2:	4622      	mov	r2, r4
 800a7b4:	4606      	mov	r6, r0
 800a7b6:	460f      	mov	r7, r1
 800a7b8:	462b      	mov	r3, r5
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	4629      	mov	r1, r5
 800a7be:	f7f5 ff3b 	bl	8000638 <__aeabi_dmul>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	4639      	mov	r1, r7
 800a7ca:	f7f5 ff35 	bl	8000638 <__aeabi_dmul>
 800a7ce:	465a      	mov	r2, fp
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	460d      	mov	r5, r1
 800a7d4:	464b      	mov	r3, r9
 800a7d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7da:	f7f5 fd77 	bl	80002cc <__adddf3>
 800a7de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7e2:	f7f5 ff29 	bl	8000638 <__aeabi_dmul>
 800a7e6:	4622      	mov	r2, r4
 800a7e8:	462b      	mov	r3, r5
 800a7ea:	f7f5 fd6f 	bl	80002cc <__adddf3>
 800a7ee:	465a      	mov	r2, fp
 800a7f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a7f4:	464b      	mov	r3, r9
 800a7f6:	4658      	mov	r0, fp
 800a7f8:	4649      	mov	r1, r9
 800a7fa:	f7f5 ff1d 	bl	8000638 <__aeabi_dmul>
 800a7fe:	4b6a      	ldr	r3, [pc, #424]	@ (800a9a8 <__ieee754_pow+0x798>)
 800a800:	2200      	movs	r2, #0
 800a802:	4606      	mov	r6, r0
 800a804:	460f      	mov	r7, r1
 800a806:	f7f5 fd61 	bl	80002cc <__adddf3>
 800a80a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a80e:	f7f5 fd5d 	bl	80002cc <__adddf3>
 800a812:	46d8      	mov	r8, fp
 800a814:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a818:	460d      	mov	r5, r1
 800a81a:	465a      	mov	r2, fp
 800a81c:	460b      	mov	r3, r1
 800a81e:	4640      	mov	r0, r8
 800a820:	4649      	mov	r1, r9
 800a822:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a826:	f7f5 ff07 	bl	8000638 <__aeabi_dmul>
 800a82a:	465c      	mov	r4, fp
 800a82c:	4680      	mov	r8, r0
 800a82e:	4689      	mov	r9, r1
 800a830:	4b5d      	ldr	r3, [pc, #372]	@ (800a9a8 <__ieee754_pow+0x798>)
 800a832:	2200      	movs	r2, #0
 800a834:	4620      	mov	r0, r4
 800a836:	4629      	mov	r1, r5
 800a838:	f7f5 fd46 	bl	80002c8 <__aeabi_dsub>
 800a83c:	4632      	mov	r2, r6
 800a83e:	463b      	mov	r3, r7
 800a840:	f7f5 fd42 	bl	80002c8 <__aeabi_dsub>
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a84c:	f7f5 fd3c 	bl	80002c8 <__aeabi_dsub>
 800a850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a854:	f7f5 fef0 	bl	8000638 <__aeabi_dmul>
 800a858:	4622      	mov	r2, r4
 800a85a:	4606      	mov	r6, r0
 800a85c:	460f      	mov	r7, r1
 800a85e:	462b      	mov	r3, r5
 800a860:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a864:	f7f5 fee8 	bl	8000638 <__aeabi_dmul>
 800a868:	4602      	mov	r2, r0
 800a86a:	460b      	mov	r3, r1
 800a86c:	4630      	mov	r0, r6
 800a86e:	4639      	mov	r1, r7
 800a870:	f7f5 fd2c 	bl	80002cc <__adddf3>
 800a874:	4606      	mov	r6, r0
 800a876:	460f      	mov	r7, r1
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	4640      	mov	r0, r8
 800a87e:	4649      	mov	r1, r9
 800a880:	f7f5 fd24 	bl	80002cc <__adddf3>
 800a884:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a888:	a33b      	add	r3, pc, #236	@ (adr r3, 800a978 <__ieee754_pow+0x768>)
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	4658      	mov	r0, fp
 800a890:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a894:	460d      	mov	r5, r1
 800a896:	f7f5 fecf 	bl	8000638 <__aeabi_dmul>
 800a89a:	465c      	mov	r4, fp
 800a89c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8a0:	4642      	mov	r2, r8
 800a8a2:	464b      	mov	r3, r9
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	f7f5 fd0e 	bl	80002c8 <__aeabi_dsub>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	4639      	mov	r1, r7
 800a8b4:	f7f5 fd08 	bl	80002c8 <__aeabi_dsub>
 800a8b8:	a331      	add	r3, pc, #196	@ (adr r3, 800a980 <__ieee754_pow+0x770>)
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	f7f5 febb 	bl	8000638 <__aeabi_dmul>
 800a8c2:	a331      	add	r3, pc, #196	@ (adr r3, 800a988 <__ieee754_pow+0x778>)
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	4606      	mov	r6, r0
 800a8ca:	460f      	mov	r7, r1
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	f7f5 feb2 	bl	8000638 <__aeabi_dmul>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	4630      	mov	r0, r6
 800a8da:	4639      	mov	r1, r7
 800a8dc:	f7f5 fcf6 	bl	80002cc <__adddf3>
 800a8e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a8e2:	4b32      	ldr	r3, [pc, #200]	@ (800a9ac <__ieee754_pow+0x79c>)
 800a8e4:	4413      	add	r3, r2
 800a8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ea:	f7f5 fcef 	bl	80002cc <__adddf3>
 800a8ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a8f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a8f4:	f7f5 fe36 	bl	8000564 <__aeabi_i2d>
 800a8f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a8fa:	4b2d      	ldr	r3, [pc, #180]	@ (800a9b0 <__ieee754_pow+0x7a0>)
 800a8fc:	4413      	add	r3, r2
 800a8fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a902:	4606      	mov	r6, r0
 800a904:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a908:	460f      	mov	r7, r1
 800a90a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a90e:	f7f5 fcdd 	bl	80002cc <__adddf3>
 800a912:	4642      	mov	r2, r8
 800a914:	464b      	mov	r3, r9
 800a916:	f7f5 fcd9 	bl	80002cc <__adddf3>
 800a91a:	4632      	mov	r2, r6
 800a91c:	463b      	mov	r3, r7
 800a91e:	f7f5 fcd5 	bl	80002cc <__adddf3>
 800a922:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a926:	4632      	mov	r2, r6
 800a928:	463b      	mov	r3, r7
 800a92a:	4658      	mov	r0, fp
 800a92c:	460d      	mov	r5, r1
 800a92e:	f7f5 fccb 	bl	80002c8 <__aeabi_dsub>
 800a932:	4642      	mov	r2, r8
 800a934:	464b      	mov	r3, r9
 800a936:	f7f5 fcc7 	bl	80002c8 <__aeabi_dsub>
 800a93a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a93e:	f7f5 fcc3 	bl	80002c8 <__aeabi_dsub>
 800a942:	465c      	mov	r4, fp
 800a944:	e036      	b.n	800a9b4 <__ieee754_pow+0x7a4>
 800a946:	bf00      	nop
 800a948:	4a454eef 	.word	0x4a454eef
 800a94c:	3fca7e28 	.word	0x3fca7e28
 800a950:	93c9db65 	.word	0x93c9db65
 800a954:	3fcd864a 	.word	0x3fcd864a
 800a958:	a91d4101 	.word	0xa91d4101
 800a95c:	3fd17460 	.word	0x3fd17460
 800a960:	518f264d 	.word	0x518f264d
 800a964:	3fd55555 	.word	0x3fd55555
 800a968:	db6fabff 	.word	0xdb6fabff
 800a96c:	3fdb6db6 	.word	0x3fdb6db6
 800a970:	33333303 	.word	0x33333303
 800a974:	3fe33333 	.word	0x3fe33333
 800a978:	e0000000 	.word	0xe0000000
 800a97c:	3feec709 	.word	0x3feec709
 800a980:	dc3a03fd 	.word	0xdc3a03fd
 800a984:	3feec709 	.word	0x3feec709
 800a988:	145b01f5 	.word	0x145b01f5
 800a98c:	be3e2fe0 	.word	0xbe3e2fe0
 800a990:	7ff00000 	.word	0x7ff00000
 800a994:	43400000 	.word	0x43400000
 800a998:	0003988e 	.word	0x0003988e
 800a99c:	000bb679 	.word	0x000bb679
 800a9a0:	0800d0d0 	.word	0x0800d0d0
 800a9a4:	3ff00000 	.word	0x3ff00000
 800a9a8:	40080000 	.word	0x40080000
 800a9ac:	0800d0b0 	.word	0x0800d0b0
 800a9b0:	0800d0c0 	.word	0x0800d0c0
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9bc:	e5d6      	b.n	800a56c <__ieee754_pow+0x35c>
 800a9be:	f04f 0a01 	mov.w	sl, #1
 800a9c2:	e65e      	b.n	800a682 <__ieee754_pow+0x472>
 800a9c4:	a3b5      	add	r3, pc, #724	@ (adr r3, 800ac9c <__ieee754_pow+0xa8c>)
 800a9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	4639      	mov	r1, r7
 800a9ce:	f7f5 fc7d 	bl	80002cc <__adddf3>
 800a9d2:	4642      	mov	r2, r8
 800a9d4:	e9cd 0100 	strd	r0, r1, [sp]
 800a9d8:	464b      	mov	r3, r9
 800a9da:	4620      	mov	r0, r4
 800a9dc:	4629      	mov	r1, r5
 800a9de:	f7f5 fc73 	bl	80002c8 <__aeabi_dsub>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9ea:	f7f6 f8b5 	bl	8000b58 <__aeabi_dcmpgt>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	f47f adfe 	bne.w	800a5f0 <__ieee754_pow+0x3e0>
 800a9f4:	4ba2      	ldr	r3, [pc, #648]	@ (800ac80 <__ieee754_pow+0xa70>)
 800a9f6:	e022      	b.n	800aa3e <__ieee754_pow+0x82e>
 800a9f8:	4ca2      	ldr	r4, [pc, #648]	@ (800ac84 <__ieee754_pow+0xa74>)
 800a9fa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a9fe:	42a3      	cmp	r3, r4
 800aa00:	d919      	bls.n	800aa36 <__ieee754_pow+0x826>
 800aa02:	4ba1      	ldr	r3, [pc, #644]	@ (800ac88 <__ieee754_pow+0xa78>)
 800aa04:	440b      	add	r3, r1
 800aa06:	4303      	orrs	r3, r0
 800aa08:	d009      	beq.n	800aa1e <__ieee754_pow+0x80e>
 800aa0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	2300      	movs	r3, #0
 800aa12:	f7f6 f883 	bl	8000b1c <__aeabi_dcmplt>
 800aa16:	3800      	subs	r0, #0
 800aa18:	bf18      	it	ne
 800aa1a:	2001      	movne	r0, #1
 800aa1c:	e512      	b.n	800a444 <__ieee754_pow+0x234>
 800aa1e:	4642      	mov	r2, r8
 800aa20:	464b      	mov	r3, r9
 800aa22:	f7f5 fc51 	bl	80002c8 <__aeabi_dsub>
 800aa26:	4632      	mov	r2, r6
 800aa28:	463b      	mov	r3, r7
 800aa2a:	f7f6 f88b 	bl	8000b44 <__aeabi_dcmpge>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d1eb      	bne.n	800aa0a <__ieee754_pow+0x7fa>
 800aa32:	4b96      	ldr	r3, [pc, #600]	@ (800ac8c <__ieee754_pow+0xa7c>)
 800aa34:	e003      	b.n	800aa3e <__ieee754_pow+0x82e>
 800aa36:	4a96      	ldr	r2, [pc, #600]	@ (800ac90 <__ieee754_pow+0xa80>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	f240 80e7 	bls.w	800ac0c <__ieee754_pow+0x9fc>
 800aa3e:	151b      	asrs	r3, r3, #20
 800aa40:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800aa44:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800aa48:	fa4a fa03 	asr.w	sl, sl, r3
 800aa4c:	44da      	add	sl, fp
 800aa4e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800aa52:	4890      	ldr	r0, [pc, #576]	@ (800ac94 <__ieee754_pow+0xa84>)
 800aa54:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800aa58:	4108      	asrs	r0, r1
 800aa5a:	ea00 030a 	and.w	r3, r0, sl
 800aa5e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800aa62:	f1c1 0114 	rsb	r1, r1, #20
 800aa66:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800aa6a:	fa4a fa01 	asr.w	sl, sl, r1
 800aa6e:	f1bb 0f00 	cmp.w	fp, #0
 800aa72:	4640      	mov	r0, r8
 800aa74:	4649      	mov	r1, r9
 800aa76:	f04f 0200 	mov.w	r2, #0
 800aa7a:	bfb8      	it	lt
 800aa7c:	f1ca 0a00 	rsblt	sl, sl, #0
 800aa80:	f7f5 fc22 	bl	80002c8 <__aeabi_dsub>
 800aa84:	4680      	mov	r8, r0
 800aa86:	4689      	mov	r9, r1
 800aa88:	4632      	mov	r2, r6
 800aa8a:	463b      	mov	r3, r7
 800aa8c:	4640      	mov	r0, r8
 800aa8e:	4649      	mov	r1, r9
 800aa90:	f7f5 fc1c 	bl	80002cc <__adddf3>
 800aa94:	2400      	movs	r4, #0
 800aa96:	a36a      	add	r3, pc, #424	@ (adr r3, 800ac40 <__ieee754_pow+0xa30>)
 800aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	460d      	mov	r5, r1
 800aaa0:	f7f5 fdca 	bl	8000638 <__aeabi_dmul>
 800aaa4:	4642      	mov	r2, r8
 800aaa6:	e9cd 0100 	strd	r0, r1, [sp]
 800aaaa:	464b      	mov	r3, r9
 800aaac:	4620      	mov	r0, r4
 800aaae:	4629      	mov	r1, r5
 800aab0:	f7f5 fc0a 	bl	80002c8 <__aeabi_dsub>
 800aab4:	4602      	mov	r2, r0
 800aab6:	460b      	mov	r3, r1
 800aab8:	4630      	mov	r0, r6
 800aaba:	4639      	mov	r1, r7
 800aabc:	f7f5 fc04 	bl	80002c8 <__aeabi_dsub>
 800aac0:	a361      	add	r3, pc, #388	@ (adr r3, 800ac48 <__ieee754_pow+0xa38>)
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	f7f5 fdb7 	bl	8000638 <__aeabi_dmul>
 800aaca:	a361      	add	r3, pc, #388	@ (adr r3, 800ac50 <__ieee754_pow+0xa40>)
 800aacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad0:	4680      	mov	r8, r0
 800aad2:	4689      	mov	r9, r1
 800aad4:	4620      	mov	r0, r4
 800aad6:	4629      	mov	r1, r5
 800aad8:	f7f5 fdae 	bl	8000638 <__aeabi_dmul>
 800aadc:	4602      	mov	r2, r0
 800aade:	460b      	mov	r3, r1
 800aae0:	4640      	mov	r0, r8
 800aae2:	4649      	mov	r1, r9
 800aae4:	f7f5 fbf2 	bl	80002cc <__adddf3>
 800aae8:	4604      	mov	r4, r0
 800aaea:	460d      	mov	r5, r1
 800aaec:	4602      	mov	r2, r0
 800aaee:	460b      	mov	r3, r1
 800aaf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aaf4:	f7f5 fbea 	bl	80002cc <__adddf3>
 800aaf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aafc:	4680      	mov	r8, r0
 800aafe:	4689      	mov	r9, r1
 800ab00:	f7f5 fbe2 	bl	80002c8 <__aeabi_dsub>
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	4620      	mov	r0, r4
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	f7f5 fbdc 	bl	80002c8 <__aeabi_dsub>
 800ab10:	4642      	mov	r2, r8
 800ab12:	4606      	mov	r6, r0
 800ab14:	460f      	mov	r7, r1
 800ab16:	464b      	mov	r3, r9
 800ab18:	4640      	mov	r0, r8
 800ab1a:	4649      	mov	r1, r9
 800ab1c:	f7f5 fd8c 	bl	8000638 <__aeabi_dmul>
 800ab20:	a34d      	add	r3, pc, #308	@ (adr r3, 800ac58 <__ieee754_pow+0xa48>)
 800ab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab26:	4604      	mov	r4, r0
 800ab28:	460d      	mov	r5, r1
 800ab2a:	f7f5 fd85 	bl	8000638 <__aeabi_dmul>
 800ab2e:	a34c      	add	r3, pc, #304	@ (adr r3, 800ac60 <__ieee754_pow+0xa50>)
 800ab30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab34:	f7f5 fbc8 	bl	80002c8 <__aeabi_dsub>
 800ab38:	4622      	mov	r2, r4
 800ab3a:	462b      	mov	r3, r5
 800ab3c:	f7f5 fd7c 	bl	8000638 <__aeabi_dmul>
 800ab40:	a349      	add	r3, pc, #292	@ (adr r3, 800ac68 <__ieee754_pow+0xa58>)
 800ab42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab46:	f7f5 fbc1 	bl	80002cc <__adddf3>
 800ab4a:	4622      	mov	r2, r4
 800ab4c:	462b      	mov	r3, r5
 800ab4e:	f7f5 fd73 	bl	8000638 <__aeabi_dmul>
 800ab52:	a347      	add	r3, pc, #284	@ (adr r3, 800ac70 <__ieee754_pow+0xa60>)
 800ab54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab58:	f7f5 fbb6 	bl	80002c8 <__aeabi_dsub>
 800ab5c:	4622      	mov	r2, r4
 800ab5e:	462b      	mov	r3, r5
 800ab60:	f7f5 fd6a 	bl	8000638 <__aeabi_dmul>
 800ab64:	a344      	add	r3, pc, #272	@ (adr r3, 800ac78 <__ieee754_pow+0xa68>)
 800ab66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6a:	f7f5 fbaf 	bl	80002cc <__adddf3>
 800ab6e:	4622      	mov	r2, r4
 800ab70:	462b      	mov	r3, r5
 800ab72:	f7f5 fd61 	bl	8000638 <__aeabi_dmul>
 800ab76:	4602      	mov	r2, r0
 800ab78:	460b      	mov	r3, r1
 800ab7a:	4640      	mov	r0, r8
 800ab7c:	4649      	mov	r1, r9
 800ab7e:	f7f5 fba3 	bl	80002c8 <__aeabi_dsub>
 800ab82:	4604      	mov	r4, r0
 800ab84:	460d      	mov	r5, r1
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4640      	mov	r0, r8
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	f7f5 fd53 	bl	8000638 <__aeabi_dmul>
 800ab92:	2200      	movs	r2, #0
 800ab94:	e9cd 0100 	strd	r0, r1, [sp]
 800ab98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	4629      	mov	r1, r5
 800aba0:	f7f5 fb92 	bl	80002c8 <__aeabi_dsub>
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abac:	f7f5 fe6e 	bl	800088c <__aeabi_ddiv>
 800abb0:	4632      	mov	r2, r6
 800abb2:	4604      	mov	r4, r0
 800abb4:	460d      	mov	r5, r1
 800abb6:	463b      	mov	r3, r7
 800abb8:	4640      	mov	r0, r8
 800abba:	4649      	mov	r1, r9
 800abbc:	f7f5 fd3c 	bl	8000638 <__aeabi_dmul>
 800abc0:	4632      	mov	r2, r6
 800abc2:	463b      	mov	r3, r7
 800abc4:	f7f5 fb82 	bl	80002cc <__adddf3>
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	4620      	mov	r0, r4
 800abce:	4629      	mov	r1, r5
 800abd0:	f7f5 fb7a 	bl	80002c8 <__aeabi_dsub>
 800abd4:	4642      	mov	r2, r8
 800abd6:	464b      	mov	r3, r9
 800abd8:	f7f5 fb76 	bl	80002c8 <__aeabi_dsub>
 800abdc:	460b      	mov	r3, r1
 800abde:	4602      	mov	r2, r0
 800abe0:	492d      	ldr	r1, [pc, #180]	@ (800ac98 <__ieee754_pow+0xa88>)
 800abe2:	2000      	movs	r0, #0
 800abe4:	f7f5 fb70 	bl	80002c8 <__aeabi_dsub>
 800abe8:	ec41 0b10 	vmov	d0, r0, r1
 800abec:	ee10 3a90 	vmov	r3, s1
 800abf0:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800abf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abf8:	da0b      	bge.n	800ac12 <__ieee754_pow+0xa02>
 800abfa:	4650      	mov	r0, sl
 800abfc:	f001 f898 	bl	800bd30 <scalbn>
 800ac00:	ec51 0b10 	vmov	r0, r1, d0
 800ac04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac08:	f7ff bb6d 	b.w	800a2e6 <__ieee754_pow+0xd6>
 800ac0c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ac10:	e73a      	b.n	800aa88 <__ieee754_pow+0x878>
 800ac12:	ec51 0b10 	vmov	r0, r1, d0
 800ac16:	4619      	mov	r1, r3
 800ac18:	e7f4      	b.n	800ac04 <__ieee754_pow+0x9f4>
 800ac1a:	491f      	ldr	r1, [pc, #124]	@ (800ac98 <__ieee754_pow+0xa88>)
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	f7ff bb14 	b.w	800a24a <__ieee754_pow+0x3a>
 800ac22:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac26:	f7ff bb10 	b.w	800a24a <__ieee754_pow+0x3a>
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	4639      	mov	r1, r7
 800ac2e:	f7ff bb0c 	b.w	800a24a <__ieee754_pow+0x3a>
 800ac32:	460c      	mov	r4, r1
 800ac34:	f7ff bb69 	b.w	800a30a <__ieee754_pow+0xfa>
 800ac38:	2400      	movs	r4, #0
 800ac3a:	f7ff bb4b 	b.w	800a2d4 <__ieee754_pow+0xc4>
 800ac3e:	bf00      	nop
 800ac40:	00000000 	.word	0x00000000
 800ac44:	3fe62e43 	.word	0x3fe62e43
 800ac48:	fefa39ef 	.word	0xfefa39ef
 800ac4c:	3fe62e42 	.word	0x3fe62e42
 800ac50:	0ca86c39 	.word	0x0ca86c39
 800ac54:	be205c61 	.word	0xbe205c61
 800ac58:	72bea4d0 	.word	0x72bea4d0
 800ac5c:	3e663769 	.word	0x3e663769
 800ac60:	c5d26bf1 	.word	0xc5d26bf1
 800ac64:	3ebbbd41 	.word	0x3ebbbd41
 800ac68:	af25de2c 	.word	0xaf25de2c
 800ac6c:	3f11566a 	.word	0x3f11566a
 800ac70:	16bebd93 	.word	0x16bebd93
 800ac74:	3f66c16c 	.word	0x3f66c16c
 800ac78:	5555553e 	.word	0x5555553e
 800ac7c:	3fc55555 	.word	0x3fc55555
 800ac80:	40900000 	.word	0x40900000
 800ac84:	4090cbff 	.word	0x4090cbff
 800ac88:	3f6f3400 	.word	0x3f6f3400
 800ac8c:	4090cc00 	.word	0x4090cc00
 800ac90:	3fe00000 	.word	0x3fe00000
 800ac94:	fff00000 	.word	0xfff00000
 800ac98:	3ff00000 	.word	0x3ff00000
 800ac9c:	652b82fe 	.word	0x652b82fe
 800aca0:	3c971547 	.word	0x3c971547
 800aca4:	00000000 	.word	0x00000000

0800aca8 <__ieee754_rem_pio2>:
 800aca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acac:	ec57 6b10 	vmov	r6, r7, d0
 800acb0:	4bc5      	ldr	r3, [pc, #788]	@ (800afc8 <__ieee754_rem_pio2+0x320>)
 800acb2:	b08d      	sub	sp, #52	@ 0x34
 800acb4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800acb8:	4598      	cmp	r8, r3
 800acba:	4604      	mov	r4, r0
 800acbc:	9704      	str	r7, [sp, #16]
 800acbe:	d807      	bhi.n	800acd0 <__ieee754_rem_pio2+0x28>
 800acc0:	2200      	movs	r2, #0
 800acc2:	2300      	movs	r3, #0
 800acc4:	ed80 0b00 	vstr	d0, [r0]
 800acc8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800accc:	2500      	movs	r5, #0
 800acce:	e028      	b.n	800ad22 <__ieee754_rem_pio2+0x7a>
 800acd0:	4bbe      	ldr	r3, [pc, #760]	@ (800afcc <__ieee754_rem_pio2+0x324>)
 800acd2:	4598      	cmp	r8, r3
 800acd4:	d878      	bhi.n	800adc8 <__ieee754_rem_pio2+0x120>
 800acd6:	9b04      	ldr	r3, [sp, #16]
 800acd8:	4dbd      	ldr	r5, [pc, #756]	@ (800afd0 <__ieee754_rem_pio2+0x328>)
 800acda:	2b00      	cmp	r3, #0
 800acdc:	4630      	mov	r0, r6
 800acde:	a3ac      	add	r3, pc, #688	@ (adr r3, 800af90 <__ieee754_rem_pio2+0x2e8>)
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	4639      	mov	r1, r7
 800ace6:	dd38      	ble.n	800ad5a <__ieee754_rem_pio2+0xb2>
 800ace8:	f7f5 faee 	bl	80002c8 <__aeabi_dsub>
 800acec:	45a8      	cmp	r8, r5
 800acee:	4606      	mov	r6, r0
 800acf0:	460f      	mov	r7, r1
 800acf2:	d01a      	beq.n	800ad2a <__ieee754_rem_pio2+0x82>
 800acf4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800af98 <__ieee754_rem_pio2+0x2f0>)
 800acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfa:	f7f5 fae5 	bl	80002c8 <__aeabi_dsub>
 800acfe:	4602      	mov	r2, r0
 800ad00:	460b      	mov	r3, r1
 800ad02:	4680      	mov	r8, r0
 800ad04:	4689      	mov	r9, r1
 800ad06:	4630      	mov	r0, r6
 800ad08:	4639      	mov	r1, r7
 800ad0a:	f7f5 fadd 	bl	80002c8 <__aeabi_dsub>
 800ad0e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800af98 <__ieee754_rem_pio2+0x2f0>)
 800ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad14:	f7f5 fad8 	bl	80002c8 <__aeabi_dsub>
 800ad18:	e9c4 8900 	strd	r8, r9, [r4]
 800ad1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ad20:	2501      	movs	r5, #1
 800ad22:	4628      	mov	r0, r5
 800ad24:	b00d      	add	sp, #52	@ 0x34
 800ad26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad2a:	a39d      	add	r3, pc, #628	@ (adr r3, 800afa0 <__ieee754_rem_pio2+0x2f8>)
 800ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad30:	f7f5 faca 	bl	80002c8 <__aeabi_dsub>
 800ad34:	a39c      	add	r3, pc, #624	@ (adr r3, 800afa8 <__ieee754_rem_pio2+0x300>)
 800ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3a:	4606      	mov	r6, r0
 800ad3c:	460f      	mov	r7, r1
 800ad3e:	f7f5 fac3 	bl	80002c8 <__aeabi_dsub>
 800ad42:	4602      	mov	r2, r0
 800ad44:	460b      	mov	r3, r1
 800ad46:	4680      	mov	r8, r0
 800ad48:	4689      	mov	r9, r1
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	4639      	mov	r1, r7
 800ad4e:	f7f5 fabb 	bl	80002c8 <__aeabi_dsub>
 800ad52:	a395      	add	r3, pc, #596	@ (adr r3, 800afa8 <__ieee754_rem_pio2+0x300>)
 800ad54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad58:	e7dc      	b.n	800ad14 <__ieee754_rem_pio2+0x6c>
 800ad5a:	f7f5 fab7 	bl	80002cc <__adddf3>
 800ad5e:	45a8      	cmp	r8, r5
 800ad60:	4606      	mov	r6, r0
 800ad62:	460f      	mov	r7, r1
 800ad64:	d018      	beq.n	800ad98 <__ieee754_rem_pio2+0xf0>
 800ad66:	a38c      	add	r3, pc, #560	@ (adr r3, 800af98 <__ieee754_rem_pio2+0x2f0>)
 800ad68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6c:	f7f5 faae 	bl	80002cc <__adddf3>
 800ad70:	4602      	mov	r2, r0
 800ad72:	460b      	mov	r3, r1
 800ad74:	4680      	mov	r8, r0
 800ad76:	4689      	mov	r9, r1
 800ad78:	4630      	mov	r0, r6
 800ad7a:	4639      	mov	r1, r7
 800ad7c:	f7f5 faa4 	bl	80002c8 <__aeabi_dsub>
 800ad80:	a385      	add	r3, pc, #532	@ (adr r3, 800af98 <__ieee754_rem_pio2+0x2f0>)
 800ad82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad86:	f7f5 faa1 	bl	80002cc <__adddf3>
 800ad8a:	f04f 35ff 	mov.w	r5, #4294967295
 800ad8e:	e9c4 8900 	strd	r8, r9, [r4]
 800ad92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ad96:	e7c4      	b.n	800ad22 <__ieee754_rem_pio2+0x7a>
 800ad98:	a381      	add	r3, pc, #516	@ (adr r3, 800afa0 <__ieee754_rem_pio2+0x2f8>)
 800ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9e:	f7f5 fa95 	bl	80002cc <__adddf3>
 800ada2:	a381      	add	r3, pc, #516	@ (adr r3, 800afa8 <__ieee754_rem_pio2+0x300>)
 800ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada8:	4606      	mov	r6, r0
 800adaa:	460f      	mov	r7, r1
 800adac:	f7f5 fa8e 	bl	80002cc <__adddf3>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4680      	mov	r8, r0
 800adb6:	4689      	mov	r9, r1
 800adb8:	4630      	mov	r0, r6
 800adba:	4639      	mov	r1, r7
 800adbc:	f7f5 fa84 	bl	80002c8 <__aeabi_dsub>
 800adc0:	a379      	add	r3, pc, #484	@ (adr r3, 800afa8 <__ieee754_rem_pio2+0x300>)
 800adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc6:	e7de      	b.n	800ad86 <__ieee754_rem_pio2+0xde>
 800adc8:	4b82      	ldr	r3, [pc, #520]	@ (800afd4 <__ieee754_rem_pio2+0x32c>)
 800adca:	4598      	cmp	r8, r3
 800adcc:	f200 80d1 	bhi.w	800af72 <__ieee754_rem_pio2+0x2ca>
 800add0:	f000 fafe 	bl	800b3d0 <fabs>
 800add4:	ec57 6b10 	vmov	r6, r7, d0
 800add8:	a375      	add	r3, pc, #468	@ (adr r3, 800afb0 <__ieee754_rem_pio2+0x308>)
 800adda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adde:	4630      	mov	r0, r6
 800ade0:	4639      	mov	r1, r7
 800ade2:	f7f5 fc29 	bl	8000638 <__aeabi_dmul>
 800ade6:	4b7c      	ldr	r3, [pc, #496]	@ (800afd8 <__ieee754_rem_pio2+0x330>)
 800ade8:	2200      	movs	r2, #0
 800adea:	f7f5 fa6f 	bl	80002cc <__adddf3>
 800adee:	f7f5 fed3 	bl	8000b98 <__aeabi_d2iz>
 800adf2:	4605      	mov	r5, r0
 800adf4:	f7f5 fbb6 	bl	8000564 <__aeabi_i2d>
 800adf8:	4602      	mov	r2, r0
 800adfa:	460b      	mov	r3, r1
 800adfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae00:	a363      	add	r3, pc, #396	@ (adr r3, 800af90 <__ieee754_rem_pio2+0x2e8>)
 800ae02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae06:	f7f5 fc17 	bl	8000638 <__aeabi_dmul>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	4630      	mov	r0, r6
 800ae10:	4639      	mov	r1, r7
 800ae12:	f7f5 fa59 	bl	80002c8 <__aeabi_dsub>
 800ae16:	a360      	add	r3, pc, #384	@ (adr r3, 800af98 <__ieee754_rem_pio2+0x2f0>)
 800ae18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1c:	4682      	mov	sl, r0
 800ae1e:	468b      	mov	fp, r1
 800ae20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae24:	f7f5 fc08 	bl	8000638 <__aeabi_dmul>
 800ae28:	2d1f      	cmp	r5, #31
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	460f      	mov	r7, r1
 800ae2e:	dc0c      	bgt.n	800ae4a <__ieee754_rem_pio2+0x1a2>
 800ae30:	4b6a      	ldr	r3, [pc, #424]	@ (800afdc <__ieee754_rem_pio2+0x334>)
 800ae32:	1e6a      	subs	r2, r5, #1
 800ae34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae38:	4543      	cmp	r3, r8
 800ae3a:	d006      	beq.n	800ae4a <__ieee754_rem_pio2+0x1a2>
 800ae3c:	4632      	mov	r2, r6
 800ae3e:	463b      	mov	r3, r7
 800ae40:	4650      	mov	r0, sl
 800ae42:	4659      	mov	r1, fp
 800ae44:	f7f5 fa40 	bl	80002c8 <__aeabi_dsub>
 800ae48:	e00e      	b.n	800ae68 <__ieee754_rem_pio2+0x1c0>
 800ae4a:	463b      	mov	r3, r7
 800ae4c:	4632      	mov	r2, r6
 800ae4e:	4650      	mov	r0, sl
 800ae50:	4659      	mov	r1, fp
 800ae52:	f7f5 fa39 	bl	80002c8 <__aeabi_dsub>
 800ae56:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ae5a:	9305      	str	r3, [sp, #20]
 800ae5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ae60:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ae64:	2b10      	cmp	r3, #16
 800ae66:	dc02      	bgt.n	800ae6e <__ieee754_rem_pio2+0x1c6>
 800ae68:	e9c4 0100 	strd	r0, r1, [r4]
 800ae6c:	e039      	b.n	800aee2 <__ieee754_rem_pio2+0x23a>
 800ae6e:	a34c      	add	r3, pc, #304	@ (adr r3, 800afa0 <__ieee754_rem_pio2+0x2f8>)
 800ae70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae78:	f7f5 fbde 	bl	8000638 <__aeabi_dmul>
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	460f      	mov	r7, r1
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	4650      	mov	r0, sl
 800ae86:	4659      	mov	r1, fp
 800ae88:	f7f5 fa1e 	bl	80002c8 <__aeabi_dsub>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	460b      	mov	r3, r1
 800ae90:	4680      	mov	r8, r0
 800ae92:	4689      	mov	r9, r1
 800ae94:	4650      	mov	r0, sl
 800ae96:	4659      	mov	r1, fp
 800ae98:	f7f5 fa16 	bl	80002c8 <__aeabi_dsub>
 800ae9c:	4632      	mov	r2, r6
 800ae9e:	463b      	mov	r3, r7
 800aea0:	f7f5 fa12 	bl	80002c8 <__aeabi_dsub>
 800aea4:	a340      	add	r3, pc, #256	@ (adr r3, 800afa8 <__ieee754_rem_pio2+0x300>)
 800aea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeaa:	4606      	mov	r6, r0
 800aeac:	460f      	mov	r7, r1
 800aeae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeb2:	f7f5 fbc1 	bl	8000638 <__aeabi_dmul>
 800aeb6:	4632      	mov	r2, r6
 800aeb8:	463b      	mov	r3, r7
 800aeba:	f7f5 fa05 	bl	80002c8 <__aeabi_dsub>
 800aebe:	4602      	mov	r2, r0
 800aec0:	460b      	mov	r3, r1
 800aec2:	4606      	mov	r6, r0
 800aec4:	460f      	mov	r7, r1
 800aec6:	4640      	mov	r0, r8
 800aec8:	4649      	mov	r1, r9
 800aeca:	f7f5 f9fd 	bl	80002c8 <__aeabi_dsub>
 800aece:	9a05      	ldr	r2, [sp, #20]
 800aed0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aed4:	1ad3      	subs	r3, r2, r3
 800aed6:	2b31      	cmp	r3, #49	@ 0x31
 800aed8:	dc20      	bgt.n	800af1c <__ieee754_rem_pio2+0x274>
 800aeda:	e9c4 0100 	strd	r0, r1, [r4]
 800aede:	46c2      	mov	sl, r8
 800aee0:	46cb      	mov	fp, r9
 800aee2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800aee6:	4650      	mov	r0, sl
 800aee8:	4642      	mov	r2, r8
 800aeea:	464b      	mov	r3, r9
 800aeec:	4659      	mov	r1, fp
 800aeee:	f7f5 f9eb 	bl	80002c8 <__aeabi_dsub>
 800aef2:	463b      	mov	r3, r7
 800aef4:	4632      	mov	r2, r6
 800aef6:	f7f5 f9e7 	bl	80002c8 <__aeabi_dsub>
 800aefa:	9b04      	ldr	r3, [sp, #16]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800af02:	f6bf af0e 	bge.w	800ad22 <__ieee754_rem_pio2+0x7a>
 800af06:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800af0a:	6063      	str	r3, [r4, #4]
 800af0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800af10:	f8c4 8000 	str.w	r8, [r4]
 800af14:	60a0      	str	r0, [r4, #8]
 800af16:	60e3      	str	r3, [r4, #12]
 800af18:	426d      	negs	r5, r5
 800af1a:	e702      	b.n	800ad22 <__ieee754_rem_pio2+0x7a>
 800af1c:	a326      	add	r3, pc, #152	@ (adr r3, 800afb8 <__ieee754_rem_pio2+0x310>)
 800af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af26:	f7f5 fb87 	bl	8000638 <__aeabi_dmul>
 800af2a:	4606      	mov	r6, r0
 800af2c:	460f      	mov	r7, r1
 800af2e:	4602      	mov	r2, r0
 800af30:	460b      	mov	r3, r1
 800af32:	4640      	mov	r0, r8
 800af34:	4649      	mov	r1, r9
 800af36:	f7f5 f9c7 	bl	80002c8 <__aeabi_dsub>
 800af3a:	4602      	mov	r2, r0
 800af3c:	460b      	mov	r3, r1
 800af3e:	4682      	mov	sl, r0
 800af40:	468b      	mov	fp, r1
 800af42:	4640      	mov	r0, r8
 800af44:	4649      	mov	r1, r9
 800af46:	f7f5 f9bf 	bl	80002c8 <__aeabi_dsub>
 800af4a:	4632      	mov	r2, r6
 800af4c:	463b      	mov	r3, r7
 800af4e:	f7f5 f9bb 	bl	80002c8 <__aeabi_dsub>
 800af52:	a31b      	add	r3, pc, #108	@ (adr r3, 800afc0 <__ieee754_rem_pio2+0x318>)
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	4606      	mov	r6, r0
 800af5a:	460f      	mov	r7, r1
 800af5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af60:	f7f5 fb6a 	bl	8000638 <__aeabi_dmul>
 800af64:	4632      	mov	r2, r6
 800af66:	463b      	mov	r3, r7
 800af68:	f7f5 f9ae 	bl	80002c8 <__aeabi_dsub>
 800af6c:	4606      	mov	r6, r0
 800af6e:	460f      	mov	r7, r1
 800af70:	e764      	b.n	800ae3c <__ieee754_rem_pio2+0x194>
 800af72:	4b1b      	ldr	r3, [pc, #108]	@ (800afe0 <__ieee754_rem_pio2+0x338>)
 800af74:	4598      	cmp	r8, r3
 800af76:	d935      	bls.n	800afe4 <__ieee754_rem_pio2+0x33c>
 800af78:	4632      	mov	r2, r6
 800af7a:	463b      	mov	r3, r7
 800af7c:	4630      	mov	r0, r6
 800af7e:	4639      	mov	r1, r7
 800af80:	f7f5 f9a2 	bl	80002c8 <__aeabi_dsub>
 800af84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800af88:	e9c4 0100 	strd	r0, r1, [r4]
 800af8c:	e69e      	b.n	800accc <__ieee754_rem_pio2+0x24>
 800af8e:	bf00      	nop
 800af90:	54400000 	.word	0x54400000
 800af94:	3ff921fb 	.word	0x3ff921fb
 800af98:	1a626331 	.word	0x1a626331
 800af9c:	3dd0b461 	.word	0x3dd0b461
 800afa0:	1a600000 	.word	0x1a600000
 800afa4:	3dd0b461 	.word	0x3dd0b461
 800afa8:	2e037073 	.word	0x2e037073
 800afac:	3ba3198a 	.word	0x3ba3198a
 800afb0:	6dc9c883 	.word	0x6dc9c883
 800afb4:	3fe45f30 	.word	0x3fe45f30
 800afb8:	2e000000 	.word	0x2e000000
 800afbc:	3ba3198a 	.word	0x3ba3198a
 800afc0:	252049c1 	.word	0x252049c1
 800afc4:	397b839a 	.word	0x397b839a
 800afc8:	3fe921fb 	.word	0x3fe921fb
 800afcc:	4002d97b 	.word	0x4002d97b
 800afd0:	3ff921fb 	.word	0x3ff921fb
 800afd4:	413921fb 	.word	0x413921fb
 800afd8:	3fe00000 	.word	0x3fe00000
 800afdc:	0800d0e0 	.word	0x0800d0e0
 800afe0:	7fefffff 	.word	0x7fefffff
 800afe4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800afe8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800afec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800aff0:	4630      	mov	r0, r6
 800aff2:	460f      	mov	r7, r1
 800aff4:	f7f5 fdd0 	bl	8000b98 <__aeabi_d2iz>
 800aff8:	f7f5 fab4 	bl	8000564 <__aeabi_i2d>
 800affc:	4602      	mov	r2, r0
 800affe:	460b      	mov	r3, r1
 800b000:	4630      	mov	r0, r6
 800b002:	4639      	mov	r1, r7
 800b004:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b008:	f7f5 f95e 	bl	80002c8 <__aeabi_dsub>
 800b00c:	4b22      	ldr	r3, [pc, #136]	@ (800b098 <__ieee754_rem_pio2+0x3f0>)
 800b00e:	2200      	movs	r2, #0
 800b010:	f7f5 fb12 	bl	8000638 <__aeabi_dmul>
 800b014:	460f      	mov	r7, r1
 800b016:	4606      	mov	r6, r0
 800b018:	f7f5 fdbe 	bl	8000b98 <__aeabi_d2iz>
 800b01c:	f7f5 faa2 	bl	8000564 <__aeabi_i2d>
 800b020:	4602      	mov	r2, r0
 800b022:	460b      	mov	r3, r1
 800b024:	4630      	mov	r0, r6
 800b026:	4639      	mov	r1, r7
 800b028:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b02c:	f7f5 f94c 	bl	80002c8 <__aeabi_dsub>
 800b030:	4b19      	ldr	r3, [pc, #100]	@ (800b098 <__ieee754_rem_pio2+0x3f0>)
 800b032:	2200      	movs	r2, #0
 800b034:	f7f5 fb00 	bl	8000638 <__aeabi_dmul>
 800b038:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800b03c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800b040:	f04f 0803 	mov.w	r8, #3
 800b044:	2600      	movs	r6, #0
 800b046:	2700      	movs	r7, #0
 800b048:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b04c:	4632      	mov	r2, r6
 800b04e:	463b      	mov	r3, r7
 800b050:	46c2      	mov	sl, r8
 800b052:	f108 38ff 	add.w	r8, r8, #4294967295
 800b056:	f7f5 fd57 	bl	8000b08 <__aeabi_dcmpeq>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	d1f4      	bne.n	800b048 <__ieee754_rem_pio2+0x3a0>
 800b05e:	4b0f      	ldr	r3, [pc, #60]	@ (800b09c <__ieee754_rem_pio2+0x3f4>)
 800b060:	9301      	str	r3, [sp, #4]
 800b062:	2302      	movs	r3, #2
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	462a      	mov	r2, r5
 800b068:	4653      	mov	r3, sl
 800b06a:	4621      	mov	r1, r4
 800b06c:	a806      	add	r0, sp, #24
 800b06e:	f000 ffa7 	bl	800bfc0 <__kernel_rem_pio2>
 800b072:	9b04      	ldr	r3, [sp, #16]
 800b074:	2b00      	cmp	r3, #0
 800b076:	4605      	mov	r5, r0
 800b078:	f6bf ae53 	bge.w	800ad22 <__ieee754_rem_pio2+0x7a>
 800b07c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b080:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b084:	e9c4 2300 	strd	r2, r3, [r4]
 800b088:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b08c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b090:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b094:	e740      	b.n	800af18 <__ieee754_rem_pio2+0x270>
 800b096:	bf00      	nop
 800b098:	41700000 	.word	0x41700000
 800b09c:	0800d160 	.word	0x0800d160

0800b0a0 <atan>:
 800b0a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a4:	ec55 4b10 	vmov	r4, r5, d0
 800b0a8:	4bbf      	ldr	r3, [pc, #764]	@ (800b3a8 <atan+0x308>)
 800b0aa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800b0ae:	429e      	cmp	r6, r3
 800b0b0:	46ab      	mov	fp, r5
 800b0b2:	d918      	bls.n	800b0e6 <atan+0x46>
 800b0b4:	4bbd      	ldr	r3, [pc, #756]	@ (800b3ac <atan+0x30c>)
 800b0b6:	429e      	cmp	r6, r3
 800b0b8:	d801      	bhi.n	800b0be <atan+0x1e>
 800b0ba:	d109      	bne.n	800b0d0 <atan+0x30>
 800b0bc:	b144      	cbz	r4, 800b0d0 <atan+0x30>
 800b0be:	4622      	mov	r2, r4
 800b0c0:	462b      	mov	r3, r5
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	4629      	mov	r1, r5
 800b0c6:	f7f5 f901 	bl	80002cc <__adddf3>
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	460d      	mov	r5, r1
 800b0ce:	e006      	b.n	800b0de <atan+0x3e>
 800b0d0:	f1bb 0f00 	cmp.w	fp, #0
 800b0d4:	f340 812b 	ble.w	800b32e <atan+0x28e>
 800b0d8:	a597      	add	r5, pc, #604	@ (adr r5, 800b338 <atan+0x298>)
 800b0da:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b0de:	ec45 4b10 	vmov	d0, r4, r5
 800b0e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e6:	4bb2      	ldr	r3, [pc, #712]	@ (800b3b0 <atan+0x310>)
 800b0e8:	429e      	cmp	r6, r3
 800b0ea:	d813      	bhi.n	800b114 <atan+0x74>
 800b0ec:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800b0f0:	429e      	cmp	r6, r3
 800b0f2:	d80c      	bhi.n	800b10e <atan+0x6e>
 800b0f4:	a392      	add	r3, pc, #584	@ (adr r3, 800b340 <atan+0x2a0>)
 800b0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	f7f5 f8e5 	bl	80002cc <__adddf3>
 800b102:	4bac      	ldr	r3, [pc, #688]	@ (800b3b4 <atan+0x314>)
 800b104:	2200      	movs	r2, #0
 800b106:	f7f5 fd27 	bl	8000b58 <__aeabi_dcmpgt>
 800b10a:	2800      	cmp	r0, #0
 800b10c:	d1e7      	bne.n	800b0de <atan+0x3e>
 800b10e:	f04f 3aff 	mov.w	sl, #4294967295
 800b112:	e029      	b.n	800b168 <atan+0xc8>
 800b114:	f000 f95c 	bl	800b3d0 <fabs>
 800b118:	4ba7      	ldr	r3, [pc, #668]	@ (800b3b8 <atan+0x318>)
 800b11a:	429e      	cmp	r6, r3
 800b11c:	ec55 4b10 	vmov	r4, r5, d0
 800b120:	f200 80bc 	bhi.w	800b29c <atan+0x1fc>
 800b124:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800b128:	429e      	cmp	r6, r3
 800b12a:	f200 809e 	bhi.w	800b26a <atan+0x1ca>
 800b12e:	4622      	mov	r2, r4
 800b130:	462b      	mov	r3, r5
 800b132:	4620      	mov	r0, r4
 800b134:	4629      	mov	r1, r5
 800b136:	f7f5 f8c9 	bl	80002cc <__adddf3>
 800b13a:	4b9e      	ldr	r3, [pc, #632]	@ (800b3b4 <atan+0x314>)
 800b13c:	2200      	movs	r2, #0
 800b13e:	f7f5 f8c3 	bl	80002c8 <__aeabi_dsub>
 800b142:	2200      	movs	r2, #0
 800b144:	4606      	mov	r6, r0
 800b146:	460f      	mov	r7, r1
 800b148:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b14c:	4620      	mov	r0, r4
 800b14e:	4629      	mov	r1, r5
 800b150:	f7f5 f8bc 	bl	80002cc <__adddf3>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	4630      	mov	r0, r6
 800b15a:	4639      	mov	r1, r7
 800b15c:	f7f5 fb96 	bl	800088c <__aeabi_ddiv>
 800b160:	f04f 0a00 	mov.w	sl, #0
 800b164:	4604      	mov	r4, r0
 800b166:	460d      	mov	r5, r1
 800b168:	4622      	mov	r2, r4
 800b16a:	462b      	mov	r3, r5
 800b16c:	4620      	mov	r0, r4
 800b16e:	4629      	mov	r1, r5
 800b170:	f7f5 fa62 	bl	8000638 <__aeabi_dmul>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	4680      	mov	r8, r0
 800b17a:	4689      	mov	r9, r1
 800b17c:	f7f5 fa5c 	bl	8000638 <__aeabi_dmul>
 800b180:	a371      	add	r3, pc, #452	@ (adr r3, 800b348 <atan+0x2a8>)
 800b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b186:	4606      	mov	r6, r0
 800b188:	460f      	mov	r7, r1
 800b18a:	f7f5 fa55 	bl	8000638 <__aeabi_dmul>
 800b18e:	a370      	add	r3, pc, #448	@ (adr r3, 800b350 <atan+0x2b0>)
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	f7f5 f89a 	bl	80002cc <__adddf3>
 800b198:	4632      	mov	r2, r6
 800b19a:	463b      	mov	r3, r7
 800b19c:	f7f5 fa4c 	bl	8000638 <__aeabi_dmul>
 800b1a0:	a36d      	add	r3, pc, #436	@ (adr r3, 800b358 <atan+0x2b8>)
 800b1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a6:	f7f5 f891 	bl	80002cc <__adddf3>
 800b1aa:	4632      	mov	r2, r6
 800b1ac:	463b      	mov	r3, r7
 800b1ae:	f7f5 fa43 	bl	8000638 <__aeabi_dmul>
 800b1b2:	a36b      	add	r3, pc, #428	@ (adr r3, 800b360 <atan+0x2c0>)
 800b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b8:	f7f5 f888 	bl	80002cc <__adddf3>
 800b1bc:	4632      	mov	r2, r6
 800b1be:	463b      	mov	r3, r7
 800b1c0:	f7f5 fa3a 	bl	8000638 <__aeabi_dmul>
 800b1c4:	a368      	add	r3, pc, #416	@ (adr r3, 800b368 <atan+0x2c8>)
 800b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ca:	f7f5 f87f 	bl	80002cc <__adddf3>
 800b1ce:	4632      	mov	r2, r6
 800b1d0:	463b      	mov	r3, r7
 800b1d2:	f7f5 fa31 	bl	8000638 <__aeabi_dmul>
 800b1d6:	a366      	add	r3, pc, #408	@ (adr r3, 800b370 <atan+0x2d0>)
 800b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1dc:	f7f5 f876 	bl	80002cc <__adddf3>
 800b1e0:	4642      	mov	r2, r8
 800b1e2:	464b      	mov	r3, r9
 800b1e4:	f7f5 fa28 	bl	8000638 <__aeabi_dmul>
 800b1e8:	a363      	add	r3, pc, #396	@ (adr r3, 800b378 <atan+0x2d8>)
 800b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ee:	4680      	mov	r8, r0
 800b1f0:	4689      	mov	r9, r1
 800b1f2:	4630      	mov	r0, r6
 800b1f4:	4639      	mov	r1, r7
 800b1f6:	f7f5 fa1f 	bl	8000638 <__aeabi_dmul>
 800b1fa:	a361      	add	r3, pc, #388	@ (adr r3, 800b380 <atan+0x2e0>)
 800b1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b200:	f7f5 f862 	bl	80002c8 <__aeabi_dsub>
 800b204:	4632      	mov	r2, r6
 800b206:	463b      	mov	r3, r7
 800b208:	f7f5 fa16 	bl	8000638 <__aeabi_dmul>
 800b20c:	a35e      	add	r3, pc, #376	@ (adr r3, 800b388 <atan+0x2e8>)
 800b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b212:	f7f5 f859 	bl	80002c8 <__aeabi_dsub>
 800b216:	4632      	mov	r2, r6
 800b218:	463b      	mov	r3, r7
 800b21a:	f7f5 fa0d 	bl	8000638 <__aeabi_dmul>
 800b21e:	a35c      	add	r3, pc, #368	@ (adr r3, 800b390 <atan+0x2f0>)
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f7f5 f850 	bl	80002c8 <__aeabi_dsub>
 800b228:	4632      	mov	r2, r6
 800b22a:	463b      	mov	r3, r7
 800b22c:	f7f5 fa04 	bl	8000638 <__aeabi_dmul>
 800b230:	a359      	add	r3, pc, #356	@ (adr r3, 800b398 <atan+0x2f8>)
 800b232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b236:	f7f5 f847 	bl	80002c8 <__aeabi_dsub>
 800b23a:	4632      	mov	r2, r6
 800b23c:	463b      	mov	r3, r7
 800b23e:	f7f5 f9fb 	bl	8000638 <__aeabi_dmul>
 800b242:	4602      	mov	r2, r0
 800b244:	460b      	mov	r3, r1
 800b246:	4640      	mov	r0, r8
 800b248:	4649      	mov	r1, r9
 800b24a:	f7f5 f83f 	bl	80002cc <__adddf3>
 800b24e:	4622      	mov	r2, r4
 800b250:	462b      	mov	r3, r5
 800b252:	f7f5 f9f1 	bl	8000638 <__aeabi_dmul>
 800b256:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
 800b25e:	d148      	bne.n	800b2f2 <atan+0x252>
 800b260:	4620      	mov	r0, r4
 800b262:	4629      	mov	r1, r5
 800b264:	f7f5 f830 	bl	80002c8 <__aeabi_dsub>
 800b268:	e72f      	b.n	800b0ca <atan+0x2a>
 800b26a:	4b52      	ldr	r3, [pc, #328]	@ (800b3b4 <atan+0x314>)
 800b26c:	2200      	movs	r2, #0
 800b26e:	4620      	mov	r0, r4
 800b270:	4629      	mov	r1, r5
 800b272:	f7f5 f829 	bl	80002c8 <__aeabi_dsub>
 800b276:	4b4f      	ldr	r3, [pc, #316]	@ (800b3b4 <atan+0x314>)
 800b278:	4606      	mov	r6, r0
 800b27a:	460f      	mov	r7, r1
 800b27c:	2200      	movs	r2, #0
 800b27e:	4620      	mov	r0, r4
 800b280:	4629      	mov	r1, r5
 800b282:	f7f5 f823 	bl	80002cc <__adddf3>
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	4630      	mov	r0, r6
 800b28c:	4639      	mov	r1, r7
 800b28e:	f7f5 fafd 	bl	800088c <__aeabi_ddiv>
 800b292:	f04f 0a01 	mov.w	sl, #1
 800b296:	4604      	mov	r4, r0
 800b298:	460d      	mov	r5, r1
 800b29a:	e765      	b.n	800b168 <atan+0xc8>
 800b29c:	4b47      	ldr	r3, [pc, #284]	@ (800b3bc <atan+0x31c>)
 800b29e:	429e      	cmp	r6, r3
 800b2a0:	d21c      	bcs.n	800b2dc <atan+0x23c>
 800b2a2:	4b47      	ldr	r3, [pc, #284]	@ (800b3c0 <atan+0x320>)
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	f7f5 f80d 	bl	80002c8 <__aeabi_dsub>
 800b2ae:	4b44      	ldr	r3, [pc, #272]	@ (800b3c0 <atan+0x320>)
 800b2b0:	4606      	mov	r6, r0
 800b2b2:	460f      	mov	r7, r1
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	4629      	mov	r1, r5
 800b2ba:	f7f5 f9bd 	bl	8000638 <__aeabi_dmul>
 800b2be:	4b3d      	ldr	r3, [pc, #244]	@ (800b3b4 <atan+0x314>)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f7f5 f803 	bl	80002cc <__adddf3>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	4639      	mov	r1, r7
 800b2ce:	f7f5 fadd 	bl	800088c <__aeabi_ddiv>
 800b2d2:	f04f 0a02 	mov.w	sl, #2
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	460d      	mov	r5, r1
 800b2da:	e745      	b.n	800b168 <atan+0xc8>
 800b2dc:	4622      	mov	r2, r4
 800b2de:	462b      	mov	r3, r5
 800b2e0:	4938      	ldr	r1, [pc, #224]	@ (800b3c4 <atan+0x324>)
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	f7f5 fad2 	bl	800088c <__aeabi_ddiv>
 800b2e8:	f04f 0a03 	mov.w	sl, #3
 800b2ec:	4604      	mov	r4, r0
 800b2ee:	460d      	mov	r5, r1
 800b2f0:	e73a      	b.n	800b168 <atan+0xc8>
 800b2f2:	4b35      	ldr	r3, [pc, #212]	@ (800b3c8 <atan+0x328>)
 800b2f4:	4e35      	ldr	r6, [pc, #212]	@ (800b3cc <atan+0x32c>)
 800b2f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fe:	f7f4 ffe3 	bl	80002c8 <__aeabi_dsub>
 800b302:	4622      	mov	r2, r4
 800b304:	462b      	mov	r3, r5
 800b306:	f7f4 ffdf 	bl	80002c8 <__aeabi_dsub>
 800b30a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b30e:	4602      	mov	r2, r0
 800b310:	460b      	mov	r3, r1
 800b312:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b316:	f7f4 ffd7 	bl	80002c8 <__aeabi_dsub>
 800b31a:	f1bb 0f00 	cmp.w	fp, #0
 800b31e:	4604      	mov	r4, r0
 800b320:	460d      	mov	r5, r1
 800b322:	f6bf aedc 	bge.w	800b0de <atan+0x3e>
 800b326:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b32a:	461d      	mov	r5, r3
 800b32c:	e6d7      	b.n	800b0de <atan+0x3e>
 800b32e:	a51c      	add	r5, pc, #112	@ (adr r5, 800b3a0 <atan+0x300>)
 800b330:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b334:	e6d3      	b.n	800b0de <atan+0x3e>
 800b336:	bf00      	nop
 800b338:	54442d18 	.word	0x54442d18
 800b33c:	3ff921fb 	.word	0x3ff921fb
 800b340:	8800759c 	.word	0x8800759c
 800b344:	7e37e43c 	.word	0x7e37e43c
 800b348:	e322da11 	.word	0xe322da11
 800b34c:	3f90ad3a 	.word	0x3f90ad3a
 800b350:	24760deb 	.word	0x24760deb
 800b354:	3fa97b4b 	.word	0x3fa97b4b
 800b358:	a0d03d51 	.word	0xa0d03d51
 800b35c:	3fb10d66 	.word	0x3fb10d66
 800b360:	c54c206e 	.word	0xc54c206e
 800b364:	3fb745cd 	.word	0x3fb745cd
 800b368:	920083ff 	.word	0x920083ff
 800b36c:	3fc24924 	.word	0x3fc24924
 800b370:	5555550d 	.word	0x5555550d
 800b374:	3fd55555 	.word	0x3fd55555
 800b378:	2c6a6c2f 	.word	0x2c6a6c2f
 800b37c:	bfa2b444 	.word	0xbfa2b444
 800b380:	52defd9a 	.word	0x52defd9a
 800b384:	3fadde2d 	.word	0x3fadde2d
 800b388:	af749a6d 	.word	0xaf749a6d
 800b38c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b390:	fe231671 	.word	0xfe231671
 800b394:	3fbc71c6 	.word	0x3fbc71c6
 800b398:	9998ebc4 	.word	0x9998ebc4
 800b39c:	3fc99999 	.word	0x3fc99999
 800b3a0:	54442d18 	.word	0x54442d18
 800b3a4:	bff921fb 	.word	0xbff921fb
 800b3a8:	440fffff 	.word	0x440fffff
 800b3ac:	7ff00000 	.word	0x7ff00000
 800b3b0:	3fdbffff 	.word	0x3fdbffff
 800b3b4:	3ff00000 	.word	0x3ff00000
 800b3b8:	3ff2ffff 	.word	0x3ff2ffff
 800b3bc:	40038000 	.word	0x40038000
 800b3c0:	3ff80000 	.word	0x3ff80000
 800b3c4:	bff00000 	.word	0xbff00000
 800b3c8:	0800d268 	.word	0x0800d268
 800b3cc:	0800d288 	.word	0x0800d288

0800b3d0 <fabs>:
 800b3d0:	ec51 0b10 	vmov	r0, r1, d0
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b3da:	ec43 2b10 	vmov	d0, r2, r3
 800b3de:	4770      	bx	lr

0800b3e0 <__kernel_cosf>:
 800b3e0:	ee10 3a10 	vmov	r3, s0
 800b3e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b3e8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b3ec:	eef0 6a40 	vmov.f32	s13, s0
 800b3f0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b3f4:	d204      	bcs.n	800b400 <__kernel_cosf+0x20>
 800b3f6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b3fa:	ee17 2a90 	vmov	r2, s15
 800b3fe:	b342      	cbz	r2, 800b452 <__kernel_cosf+0x72>
 800b400:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b404:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b470 <__kernel_cosf+0x90>
 800b408:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b474 <__kernel_cosf+0x94>
 800b40c:	4a1a      	ldr	r2, [pc, #104]	@ (800b478 <__kernel_cosf+0x98>)
 800b40e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b412:	4293      	cmp	r3, r2
 800b414:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b47c <__kernel_cosf+0x9c>
 800b418:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b41c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b480 <__kernel_cosf+0xa0>
 800b420:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b424:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b484 <__kernel_cosf+0xa4>
 800b428:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b42c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b488 <__kernel_cosf+0xa8>
 800b430:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b434:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b438:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b43c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b440:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b444:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b448:	d804      	bhi.n	800b454 <__kernel_cosf+0x74>
 800b44a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b44e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b452:	4770      	bx	lr
 800b454:	4a0d      	ldr	r2, [pc, #52]	@ (800b48c <__kernel_cosf+0xac>)
 800b456:	4293      	cmp	r3, r2
 800b458:	bf9a      	itte	ls
 800b45a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b45e:	ee07 3a10 	vmovls	s14, r3
 800b462:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b466:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b46a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b46e:	e7ec      	b.n	800b44a <__kernel_cosf+0x6a>
 800b470:	ad47d74e 	.word	0xad47d74e
 800b474:	310f74f6 	.word	0x310f74f6
 800b478:	3e999999 	.word	0x3e999999
 800b47c:	b493f27c 	.word	0xb493f27c
 800b480:	37d00d01 	.word	0x37d00d01
 800b484:	bab60b61 	.word	0xbab60b61
 800b488:	3d2aaaab 	.word	0x3d2aaaab
 800b48c:	3f480000 	.word	0x3f480000

0800b490 <__kernel_sinf>:
 800b490:	ee10 3a10 	vmov	r3, s0
 800b494:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b498:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b49c:	d204      	bcs.n	800b4a8 <__kernel_sinf+0x18>
 800b49e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b4a2:	ee17 3a90 	vmov	r3, s15
 800b4a6:	b35b      	cbz	r3, 800b500 <__kernel_sinf+0x70>
 800b4a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b4ac:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b504 <__kernel_sinf+0x74>
 800b4b0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b508 <__kernel_sinf+0x78>
 800b4b4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b4b8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b50c <__kernel_sinf+0x7c>
 800b4bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b4c0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b510 <__kernel_sinf+0x80>
 800b4c4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b4c8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b514 <__kernel_sinf+0x84>
 800b4cc:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b4d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b4d4:	b930      	cbnz	r0, 800b4e4 <__kernel_sinf+0x54>
 800b4d6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b518 <__kernel_sinf+0x88>
 800b4da:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b4de:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b4e2:	4770      	bx	lr
 800b4e4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b4e8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b4ec:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b4f0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b4f4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b51c <__kernel_sinf+0x8c>
 800b4f8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b4fc:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	2f2ec9d3 	.word	0x2f2ec9d3
 800b508:	b2d72f34 	.word	0xb2d72f34
 800b50c:	3638ef1b 	.word	0x3638ef1b
 800b510:	b9500d01 	.word	0xb9500d01
 800b514:	3c088889 	.word	0x3c088889
 800b518:	be2aaaab 	.word	0xbe2aaaab
 800b51c:	3e2aaaab 	.word	0x3e2aaaab

0800b520 <__ieee754_powf>:
 800b520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b524:	ee10 4a90 	vmov	r4, s1
 800b528:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800b52c:	ed2d 8b02 	vpush	{d8}
 800b530:	ee10 6a10 	vmov	r6, s0
 800b534:	eeb0 8a40 	vmov.f32	s16, s0
 800b538:	eef0 8a60 	vmov.f32	s17, s1
 800b53c:	d10c      	bne.n	800b558 <__ieee754_powf+0x38>
 800b53e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800b542:	0076      	lsls	r6, r6, #1
 800b544:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800b548:	f240 8274 	bls.w	800ba34 <__ieee754_powf+0x514>
 800b54c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800b550:	ecbd 8b02 	vpop	{d8}
 800b554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b558:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800b55c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800b560:	d802      	bhi.n	800b568 <__ieee754_powf+0x48>
 800b562:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800b566:	d908      	bls.n	800b57a <__ieee754_powf+0x5a>
 800b568:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800b56c:	d1ee      	bne.n	800b54c <__ieee754_powf+0x2c>
 800b56e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800b572:	0064      	lsls	r4, r4, #1
 800b574:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800b578:	e7e6      	b.n	800b548 <__ieee754_powf+0x28>
 800b57a:	2e00      	cmp	r6, #0
 800b57c:	da1f      	bge.n	800b5be <__ieee754_powf+0x9e>
 800b57e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800b582:	f080 8260 	bcs.w	800ba46 <__ieee754_powf+0x526>
 800b586:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800b58a:	d32f      	bcc.n	800b5ec <__ieee754_powf+0xcc>
 800b58c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800b590:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800b594:	fa49 f503 	asr.w	r5, r9, r3
 800b598:	fa05 f303 	lsl.w	r3, r5, r3
 800b59c:	454b      	cmp	r3, r9
 800b59e:	d123      	bne.n	800b5e8 <__ieee754_powf+0xc8>
 800b5a0:	f005 0501 	and.w	r5, r5, #1
 800b5a4:	f1c5 0502 	rsb	r5, r5, #2
 800b5a8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800b5ac:	d11f      	bne.n	800b5ee <__ieee754_powf+0xce>
 800b5ae:	2c00      	cmp	r4, #0
 800b5b0:	f280 8246 	bge.w	800ba40 <__ieee754_powf+0x520>
 800b5b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b5b8:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800b5bc:	e7c8      	b.n	800b550 <__ieee754_powf+0x30>
 800b5be:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800b5c2:	d111      	bne.n	800b5e8 <__ieee754_powf+0xc8>
 800b5c4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800b5c8:	f000 8234 	beq.w	800ba34 <__ieee754_powf+0x514>
 800b5cc:	d906      	bls.n	800b5dc <__ieee754_powf+0xbc>
 800b5ce:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800b8e4 <__ieee754_powf+0x3c4>
 800b5d2:	2c00      	cmp	r4, #0
 800b5d4:	bfa8      	it	ge
 800b5d6:	eeb0 0a68 	vmovge.f32	s0, s17
 800b5da:	e7b9      	b.n	800b550 <__ieee754_powf+0x30>
 800b5dc:	2c00      	cmp	r4, #0
 800b5de:	f280 822c 	bge.w	800ba3a <__ieee754_powf+0x51a>
 800b5e2:	eeb1 0a68 	vneg.f32	s0, s17
 800b5e6:	e7b3      	b.n	800b550 <__ieee754_powf+0x30>
 800b5e8:	2500      	movs	r5, #0
 800b5ea:	e7dd      	b.n	800b5a8 <__ieee754_powf+0x88>
 800b5ec:	2500      	movs	r5, #0
 800b5ee:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800b5f2:	d102      	bne.n	800b5fa <__ieee754_powf+0xda>
 800b5f4:	ee28 0a08 	vmul.f32	s0, s16, s16
 800b5f8:	e7aa      	b.n	800b550 <__ieee754_powf+0x30>
 800b5fa:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800b5fe:	f040 8227 	bne.w	800ba50 <__ieee754_powf+0x530>
 800b602:	2e00      	cmp	r6, #0
 800b604:	f2c0 8224 	blt.w	800ba50 <__ieee754_powf+0x530>
 800b608:	eeb0 0a48 	vmov.f32	s0, s16
 800b60c:	ecbd 8b02 	vpop	{d8}
 800b610:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b614:	f000 bcd0 	b.w	800bfb8 <__ieee754_sqrtf>
 800b618:	2d01      	cmp	r5, #1
 800b61a:	d199      	bne.n	800b550 <__ieee754_powf+0x30>
 800b61c:	eeb1 0a40 	vneg.f32	s0, s0
 800b620:	e796      	b.n	800b550 <__ieee754_powf+0x30>
 800b622:	0ff0      	lsrs	r0, r6, #31
 800b624:	3801      	subs	r0, #1
 800b626:	ea55 0300 	orrs.w	r3, r5, r0
 800b62a:	d104      	bne.n	800b636 <__ieee754_powf+0x116>
 800b62c:	ee38 8a48 	vsub.f32	s16, s16, s16
 800b630:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800b634:	e78c      	b.n	800b550 <__ieee754_powf+0x30>
 800b636:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800b63a:	d96d      	bls.n	800b718 <__ieee754_powf+0x1f8>
 800b63c:	4baa      	ldr	r3, [pc, #680]	@ (800b8e8 <__ieee754_powf+0x3c8>)
 800b63e:	4598      	cmp	r8, r3
 800b640:	d808      	bhi.n	800b654 <__ieee754_powf+0x134>
 800b642:	2c00      	cmp	r4, #0
 800b644:	da0b      	bge.n	800b65e <__ieee754_powf+0x13e>
 800b646:	2000      	movs	r0, #0
 800b648:	ecbd 8b02 	vpop	{d8}
 800b64c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b650:	f000 bcac 	b.w	800bfac <__math_oflowf>
 800b654:	4ba5      	ldr	r3, [pc, #660]	@ (800b8ec <__ieee754_powf+0x3cc>)
 800b656:	4598      	cmp	r8, r3
 800b658:	d908      	bls.n	800b66c <__ieee754_powf+0x14c>
 800b65a:	2c00      	cmp	r4, #0
 800b65c:	dcf3      	bgt.n	800b646 <__ieee754_powf+0x126>
 800b65e:	2000      	movs	r0, #0
 800b660:	ecbd 8b02 	vpop	{d8}
 800b664:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b668:	f000 bc9a 	b.w	800bfa0 <__math_uflowf>
 800b66c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b670:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b674:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800b8f0 <__ieee754_powf+0x3d0>
 800b678:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800b67c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800b680:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b684:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800b688:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b68c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800b8f4 <__ieee754_powf+0x3d4>
 800b690:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b694:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800b8f8 <__ieee754_powf+0x3d8>
 800b698:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800b69c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800b8fc <__ieee754_powf+0x3dc>
 800b6a0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b6a4:	eeb0 7a67 	vmov.f32	s14, s15
 800b6a8:	eea0 7a26 	vfma.f32	s14, s0, s13
 800b6ac:	ee17 3a10 	vmov	r3, s14
 800b6b0:	f36f 030b 	bfc	r3, #0, #12
 800b6b4:	ee07 3a10 	vmov	s14, r3
 800b6b8:	eeb0 6a47 	vmov.f32	s12, s14
 800b6bc:	eea0 6a66 	vfms.f32	s12, s0, s13
 800b6c0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b6c4:	3d01      	subs	r5, #1
 800b6c6:	4305      	orrs	r5, r0
 800b6c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6cc:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800b6d0:	f36f 040b 	bfc	r4, #0, #12
 800b6d4:	bf18      	it	ne
 800b6d6:	eeb0 8a66 	vmovne.f32	s16, s13
 800b6da:	ee06 4a90 	vmov	s13, r4
 800b6de:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800b6e2:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800b6e6:	ee67 7a26 	vmul.f32	s15, s14, s13
 800b6ea:	eee6 0a07 	vfma.f32	s1, s12, s14
 800b6ee:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800b6f2:	ee17 1a10 	vmov	r1, s14
 800b6f6:	2900      	cmp	r1, #0
 800b6f8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b6fc:	f340 80dd 	ble.w	800b8ba <__ieee754_powf+0x39a>
 800b700:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800b704:	f240 80ca 	bls.w	800b89c <__ieee754_powf+0x37c>
 800b708:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b710:	bf4c      	ite	mi
 800b712:	2001      	movmi	r0, #1
 800b714:	2000      	movpl	r0, #0
 800b716:	e797      	b.n	800b648 <__ieee754_powf+0x128>
 800b718:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800b71c:	bf01      	itttt	eq
 800b71e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800b900 <__ieee754_powf+0x3e0>
 800b722:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800b726:	f06f 0317 	mvneq.w	r3, #23
 800b72a:	ee17 7a90 	vmoveq	r7, s15
 800b72e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800b732:	bf18      	it	ne
 800b734:	2300      	movne	r3, #0
 800b736:	3a7f      	subs	r2, #127	@ 0x7f
 800b738:	441a      	add	r2, r3
 800b73a:	4b72      	ldr	r3, [pc, #456]	@ (800b904 <__ieee754_powf+0x3e4>)
 800b73c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800b740:	429f      	cmp	r7, r3
 800b742:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800b746:	dd06      	ble.n	800b756 <__ieee754_powf+0x236>
 800b748:	4b6f      	ldr	r3, [pc, #444]	@ (800b908 <__ieee754_powf+0x3e8>)
 800b74a:	429f      	cmp	r7, r3
 800b74c:	f340 80a4 	ble.w	800b898 <__ieee754_powf+0x378>
 800b750:	3201      	adds	r2, #1
 800b752:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800b756:	2600      	movs	r6, #0
 800b758:	4b6c      	ldr	r3, [pc, #432]	@ (800b90c <__ieee754_powf+0x3ec>)
 800b75a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800b75e:	ee07 1a10 	vmov	s14, r1
 800b762:	edd3 5a00 	vldr	s11, [r3]
 800b766:	4b6a      	ldr	r3, [pc, #424]	@ (800b910 <__ieee754_powf+0x3f0>)
 800b768:	ee75 7a87 	vadd.f32	s15, s11, s14
 800b76c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b770:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800b774:	1049      	asrs	r1, r1, #1
 800b776:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800b77a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800b77e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800b782:	ee37 6a65 	vsub.f32	s12, s14, s11
 800b786:	ee07 1a90 	vmov	s15, r1
 800b78a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800b78e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800b792:	ee15 7a10 	vmov	r7, s10
 800b796:	401f      	ands	r7, r3
 800b798:	ee06 7a90 	vmov	s13, r7
 800b79c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800b7a0:	ee37 7a65 	vsub.f32	s14, s14, s11
 800b7a4:	ee65 7a05 	vmul.f32	s15, s10, s10
 800b7a8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800b7ac:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800b914 <__ieee754_powf+0x3f4>
 800b7b0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800b918 <__ieee754_powf+0x3f8>
 800b7b4:	eee7 5a87 	vfma.f32	s11, s15, s14
 800b7b8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800b91c <__ieee754_powf+0x3fc>
 800b7bc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b7c0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800b8f0 <__ieee754_powf+0x3d0>
 800b7c4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800b7c8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800b920 <__ieee754_powf+0x400>
 800b7cc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b7d0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800b924 <__ieee754_powf+0x404>
 800b7d4:	ee26 6a24 	vmul.f32	s12, s12, s9
 800b7d8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800b7dc:	ee35 7a26 	vadd.f32	s14, s10, s13
 800b7e0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800b7e4:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b7e8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800b7ec:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800b7f0:	eef0 5a67 	vmov.f32	s11, s15
 800b7f4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800b7f8:	ee75 5a87 	vadd.f32	s11, s11, s14
 800b7fc:	ee15 1a90 	vmov	r1, s11
 800b800:	4019      	ands	r1, r3
 800b802:	ee05 1a90 	vmov	s11, r1
 800b806:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800b80a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800b80e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b812:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b816:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b81a:	eeb0 6a67 	vmov.f32	s12, s15
 800b81e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800b822:	ee16 1a10 	vmov	r1, s12
 800b826:	4019      	ands	r1, r3
 800b828:	ee06 1a10 	vmov	s12, r1
 800b82c:	eeb0 7a46 	vmov.f32	s14, s12
 800b830:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800b834:	493c      	ldr	r1, [pc, #240]	@ (800b928 <__ieee754_powf+0x408>)
 800b836:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800b83a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b83e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800b92c <__ieee754_powf+0x40c>
 800b842:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800b930 <__ieee754_powf+0x410>
 800b846:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b84a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800b934 <__ieee754_powf+0x414>
 800b84e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b852:	ed91 7a00 	vldr	s14, [r1]
 800b856:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b85a:	ee07 2a10 	vmov	s14, r2
 800b85e:	4a36      	ldr	r2, [pc, #216]	@ (800b938 <__ieee754_powf+0x418>)
 800b860:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800b864:	eeb0 7a67 	vmov.f32	s14, s15
 800b868:	eea6 7a25 	vfma.f32	s14, s12, s11
 800b86c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800b870:	ed92 5a00 	vldr	s10, [r2]
 800b874:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b878:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b87c:	ee17 2a10 	vmov	r2, s14
 800b880:	401a      	ands	r2, r3
 800b882:	ee07 2a10 	vmov	s14, r2
 800b886:	ee77 6a66 	vsub.f32	s13, s14, s13
 800b88a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800b88e:	eee6 6a65 	vfms.f32	s13, s12, s11
 800b892:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b896:	e715      	b.n	800b6c4 <__ieee754_powf+0x1a4>
 800b898:	2601      	movs	r6, #1
 800b89a:	e75d      	b.n	800b758 <__ieee754_powf+0x238>
 800b89c:	d152      	bne.n	800b944 <__ieee754_powf+0x424>
 800b89e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800b93c <__ieee754_powf+0x41c>
 800b8a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b8a6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800b8aa:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b2:	f73f af29 	bgt.w	800b708 <__ieee754_powf+0x1e8>
 800b8b6:	2386      	movs	r3, #134	@ 0x86
 800b8b8:	e048      	b.n	800b94c <__ieee754_powf+0x42c>
 800b8ba:	4a21      	ldr	r2, [pc, #132]	@ (800b940 <__ieee754_powf+0x420>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d907      	bls.n	800b8d0 <__ieee754_powf+0x3b0>
 800b8c0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c8:	bf4c      	ite	mi
 800b8ca:	2001      	movmi	r0, #1
 800b8cc:	2000      	movpl	r0, #0
 800b8ce:	e6c7      	b.n	800b660 <__ieee754_powf+0x140>
 800b8d0:	d138      	bne.n	800b944 <__ieee754_powf+0x424>
 800b8d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b8d6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8de:	dbea      	blt.n	800b8b6 <__ieee754_powf+0x396>
 800b8e0:	e7ee      	b.n	800b8c0 <__ieee754_powf+0x3a0>
 800b8e2:	bf00      	nop
 800b8e4:	00000000 	.word	0x00000000
 800b8e8:	3f7ffff3 	.word	0x3f7ffff3
 800b8ec:	3f800007 	.word	0x3f800007
 800b8f0:	3eaaaaab 	.word	0x3eaaaaab
 800b8f4:	3fb8aa00 	.word	0x3fb8aa00
 800b8f8:	3fb8aa3b 	.word	0x3fb8aa3b
 800b8fc:	36eca570 	.word	0x36eca570
 800b900:	4b800000 	.word	0x4b800000
 800b904:	001cc471 	.word	0x001cc471
 800b908:	005db3d6 	.word	0x005db3d6
 800b90c:	0800d2b8 	.word	0x0800d2b8
 800b910:	fffff000 	.word	0xfffff000
 800b914:	3e6c3255 	.word	0x3e6c3255
 800b918:	3e53f142 	.word	0x3e53f142
 800b91c:	3e8ba305 	.word	0x3e8ba305
 800b920:	3edb6db7 	.word	0x3edb6db7
 800b924:	3f19999a 	.word	0x3f19999a
 800b928:	0800d2a8 	.word	0x0800d2a8
 800b92c:	3f76384f 	.word	0x3f76384f
 800b930:	3f763800 	.word	0x3f763800
 800b934:	369dc3a0 	.word	0x369dc3a0
 800b938:	0800d2b0 	.word	0x0800d2b0
 800b93c:	3338aa3c 	.word	0x3338aa3c
 800b940:	43160000 	.word	0x43160000
 800b944:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800b948:	d96f      	bls.n	800ba2a <__ieee754_powf+0x50a>
 800b94a:	15db      	asrs	r3, r3, #23
 800b94c:	3b7e      	subs	r3, #126	@ 0x7e
 800b94e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800b952:	4118      	asrs	r0, r3
 800b954:	4408      	add	r0, r1
 800b956:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b95a:	4a4e      	ldr	r2, [pc, #312]	@ (800ba94 <__ieee754_powf+0x574>)
 800b95c:	3b7f      	subs	r3, #127	@ 0x7f
 800b95e:	411a      	asrs	r2, r3
 800b960:	4002      	ands	r2, r0
 800b962:	ee07 2a10 	vmov	s14, r2
 800b966:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800b96a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800b96e:	f1c3 0317 	rsb	r3, r3, #23
 800b972:	4118      	asrs	r0, r3
 800b974:	2900      	cmp	r1, #0
 800b976:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b97a:	bfb8      	it	lt
 800b97c:	4240      	neglt	r0, r0
 800b97e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800b982:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800ba98 <__ieee754_powf+0x578>
 800b986:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800ba9c <__ieee754_powf+0x57c>
 800b98a:	ee16 3a90 	vmov	r3, s13
 800b98e:	f36f 030b 	bfc	r3, #0, #12
 800b992:	ee06 3a90 	vmov	s13, r3
 800b996:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b99a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b99e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b9a2:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800baa0 <__ieee754_powf+0x580>
 800b9a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9aa:	eee0 7a87 	vfma.f32	s15, s1, s14
 800b9ae:	eeb0 7a67 	vmov.f32	s14, s15
 800b9b2:	eea6 7a86 	vfma.f32	s14, s13, s12
 800b9b6:	eef0 5a47 	vmov.f32	s11, s14
 800b9ba:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800b9be:	ee67 6a07 	vmul.f32	s13, s14, s14
 800b9c2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b9c6:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800baa4 <__ieee754_powf+0x584>
 800b9ca:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800baa8 <__ieee754_powf+0x588>
 800b9ce:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800b9d2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800baac <__ieee754_powf+0x58c>
 800b9d6:	eee6 5a26 	vfma.f32	s11, s12, s13
 800b9da:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800bab0 <__ieee754_powf+0x590>
 800b9de:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800b9e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bab4 <__ieee754_powf+0x594>
 800b9e6:	eee6 5a26 	vfma.f32	s11, s12, s13
 800b9ea:	eeb0 6a47 	vmov.f32	s12, s14
 800b9ee:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800b9f2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b9f6:	ee67 5a06 	vmul.f32	s11, s14, s12
 800b9fa:	ee36 6a66 	vsub.f32	s12, s12, s13
 800b9fe:	eee7 7a27 	vfma.f32	s15, s14, s15
 800ba02:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800ba06:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ba0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba0e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ba12:	ee10 3a10 	vmov	r3, s0
 800ba16:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ba1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ba1e:	da06      	bge.n	800ba2e <__ieee754_powf+0x50e>
 800ba20:	f000 fa3e 	bl	800bea0 <scalbnf>
 800ba24:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ba28:	e592      	b.n	800b550 <__ieee754_powf+0x30>
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	e7a7      	b.n	800b97e <__ieee754_powf+0x45e>
 800ba2e:	ee00 3a10 	vmov	s0, r3
 800ba32:	e7f7      	b.n	800ba24 <__ieee754_powf+0x504>
 800ba34:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ba38:	e58a      	b.n	800b550 <__ieee754_powf+0x30>
 800ba3a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800bab8 <__ieee754_powf+0x598>
 800ba3e:	e587      	b.n	800b550 <__ieee754_powf+0x30>
 800ba40:	eeb0 0a48 	vmov.f32	s0, s16
 800ba44:	e584      	b.n	800b550 <__ieee754_powf+0x30>
 800ba46:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ba4a:	f43f adbb 	beq.w	800b5c4 <__ieee754_powf+0xa4>
 800ba4e:	2502      	movs	r5, #2
 800ba50:	eeb0 0a48 	vmov.f32	s0, s16
 800ba54:	f000 f962 	bl	800bd1c <fabsf>
 800ba58:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800ba5c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800ba60:	4647      	mov	r7, r8
 800ba62:	d003      	beq.n	800ba6c <__ieee754_powf+0x54c>
 800ba64:	f1b8 0f00 	cmp.w	r8, #0
 800ba68:	f47f addb 	bne.w	800b622 <__ieee754_powf+0x102>
 800ba6c:	2c00      	cmp	r4, #0
 800ba6e:	bfbc      	itt	lt
 800ba70:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800ba74:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800ba78:	2e00      	cmp	r6, #0
 800ba7a:	f6bf ad69 	bge.w	800b550 <__ieee754_powf+0x30>
 800ba7e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800ba82:	ea58 0805 	orrs.w	r8, r8, r5
 800ba86:	f47f adc7 	bne.w	800b618 <__ieee754_powf+0xf8>
 800ba8a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ba8e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ba92:	e55d      	b.n	800b550 <__ieee754_powf+0x30>
 800ba94:	ff800000 	.word	0xff800000
 800ba98:	3f317218 	.word	0x3f317218
 800ba9c:	3f317200 	.word	0x3f317200
 800baa0:	35bfbe8c 	.word	0x35bfbe8c
 800baa4:	b5ddea0e 	.word	0xb5ddea0e
 800baa8:	3331bb4c 	.word	0x3331bb4c
 800baac:	388ab355 	.word	0x388ab355
 800bab0:	bb360b61 	.word	0xbb360b61
 800bab4:	3e2aaaab 	.word	0x3e2aaaab
 800bab8:	00000000 	.word	0x00000000

0800babc <__ieee754_rem_pio2f>:
 800babc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800babe:	ee10 6a10 	vmov	r6, s0
 800bac2:	4b88      	ldr	r3, [pc, #544]	@ (800bce4 <__ieee754_rem_pio2f+0x228>)
 800bac4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800bac8:	429d      	cmp	r5, r3
 800baca:	b087      	sub	sp, #28
 800bacc:	4604      	mov	r4, r0
 800bace:	d805      	bhi.n	800badc <__ieee754_rem_pio2f+0x20>
 800bad0:	2300      	movs	r3, #0
 800bad2:	ed80 0a00 	vstr	s0, [r0]
 800bad6:	6043      	str	r3, [r0, #4]
 800bad8:	2000      	movs	r0, #0
 800bada:	e022      	b.n	800bb22 <__ieee754_rem_pio2f+0x66>
 800badc:	4b82      	ldr	r3, [pc, #520]	@ (800bce8 <__ieee754_rem_pio2f+0x22c>)
 800bade:	429d      	cmp	r5, r3
 800bae0:	d83a      	bhi.n	800bb58 <__ieee754_rem_pio2f+0x9c>
 800bae2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bae6:	2e00      	cmp	r6, #0
 800bae8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800bcec <__ieee754_rem_pio2f+0x230>
 800baec:	4a80      	ldr	r2, [pc, #512]	@ (800bcf0 <__ieee754_rem_pio2f+0x234>)
 800baee:	f023 030f 	bic.w	r3, r3, #15
 800baf2:	dd18      	ble.n	800bb26 <__ieee754_rem_pio2f+0x6a>
 800baf4:	4293      	cmp	r3, r2
 800baf6:	ee70 7a47 	vsub.f32	s15, s0, s14
 800bafa:	bf09      	itett	eq
 800bafc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800bcf4 <__ieee754_rem_pio2f+0x238>
 800bb00:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800bcf8 <__ieee754_rem_pio2f+0x23c>
 800bb04:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800bcfc <__ieee754_rem_pio2f+0x240>
 800bb08:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800bb0c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800bb10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb14:	ed80 7a00 	vstr	s14, [r0]
 800bb18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb1c:	edc0 7a01 	vstr	s15, [r0, #4]
 800bb20:	2001      	movs	r0, #1
 800bb22:	b007      	add	sp, #28
 800bb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb26:	4293      	cmp	r3, r2
 800bb28:	ee70 7a07 	vadd.f32	s15, s0, s14
 800bb2c:	bf09      	itett	eq
 800bb2e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800bcf4 <__ieee754_rem_pio2f+0x238>
 800bb32:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800bcf8 <__ieee754_rem_pio2f+0x23c>
 800bb36:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800bcfc <__ieee754_rem_pio2f+0x240>
 800bb3a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800bb3e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb46:	ed80 7a00 	vstr	s14, [r0]
 800bb4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb4e:	edc0 7a01 	vstr	s15, [r0, #4]
 800bb52:	f04f 30ff 	mov.w	r0, #4294967295
 800bb56:	e7e4      	b.n	800bb22 <__ieee754_rem_pio2f+0x66>
 800bb58:	4b69      	ldr	r3, [pc, #420]	@ (800bd00 <__ieee754_rem_pio2f+0x244>)
 800bb5a:	429d      	cmp	r5, r3
 800bb5c:	d873      	bhi.n	800bc46 <__ieee754_rem_pio2f+0x18a>
 800bb5e:	f000 f8dd 	bl	800bd1c <fabsf>
 800bb62:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800bd04 <__ieee754_rem_pio2f+0x248>
 800bb66:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bb6a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bb6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bb76:	ee17 0a90 	vmov	r0, s15
 800bb7a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bcec <__ieee754_rem_pio2f+0x230>
 800bb7e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800bb82:	281f      	cmp	r0, #31
 800bb84:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bcf8 <__ieee754_rem_pio2f+0x23c>
 800bb88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb8c:	eeb1 6a47 	vneg.f32	s12, s14
 800bb90:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bb94:	ee16 1a90 	vmov	r1, s13
 800bb98:	dc09      	bgt.n	800bbae <__ieee754_rem_pio2f+0xf2>
 800bb9a:	4a5b      	ldr	r2, [pc, #364]	@ (800bd08 <__ieee754_rem_pio2f+0x24c>)
 800bb9c:	1e47      	subs	r7, r0, #1
 800bb9e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bba2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800bba6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d107      	bne.n	800bbbe <__ieee754_rem_pio2f+0x102>
 800bbae:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800bbb2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800bbb6:	2a08      	cmp	r2, #8
 800bbb8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800bbbc:	dc14      	bgt.n	800bbe8 <__ieee754_rem_pio2f+0x12c>
 800bbbe:	6021      	str	r1, [r4, #0]
 800bbc0:	ed94 7a00 	vldr	s14, [r4]
 800bbc4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bbc8:	2e00      	cmp	r6, #0
 800bbca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bbce:	ed84 0a01 	vstr	s0, [r4, #4]
 800bbd2:	daa6      	bge.n	800bb22 <__ieee754_rem_pio2f+0x66>
 800bbd4:	eeb1 7a47 	vneg.f32	s14, s14
 800bbd8:	eeb1 0a40 	vneg.f32	s0, s0
 800bbdc:	ed84 7a00 	vstr	s14, [r4]
 800bbe0:	ed84 0a01 	vstr	s0, [r4, #4]
 800bbe4:	4240      	negs	r0, r0
 800bbe6:	e79c      	b.n	800bb22 <__ieee754_rem_pio2f+0x66>
 800bbe8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800bcf4 <__ieee754_rem_pio2f+0x238>
 800bbec:	eef0 6a40 	vmov.f32	s13, s0
 800bbf0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800bbf4:	ee70 7a66 	vsub.f32	s15, s0, s13
 800bbf8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bbfc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800bcfc <__ieee754_rem_pio2f+0x240>
 800bc00:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800bc04:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800bc08:	ee15 2a90 	vmov	r2, s11
 800bc0c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bc10:	1a5b      	subs	r3, r3, r1
 800bc12:	2b19      	cmp	r3, #25
 800bc14:	dc04      	bgt.n	800bc20 <__ieee754_rem_pio2f+0x164>
 800bc16:	edc4 5a00 	vstr	s11, [r4]
 800bc1a:	eeb0 0a66 	vmov.f32	s0, s13
 800bc1e:	e7cf      	b.n	800bbc0 <__ieee754_rem_pio2f+0x104>
 800bc20:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800bd0c <__ieee754_rem_pio2f+0x250>
 800bc24:	eeb0 0a66 	vmov.f32	s0, s13
 800bc28:	eea6 0a25 	vfma.f32	s0, s12, s11
 800bc2c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bc30:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800bd10 <__ieee754_rem_pio2f+0x254>
 800bc34:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bc38:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800bc3c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bc40:	ed84 7a00 	vstr	s14, [r4]
 800bc44:	e7bc      	b.n	800bbc0 <__ieee754_rem_pio2f+0x104>
 800bc46:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800bc4a:	d306      	bcc.n	800bc5a <__ieee754_rem_pio2f+0x19e>
 800bc4c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bc50:	edc0 7a01 	vstr	s15, [r0, #4]
 800bc54:	edc0 7a00 	vstr	s15, [r0]
 800bc58:	e73e      	b.n	800bad8 <__ieee754_rem_pio2f+0x1c>
 800bc5a:	15ea      	asrs	r2, r5, #23
 800bc5c:	3a86      	subs	r2, #134	@ 0x86
 800bc5e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800bc62:	ee07 3a90 	vmov	s15, r3
 800bc66:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bc6a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800bd14 <__ieee754_rem_pio2f+0x258>
 800bc6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc76:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bc7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc7e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bc82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc8a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bc8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc92:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bc96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc9a:	edcd 7a05 	vstr	s15, [sp, #20]
 800bc9e:	d11e      	bne.n	800bcde <__ieee754_rem_pio2f+0x222>
 800bca0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca8:	bf0c      	ite	eq
 800bcaa:	2301      	moveq	r3, #1
 800bcac:	2302      	movne	r3, #2
 800bcae:	491a      	ldr	r1, [pc, #104]	@ (800bd18 <__ieee754_rem_pio2f+0x25c>)
 800bcb0:	9101      	str	r1, [sp, #4]
 800bcb2:	2102      	movs	r1, #2
 800bcb4:	9100      	str	r1, [sp, #0]
 800bcb6:	a803      	add	r0, sp, #12
 800bcb8:	4621      	mov	r1, r4
 800bcba:	f000 fcd1 	bl	800c660 <__kernel_rem_pio2f>
 800bcbe:	2e00      	cmp	r6, #0
 800bcc0:	f6bf af2f 	bge.w	800bb22 <__ieee754_rem_pio2f+0x66>
 800bcc4:	edd4 7a00 	vldr	s15, [r4]
 800bcc8:	eef1 7a67 	vneg.f32	s15, s15
 800bccc:	edc4 7a00 	vstr	s15, [r4]
 800bcd0:	edd4 7a01 	vldr	s15, [r4, #4]
 800bcd4:	eef1 7a67 	vneg.f32	s15, s15
 800bcd8:	edc4 7a01 	vstr	s15, [r4, #4]
 800bcdc:	e782      	b.n	800bbe4 <__ieee754_rem_pio2f+0x128>
 800bcde:	2303      	movs	r3, #3
 800bce0:	e7e5      	b.n	800bcae <__ieee754_rem_pio2f+0x1f2>
 800bce2:	bf00      	nop
 800bce4:	3f490fd8 	.word	0x3f490fd8
 800bce8:	4016cbe3 	.word	0x4016cbe3
 800bcec:	3fc90f80 	.word	0x3fc90f80
 800bcf0:	3fc90fd0 	.word	0x3fc90fd0
 800bcf4:	37354400 	.word	0x37354400
 800bcf8:	37354443 	.word	0x37354443
 800bcfc:	2e85a308 	.word	0x2e85a308
 800bd00:	43490f80 	.word	0x43490f80
 800bd04:	3f22f984 	.word	0x3f22f984
 800bd08:	0800d2c0 	.word	0x0800d2c0
 800bd0c:	2e85a300 	.word	0x2e85a300
 800bd10:	248d3132 	.word	0x248d3132
 800bd14:	43800000 	.word	0x43800000
 800bd18:	0800d340 	.word	0x0800d340

0800bd1c <fabsf>:
 800bd1c:	ee10 3a10 	vmov	r3, s0
 800bd20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd24:	ee00 3a10 	vmov	s0, r3
 800bd28:	4770      	bx	lr
 800bd2a:	0000      	movs	r0, r0
 800bd2c:	0000      	movs	r0, r0
	...

0800bd30 <scalbn>:
 800bd30:	b570      	push	{r4, r5, r6, lr}
 800bd32:	ec55 4b10 	vmov	r4, r5, d0
 800bd36:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bd3a:	4606      	mov	r6, r0
 800bd3c:	462b      	mov	r3, r5
 800bd3e:	b991      	cbnz	r1, 800bd66 <scalbn+0x36>
 800bd40:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bd44:	4323      	orrs	r3, r4
 800bd46:	d03b      	beq.n	800bdc0 <scalbn+0x90>
 800bd48:	4b33      	ldr	r3, [pc, #204]	@ (800be18 <scalbn+0xe8>)
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f7f4 fc72 	bl	8000638 <__aeabi_dmul>
 800bd54:	4b31      	ldr	r3, [pc, #196]	@ (800be1c <scalbn+0xec>)
 800bd56:	429e      	cmp	r6, r3
 800bd58:	4604      	mov	r4, r0
 800bd5a:	460d      	mov	r5, r1
 800bd5c:	da0f      	bge.n	800bd7e <scalbn+0x4e>
 800bd5e:	a326      	add	r3, pc, #152	@ (adr r3, 800bdf8 <scalbn+0xc8>)
 800bd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd64:	e01e      	b.n	800bda4 <scalbn+0x74>
 800bd66:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800bd6a:	4291      	cmp	r1, r2
 800bd6c:	d10b      	bne.n	800bd86 <scalbn+0x56>
 800bd6e:	4622      	mov	r2, r4
 800bd70:	4620      	mov	r0, r4
 800bd72:	4629      	mov	r1, r5
 800bd74:	f7f4 faaa 	bl	80002cc <__adddf3>
 800bd78:	4604      	mov	r4, r0
 800bd7a:	460d      	mov	r5, r1
 800bd7c:	e020      	b.n	800bdc0 <scalbn+0x90>
 800bd7e:	460b      	mov	r3, r1
 800bd80:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bd84:	3936      	subs	r1, #54	@ 0x36
 800bd86:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800bd8a:	4296      	cmp	r6, r2
 800bd8c:	dd0d      	ble.n	800bdaa <scalbn+0x7a>
 800bd8e:	2d00      	cmp	r5, #0
 800bd90:	a11b      	add	r1, pc, #108	@ (adr r1, 800be00 <scalbn+0xd0>)
 800bd92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd96:	da02      	bge.n	800bd9e <scalbn+0x6e>
 800bd98:	a11b      	add	r1, pc, #108	@ (adr r1, 800be08 <scalbn+0xd8>)
 800bd9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd9e:	a318      	add	r3, pc, #96	@ (adr r3, 800be00 <scalbn+0xd0>)
 800bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda4:	f7f4 fc48 	bl	8000638 <__aeabi_dmul>
 800bda8:	e7e6      	b.n	800bd78 <scalbn+0x48>
 800bdaa:	1872      	adds	r2, r6, r1
 800bdac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bdb0:	428a      	cmp	r2, r1
 800bdb2:	dcec      	bgt.n	800bd8e <scalbn+0x5e>
 800bdb4:	2a00      	cmp	r2, #0
 800bdb6:	dd06      	ble.n	800bdc6 <scalbn+0x96>
 800bdb8:	f36f 531e 	bfc	r3, #20, #11
 800bdbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bdc0:	ec45 4b10 	vmov	d0, r4, r5
 800bdc4:	bd70      	pop	{r4, r5, r6, pc}
 800bdc6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bdca:	da08      	bge.n	800bdde <scalbn+0xae>
 800bdcc:	2d00      	cmp	r5, #0
 800bdce:	a10a      	add	r1, pc, #40	@ (adr r1, 800bdf8 <scalbn+0xc8>)
 800bdd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdd4:	dac3      	bge.n	800bd5e <scalbn+0x2e>
 800bdd6:	a10e      	add	r1, pc, #56	@ (adr r1, 800be10 <scalbn+0xe0>)
 800bdd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bddc:	e7bf      	b.n	800bd5e <scalbn+0x2e>
 800bdde:	3236      	adds	r2, #54	@ 0x36
 800bde0:	f36f 531e 	bfc	r3, #20, #11
 800bde4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bde8:	4620      	mov	r0, r4
 800bdea:	4b0d      	ldr	r3, [pc, #52]	@ (800be20 <scalbn+0xf0>)
 800bdec:	4629      	mov	r1, r5
 800bdee:	2200      	movs	r2, #0
 800bdf0:	e7d8      	b.n	800bda4 <scalbn+0x74>
 800bdf2:	bf00      	nop
 800bdf4:	f3af 8000 	nop.w
 800bdf8:	c2f8f359 	.word	0xc2f8f359
 800bdfc:	01a56e1f 	.word	0x01a56e1f
 800be00:	8800759c 	.word	0x8800759c
 800be04:	7e37e43c 	.word	0x7e37e43c
 800be08:	8800759c 	.word	0x8800759c
 800be0c:	fe37e43c 	.word	0xfe37e43c
 800be10:	c2f8f359 	.word	0xc2f8f359
 800be14:	81a56e1f 	.word	0x81a56e1f
 800be18:	43500000 	.word	0x43500000
 800be1c:	ffff3cb0 	.word	0xffff3cb0
 800be20:	3c900000 	.word	0x3c900000

0800be24 <with_errno>:
 800be24:	b510      	push	{r4, lr}
 800be26:	ed2d 8b02 	vpush	{d8}
 800be2a:	eeb0 8a40 	vmov.f32	s16, s0
 800be2e:	eef0 8a60 	vmov.f32	s17, s1
 800be32:	4604      	mov	r4, r0
 800be34:	f7fb fc0e 	bl	8007654 <__errno>
 800be38:	eeb0 0a48 	vmov.f32	s0, s16
 800be3c:	eef0 0a68 	vmov.f32	s1, s17
 800be40:	ecbd 8b02 	vpop	{d8}
 800be44:	6004      	str	r4, [r0, #0]
 800be46:	bd10      	pop	{r4, pc}

0800be48 <xflow>:
 800be48:	4603      	mov	r3, r0
 800be4a:	b507      	push	{r0, r1, r2, lr}
 800be4c:	ec51 0b10 	vmov	r0, r1, d0
 800be50:	b183      	cbz	r3, 800be74 <xflow+0x2c>
 800be52:	4602      	mov	r2, r0
 800be54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be58:	e9cd 2300 	strd	r2, r3, [sp]
 800be5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be60:	f7f4 fbea 	bl	8000638 <__aeabi_dmul>
 800be64:	ec41 0b10 	vmov	d0, r0, r1
 800be68:	2022      	movs	r0, #34	@ 0x22
 800be6a:	b003      	add	sp, #12
 800be6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be70:	f7ff bfd8 	b.w	800be24 <with_errno>
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	e7ee      	b.n	800be58 <xflow+0x10>
 800be7a:	0000      	movs	r0, r0
 800be7c:	0000      	movs	r0, r0
	...

0800be80 <__math_uflow>:
 800be80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800be88 <__math_uflow+0x8>
 800be84:	f7ff bfe0 	b.w	800be48 <xflow>
 800be88:	00000000 	.word	0x00000000
 800be8c:	10000000 	.word	0x10000000

0800be90 <__math_oflow>:
 800be90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800be98 <__math_oflow+0x8>
 800be94:	f7ff bfd8 	b.w	800be48 <xflow>
 800be98:	00000000 	.word	0x00000000
 800be9c:	70000000 	.word	0x70000000

0800bea0 <scalbnf>:
 800bea0:	ee10 3a10 	vmov	r3, s0
 800bea4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800bea8:	d02b      	beq.n	800bf02 <scalbnf+0x62>
 800beaa:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800beae:	d302      	bcc.n	800beb6 <scalbnf+0x16>
 800beb0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800beb4:	4770      	bx	lr
 800beb6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800beba:	d123      	bne.n	800bf04 <scalbnf+0x64>
 800bebc:	4b24      	ldr	r3, [pc, #144]	@ (800bf50 <scalbnf+0xb0>)
 800bebe:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800bf54 <scalbnf+0xb4>
 800bec2:	4298      	cmp	r0, r3
 800bec4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bec8:	db17      	blt.n	800befa <scalbnf+0x5a>
 800beca:	ee10 3a10 	vmov	r3, s0
 800bece:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bed2:	3a19      	subs	r2, #25
 800bed4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bed8:	4288      	cmp	r0, r1
 800beda:	dd15      	ble.n	800bf08 <scalbnf+0x68>
 800bedc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800bf58 <scalbnf+0xb8>
 800bee0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800bf5c <scalbnf+0xbc>
 800bee4:	ee10 3a10 	vmov	r3, s0
 800bee8:	eeb0 7a67 	vmov.f32	s14, s15
 800beec:	2b00      	cmp	r3, #0
 800beee:	bfb8      	it	lt
 800bef0:	eef0 7a66 	vmovlt.f32	s15, s13
 800bef4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800bef8:	4770      	bx	lr
 800befa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bf60 <scalbnf+0xc0>
 800befe:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bf02:	4770      	bx	lr
 800bf04:	0dd2      	lsrs	r2, r2, #23
 800bf06:	e7e5      	b.n	800bed4 <scalbnf+0x34>
 800bf08:	4410      	add	r0, r2
 800bf0a:	28fe      	cmp	r0, #254	@ 0xfe
 800bf0c:	dce6      	bgt.n	800bedc <scalbnf+0x3c>
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	dd06      	ble.n	800bf20 <scalbnf+0x80>
 800bf12:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bf16:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bf1a:	ee00 3a10 	vmov	s0, r3
 800bf1e:	4770      	bx	lr
 800bf20:	f110 0f16 	cmn.w	r0, #22
 800bf24:	da09      	bge.n	800bf3a <scalbnf+0x9a>
 800bf26:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800bf60 <scalbnf+0xc0>
 800bf2a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800bf64 <scalbnf+0xc4>
 800bf2e:	ee10 3a10 	vmov	r3, s0
 800bf32:	eeb0 7a67 	vmov.f32	s14, s15
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	e7d9      	b.n	800beee <scalbnf+0x4e>
 800bf3a:	3019      	adds	r0, #25
 800bf3c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bf40:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bf44:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800bf68 <scalbnf+0xc8>
 800bf48:	ee07 3a90 	vmov	s15, r3
 800bf4c:	e7d7      	b.n	800befe <scalbnf+0x5e>
 800bf4e:	bf00      	nop
 800bf50:	ffff3cb0 	.word	0xffff3cb0
 800bf54:	4c000000 	.word	0x4c000000
 800bf58:	7149f2ca 	.word	0x7149f2ca
 800bf5c:	f149f2ca 	.word	0xf149f2ca
 800bf60:	0da24260 	.word	0x0da24260
 800bf64:	8da24260 	.word	0x8da24260
 800bf68:	33000000 	.word	0x33000000

0800bf6c <with_errnof>:
 800bf6c:	b510      	push	{r4, lr}
 800bf6e:	ed2d 8b02 	vpush	{d8}
 800bf72:	eeb0 8a40 	vmov.f32	s16, s0
 800bf76:	4604      	mov	r4, r0
 800bf78:	f7fb fb6c 	bl	8007654 <__errno>
 800bf7c:	eeb0 0a48 	vmov.f32	s0, s16
 800bf80:	ecbd 8b02 	vpop	{d8}
 800bf84:	6004      	str	r4, [r0, #0]
 800bf86:	bd10      	pop	{r4, pc}

0800bf88 <xflowf>:
 800bf88:	b130      	cbz	r0, 800bf98 <xflowf+0x10>
 800bf8a:	eef1 7a40 	vneg.f32	s15, s0
 800bf8e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bf92:	2022      	movs	r0, #34	@ 0x22
 800bf94:	f7ff bfea 	b.w	800bf6c <with_errnof>
 800bf98:	eef0 7a40 	vmov.f32	s15, s0
 800bf9c:	e7f7      	b.n	800bf8e <xflowf+0x6>
	...

0800bfa0 <__math_uflowf>:
 800bfa0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bfa8 <__math_uflowf+0x8>
 800bfa4:	f7ff bff0 	b.w	800bf88 <xflowf>
 800bfa8:	10000000 	.word	0x10000000

0800bfac <__math_oflowf>:
 800bfac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bfb4 <__math_oflowf+0x8>
 800bfb0:	f7ff bfea 	b.w	800bf88 <xflowf>
 800bfb4:	70000000 	.word	0x70000000

0800bfb8 <__ieee754_sqrtf>:
 800bfb8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bfbc:	4770      	bx	lr
	...

0800bfc0 <__kernel_rem_pio2>:
 800bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	ed2d 8b02 	vpush	{d8}
 800bfc8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800bfcc:	f112 0f14 	cmn.w	r2, #20
 800bfd0:	9306      	str	r3, [sp, #24]
 800bfd2:	9104      	str	r1, [sp, #16]
 800bfd4:	4bc2      	ldr	r3, [pc, #776]	@ (800c2e0 <__kernel_rem_pio2+0x320>)
 800bfd6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800bfd8:	9008      	str	r0, [sp, #32]
 800bfda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	9b06      	ldr	r3, [sp, #24]
 800bfe2:	f103 33ff 	add.w	r3, r3, #4294967295
 800bfe6:	bfa8      	it	ge
 800bfe8:	1ed4      	subge	r4, r2, #3
 800bfea:	9305      	str	r3, [sp, #20]
 800bfec:	bfb2      	itee	lt
 800bfee:	2400      	movlt	r4, #0
 800bff0:	2318      	movge	r3, #24
 800bff2:	fb94 f4f3 	sdivge	r4, r4, r3
 800bff6:	f06f 0317 	mvn.w	r3, #23
 800bffa:	fb04 3303 	mla	r3, r4, r3, r3
 800bffe:	eb03 0b02 	add.w	fp, r3, r2
 800c002:	9b00      	ldr	r3, [sp, #0]
 800c004:	9a05      	ldr	r2, [sp, #20]
 800c006:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800c2d0 <__kernel_rem_pio2+0x310>
 800c00a:	eb03 0802 	add.w	r8, r3, r2
 800c00e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c010:	1aa7      	subs	r7, r4, r2
 800c012:	ae20      	add	r6, sp, #128	@ 0x80
 800c014:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c018:	2500      	movs	r5, #0
 800c01a:	4545      	cmp	r5, r8
 800c01c:	dd12      	ble.n	800c044 <__kernel_rem_pio2+0x84>
 800c01e:	9b06      	ldr	r3, [sp, #24]
 800c020:	aa20      	add	r2, sp, #128	@ 0x80
 800c022:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c026:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800c02a:	2700      	movs	r7, #0
 800c02c:	9b00      	ldr	r3, [sp, #0]
 800c02e:	429f      	cmp	r7, r3
 800c030:	dc2e      	bgt.n	800c090 <__kernel_rem_pio2+0xd0>
 800c032:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800c2d0 <__kernel_rem_pio2+0x310>
 800c036:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c03a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c03e:	46a8      	mov	r8, r5
 800c040:	2600      	movs	r6, #0
 800c042:	e01b      	b.n	800c07c <__kernel_rem_pio2+0xbc>
 800c044:	42ef      	cmn	r7, r5
 800c046:	d407      	bmi.n	800c058 <__kernel_rem_pio2+0x98>
 800c048:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c04c:	f7f4 fa8a 	bl	8000564 <__aeabi_i2d>
 800c050:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c054:	3501      	adds	r5, #1
 800c056:	e7e0      	b.n	800c01a <__kernel_rem_pio2+0x5a>
 800c058:	ec51 0b18 	vmov	r0, r1, d8
 800c05c:	e7f8      	b.n	800c050 <__kernel_rem_pio2+0x90>
 800c05e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800c062:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c066:	f7f4 fae7 	bl	8000638 <__aeabi_dmul>
 800c06a:	4602      	mov	r2, r0
 800c06c:	460b      	mov	r3, r1
 800c06e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c072:	f7f4 f92b 	bl	80002cc <__adddf3>
 800c076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c07a:	3601      	adds	r6, #1
 800c07c:	9b05      	ldr	r3, [sp, #20]
 800c07e:	429e      	cmp	r6, r3
 800c080:	dded      	ble.n	800c05e <__kernel_rem_pio2+0x9e>
 800c082:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c086:	3701      	adds	r7, #1
 800c088:	ecaa 7b02 	vstmia	sl!, {d7}
 800c08c:	3508      	adds	r5, #8
 800c08e:	e7cd      	b.n	800c02c <__kernel_rem_pio2+0x6c>
 800c090:	9b00      	ldr	r3, [sp, #0]
 800c092:	f8dd 8000 	ldr.w	r8, [sp]
 800c096:	aa0c      	add	r2, sp, #48	@ 0x30
 800c098:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c09c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c09e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c0a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0a6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800c0aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0ac:	ab98      	add	r3, sp, #608	@ 0x260
 800c0ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c0b2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800c0b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c0ba:	ac0c      	add	r4, sp, #48	@ 0x30
 800c0bc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c0be:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800c0c2:	46a1      	mov	r9, r4
 800c0c4:	46c2      	mov	sl, r8
 800c0c6:	f1ba 0f00 	cmp.w	sl, #0
 800c0ca:	dc77      	bgt.n	800c1bc <__kernel_rem_pio2+0x1fc>
 800c0cc:	4658      	mov	r0, fp
 800c0ce:	ed9d 0b02 	vldr	d0, [sp, #8]
 800c0d2:	f7ff fe2d 	bl	800bd30 <scalbn>
 800c0d6:	ec57 6b10 	vmov	r6, r7, d0
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	4639      	mov	r1, r7
 800c0e4:	f7f4 faa8 	bl	8000638 <__aeabi_dmul>
 800c0e8:	ec41 0b10 	vmov	d0, r0, r1
 800c0ec:	f000 fd20 	bl	800cb30 <floor>
 800c0f0:	4b7c      	ldr	r3, [pc, #496]	@ (800c2e4 <__kernel_rem_pio2+0x324>)
 800c0f2:	ec51 0b10 	vmov	r0, r1, d0
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f7f4 fa9e 	bl	8000638 <__aeabi_dmul>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	460b      	mov	r3, r1
 800c100:	4630      	mov	r0, r6
 800c102:	4639      	mov	r1, r7
 800c104:	f7f4 f8e0 	bl	80002c8 <__aeabi_dsub>
 800c108:	460f      	mov	r7, r1
 800c10a:	4606      	mov	r6, r0
 800c10c:	f7f4 fd44 	bl	8000b98 <__aeabi_d2iz>
 800c110:	9002      	str	r0, [sp, #8]
 800c112:	f7f4 fa27 	bl	8000564 <__aeabi_i2d>
 800c116:	4602      	mov	r2, r0
 800c118:	460b      	mov	r3, r1
 800c11a:	4630      	mov	r0, r6
 800c11c:	4639      	mov	r1, r7
 800c11e:	f7f4 f8d3 	bl	80002c8 <__aeabi_dsub>
 800c122:	f1bb 0f00 	cmp.w	fp, #0
 800c126:	4606      	mov	r6, r0
 800c128:	460f      	mov	r7, r1
 800c12a:	dd6c      	ble.n	800c206 <__kernel_rem_pio2+0x246>
 800c12c:	f108 31ff 	add.w	r1, r8, #4294967295
 800c130:	ab0c      	add	r3, sp, #48	@ 0x30
 800c132:	9d02      	ldr	r5, [sp, #8]
 800c134:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c138:	f1cb 0018 	rsb	r0, fp, #24
 800c13c:	fa43 f200 	asr.w	r2, r3, r0
 800c140:	4415      	add	r5, r2
 800c142:	4082      	lsls	r2, r0
 800c144:	1a9b      	subs	r3, r3, r2
 800c146:	aa0c      	add	r2, sp, #48	@ 0x30
 800c148:	9502      	str	r5, [sp, #8]
 800c14a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c14e:	f1cb 0217 	rsb	r2, fp, #23
 800c152:	fa43 f902 	asr.w	r9, r3, r2
 800c156:	f1b9 0f00 	cmp.w	r9, #0
 800c15a:	dd64      	ble.n	800c226 <__kernel_rem_pio2+0x266>
 800c15c:	9b02      	ldr	r3, [sp, #8]
 800c15e:	2200      	movs	r2, #0
 800c160:	3301      	adds	r3, #1
 800c162:	9302      	str	r3, [sp, #8]
 800c164:	4615      	mov	r5, r2
 800c166:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c16a:	4590      	cmp	r8, r2
 800c16c:	f300 80a1 	bgt.w	800c2b2 <__kernel_rem_pio2+0x2f2>
 800c170:	f1bb 0f00 	cmp.w	fp, #0
 800c174:	dd07      	ble.n	800c186 <__kernel_rem_pio2+0x1c6>
 800c176:	f1bb 0f01 	cmp.w	fp, #1
 800c17a:	f000 80c1 	beq.w	800c300 <__kernel_rem_pio2+0x340>
 800c17e:	f1bb 0f02 	cmp.w	fp, #2
 800c182:	f000 80c8 	beq.w	800c316 <__kernel_rem_pio2+0x356>
 800c186:	f1b9 0f02 	cmp.w	r9, #2
 800c18a:	d14c      	bne.n	800c226 <__kernel_rem_pio2+0x266>
 800c18c:	4632      	mov	r2, r6
 800c18e:	463b      	mov	r3, r7
 800c190:	4955      	ldr	r1, [pc, #340]	@ (800c2e8 <__kernel_rem_pio2+0x328>)
 800c192:	2000      	movs	r0, #0
 800c194:	f7f4 f898 	bl	80002c8 <__aeabi_dsub>
 800c198:	4606      	mov	r6, r0
 800c19a:	460f      	mov	r7, r1
 800c19c:	2d00      	cmp	r5, #0
 800c19e:	d042      	beq.n	800c226 <__kernel_rem_pio2+0x266>
 800c1a0:	4658      	mov	r0, fp
 800c1a2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800c2d8 <__kernel_rem_pio2+0x318>
 800c1a6:	f7ff fdc3 	bl	800bd30 <scalbn>
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	4639      	mov	r1, r7
 800c1ae:	ec53 2b10 	vmov	r2, r3, d0
 800c1b2:	f7f4 f889 	bl	80002c8 <__aeabi_dsub>
 800c1b6:	4606      	mov	r6, r0
 800c1b8:	460f      	mov	r7, r1
 800c1ba:	e034      	b.n	800c226 <__kernel_rem_pio2+0x266>
 800c1bc:	4b4b      	ldr	r3, [pc, #300]	@ (800c2ec <__kernel_rem_pio2+0x32c>)
 800c1be:	2200      	movs	r2, #0
 800c1c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1c4:	f7f4 fa38 	bl	8000638 <__aeabi_dmul>
 800c1c8:	f7f4 fce6 	bl	8000b98 <__aeabi_d2iz>
 800c1cc:	f7f4 f9ca 	bl	8000564 <__aeabi_i2d>
 800c1d0:	4b47      	ldr	r3, [pc, #284]	@ (800c2f0 <__kernel_rem_pio2+0x330>)
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	4606      	mov	r6, r0
 800c1d6:	460f      	mov	r7, r1
 800c1d8:	f7f4 fa2e 	bl	8000638 <__aeabi_dmul>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1e4:	f7f4 f870 	bl	80002c8 <__aeabi_dsub>
 800c1e8:	f7f4 fcd6 	bl	8000b98 <__aeabi_d2iz>
 800c1ec:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c1f0:	f849 0b04 	str.w	r0, [r9], #4
 800c1f4:	4639      	mov	r1, r7
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	f7f4 f868 	bl	80002cc <__adddf3>
 800c1fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c200:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c204:	e75f      	b.n	800c0c6 <__kernel_rem_pio2+0x106>
 800c206:	d107      	bne.n	800c218 <__kernel_rem_pio2+0x258>
 800c208:	f108 33ff 	add.w	r3, r8, #4294967295
 800c20c:	aa0c      	add	r2, sp, #48	@ 0x30
 800c20e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c212:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800c216:	e79e      	b.n	800c156 <__kernel_rem_pio2+0x196>
 800c218:	4b36      	ldr	r3, [pc, #216]	@ (800c2f4 <__kernel_rem_pio2+0x334>)
 800c21a:	2200      	movs	r2, #0
 800c21c:	f7f4 fc92 	bl	8000b44 <__aeabi_dcmpge>
 800c220:	2800      	cmp	r0, #0
 800c222:	d143      	bne.n	800c2ac <__kernel_rem_pio2+0x2ec>
 800c224:	4681      	mov	r9, r0
 800c226:	2200      	movs	r2, #0
 800c228:	2300      	movs	r3, #0
 800c22a:	4630      	mov	r0, r6
 800c22c:	4639      	mov	r1, r7
 800c22e:	f7f4 fc6b 	bl	8000b08 <__aeabi_dcmpeq>
 800c232:	2800      	cmp	r0, #0
 800c234:	f000 80c1 	beq.w	800c3ba <__kernel_rem_pio2+0x3fa>
 800c238:	f108 33ff 	add.w	r3, r8, #4294967295
 800c23c:	2200      	movs	r2, #0
 800c23e:	9900      	ldr	r1, [sp, #0]
 800c240:	428b      	cmp	r3, r1
 800c242:	da70      	bge.n	800c326 <__kernel_rem_pio2+0x366>
 800c244:	2a00      	cmp	r2, #0
 800c246:	f000 808b 	beq.w	800c360 <__kernel_rem_pio2+0x3a0>
 800c24a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c24e:	ab0c      	add	r3, sp, #48	@ 0x30
 800c250:	f1ab 0b18 	sub.w	fp, fp, #24
 800c254:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d0f6      	beq.n	800c24a <__kernel_rem_pio2+0x28a>
 800c25c:	4658      	mov	r0, fp
 800c25e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800c2d8 <__kernel_rem_pio2+0x318>
 800c262:	f7ff fd65 	bl	800bd30 <scalbn>
 800c266:	f108 0301 	add.w	r3, r8, #1
 800c26a:	00da      	lsls	r2, r3, #3
 800c26c:	9205      	str	r2, [sp, #20]
 800c26e:	ec55 4b10 	vmov	r4, r5, d0
 800c272:	aa70      	add	r2, sp, #448	@ 0x1c0
 800c274:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800c2ec <__kernel_rem_pio2+0x32c>
 800c278:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800c27c:	4646      	mov	r6, r8
 800c27e:	f04f 0a00 	mov.w	sl, #0
 800c282:	2e00      	cmp	r6, #0
 800c284:	f280 80d1 	bge.w	800c42a <__kernel_rem_pio2+0x46a>
 800c288:	4644      	mov	r4, r8
 800c28a:	2c00      	cmp	r4, #0
 800c28c:	f2c0 80ff 	blt.w	800c48e <__kernel_rem_pio2+0x4ce>
 800c290:	4b19      	ldr	r3, [pc, #100]	@ (800c2f8 <__kernel_rem_pio2+0x338>)
 800c292:	461f      	mov	r7, r3
 800c294:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c296:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c29a:	9306      	str	r3, [sp, #24]
 800c29c:	f04f 0a00 	mov.w	sl, #0
 800c2a0:	f04f 0b00 	mov.w	fp, #0
 800c2a4:	2600      	movs	r6, #0
 800c2a6:	eba8 0504 	sub.w	r5, r8, r4
 800c2aa:	e0e4      	b.n	800c476 <__kernel_rem_pio2+0x4b6>
 800c2ac:	f04f 0902 	mov.w	r9, #2
 800c2b0:	e754      	b.n	800c15c <__kernel_rem_pio2+0x19c>
 800c2b2:	f854 3b04 	ldr.w	r3, [r4], #4
 800c2b6:	bb0d      	cbnz	r5, 800c2fc <__kernel_rem_pio2+0x33c>
 800c2b8:	b123      	cbz	r3, 800c2c4 <__kernel_rem_pio2+0x304>
 800c2ba:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c2be:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	3201      	adds	r2, #1
 800c2c6:	461d      	mov	r5, r3
 800c2c8:	e74f      	b.n	800c16a <__kernel_rem_pio2+0x1aa>
 800c2ca:	bf00      	nop
 800c2cc:	f3af 8000 	nop.w
	...
 800c2dc:	3ff00000 	.word	0x3ff00000
 800c2e0:	0800d698 	.word	0x0800d698
 800c2e4:	40200000 	.word	0x40200000
 800c2e8:	3ff00000 	.word	0x3ff00000
 800c2ec:	3e700000 	.word	0x3e700000
 800c2f0:	41700000 	.word	0x41700000
 800c2f4:	3fe00000 	.word	0x3fe00000
 800c2f8:	0800d658 	.word	0x0800d658
 800c2fc:	1acb      	subs	r3, r1, r3
 800c2fe:	e7de      	b.n	800c2be <__kernel_rem_pio2+0x2fe>
 800c300:	f108 32ff 	add.w	r2, r8, #4294967295
 800c304:	ab0c      	add	r3, sp, #48	@ 0x30
 800c306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c30a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c30e:	a90c      	add	r1, sp, #48	@ 0x30
 800c310:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c314:	e737      	b.n	800c186 <__kernel_rem_pio2+0x1c6>
 800c316:	f108 32ff 	add.w	r2, r8, #4294967295
 800c31a:	ab0c      	add	r3, sp, #48	@ 0x30
 800c31c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c320:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c324:	e7f3      	b.n	800c30e <__kernel_rem_pio2+0x34e>
 800c326:	a90c      	add	r1, sp, #48	@ 0x30
 800c328:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c32c:	3b01      	subs	r3, #1
 800c32e:	430a      	orrs	r2, r1
 800c330:	e785      	b.n	800c23e <__kernel_rem_pio2+0x27e>
 800c332:	3401      	adds	r4, #1
 800c334:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c338:	2a00      	cmp	r2, #0
 800c33a:	d0fa      	beq.n	800c332 <__kernel_rem_pio2+0x372>
 800c33c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c33e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c342:	eb0d 0503 	add.w	r5, sp, r3
 800c346:	9b06      	ldr	r3, [sp, #24]
 800c348:	aa20      	add	r2, sp, #128	@ 0x80
 800c34a:	4443      	add	r3, r8
 800c34c:	f108 0701 	add.w	r7, r8, #1
 800c350:	3d98      	subs	r5, #152	@ 0x98
 800c352:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800c356:	4444      	add	r4, r8
 800c358:	42bc      	cmp	r4, r7
 800c35a:	da04      	bge.n	800c366 <__kernel_rem_pio2+0x3a6>
 800c35c:	46a0      	mov	r8, r4
 800c35e:	e6a2      	b.n	800c0a6 <__kernel_rem_pio2+0xe6>
 800c360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c362:	2401      	movs	r4, #1
 800c364:	e7e6      	b.n	800c334 <__kernel_rem_pio2+0x374>
 800c366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c368:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c36c:	f7f4 f8fa 	bl	8000564 <__aeabi_i2d>
 800c370:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800c630 <__kernel_rem_pio2+0x670>
 800c374:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c378:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c37c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c380:	46b2      	mov	sl, r6
 800c382:	f04f 0800 	mov.w	r8, #0
 800c386:	9b05      	ldr	r3, [sp, #20]
 800c388:	4598      	cmp	r8, r3
 800c38a:	dd05      	ble.n	800c398 <__kernel_rem_pio2+0x3d8>
 800c38c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c390:	3701      	adds	r7, #1
 800c392:	eca5 7b02 	vstmia	r5!, {d7}
 800c396:	e7df      	b.n	800c358 <__kernel_rem_pio2+0x398>
 800c398:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800c39c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c3a0:	f7f4 f94a 	bl	8000638 <__aeabi_dmul>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3ac:	f7f3 ff8e 	bl	80002cc <__adddf3>
 800c3b0:	f108 0801 	add.w	r8, r8, #1
 800c3b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3b8:	e7e5      	b.n	800c386 <__kernel_rem_pio2+0x3c6>
 800c3ba:	f1cb 0000 	rsb	r0, fp, #0
 800c3be:	ec47 6b10 	vmov	d0, r6, r7
 800c3c2:	f7ff fcb5 	bl	800bd30 <scalbn>
 800c3c6:	ec55 4b10 	vmov	r4, r5, d0
 800c3ca:	4b9b      	ldr	r3, [pc, #620]	@ (800c638 <__kernel_rem_pio2+0x678>)
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	4629      	mov	r1, r5
 800c3d2:	f7f4 fbb7 	bl	8000b44 <__aeabi_dcmpge>
 800c3d6:	b300      	cbz	r0, 800c41a <__kernel_rem_pio2+0x45a>
 800c3d8:	4b98      	ldr	r3, [pc, #608]	@ (800c63c <__kernel_rem_pio2+0x67c>)
 800c3da:	2200      	movs	r2, #0
 800c3dc:	4620      	mov	r0, r4
 800c3de:	4629      	mov	r1, r5
 800c3e0:	f7f4 f92a 	bl	8000638 <__aeabi_dmul>
 800c3e4:	f7f4 fbd8 	bl	8000b98 <__aeabi_d2iz>
 800c3e8:	4606      	mov	r6, r0
 800c3ea:	f7f4 f8bb 	bl	8000564 <__aeabi_i2d>
 800c3ee:	4b92      	ldr	r3, [pc, #584]	@ (800c638 <__kernel_rem_pio2+0x678>)
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f7f4 f921 	bl	8000638 <__aeabi_dmul>
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	4629      	mov	r1, r5
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f7f3 ff63 	bl	80002c8 <__aeabi_dsub>
 800c402:	f7f4 fbc9 	bl	8000b98 <__aeabi_d2iz>
 800c406:	ab0c      	add	r3, sp, #48	@ 0x30
 800c408:	f10b 0b18 	add.w	fp, fp, #24
 800c40c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c410:	f108 0801 	add.w	r8, r8, #1
 800c414:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c418:	e720      	b.n	800c25c <__kernel_rem_pio2+0x29c>
 800c41a:	4620      	mov	r0, r4
 800c41c:	4629      	mov	r1, r5
 800c41e:	f7f4 fbbb 	bl	8000b98 <__aeabi_d2iz>
 800c422:	ab0c      	add	r3, sp, #48	@ 0x30
 800c424:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c428:	e718      	b.n	800c25c <__kernel_rem_pio2+0x29c>
 800c42a:	ab0c      	add	r3, sp, #48	@ 0x30
 800c42c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c430:	f7f4 f898 	bl	8000564 <__aeabi_i2d>
 800c434:	4622      	mov	r2, r4
 800c436:	462b      	mov	r3, r5
 800c438:	f7f4 f8fe 	bl	8000638 <__aeabi_dmul>
 800c43c:	4652      	mov	r2, sl
 800c43e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c442:	465b      	mov	r3, fp
 800c444:	4620      	mov	r0, r4
 800c446:	4629      	mov	r1, r5
 800c448:	f7f4 f8f6 	bl	8000638 <__aeabi_dmul>
 800c44c:	3e01      	subs	r6, #1
 800c44e:	4604      	mov	r4, r0
 800c450:	460d      	mov	r5, r1
 800c452:	e716      	b.n	800c282 <__kernel_rem_pio2+0x2c2>
 800c454:	9906      	ldr	r1, [sp, #24]
 800c456:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c45a:	9106      	str	r1, [sp, #24]
 800c45c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c460:	f7f4 f8ea 	bl	8000638 <__aeabi_dmul>
 800c464:	4602      	mov	r2, r0
 800c466:	460b      	mov	r3, r1
 800c468:	4650      	mov	r0, sl
 800c46a:	4659      	mov	r1, fp
 800c46c:	f7f3 ff2e 	bl	80002cc <__adddf3>
 800c470:	3601      	adds	r6, #1
 800c472:	4682      	mov	sl, r0
 800c474:	468b      	mov	fp, r1
 800c476:	9b00      	ldr	r3, [sp, #0]
 800c478:	429e      	cmp	r6, r3
 800c47a:	dc01      	bgt.n	800c480 <__kernel_rem_pio2+0x4c0>
 800c47c:	42ae      	cmp	r6, r5
 800c47e:	dde9      	ble.n	800c454 <__kernel_rem_pio2+0x494>
 800c480:	ab48      	add	r3, sp, #288	@ 0x120
 800c482:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c486:	e9c5 ab00 	strd	sl, fp, [r5]
 800c48a:	3c01      	subs	r4, #1
 800c48c:	e6fd      	b.n	800c28a <__kernel_rem_pio2+0x2ca>
 800c48e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c490:	2b02      	cmp	r3, #2
 800c492:	dc0b      	bgt.n	800c4ac <__kernel_rem_pio2+0x4ec>
 800c494:	2b00      	cmp	r3, #0
 800c496:	dc35      	bgt.n	800c504 <__kernel_rem_pio2+0x544>
 800c498:	d059      	beq.n	800c54e <__kernel_rem_pio2+0x58e>
 800c49a:	9b02      	ldr	r3, [sp, #8]
 800c49c:	f003 0007 	and.w	r0, r3, #7
 800c4a0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c4a4:	ecbd 8b02 	vpop	{d8}
 800c4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ac:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c4ae:	2b03      	cmp	r3, #3
 800c4b0:	d1f3      	bne.n	800c49a <__kernel_rem_pio2+0x4da>
 800c4b2:	9b05      	ldr	r3, [sp, #20]
 800c4b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c4b8:	eb0d 0403 	add.w	r4, sp, r3
 800c4bc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c4c0:	4625      	mov	r5, r4
 800c4c2:	46c2      	mov	sl, r8
 800c4c4:	f1ba 0f00 	cmp.w	sl, #0
 800c4c8:	dc69      	bgt.n	800c59e <__kernel_rem_pio2+0x5de>
 800c4ca:	4645      	mov	r5, r8
 800c4cc:	2d01      	cmp	r5, #1
 800c4ce:	f300 8087 	bgt.w	800c5e0 <__kernel_rem_pio2+0x620>
 800c4d2:	9c05      	ldr	r4, [sp, #20]
 800c4d4:	ab48      	add	r3, sp, #288	@ 0x120
 800c4d6:	441c      	add	r4, r3
 800c4d8:	2000      	movs	r0, #0
 800c4da:	2100      	movs	r1, #0
 800c4dc:	f1b8 0f01 	cmp.w	r8, #1
 800c4e0:	f300 809c 	bgt.w	800c61c <__kernel_rem_pio2+0x65c>
 800c4e4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800c4e8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800c4ec:	f1b9 0f00 	cmp.w	r9, #0
 800c4f0:	f040 80a6 	bne.w	800c640 <__kernel_rem_pio2+0x680>
 800c4f4:	9b04      	ldr	r3, [sp, #16]
 800c4f6:	e9c3 5600 	strd	r5, r6, [r3]
 800c4fa:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c4fe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c502:	e7ca      	b.n	800c49a <__kernel_rem_pio2+0x4da>
 800c504:	9d05      	ldr	r5, [sp, #20]
 800c506:	ab48      	add	r3, sp, #288	@ 0x120
 800c508:	441d      	add	r5, r3
 800c50a:	4644      	mov	r4, r8
 800c50c:	2000      	movs	r0, #0
 800c50e:	2100      	movs	r1, #0
 800c510:	2c00      	cmp	r4, #0
 800c512:	da35      	bge.n	800c580 <__kernel_rem_pio2+0x5c0>
 800c514:	f1b9 0f00 	cmp.w	r9, #0
 800c518:	d038      	beq.n	800c58c <__kernel_rem_pio2+0x5cc>
 800c51a:	4602      	mov	r2, r0
 800c51c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c520:	9c04      	ldr	r4, [sp, #16]
 800c522:	e9c4 2300 	strd	r2, r3, [r4]
 800c526:	4602      	mov	r2, r0
 800c528:	460b      	mov	r3, r1
 800c52a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c52e:	f7f3 fecb 	bl	80002c8 <__aeabi_dsub>
 800c532:	ad4a      	add	r5, sp, #296	@ 0x128
 800c534:	2401      	movs	r4, #1
 800c536:	45a0      	cmp	r8, r4
 800c538:	da2b      	bge.n	800c592 <__kernel_rem_pio2+0x5d2>
 800c53a:	f1b9 0f00 	cmp.w	r9, #0
 800c53e:	d002      	beq.n	800c546 <__kernel_rem_pio2+0x586>
 800c540:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c544:	4619      	mov	r1, r3
 800c546:	9b04      	ldr	r3, [sp, #16]
 800c548:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c54c:	e7a5      	b.n	800c49a <__kernel_rem_pio2+0x4da>
 800c54e:	9c05      	ldr	r4, [sp, #20]
 800c550:	ab48      	add	r3, sp, #288	@ 0x120
 800c552:	441c      	add	r4, r3
 800c554:	2000      	movs	r0, #0
 800c556:	2100      	movs	r1, #0
 800c558:	f1b8 0f00 	cmp.w	r8, #0
 800c55c:	da09      	bge.n	800c572 <__kernel_rem_pio2+0x5b2>
 800c55e:	f1b9 0f00 	cmp.w	r9, #0
 800c562:	d002      	beq.n	800c56a <__kernel_rem_pio2+0x5aa>
 800c564:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c568:	4619      	mov	r1, r3
 800c56a:	9b04      	ldr	r3, [sp, #16]
 800c56c:	e9c3 0100 	strd	r0, r1, [r3]
 800c570:	e793      	b.n	800c49a <__kernel_rem_pio2+0x4da>
 800c572:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c576:	f7f3 fea9 	bl	80002cc <__adddf3>
 800c57a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c57e:	e7eb      	b.n	800c558 <__kernel_rem_pio2+0x598>
 800c580:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c584:	f7f3 fea2 	bl	80002cc <__adddf3>
 800c588:	3c01      	subs	r4, #1
 800c58a:	e7c1      	b.n	800c510 <__kernel_rem_pio2+0x550>
 800c58c:	4602      	mov	r2, r0
 800c58e:	460b      	mov	r3, r1
 800c590:	e7c6      	b.n	800c520 <__kernel_rem_pio2+0x560>
 800c592:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c596:	f7f3 fe99 	bl	80002cc <__adddf3>
 800c59a:	3401      	adds	r4, #1
 800c59c:	e7cb      	b.n	800c536 <__kernel_rem_pio2+0x576>
 800c59e:	ed35 7b02 	vldmdb	r5!, {d7}
 800c5a2:	ed8d 7b00 	vstr	d7, [sp]
 800c5a6:	ed95 7b02 	vldr	d7, [r5, #8]
 800c5aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5ae:	ec53 2b17 	vmov	r2, r3, d7
 800c5b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c5b6:	f7f3 fe89 	bl	80002cc <__adddf3>
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	460b      	mov	r3, r1
 800c5be:	4606      	mov	r6, r0
 800c5c0:	460f      	mov	r7, r1
 800c5c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5c6:	f7f3 fe7f 	bl	80002c8 <__aeabi_dsub>
 800c5ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5ce:	f7f3 fe7d 	bl	80002cc <__adddf3>
 800c5d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c5d6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c5da:	e9c5 6700 	strd	r6, r7, [r5]
 800c5de:	e771      	b.n	800c4c4 <__kernel_rem_pio2+0x504>
 800c5e0:	ed34 7b02 	vldmdb	r4!, {d7}
 800c5e4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c5e8:	ec51 0b17 	vmov	r0, r1, d7
 800c5ec:	4652      	mov	r2, sl
 800c5ee:	465b      	mov	r3, fp
 800c5f0:	ed8d 7b00 	vstr	d7, [sp]
 800c5f4:	f7f3 fe6a 	bl	80002cc <__adddf3>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	4606      	mov	r6, r0
 800c5fe:	460f      	mov	r7, r1
 800c600:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c604:	f7f3 fe60 	bl	80002c8 <__aeabi_dsub>
 800c608:	4652      	mov	r2, sl
 800c60a:	465b      	mov	r3, fp
 800c60c:	f7f3 fe5e 	bl	80002cc <__adddf3>
 800c610:	3d01      	subs	r5, #1
 800c612:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c616:	e9c4 6700 	strd	r6, r7, [r4]
 800c61a:	e757      	b.n	800c4cc <__kernel_rem_pio2+0x50c>
 800c61c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c620:	f7f3 fe54 	bl	80002cc <__adddf3>
 800c624:	f108 38ff 	add.w	r8, r8, #4294967295
 800c628:	e758      	b.n	800c4dc <__kernel_rem_pio2+0x51c>
 800c62a:	bf00      	nop
 800c62c:	f3af 8000 	nop.w
	...
 800c638:	41700000 	.word	0x41700000
 800c63c:	3e700000 	.word	0x3e700000
 800c640:	9b04      	ldr	r3, [sp, #16]
 800c642:	9a04      	ldr	r2, [sp, #16]
 800c644:	601d      	str	r5, [r3, #0]
 800c646:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800c64a:	605c      	str	r4, [r3, #4]
 800c64c:	609f      	str	r7, [r3, #8]
 800c64e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800c652:	60d3      	str	r3, [r2, #12]
 800c654:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c658:	6110      	str	r0, [r2, #16]
 800c65a:	6153      	str	r3, [r2, #20]
 800c65c:	e71d      	b.n	800c49a <__kernel_rem_pio2+0x4da>
 800c65e:	bf00      	nop

0800c660 <__kernel_rem_pio2f>:
 800c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	ed2d 8b04 	vpush	{d8-d9}
 800c668:	b0d9      	sub	sp, #356	@ 0x164
 800c66a:	4690      	mov	r8, r2
 800c66c:	9001      	str	r0, [sp, #4]
 800c66e:	4ab6      	ldr	r2, [pc, #728]	@ (800c948 <__kernel_rem_pio2f+0x2e8>)
 800c670:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800c672:	f118 0f04 	cmn.w	r8, #4
 800c676:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800c67a:	460f      	mov	r7, r1
 800c67c:	f103 3bff 	add.w	fp, r3, #4294967295
 800c680:	db26      	blt.n	800c6d0 <__kernel_rem_pio2f+0x70>
 800c682:	f1b8 0203 	subs.w	r2, r8, #3
 800c686:	bf48      	it	mi
 800c688:	f108 0204 	addmi.w	r2, r8, #4
 800c68c:	10d2      	asrs	r2, r2, #3
 800c68e:	1c55      	adds	r5, r2, #1
 800c690:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c692:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800c958 <__kernel_rem_pio2f+0x2f8>
 800c696:	00e8      	lsls	r0, r5, #3
 800c698:	eba2 060b 	sub.w	r6, r2, fp
 800c69c:	9002      	str	r0, [sp, #8]
 800c69e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800c6a2:	eb0a 0c0b 	add.w	ip, sl, fp
 800c6a6:	ac1c      	add	r4, sp, #112	@ 0x70
 800c6a8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	4560      	cmp	r0, ip
 800c6b0:	dd10      	ble.n	800c6d4 <__kernel_rem_pio2f+0x74>
 800c6b2:	a91c      	add	r1, sp, #112	@ 0x70
 800c6b4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800c6b8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800c6bc:	2600      	movs	r6, #0
 800c6be:	4556      	cmp	r6, sl
 800c6c0:	dc24      	bgt.n	800c70c <__kernel_rem_pio2f+0xac>
 800c6c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c6c6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800c958 <__kernel_rem_pio2f+0x2f8>
 800c6ca:	4684      	mov	ip, r0
 800c6cc:	2400      	movs	r4, #0
 800c6ce:	e016      	b.n	800c6fe <__kernel_rem_pio2f+0x9e>
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	e7dc      	b.n	800c68e <__kernel_rem_pio2f+0x2e>
 800c6d4:	42c6      	cmn	r6, r0
 800c6d6:	bf5d      	ittte	pl
 800c6d8:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800c6dc:	ee07 1a90 	vmovpl	s15, r1
 800c6e0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c6e4:	eef0 7a47 	vmovmi.f32	s15, s14
 800c6e8:	ece4 7a01 	vstmia	r4!, {s15}
 800c6ec:	3001      	adds	r0, #1
 800c6ee:	e7de      	b.n	800c6ae <__kernel_rem_pio2f+0x4e>
 800c6f0:	ecfe 6a01 	vldmia	lr!, {s13}
 800c6f4:	ed3c 7a01 	vldmdb	ip!, {s14}
 800c6f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c6fc:	3401      	adds	r4, #1
 800c6fe:	455c      	cmp	r4, fp
 800c700:	ddf6      	ble.n	800c6f0 <__kernel_rem_pio2f+0x90>
 800c702:	ece9 7a01 	vstmia	r9!, {s15}
 800c706:	3601      	adds	r6, #1
 800c708:	3004      	adds	r0, #4
 800c70a:	e7d8      	b.n	800c6be <__kernel_rem_pio2f+0x5e>
 800c70c:	a908      	add	r1, sp, #32
 800c70e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c712:	9104      	str	r1, [sp, #16]
 800c714:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c716:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800c954 <__kernel_rem_pio2f+0x2f4>
 800c71a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800c950 <__kernel_rem_pio2f+0x2f0>
 800c71e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c722:	9203      	str	r2, [sp, #12]
 800c724:	4654      	mov	r4, sl
 800c726:	00a2      	lsls	r2, r4, #2
 800c728:	9205      	str	r2, [sp, #20]
 800c72a:	aa58      	add	r2, sp, #352	@ 0x160
 800c72c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c730:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800c734:	a944      	add	r1, sp, #272	@ 0x110
 800c736:	aa08      	add	r2, sp, #32
 800c738:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800c73c:	4694      	mov	ip, r2
 800c73e:	4626      	mov	r6, r4
 800c740:	2e00      	cmp	r6, #0
 800c742:	dc4c      	bgt.n	800c7de <__kernel_rem_pio2f+0x17e>
 800c744:	4628      	mov	r0, r5
 800c746:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c74a:	f7ff fba9 	bl	800bea0 <scalbnf>
 800c74e:	eeb0 8a40 	vmov.f32	s16, s0
 800c752:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800c756:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c75a:	f000 fa65 	bl	800cc28 <floorf>
 800c75e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800c762:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c766:	2d00      	cmp	r5, #0
 800c768:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c76c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c770:	ee17 9a90 	vmov	r9, s15
 800c774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c778:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c77c:	dd41      	ble.n	800c802 <__kernel_rem_pio2f+0x1a2>
 800c77e:	f104 3cff 	add.w	ip, r4, #4294967295
 800c782:	a908      	add	r1, sp, #32
 800c784:	f1c5 0e08 	rsb	lr, r5, #8
 800c788:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800c78c:	fa46 f00e 	asr.w	r0, r6, lr
 800c790:	4481      	add	r9, r0
 800c792:	fa00 f00e 	lsl.w	r0, r0, lr
 800c796:	1a36      	subs	r6, r6, r0
 800c798:	f1c5 0007 	rsb	r0, r5, #7
 800c79c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800c7a0:	4106      	asrs	r6, r0
 800c7a2:	2e00      	cmp	r6, #0
 800c7a4:	dd3c      	ble.n	800c820 <__kernel_rem_pio2f+0x1c0>
 800c7a6:	f04f 0e00 	mov.w	lr, #0
 800c7aa:	f109 0901 	add.w	r9, r9, #1
 800c7ae:	4670      	mov	r0, lr
 800c7b0:	4574      	cmp	r4, lr
 800c7b2:	dc68      	bgt.n	800c886 <__kernel_rem_pio2f+0x226>
 800c7b4:	2d00      	cmp	r5, #0
 800c7b6:	dd03      	ble.n	800c7c0 <__kernel_rem_pio2f+0x160>
 800c7b8:	2d01      	cmp	r5, #1
 800c7ba:	d074      	beq.n	800c8a6 <__kernel_rem_pio2f+0x246>
 800c7bc:	2d02      	cmp	r5, #2
 800c7be:	d07d      	beq.n	800c8bc <__kernel_rem_pio2f+0x25c>
 800c7c0:	2e02      	cmp	r6, #2
 800c7c2:	d12d      	bne.n	800c820 <__kernel_rem_pio2f+0x1c0>
 800c7c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c7c8:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c7cc:	b340      	cbz	r0, 800c820 <__kernel_rem_pio2f+0x1c0>
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	9306      	str	r3, [sp, #24]
 800c7d2:	f7ff fb65 	bl	800bea0 <scalbnf>
 800c7d6:	9b06      	ldr	r3, [sp, #24]
 800c7d8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c7dc:	e020      	b.n	800c820 <__kernel_rem_pio2f+0x1c0>
 800c7de:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c7e2:	3e01      	subs	r6, #1
 800c7e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c7e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c7ec:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c7f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c7f4:	ecac 0a01 	vstmia	ip!, {s0}
 800c7f8:	ed30 0a01 	vldmdb	r0!, {s0}
 800c7fc:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c800:	e79e      	b.n	800c740 <__kernel_rem_pio2f+0xe0>
 800c802:	d105      	bne.n	800c810 <__kernel_rem_pio2f+0x1b0>
 800c804:	1e60      	subs	r0, r4, #1
 800c806:	a908      	add	r1, sp, #32
 800c808:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800c80c:	11f6      	asrs	r6, r6, #7
 800c80e:	e7c8      	b.n	800c7a2 <__kernel_rem_pio2f+0x142>
 800c810:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c814:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c81c:	da31      	bge.n	800c882 <__kernel_rem_pio2f+0x222>
 800c81e:	2600      	movs	r6, #0
 800c820:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c828:	f040 8098 	bne.w	800c95c <__kernel_rem_pio2f+0x2fc>
 800c82c:	1e60      	subs	r0, r4, #1
 800c82e:	2200      	movs	r2, #0
 800c830:	4550      	cmp	r0, sl
 800c832:	da4b      	bge.n	800c8cc <__kernel_rem_pio2f+0x26c>
 800c834:	2a00      	cmp	r2, #0
 800c836:	d065      	beq.n	800c904 <__kernel_rem_pio2f+0x2a4>
 800c838:	3c01      	subs	r4, #1
 800c83a:	ab08      	add	r3, sp, #32
 800c83c:	3d08      	subs	r5, #8
 800c83e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d0f8      	beq.n	800c838 <__kernel_rem_pio2f+0x1d8>
 800c846:	4628      	mov	r0, r5
 800c848:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c84c:	f7ff fb28 	bl	800bea0 <scalbnf>
 800c850:	1c63      	adds	r3, r4, #1
 800c852:	aa44      	add	r2, sp, #272	@ 0x110
 800c854:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800c954 <__kernel_rem_pio2f+0x2f4>
 800c858:	0099      	lsls	r1, r3, #2
 800c85a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c85e:	4623      	mov	r3, r4
 800c860:	2b00      	cmp	r3, #0
 800c862:	f280 80a9 	bge.w	800c9b8 <__kernel_rem_pio2f+0x358>
 800c866:	4623      	mov	r3, r4
 800c868:	2b00      	cmp	r3, #0
 800c86a:	f2c0 80c7 	blt.w	800c9fc <__kernel_rem_pio2f+0x39c>
 800c86e:	aa44      	add	r2, sp, #272	@ 0x110
 800c870:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c874:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800c94c <__kernel_rem_pio2f+0x2ec>
 800c878:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800c958 <__kernel_rem_pio2f+0x2f8>
 800c87c:	2000      	movs	r0, #0
 800c87e:	1ae2      	subs	r2, r4, r3
 800c880:	e0b1      	b.n	800c9e6 <__kernel_rem_pio2f+0x386>
 800c882:	2602      	movs	r6, #2
 800c884:	e78f      	b.n	800c7a6 <__kernel_rem_pio2f+0x146>
 800c886:	f852 1b04 	ldr.w	r1, [r2], #4
 800c88a:	b948      	cbnz	r0, 800c8a0 <__kernel_rem_pio2f+0x240>
 800c88c:	b121      	cbz	r1, 800c898 <__kernel_rem_pio2f+0x238>
 800c88e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800c892:	f842 1c04 	str.w	r1, [r2, #-4]
 800c896:	2101      	movs	r1, #1
 800c898:	f10e 0e01 	add.w	lr, lr, #1
 800c89c:	4608      	mov	r0, r1
 800c89e:	e787      	b.n	800c7b0 <__kernel_rem_pio2f+0x150>
 800c8a0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800c8a4:	e7f5      	b.n	800c892 <__kernel_rem_pio2f+0x232>
 800c8a6:	f104 3cff 	add.w	ip, r4, #4294967295
 800c8aa:	aa08      	add	r2, sp, #32
 800c8ac:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c8b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c8b4:	a908      	add	r1, sp, #32
 800c8b6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c8ba:	e781      	b.n	800c7c0 <__kernel_rem_pio2f+0x160>
 800c8bc:	f104 3cff 	add.w	ip, r4, #4294967295
 800c8c0:	aa08      	add	r2, sp, #32
 800c8c2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c8c6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c8ca:	e7f3      	b.n	800c8b4 <__kernel_rem_pio2f+0x254>
 800c8cc:	a908      	add	r1, sp, #32
 800c8ce:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c8d2:	3801      	subs	r0, #1
 800c8d4:	430a      	orrs	r2, r1
 800c8d6:	e7ab      	b.n	800c830 <__kernel_rem_pio2f+0x1d0>
 800c8d8:	3201      	adds	r2, #1
 800c8da:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800c8de:	2e00      	cmp	r6, #0
 800c8e0:	d0fa      	beq.n	800c8d8 <__kernel_rem_pio2f+0x278>
 800c8e2:	9905      	ldr	r1, [sp, #20]
 800c8e4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800c8e8:	eb0d 0001 	add.w	r0, sp, r1
 800c8ec:	18e6      	adds	r6, r4, r3
 800c8ee:	a91c      	add	r1, sp, #112	@ 0x70
 800c8f0:	f104 0c01 	add.w	ip, r4, #1
 800c8f4:	384c      	subs	r0, #76	@ 0x4c
 800c8f6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800c8fa:	4422      	add	r2, r4
 800c8fc:	4562      	cmp	r2, ip
 800c8fe:	da04      	bge.n	800c90a <__kernel_rem_pio2f+0x2aa>
 800c900:	4614      	mov	r4, r2
 800c902:	e710      	b.n	800c726 <__kernel_rem_pio2f+0xc6>
 800c904:	9804      	ldr	r0, [sp, #16]
 800c906:	2201      	movs	r2, #1
 800c908:	e7e7      	b.n	800c8da <__kernel_rem_pio2f+0x27a>
 800c90a:	9903      	ldr	r1, [sp, #12]
 800c90c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c910:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800c914:	9105      	str	r1, [sp, #20]
 800c916:	ee07 1a90 	vmov	s15, r1
 800c91a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c91e:	2400      	movs	r4, #0
 800c920:	ece6 7a01 	vstmia	r6!, {s15}
 800c924:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800c958 <__kernel_rem_pio2f+0x2f8>
 800c928:	46b1      	mov	r9, r6
 800c92a:	455c      	cmp	r4, fp
 800c92c:	dd04      	ble.n	800c938 <__kernel_rem_pio2f+0x2d8>
 800c92e:	ece0 7a01 	vstmia	r0!, {s15}
 800c932:	f10c 0c01 	add.w	ip, ip, #1
 800c936:	e7e1      	b.n	800c8fc <__kernel_rem_pio2f+0x29c>
 800c938:	ecfe 6a01 	vldmia	lr!, {s13}
 800c93c:	ed39 7a01 	vldmdb	r9!, {s14}
 800c940:	3401      	adds	r4, #1
 800c942:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c946:	e7f0      	b.n	800c92a <__kernel_rem_pio2f+0x2ca>
 800c948:	0800d6d4 	.word	0x0800d6d4
 800c94c:	0800d6a8 	.word	0x0800d6a8
 800c950:	43800000 	.word	0x43800000
 800c954:	3b800000 	.word	0x3b800000
 800c958:	00000000 	.word	0x00000000
 800c95c:	9b02      	ldr	r3, [sp, #8]
 800c95e:	eeb0 0a48 	vmov.f32	s0, s16
 800c962:	eba3 0008 	sub.w	r0, r3, r8
 800c966:	f7ff fa9b 	bl	800bea0 <scalbnf>
 800c96a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800c950 <__kernel_rem_pio2f+0x2f0>
 800c96e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c976:	db19      	blt.n	800c9ac <__kernel_rem_pio2f+0x34c>
 800c978:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800c954 <__kernel_rem_pio2f+0x2f4>
 800c97c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c980:	aa08      	add	r2, sp, #32
 800c982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c986:	3508      	adds	r5, #8
 800c988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c98c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c994:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c998:	ee10 3a10 	vmov	r3, s0
 800c99c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c9a0:	ee17 3a90 	vmov	r3, s15
 800c9a4:	3401      	adds	r4, #1
 800c9a6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c9aa:	e74c      	b.n	800c846 <__kernel_rem_pio2f+0x1e6>
 800c9ac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c9b0:	aa08      	add	r2, sp, #32
 800c9b2:	ee10 3a10 	vmov	r3, s0
 800c9b6:	e7f6      	b.n	800c9a6 <__kernel_rem_pio2f+0x346>
 800c9b8:	a808      	add	r0, sp, #32
 800c9ba:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c9be:	9001      	str	r0, [sp, #4]
 800c9c0:	ee07 0a90 	vmov	s15, r0
 800c9c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9c8:	3b01      	subs	r3, #1
 800c9ca:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c9ce:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c9d2:	ed62 7a01 	vstmdb	r2!, {s15}
 800c9d6:	e743      	b.n	800c860 <__kernel_rem_pio2f+0x200>
 800c9d8:	ecfc 6a01 	vldmia	ip!, {s13}
 800c9dc:	ecb5 7a01 	vldmia	r5!, {s14}
 800c9e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c9e4:	3001      	adds	r0, #1
 800c9e6:	4550      	cmp	r0, sl
 800c9e8:	dc01      	bgt.n	800c9ee <__kernel_rem_pio2f+0x38e>
 800c9ea:	4290      	cmp	r0, r2
 800c9ec:	ddf4      	ble.n	800c9d8 <__kernel_rem_pio2f+0x378>
 800c9ee:	a858      	add	r0, sp, #352	@ 0x160
 800c9f0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c9f4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	e735      	b.n	800c868 <__kernel_rem_pio2f+0x208>
 800c9fc:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c9fe:	2b02      	cmp	r3, #2
 800ca00:	dc09      	bgt.n	800ca16 <__kernel_rem_pio2f+0x3b6>
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	dc27      	bgt.n	800ca56 <__kernel_rem_pio2f+0x3f6>
 800ca06:	d040      	beq.n	800ca8a <__kernel_rem_pio2f+0x42a>
 800ca08:	f009 0007 	and.w	r0, r9, #7
 800ca0c:	b059      	add	sp, #356	@ 0x164
 800ca0e:	ecbd 8b04 	vpop	{d8-d9}
 800ca12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca16:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ca18:	2b03      	cmp	r3, #3
 800ca1a:	d1f5      	bne.n	800ca08 <__kernel_rem_pio2f+0x3a8>
 800ca1c:	aa30      	add	r2, sp, #192	@ 0xc0
 800ca1e:	1f0b      	subs	r3, r1, #4
 800ca20:	4413      	add	r3, r2
 800ca22:	461a      	mov	r2, r3
 800ca24:	4620      	mov	r0, r4
 800ca26:	2800      	cmp	r0, #0
 800ca28:	dc50      	bgt.n	800cacc <__kernel_rem_pio2f+0x46c>
 800ca2a:	4622      	mov	r2, r4
 800ca2c:	2a01      	cmp	r2, #1
 800ca2e:	dc5d      	bgt.n	800caec <__kernel_rem_pio2f+0x48c>
 800ca30:	ab30      	add	r3, sp, #192	@ 0xc0
 800ca32:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800c958 <__kernel_rem_pio2f+0x2f8>
 800ca36:	440b      	add	r3, r1
 800ca38:	2c01      	cmp	r4, #1
 800ca3a:	dc67      	bgt.n	800cb0c <__kernel_rem_pio2f+0x4ac>
 800ca3c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800ca40:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800ca44:	2e00      	cmp	r6, #0
 800ca46:	d167      	bne.n	800cb18 <__kernel_rem_pio2f+0x4b8>
 800ca48:	edc7 6a00 	vstr	s13, [r7]
 800ca4c:	ed87 7a01 	vstr	s14, [r7, #4]
 800ca50:	edc7 7a02 	vstr	s15, [r7, #8]
 800ca54:	e7d8      	b.n	800ca08 <__kernel_rem_pio2f+0x3a8>
 800ca56:	ab30      	add	r3, sp, #192	@ 0xc0
 800ca58:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800c958 <__kernel_rem_pio2f+0x2f8>
 800ca5c:	440b      	add	r3, r1
 800ca5e:	4622      	mov	r2, r4
 800ca60:	2a00      	cmp	r2, #0
 800ca62:	da24      	bge.n	800caae <__kernel_rem_pio2f+0x44e>
 800ca64:	b34e      	cbz	r6, 800caba <__kernel_rem_pio2f+0x45a>
 800ca66:	eef1 7a47 	vneg.f32	s15, s14
 800ca6a:	edc7 7a00 	vstr	s15, [r7]
 800ca6e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800ca72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca76:	aa31      	add	r2, sp, #196	@ 0xc4
 800ca78:	2301      	movs	r3, #1
 800ca7a:	429c      	cmp	r4, r3
 800ca7c:	da20      	bge.n	800cac0 <__kernel_rem_pio2f+0x460>
 800ca7e:	b10e      	cbz	r6, 800ca84 <__kernel_rem_pio2f+0x424>
 800ca80:	eef1 7a67 	vneg.f32	s15, s15
 800ca84:	edc7 7a01 	vstr	s15, [r7, #4]
 800ca88:	e7be      	b.n	800ca08 <__kernel_rem_pio2f+0x3a8>
 800ca8a:	ab30      	add	r3, sp, #192	@ 0xc0
 800ca8c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800c958 <__kernel_rem_pio2f+0x2f8>
 800ca90:	440b      	add	r3, r1
 800ca92:	2c00      	cmp	r4, #0
 800ca94:	da05      	bge.n	800caa2 <__kernel_rem_pio2f+0x442>
 800ca96:	b10e      	cbz	r6, 800ca9c <__kernel_rem_pio2f+0x43c>
 800ca98:	eef1 7a67 	vneg.f32	s15, s15
 800ca9c:	edc7 7a00 	vstr	s15, [r7]
 800caa0:	e7b2      	b.n	800ca08 <__kernel_rem_pio2f+0x3a8>
 800caa2:	ed33 7a01 	vldmdb	r3!, {s14}
 800caa6:	3c01      	subs	r4, #1
 800caa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800caac:	e7f1      	b.n	800ca92 <__kernel_rem_pio2f+0x432>
 800caae:	ed73 7a01 	vldmdb	r3!, {s15}
 800cab2:	3a01      	subs	r2, #1
 800cab4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cab8:	e7d2      	b.n	800ca60 <__kernel_rem_pio2f+0x400>
 800caba:	eef0 7a47 	vmov.f32	s15, s14
 800cabe:	e7d4      	b.n	800ca6a <__kernel_rem_pio2f+0x40a>
 800cac0:	ecb2 7a01 	vldmia	r2!, {s14}
 800cac4:	3301      	adds	r3, #1
 800cac6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800caca:	e7d6      	b.n	800ca7a <__kernel_rem_pio2f+0x41a>
 800cacc:	ed72 7a01 	vldmdb	r2!, {s15}
 800cad0:	edd2 6a01 	vldr	s13, [r2, #4]
 800cad4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cad8:	3801      	subs	r0, #1
 800cada:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cade:	ed82 7a00 	vstr	s14, [r2]
 800cae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cae6:	edc2 7a01 	vstr	s15, [r2, #4]
 800caea:	e79c      	b.n	800ca26 <__kernel_rem_pio2f+0x3c6>
 800caec:	ed73 7a01 	vldmdb	r3!, {s15}
 800caf0:	edd3 6a01 	vldr	s13, [r3, #4]
 800caf4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800caf8:	3a01      	subs	r2, #1
 800cafa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cafe:	ed83 7a00 	vstr	s14, [r3]
 800cb02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb06:	edc3 7a01 	vstr	s15, [r3, #4]
 800cb0a:	e78f      	b.n	800ca2c <__kernel_rem_pio2f+0x3cc>
 800cb0c:	ed33 7a01 	vldmdb	r3!, {s14}
 800cb10:	3c01      	subs	r4, #1
 800cb12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb16:	e78f      	b.n	800ca38 <__kernel_rem_pio2f+0x3d8>
 800cb18:	eef1 6a66 	vneg.f32	s13, s13
 800cb1c:	eeb1 7a47 	vneg.f32	s14, s14
 800cb20:	edc7 6a00 	vstr	s13, [r7]
 800cb24:	ed87 7a01 	vstr	s14, [r7, #4]
 800cb28:	eef1 7a67 	vneg.f32	s15, s15
 800cb2c:	e790      	b.n	800ca50 <__kernel_rem_pio2f+0x3f0>
 800cb2e:	bf00      	nop

0800cb30 <floor>:
 800cb30:	ec51 0b10 	vmov	r0, r1, d0
 800cb34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb3c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800cb40:	2e13      	cmp	r6, #19
 800cb42:	460c      	mov	r4, r1
 800cb44:	4605      	mov	r5, r0
 800cb46:	4680      	mov	r8, r0
 800cb48:	dc34      	bgt.n	800cbb4 <floor+0x84>
 800cb4a:	2e00      	cmp	r6, #0
 800cb4c:	da17      	bge.n	800cb7e <floor+0x4e>
 800cb4e:	a332      	add	r3, pc, #200	@ (adr r3, 800cc18 <floor+0xe8>)
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	f7f3 fbba 	bl	80002cc <__adddf3>
 800cb58:	2200      	movs	r2, #0
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	f7f3 fffc 	bl	8000b58 <__aeabi_dcmpgt>
 800cb60:	b150      	cbz	r0, 800cb78 <floor+0x48>
 800cb62:	2c00      	cmp	r4, #0
 800cb64:	da55      	bge.n	800cc12 <floor+0xe2>
 800cb66:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800cb6a:	432c      	orrs	r4, r5
 800cb6c:	2500      	movs	r5, #0
 800cb6e:	42ac      	cmp	r4, r5
 800cb70:	4c2b      	ldr	r4, [pc, #172]	@ (800cc20 <floor+0xf0>)
 800cb72:	bf08      	it	eq
 800cb74:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800cb78:	4621      	mov	r1, r4
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	e023      	b.n	800cbc6 <floor+0x96>
 800cb7e:	4f29      	ldr	r7, [pc, #164]	@ (800cc24 <floor+0xf4>)
 800cb80:	4137      	asrs	r7, r6
 800cb82:	ea01 0307 	and.w	r3, r1, r7
 800cb86:	4303      	orrs	r3, r0
 800cb88:	d01d      	beq.n	800cbc6 <floor+0x96>
 800cb8a:	a323      	add	r3, pc, #140	@ (adr r3, 800cc18 <floor+0xe8>)
 800cb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb90:	f7f3 fb9c 	bl	80002cc <__adddf3>
 800cb94:	2200      	movs	r2, #0
 800cb96:	2300      	movs	r3, #0
 800cb98:	f7f3 ffde 	bl	8000b58 <__aeabi_dcmpgt>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	d0eb      	beq.n	800cb78 <floor+0x48>
 800cba0:	2c00      	cmp	r4, #0
 800cba2:	bfbe      	ittt	lt
 800cba4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800cba8:	4133      	asrlt	r3, r6
 800cbaa:	18e4      	addlt	r4, r4, r3
 800cbac:	ea24 0407 	bic.w	r4, r4, r7
 800cbb0:	2500      	movs	r5, #0
 800cbb2:	e7e1      	b.n	800cb78 <floor+0x48>
 800cbb4:	2e33      	cmp	r6, #51	@ 0x33
 800cbb6:	dd0a      	ble.n	800cbce <floor+0x9e>
 800cbb8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800cbbc:	d103      	bne.n	800cbc6 <floor+0x96>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	f7f3 fb83 	bl	80002cc <__adddf3>
 800cbc6:	ec41 0b10 	vmov	d0, r0, r1
 800cbca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbce:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800cbd2:	f04f 37ff 	mov.w	r7, #4294967295
 800cbd6:	40df      	lsrs	r7, r3
 800cbd8:	4207      	tst	r7, r0
 800cbda:	d0f4      	beq.n	800cbc6 <floor+0x96>
 800cbdc:	a30e      	add	r3, pc, #56	@ (adr r3, 800cc18 <floor+0xe8>)
 800cbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe2:	f7f3 fb73 	bl	80002cc <__adddf3>
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	2300      	movs	r3, #0
 800cbea:	f7f3 ffb5 	bl	8000b58 <__aeabi_dcmpgt>
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	d0c2      	beq.n	800cb78 <floor+0x48>
 800cbf2:	2c00      	cmp	r4, #0
 800cbf4:	da0a      	bge.n	800cc0c <floor+0xdc>
 800cbf6:	2e14      	cmp	r6, #20
 800cbf8:	d101      	bne.n	800cbfe <floor+0xce>
 800cbfa:	3401      	adds	r4, #1
 800cbfc:	e006      	b.n	800cc0c <floor+0xdc>
 800cbfe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800cc02:	2301      	movs	r3, #1
 800cc04:	40b3      	lsls	r3, r6
 800cc06:	441d      	add	r5, r3
 800cc08:	4545      	cmp	r5, r8
 800cc0a:	d3f6      	bcc.n	800cbfa <floor+0xca>
 800cc0c:	ea25 0507 	bic.w	r5, r5, r7
 800cc10:	e7b2      	b.n	800cb78 <floor+0x48>
 800cc12:	2500      	movs	r5, #0
 800cc14:	462c      	mov	r4, r5
 800cc16:	e7af      	b.n	800cb78 <floor+0x48>
 800cc18:	8800759c 	.word	0x8800759c
 800cc1c:	7e37e43c 	.word	0x7e37e43c
 800cc20:	bff00000 	.word	0xbff00000
 800cc24:	000fffff 	.word	0x000fffff

0800cc28 <floorf>:
 800cc28:	ee10 3a10 	vmov	r3, s0
 800cc2c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cc30:	3a7f      	subs	r2, #127	@ 0x7f
 800cc32:	2a16      	cmp	r2, #22
 800cc34:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cc38:	dc2b      	bgt.n	800cc92 <floorf+0x6a>
 800cc3a:	2a00      	cmp	r2, #0
 800cc3c:	da12      	bge.n	800cc64 <floorf+0x3c>
 800cc3e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800cca4 <floorf+0x7c>
 800cc42:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cc46:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc4e:	dd06      	ble.n	800cc5e <floorf+0x36>
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	da24      	bge.n	800cc9e <floorf+0x76>
 800cc54:	2900      	cmp	r1, #0
 800cc56:	4b14      	ldr	r3, [pc, #80]	@ (800cca8 <floorf+0x80>)
 800cc58:	bf08      	it	eq
 800cc5a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800cc5e:	ee00 3a10 	vmov	s0, r3
 800cc62:	4770      	bx	lr
 800cc64:	4911      	ldr	r1, [pc, #68]	@ (800ccac <floorf+0x84>)
 800cc66:	4111      	asrs	r1, r2
 800cc68:	420b      	tst	r3, r1
 800cc6a:	d0fa      	beq.n	800cc62 <floorf+0x3a>
 800cc6c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800cca4 <floorf+0x7c>
 800cc70:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cc74:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cc78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc7c:	ddef      	ble.n	800cc5e <floorf+0x36>
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	bfbe      	ittt	lt
 800cc82:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800cc86:	fa40 f202 	asrlt.w	r2, r0, r2
 800cc8a:	189b      	addlt	r3, r3, r2
 800cc8c:	ea23 0301 	bic.w	r3, r3, r1
 800cc90:	e7e5      	b.n	800cc5e <floorf+0x36>
 800cc92:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cc96:	d3e4      	bcc.n	800cc62 <floorf+0x3a>
 800cc98:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cc9c:	4770      	bx	lr
 800cc9e:	2300      	movs	r3, #0
 800cca0:	e7dd      	b.n	800cc5e <floorf+0x36>
 800cca2:	bf00      	nop
 800cca4:	7149f2ca 	.word	0x7149f2ca
 800cca8:	bf800000 	.word	0xbf800000
 800ccac:	007fffff 	.word	0x007fffff

0800ccb0 <_init>:
 800ccb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccb2:	bf00      	nop
 800ccb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccb6:	bc08      	pop	{r3}
 800ccb8:	469e      	mov	lr, r3
 800ccba:	4770      	bx	lr

0800ccbc <_fini>:
 800ccbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccbe:	bf00      	nop
 800ccc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccc2:	bc08      	pop	{r3}
 800ccc4:	469e      	mov	lr, r3
 800ccc6:	4770      	bx	lr
